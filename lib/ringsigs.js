// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  } else {
    return scriptDirectory + path;
  }
}

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', abort);

  Module['quit'] = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
// If the user provided Module.print or printErr, use that. Otherwise,
// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));
var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
}

var getTempRet0 = function() {
  return tempRet0;
}

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;


// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};


// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  function convertReturnValue(ret) {
    if (returnType === 'string') return Pointer_stringify(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (y + ' [' + x + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 41856;
/* global initializers */  __ATINIT__.push({ func: function() { _init_random() } }, { func: function() { __GLOBAL__sub_I_crypto_cpp() } }, { func: function() { __GLOBAL__sub_I_turtlecoin_crypto_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var adj = EXCEPTIONS.infos[ptr].adjusted;
          var len = adj.length;
          for (var i = 0; i < len; i++) {
            if (adj[i] === adjusted) {
              return ptr;
            }
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted.push(thrown);
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { abort("random_device"); /*Math.random() is not safe for random number generation, so this fallback random_device implementation aborts... see kripken/emscripten/pull/7096 */ };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  var structRegistrations={};
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function __embind_finalize_value_object(structType) {
      var reg = structRegistrations[structType];
      delete structRegistrations[structType];
  
      var rawConstructor = reg.rawConstructor;
      var rawDestructor = reg.rawDestructor;
      var fieldRecords = reg.fields;
      var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
                concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
      whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
          var fields = {};
          fieldRecords.forEach(function(field, i) {
              var fieldName = field.fieldName;
              var getterReturnType = fieldTypes[i];
              var getter = field.getter;
              var getterContext = field.getterContext;
              var setterArgumentType = fieldTypes[i + fieldRecords.length];
              var setter = field.setter;
              var setterContext = field.setterContext;
              fields[fieldName] = {
                  read: function(ptr) {
                      return getterReturnType['fromWireType'](
                          getter(getterContext, ptr));
                  },
                  write: function(ptr, o) {
                      var destructors = [];
                      setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                      runDestructors(destructors);
                  }
              };
          });
  
          return [{
              name: reg.name,
              'fromWireType': function(ptr) {
                  var rv = {};
                  for (var i in fields) {
                      rv[i] = fields[i].read(ptr);
                  }
                  rawDestructor(ptr);
                  return rv;
              },
              'toWireType': function(destructors, o) {
                  // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                  // assume all fields are present without checking.
                  for (var fieldName in fields) {
                      if (!(fieldName in o)) {
                          throw new TypeError('Missing field');
                      }
                  }
                  var ptr = rawConstructor();
                  for (fieldName in fields) {
                      fields[fieldName].write(ptr, o[fieldName]);
                  }
                  if (destructors !== null) {
                      destructors.push(rawDestructor, ptr);
                  }
                  return ptr;
              },
              'argPackAdvance': 8,
              'readValueFromPointer': simpleReadValueFromPointer,
              destructorFunction: rawDestructor,
          }];
      });
    }

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  
  var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
              
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
              
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
              
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_value_object(
      rawType,
      name,
      constructorSignature,
      rawConstructor,
      destructorSignature,
      rawDestructor
    ) {
      structRegistrations[rawType] = {
          name: readLatin1String(name),
          rawConstructor: embind__requireFunction(constructorSignature, rawConstructor),
          rawDestructor: embind__requireFunction(destructorSignature, rawDestructor),
          fields: [],
      };
    }

  function __embind_register_value_object_field(
      structType,
      fieldName,
      getterReturnType,
      getterSignature,
      getter,
      getterContext,
      setterArgumentType,
      setterSignature,
      setter,
      setterContext
    ) {
      structRegistrations[structType].fields.push({
          fieldName: readLatin1String(fieldName),
          getterReturnType: getterReturnType,
          getter: embind__requireFunction(getterSignature, getter),
          getterContext: getterContext,
          setterArgumentType: setterArgumentType,
          setter: embind__requireFunction(setterSignature, setter),
          setterContext: setterContext,
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      Module['abort']();
    }

   

   

   



   

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

   
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_i(x) { err("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { err("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { err("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { err("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { err("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { err("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { err("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { err("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { err("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { err("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { err("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { err("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { err("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  err("Build with ASSERTIONS=2 for more info.");abort(x) }

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "setTempRet0": setTempRet0, "getTempRet0": getTempRet0, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "ClassHandle": ClassHandle, "ClassHandle_clone": ClassHandle_clone, "ClassHandle_delete": ClassHandle_delete, "ClassHandle_deleteLater": ClassHandle_deleteLater, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "ClassHandle_isDeleted": ClassHandle_isDeleted, "RegisteredClass": RegisteredClass, "RegisteredPointer": RegisteredPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "RegisteredPointer_destructor": RegisteredPointer_destructor, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall3": ___syscall3, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__embind_finalize_value_object": __embind_finalize_value_object, "__embind_register_bool": __embind_register_bool, "__embind_register_class": __embind_register_class, "__embind_register_class_constructor": __embind_register_class_constructor, "__embind_register_class_function": __embind_register_class_function, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_function": __embind_register_function, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_value_object": __embind_register_value_object, "__embind_register_value_object_field": __embind_register_value_object_field, "__embind_register_void": __embind_register_void, "__emval_decref": __emval_decref, "__emval_incref": __emval_incref, "__emval_register": __emval_register, "__emval_take_value": __emval_take_value, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "downcastPointer": downcastPointer, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "ensureOverloadTable": ensureOverloadTable, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "flushPendingDeletes": flushPendingDeletes, "genericPointerToWireType": genericPointerToWireType, "getBasestPointer": getBasestPointer, "getInheritedInstance": getInheritedInstance, "getInheritedInstanceCount": getInheritedInstanceCount, "getLiveInheritedInstances": getLiveInheritedInstances, "getShiftFromSize": getShiftFromSize, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_ClassHandle": init_ClassHandle, "init_RegisteredPointer": init_RegisteredPointer, "init_embind": init_embind, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeClassHandle": makeClassHandle, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "requireRegisteredType": requireRegisteredType, "runDestructor": runDestructor, "runDestructors": runDestructors, "setDelayFunction": setDelayFunction, "shallowCopyInternalPointer": shallowCopyInternalPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "upcastPointer": upcastPointer, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var setTempRet0=env.setTempRet0;
  var getTempRet0=env.getTempRet0;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var ClassHandle=env.ClassHandle;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ClassHandle_delete=env.ClassHandle_delete;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var RegisteredClass=env.RegisteredClass;
  var RegisteredPointer=env.RegisteredPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall3=env.___syscall3;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __embind_finalize_value_object=env.__embind_finalize_value_object;
  var __embind_register_bool=env.__embind_register_bool;
  var __embind_register_class=env.__embind_register_class;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var __embind_register_class_function=env.__embind_register_class_function;
  var __embind_register_emval=env.__embind_register_emval;
  var __embind_register_float=env.__embind_register_float;
  var __embind_register_function=env.__embind_register_function;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_value_object=env.__embind_register_value_object;
  var __embind_register_value_object_field=env.__embind_register_value_object_field;
  var __embind_register_void=env.__embind_register_void;
  var __emval_decref=env.__emval_decref;
  var __emval_incref=env.__emval_incref;
  var __emval_register=env.__emval_register;
  var __emval_take_value=env.__emval_take_value;
  var _abort=env._abort;
  var _embind_repr=env._embind_repr;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var count_emval_handles=env.count_emval_handles;
  var craftInvokerFunction=env.craftInvokerFunction;
  var createNamedFunction=env.createNamedFunction;
  var downcastPointer=env.downcastPointer;
  var embind__requireFunction=env.embind__requireFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ensureOverloadTable=env.ensureOverloadTable;
  var exposePublicSymbol=env.exposePublicSymbol;
  var extendError=env.extendError;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var flushPendingDeletes=env.flushPendingDeletes;
  var genericPointerToWireType=env.genericPointerToWireType;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstance=env.getInheritedInstance;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var getShiftFromSize=env.getShiftFromSize;
  var getTypeName=env.getTypeName;
  var get_first_emval=env.get_first_emval;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_ClassHandle=env.init_ClassHandle;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var init_embind=env.init_embind;
  var init_emval=env.init_emval;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var makeClassHandle=env.makeClassHandle;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var new_=env.new_;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var readLatin1String=env.readLatin1String;
  var registerType=env.registerType;
  var replacePublicSymbol=env.replacePublicSymbol;
  var requireRegisteredType=env.requireRegisteredType;
  var runDestructor=env.runDestructor;
  var runDestructors=env.runDestructors;
  var setDelayFunction=env.setDelayFunction;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwBindingError=env.throwBindingError;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var throwInternalError=env.throwInternalError;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var upcastPointer=env.upcastPointer;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function _ge_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 _fe_mul($17,$18,$19);
 $20 = $3;
 $21 = ((($20)) + 40|0);
 $22 = $3;
 $23 = ((($22)) + 40|0);
 $24 = $5;
 $25 = ((($24)) + 40|0);
 _fe_mul($21,$23,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 120|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _fe_mul($27,$29,$31);
 $32 = $3;
 $33 = $4;
 $34 = ((($33)) + 80|0);
 $35 = $5;
 $36 = ((($35)) + 80|0);
 _fe_mul($32,$34,$36);
 $37 = $3;
 $38 = $3;
 _fe_add($6,$37,$38);
 $39 = $3;
 $40 = $3;
 $41 = ((($40)) + 80|0);
 $42 = $3;
 $43 = ((($42)) + 40|0);
 _fe_sub($39,$41,$43);
 $44 = $3;
 $45 = ((($44)) + 40|0);
 $46 = $3;
 $47 = ((($46)) + 80|0);
 $48 = $3;
 $49 = ((($48)) + 40|0);
 _fe_add($45,$47,$49);
 $50 = $3;
 $51 = ((($50)) + 80|0);
 $52 = $3;
 $53 = ((($52)) + 120|0);
 _fe_add($51,$6,$53);
 $54 = $3;
 $55 = ((($54)) + 120|0);
 $56 = $3;
 $57 = ((($56)) + 120|0);
 _fe_sub($55,$6,$57);
 STACKTOP = sp;return;
}
function _fe_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $6 = $37;
 $38 = $4;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $8 = $43;
 $44 = $4;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $9 = $46;
 $47 = $4;
 $48 = ((($47)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $10 = $49;
 $50 = $4;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $53 = $4;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $4;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $13 = $58;
 $59 = $4;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $14 = $61;
 $62 = $4;
 $63 = ((($62)) + 36|0);
 $64 = HEAP32[$63>>2]|0;
 $15 = $64;
 $65 = $5;
 $66 = HEAP32[$65>>2]|0;
 $16 = $66;
 $67 = $5;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $17 = $69;
 $70 = $5;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $18 = $72;
 $73 = $5;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $19 = $75;
 $76 = $5;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $20 = $78;
 $79 = $5;
 $80 = ((($79)) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $21 = $81;
 $82 = $5;
 $83 = ((($82)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 $22 = $84;
 $85 = $5;
 $86 = ((($85)) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $23 = $87;
 $88 = $5;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $24 = $90;
 $91 = $5;
 $92 = ((($91)) + 36|0);
 $93 = HEAP32[$92>>2]|0;
 $25 = $93;
 $94 = $6;
 $95 = $16;
 $96 = (($94) + ($95))|0;
 $26 = $96;
 $97 = $7;
 $98 = $17;
 $99 = (($97) + ($98))|0;
 $27 = $99;
 $100 = $8;
 $101 = $18;
 $102 = (($100) + ($101))|0;
 $28 = $102;
 $103 = $9;
 $104 = $19;
 $105 = (($103) + ($104))|0;
 $29 = $105;
 $106 = $10;
 $107 = $20;
 $108 = (($106) + ($107))|0;
 $30 = $108;
 $109 = $11;
 $110 = $21;
 $111 = (($109) + ($110))|0;
 $31 = $111;
 $112 = $12;
 $113 = $22;
 $114 = (($112) + ($113))|0;
 $32 = $114;
 $115 = $13;
 $116 = $23;
 $117 = (($115) + ($116))|0;
 $33 = $117;
 $118 = $14;
 $119 = $24;
 $120 = (($118) + ($119))|0;
 $34 = $120;
 $121 = $15;
 $122 = $25;
 $123 = (($121) + ($122))|0;
 $35 = $123;
 $124 = $26;
 $125 = $3;
 HEAP32[$125>>2] = $124;
 $126 = $27;
 $127 = $3;
 $128 = ((($127)) + 4|0);
 HEAP32[$128>>2] = $126;
 $129 = $28;
 $130 = $3;
 $131 = ((($130)) + 8|0);
 HEAP32[$131>>2] = $129;
 $132 = $29;
 $133 = $3;
 $134 = ((($133)) + 12|0);
 HEAP32[$134>>2] = $132;
 $135 = $30;
 $136 = $3;
 $137 = ((($136)) + 16|0);
 HEAP32[$137>>2] = $135;
 $138 = $31;
 $139 = $3;
 $140 = ((($139)) + 20|0);
 HEAP32[$140>>2] = $138;
 $141 = $32;
 $142 = $3;
 $143 = ((($142)) + 24|0);
 HEAP32[$143>>2] = $141;
 $144 = $33;
 $145 = $3;
 $146 = ((($145)) + 28|0);
 HEAP32[$146>>2] = $144;
 $147 = $34;
 $148 = $3;
 $149 = ((($148)) + 32|0);
 HEAP32[$149>>2] = $147;
 $150 = $35;
 $151 = $3;
 $152 = ((($151)) + 36|0);
 HEAP32[$152>>2] = $150;
 STACKTOP = sp;return;
}
function _fe_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $6 = $37;
 $38 = $4;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $41 = $4;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $8 = $43;
 $44 = $4;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $9 = $46;
 $47 = $4;
 $48 = ((($47)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $10 = $49;
 $50 = $4;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $53 = $4;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $4;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $13 = $58;
 $59 = $4;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $14 = $61;
 $62 = $4;
 $63 = ((($62)) + 36|0);
 $64 = HEAP32[$63>>2]|0;
 $15 = $64;
 $65 = $5;
 $66 = HEAP32[$65>>2]|0;
 $16 = $66;
 $67 = $5;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $17 = $69;
 $70 = $5;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $18 = $72;
 $73 = $5;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $19 = $75;
 $76 = $5;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $20 = $78;
 $79 = $5;
 $80 = ((($79)) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $21 = $81;
 $82 = $5;
 $83 = ((($82)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 $22 = $84;
 $85 = $5;
 $86 = ((($85)) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $23 = $87;
 $88 = $5;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $24 = $90;
 $91 = $5;
 $92 = ((($91)) + 36|0);
 $93 = HEAP32[$92>>2]|0;
 $25 = $93;
 $94 = $6;
 $95 = $16;
 $96 = (($94) - ($95))|0;
 $26 = $96;
 $97 = $7;
 $98 = $17;
 $99 = (($97) - ($98))|0;
 $27 = $99;
 $100 = $8;
 $101 = $18;
 $102 = (($100) - ($101))|0;
 $28 = $102;
 $103 = $9;
 $104 = $19;
 $105 = (($103) - ($104))|0;
 $29 = $105;
 $106 = $10;
 $107 = $20;
 $108 = (($106) - ($107))|0;
 $30 = $108;
 $109 = $11;
 $110 = $21;
 $111 = (($109) - ($110))|0;
 $31 = $111;
 $112 = $12;
 $113 = $22;
 $114 = (($112) - ($113))|0;
 $32 = $114;
 $115 = $13;
 $116 = $23;
 $117 = (($115) - ($116))|0;
 $33 = $117;
 $118 = $14;
 $119 = $24;
 $120 = (($118) - ($119))|0;
 $34 = $120;
 $121 = $15;
 $122 = $25;
 $123 = (($121) - ($122))|0;
 $35 = $123;
 $124 = $26;
 $125 = $3;
 HEAP32[$125>>2] = $124;
 $126 = $27;
 $127 = $3;
 $128 = ((($127)) + 4|0);
 HEAP32[$128>>2] = $126;
 $129 = $28;
 $130 = $3;
 $131 = ((($130)) + 8|0);
 HEAP32[$131>>2] = $129;
 $132 = $29;
 $133 = $3;
 $134 = ((($133)) + 12|0);
 HEAP32[$134>>2] = $132;
 $135 = $30;
 $136 = $3;
 $137 = ((($136)) + 16|0);
 HEAP32[$137>>2] = $135;
 $138 = $31;
 $139 = $3;
 $140 = ((($139)) + 20|0);
 HEAP32[$140>>2] = $138;
 $141 = $32;
 $142 = $3;
 $143 = ((($142)) + 24|0);
 HEAP32[$143>>2] = $141;
 $144 = $33;
 $145 = $3;
 $146 = ((($145)) + 28|0);
 HEAP32[$146>>2] = $144;
 $147 = $34;
 $148 = $3;
 $149 = ((($148)) + 32|0);
 HEAP32[$149>>2] = $147;
 $150 = $35;
 $151 = $3;
 $152 = ((($151)) + 36|0);
 HEAP32[$152>>2] = $150;
 STACKTOP = sp;return;
}
function _fe_mul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1120|0);
 $40 = sp + 952|0;
 $41 = sp + 944|0;
 $42 = sp + 936|0;
 $43 = sp + 928|0;
 $44 = sp + 920|0;
 $45 = sp + 912|0;
 $46 = sp + 904|0;
 $47 = sp + 896|0;
 $48 = sp + 888|0;
 $49 = sp + 880|0;
 $50 = sp + 872|0;
 $51 = sp + 864|0;
 $52 = sp + 856|0;
 $53 = sp + 848|0;
 $54 = sp + 840|0;
 $55 = sp + 832|0;
 $56 = sp + 824|0;
 $57 = sp + 816|0;
 $58 = sp + 808|0;
 $59 = sp + 800|0;
 $60 = sp + 792|0;
 $61 = sp + 784|0;
 $62 = sp + 776|0;
 $63 = sp + 768|0;
 $64 = sp + 760|0;
 $65 = sp + 752|0;
 $66 = sp + 744|0;
 $67 = sp + 736|0;
 $68 = sp + 728|0;
 $69 = sp + 720|0;
 $70 = sp + 712|0;
 $71 = sp + 704|0;
 $72 = sp + 696|0;
 $73 = sp + 688|0;
 $74 = sp + 680|0;
 $75 = sp + 672|0;
 $76 = sp + 664|0;
 $77 = sp + 656|0;
 $78 = sp + 648|0;
 $79 = sp + 640|0;
 $80 = sp + 632|0;
 $81 = sp + 624|0;
 $82 = sp + 616|0;
 $83 = sp + 608|0;
 $84 = sp + 600|0;
 $85 = sp + 592|0;
 $86 = sp + 584|0;
 $87 = sp + 576|0;
 $88 = sp + 568|0;
 $89 = sp + 560|0;
 $90 = sp + 552|0;
 $91 = sp + 544|0;
 $92 = sp + 536|0;
 $93 = sp + 528|0;
 $94 = sp + 520|0;
 $95 = sp + 512|0;
 $96 = sp + 504|0;
 $97 = sp + 496|0;
 $98 = sp + 488|0;
 $99 = sp + 480|0;
 $100 = sp + 472|0;
 $101 = sp + 464|0;
 $102 = sp + 456|0;
 $103 = sp + 448|0;
 $104 = sp + 440|0;
 $105 = sp + 432|0;
 $106 = sp + 424|0;
 $107 = sp + 416|0;
 $108 = sp + 408|0;
 $109 = sp + 400|0;
 $110 = sp + 392|0;
 $111 = sp + 384|0;
 $112 = sp + 376|0;
 $113 = sp + 368|0;
 $114 = sp + 360|0;
 $115 = sp + 352|0;
 $116 = sp + 344|0;
 $117 = sp + 336|0;
 $118 = sp + 328|0;
 $119 = sp + 320|0;
 $120 = sp + 312|0;
 $121 = sp + 304|0;
 $122 = sp + 296|0;
 $123 = sp + 288|0;
 $124 = sp + 280|0;
 $125 = sp + 272|0;
 $126 = sp + 264|0;
 $127 = sp + 256|0;
 $128 = sp + 248|0;
 $129 = sp + 240|0;
 $130 = sp + 232|0;
 $131 = sp + 224|0;
 $132 = sp + 216|0;
 $133 = sp + 208|0;
 $134 = sp + 200|0;
 $135 = sp + 192|0;
 $136 = sp + 184|0;
 $137 = sp + 176|0;
 $138 = sp + 168|0;
 $139 = sp + 160|0;
 $140 = sp + 152|0;
 $141 = sp + 144|0;
 $142 = sp + 136|0;
 $143 = sp + 128|0;
 $144 = sp + 120|0;
 $145 = sp + 112|0;
 $146 = sp + 104|0;
 $147 = sp + 96|0;
 $148 = sp + 88|0;
 $149 = sp + 80|0;
 $150 = sp + 72|0;
 $151 = sp + 64|0;
 $152 = sp + 56|0;
 $153 = sp + 48|0;
 $154 = sp + 40|0;
 $155 = sp + 32|0;
 $156 = sp + 24|0;
 $157 = sp + 16|0;
 $158 = sp + 8|0;
 $159 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $160 = $4;
 $161 = HEAP32[$160>>2]|0;
 $6 = $161;
 $162 = $4;
 $163 = ((($162)) + 4|0);
 $164 = HEAP32[$163>>2]|0;
 $7 = $164;
 $165 = $4;
 $166 = ((($165)) + 8|0);
 $167 = HEAP32[$166>>2]|0;
 $8 = $167;
 $168 = $4;
 $169 = ((($168)) + 12|0);
 $170 = HEAP32[$169>>2]|0;
 $9 = $170;
 $171 = $4;
 $172 = ((($171)) + 16|0);
 $173 = HEAP32[$172>>2]|0;
 $10 = $173;
 $174 = $4;
 $175 = ((($174)) + 20|0);
 $176 = HEAP32[$175>>2]|0;
 $11 = $176;
 $177 = $4;
 $178 = ((($177)) + 24|0);
 $179 = HEAP32[$178>>2]|0;
 $12 = $179;
 $180 = $4;
 $181 = ((($180)) + 28|0);
 $182 = HEAP32[$181>>2]|0;
 $13 = $182;
 $183 = $4;
 $184 = ((($183)) + 32|0);
 $185 = HEAP32[$184>>2]|0;
 $14 = $185;
 $186 = $4;
 $187 = ((($186)) + 36|0);
 $188 = HEAP32[$187>>2]|0;
 $15 = $188;
 $189 = $5;
 $190 = HEAP32[$189>>2]|0;
 $16 = $190;
 $191 = $5;
 $192 = ((($191)) + 4|0);
 $193 = HEAP32[$192>>2]|0;
 $17 = $193;
 $194 = $5;
 $195 = ((($194)) + 8|0);
 $196 = HEAP32[$195>>2]|0;
 $18 = $196;
 $197 = $5;
 $198 = ((($197)) + 12|0);
 $199 = HEAP32[$198>>2]|0;
 $19 = $199;
 $200 = $5;
 $201 = ((($200)) + 16|0);
 $202 = HEAP32[$201>>2]|0;
 $20 = $202;
 $203 = $5;
 $204 = ((($203)) + 20|0);
 $205 = HEAP32[$204>>2]|0;
 $21 = $205;
 $206 = $5;
 $207 = ((($206)) + 24|0);
 $208 = HEAP32[$207>>2]|0;
 $22 = $208;
 $209 = $5;
 $210 = ((($209)) + 28|0);
 $211 = HEAP32[$210>>2]|0;
 $23 = $211;
 $212 = $5;
 $213 = ((($212)) + 32|0);
 $214 = HEAP32[$213>>2]|0;
 $24 = $214;
 $215 = $5;
 $216 = ((($215)) + 36|0);
 $217 = HEAP32[$216>>2]|0;
 $25 = $217;
 $218 = $17;
 $219 = ($218*19)|0;
 $26 = $219;
 $220 = $18;
 $221 = ($220*19)|0;
 $27 = $221;
 $222 = $19;
 $223 = ($222*19)|0;
 $28 = $223;
 $224 = $20;
 $225 = ($224*19)|0;
 $29 = $225;
 $226 = $21;
 $227 = ($226*19)|0;
 $30 = $227;
 $228 = $22;
 $229 = ($228*19)|0;
 $31 = $229;
 $230 = $23;
 $231 = ($230*19)|0;
 $32 = $231;
 $232 = $24;
 $233 = ($232*19)|0;
 $33 = $233;
 $234 = $25;
 $235 = ($234*19)|0;
 $34 = $235;
 $236 = $7;
 $237 = $236<<1;
 $35 = $237;
 $238 = $9;
 $239 = $238<<1;
 $36 = $239;
 $240 = $11;
 $241 = $240<<1;
 $37 = $241;
 $242 = $13;
 $243 = $242<<1;
 $38 = $243;
 $244 = $15;
 $245 = $244<<1;
 $39 = $245;
 $246 = $6;
 $247 = ($246|0)<(0);
 $248 = $247 << 31 >> 31;
 $249 = $16;
 $250 = ($249|0)<(0);
 $251 = $250 << 31 >> 31;
 $252 = (___muldi3(($246|0),($248|0),($249|0),($251|0))|0);
 $253 = (getTempRet0() | 0);
 $254 = $40;
 $255 = $254;
 HEAP32[$255>>2] = $252;
 $256 = (($254) + 4)|0;
 $257 = $256;
 HEAP32[$257>>2] = $253;
 $258 = $6;
 $259 = ($258|0)<(0);
 $260 = $259 << 31 >> 31;
 $261 = $17;
 $262 = ($261|0)<(0);
 $263 = $262 << 31 >> 31;
 $264 = (___muldi3(($258|0),($260|0),($261|0),($263|0))|0);
 $265 = (getTempRet0() | 0);
 $266 = $41;
 $267 = $266;
 HEAP32[$267>>2] = $264;
 $268 = (($266) + 4)|0;
 $269 = $268;
 HEAP32[$269>>2] = $265;
 $270 = $6;
 $271 = ($270|0)<(0);
 $272 = $271 << 31 >> 31;
 $273 = $18;
 $274 = ($273|0)<(0);
 $275 = $274 << 31 >> 31;
 $276 = (___muldi3(($270|0),($272|0),($273|0),($275|0))|0);
 $277 = (getTempRet0() | 0);
 $278 = $42;
 $279 = $278;
 HEAP32[$279>>2] = $276;
 $280 = (($278) + 4)|0;
 $281 = $280;
 HEAP32[$281>>2] = $277;
 $282 = $6;
 $283 = ($282|0)<(0);
 $284 = $283 << 31 >> 31;
 $285 = $19;
 $286 = ($285|0)<(0);
 $287 = $286 << 31 >> 31;
 $288 = (___muldi3(($282|0),($284|0),($285|0),($287|0))|0);
 $289 = (getTempRet0() | 0);
 $290 = $43;
 $291 = $290;
 HEAP32[$291>>2] = $288;
 $292 = (($290) + 4)|0;
 $293 = $292;
 HEAP32[$293>>2] = $289;
 $294 = $6;
 $295 = ($294|0)<(0);
 $296 = $295 << 31 >> 31;
 $297 = $20;
 $298 = ($297|0)<(0);
 $299 = $298 << 31 >> 31;
 $300 = (___muldi3(($294|0),($296|0),($297|0),($299|0))|0);
 $301 = (getTempRet0() | 0);
 $302 = $44;
 $303 = $302;
 HEAP32[$303>>2] = $300;
 $304 = (($302) + 4)|0;
 $305 = $304;
 HEAP32[$305>>2] = $301;
 $306 = $6;
 $307 = ($306|0)<(0);
 $308 = $307 << 31 >> 31;
 $309 = $21;
 $310 = ($309|0)<(0);
 $311 = $310 << 31 >> 31;
 $312 = (___muldi3(($306|0),($308|0),($309|0),($311|0))|0);
 $313 = (getTempRet0() | 0);
 $314 = $45;
 $315 = $314;
 HEAP32[$315>>2] = $312;
 $316 = (($314) + 4)|0;
 $317 = $316;
 HEAP32[$317>>2] = $313;
 $318 = $6;
 $319 = ($318|0)<(0);
 $320 = $319 << 31 >> 31;
 $321 = $22;
 $322 = ($321|0)<(0);
 $323 = $322 << 31 >> 31;
 $324 = (___muldi3(($318|0),($320|0),($321|0),($323|0))|0);
 $325 = (getTempRet0() | 0);
 $326 = $46;
 $327 = $326;
 HEAP32[$327>>2] = $324;
 $328 = (($326) + 4)|0;
 $329 = $328;
 HEAP32[$329>>2] = $325;
 $330 = $6;
 $331 = ($330|0)<(0);
 $332 = $331 << 31 >> 31;
 $333 = $23;
 $334 = ($333|0)<(0);
 $335 = $334 << 31 >> 31;
 $336 = (___muldi3(($330|0),($332|0),($333|0),($335|0))|0);
 $337 = (getTempRet0() | 0);
 $338 = $47;
 $339 = $338;
 HEAP32[$339>>2] = $336;
 $340 = (($338) + 4)|0;
 $341 = $340;
 HEAP32[$341>>2] = $337;
 $342 = $6;
 $343 = ($342|0)<(0);
 $344 = $343 << 31 >> 31;
 $345 = $24;
 $346 = ($345|0)<(0);
 $347 = $346 << 31 >> 31;
 $348 = (___muldi3(($342|0),($344|0),($345|0),($347|0))|0);
 $349 = (getTempRet0() | 0);
 $350 = $48;
 $351 = $350;
 HEAP32[$351>>2] = $348;
 $352 = (($350) + 4)|0;
 $353 = $352;
 HEAP32[$353>>2] = $349;
 $354 = $6;
 $355 = ($354|0)<(0);
 $356 = $355 << 31 >> 31;
 $357 = $25;
 $358 = ($357|0)<(0);
 $359 = $358 << 31 >> 31;
 $360 = (___muldi3(($354|0),($356|0),($357|0),($359|0))|0);
 $361 = (getTempRet0() | 0);
 $362 = $49;
 $363 = $362;
 HEAP32[$363>>2] = $360;
 $364 = (($362) + 4)|0;
 $365 = $364;
 HEAP32[$365>>2] = $361;
 $366 = $7;
 $367 = ($366|0)<(0);
 $368 = $367 << 31 >> 31;
 $369 = $16;
 $370 = ($369|0)<(0);
 $371 = $370 << 31 >> 31;
 $372 = (___muldi3(($366|0),($368|0),($369|0),($371|0))|0);
 $373 = (getTempRet0() | 0);
 $374 = $50;
 $375 = $374;
 HEAP32[$375>>2] = $372;
 $376 = (($374) + 4)|0;
 $377 = $376;
 HEAP32[$377>>2] = $373;
 $378 = $35;
 $379 = ($378|0)<(0);
 $380 = $379 << 31 >> 31;
 $381 = $17;
 $382 = ($381|0)<(0);
 $383 = $382 << 31 >> 31;
 $384 = (___muldi3(($378|0),($380|0),($381|0),($383|0))|0);
 $385 = (getTempRet0() | 0);
 $386 = $51;
 $387 = $386;
 HEAP32[$387>>2] = $384;
 $388 = (($386) + 4)|0;
 $389 = $388;
 HEAP32[$389>>2] = $385;
 $390 = $7;
 $391 = ($390|0)<(0);
 $392 = $391 << 31 >> 31;
 $393 = $18;
 $394 = ($393|0)<(0);
 $395 = $394 << 31 >> 31;
 $396 = (___muldi3(($390|0),($392|0),($393|0),($395|0))|0);
 $397 = (getTempRet0() | 0);
 $398 = $52;
 $399 = $398;
 HEAP32[$399>>2] = $396;
 $400 = (($398) + 4)|0;
 $401 = $400;
 HEAP32[$401>>2] = $397;
 $402 = $35;
 $403 = ($402|0)<(0);
 $404 = $403 << 31 >> 31;
 $405 = $19;
 $406 = ($405|0)<(0);
 $407 = $406 << 31 >> 31;
 $408 = (___muldi3(($402|0),($404|0),($405|0),($407|0))|0);
 $409 = (getTempRet0() | 0);
 $410 = $53;
 $411 = $410;
 HEAP32[$411>>2] = $408;
 $412 = (($410) + 4)|0;
 $413 = $412;
 HEAP32[$413>>2] = $409;
 $414 = $7;
 $415 = ($414|0)<(0);
 $416 = $415 << 31 >> 31;
 $417 = $20;
 $418 = ($417|0)<(0);
 $419 = $418 << 31 >> 31;
 $420 = (___muldi3(($414|0),($416|0),($417|0),($419|0))|0);
 $421 = (getTempRet0() | 0);
 $422 = $54;
 $423 = $422;
 HEAP32[$423>>2] = $420;
 $424 = (($422) + 4)|0;
 $425 = $424;
 HEAP32[$425>>2] = $421;
 $426 = $35;
 $427 = ($426|0)<(0);
 $428 = $427 << 31 >> 31;
 $429 = $21;
 $430 = ($429|0)<(0);
 $431 = $430 << 31 >> 31;
 $432 = (___muldi3(($426|0),($428|0),($429|0),($431|0))|0);
 $433 = (getTempRet0() | 0);
 $434 = $55;
 $435 = $434;
 HEAP32[$435>>2] = $432;
 $436 = (($434) + 4)|0;
 $437 = $436;
 HEAP32[$437>>2] = $433;
 $438 = $7;
 $439 = ($438|0)<(0);
 $440 = $439 << 31 >> 31;
 $441 = $22;
 $442 = ($441|0)<(0);
 $443 = $442 << 31 >> 31;
 $444 = (___muldi3(($438|0),($440|0),($441|0),($443|0))|0);
 $445 = (getTempRet0() | 0);
 $446 = $56;
 $447 = $446;
 HEAP32[$447>>2] = $444;
 $448 = (($446) + 4)|0;
 $449 = $448;
 HEAP32[$449>>2] = $445;
 $450 = $35;
 $451 = ($450|0)<(0);
 $452 = $451 << 31 >> 31;
 $453 = $23;
 $454 = ($453|0)<(0);
 $455 = $454 << 31 >> 31;
 $456 = (___muldi3(($450|0),($452|0),($453|0),($455|0))|0);
 $457 = (getTempRet0() | 0);
 $458 = $57;
 $459 = $458;
 HEAP32[$459>>2] = $456;
 $460 = (($458) + 4)|0;
 $461 = $460;
 HEAP32[$461>>2] = $457;
 $462 = $7;
 $463 = ($462|0)<(0);
 $464 = $463 << 31 >> 31;
 $465 = $24;
 $466 = ($465|0)<(0);
 $467 = $466 << 31 >> 31;
 $468 = (___muldi3(($462|0),($464|0),($465|0),($467|0))|0);
 $469 = (getTempRet0() | 0);
 $470 = $58;
 $471 = $470;
 HEAP32[$471>>2] = $468;
 $472 = (($470) + 4)|0;
 $473 = $472;
 HEAP32[$473>>2] = $469;
 $474 = $35;
 $475 = ($474|0)<(0);
 $476 = $475 << 31 >> 31;
 $477 = $34;
 $478 = ($477|0)<(0);
 $479 = $478 << 31 >> 31;
 $480 = (___muldi3(($474|0),($476|0),($477|0),($479|0))|0);
 $481 = (getTempRet0() | 0);
 $482 = $59;
 $483 = $482;
 HEAP32[$483>>2] = $480;
 $484 = (($482) + 4)|0;
 $485 = $484;
 HEAP32[$485>>2] = $481;
 $486 = $8;
 $487 = ($486|0)<(0);
 $488 = $487 << 31 >> 31;
 $489 = $16;
 $490 = ($489|0)<(0);
 $491 = $490 << 31 >> 31;
 $492 = (___muldi3(($486|0),($488|0),($489|0),($491|0))|0);
 $493 = (getTempRet0() | 0);
 $494 = $60;
 $495 = $494;
 HEAP32[$495>>2] = $492;
 $496 = (($494) + 4)|0;
 $497 = $496;
 HEAP32[$497>>2] = $493;
 $498 = $8;
 $499 = ($498|0)<(0);
 $500 = $499 << 31 >> 31;
 $501 = $17;
 $502 = ($501|0)<(0);
 $503 = $502 << 31 >> 31;
 $504 = (___muldi3(($498|0),($500|0),($501|0),($503|0))|0);
 $505 = (getTempRet0() | 0);
 $506 = $61;
 $507 = $506;
 HEAP32[$507>>2] = $504;
 $508 = (($506) + 4)|0;
 $509 = $508;
 HEAP32[$509>>2] = $505;
 $510 = $8;
 $511 = ($510|0)<(0);
 $512 = $511 << 31 >> 31;
 $513 = $18;
 $514 = ($513|0)<(0);
 $515 = $514 << 31 >> 31;
 $516 = (___muldi3(($510|0),($512|0),($513|0),($515|0))|0);
 $517 = (getTempRet0() | 0);
 $518 = $62;
 $519 = $518;
 HEAP32[$519>>2] = $516;
 $520 = (($518) + 4)|0;
 $521 = $520;
 HEAP32[$521>>2] = $517;
 $522 = $8;
 $523 = ($522|0)<(0);
 $524 = $523 << 31 >> 31;
 $525 = $19;
 $526 = ($525|0)<(0);
 $527 = $526 << 31 >> 31;
 $528 = (___muldi3(($522|0),($524|0),($525|0),($527|0))|0);
 $529 = (getTempRet0() | 0);
 $530 = $63;
 $531 = $530;
 HEAP32[$531>>2] = $528;
 $532 = (($530) + 4)|0;
 $533 = $532;
 HEAP32[$533>>2] = $529;
 $534 = $8;
 $535 = ($534|0)<(0);
 $536 = $535 << 31 >> 31;
 $537 = $20;
 $538 = ($537|0)<(0);
 $539 = $538 << 31 >> 31;
 $540 = (___muldi3(($534|0),($536|0),($537|0),($539|0))|0);
 $541 = (getTempRet0() | 0);
 $542 = $64;
 $543 = $542;
 HEAP32[$543>>2] = $540;
 $544 = (($542) + 4)|0;
 $545 = $544;
 HEAP32[$545>>2] = $541;
 $546 = $8;
 $547 = ($546|0)<(0);
 $548 = $547 << 31 >> 31;
 $549 = $21;
 $550 = ($549|0)<(0);
 $551 = $550 << 31 >> 31;
 $552 = (___muldi3(($546|0),($548|0),($549|0),($551|0))|0);
 $553 = (getTempRet0() | 0);
 $554 = $65;
 $555 = $554;
 HEAP32[$555>>2] = $552;
 $556 = (($554) + 4)|0;
 $557 = $556;
 HEAP32[$557>>2] = $553;
 $558 = $8;
 $559 = ($558|0)<(0);
 $560 = $559 << 31 >> 31;
 $561 = $22;
 $562 = ($561|0)<(0);
 $563 = $562 << 31 >> 31;
 $564 = (___muldi3(($558|0),($560|0),($561|0),($563|0))|0);
 $565 = (getTempRet0() | 0);
 $566 = $66;
 $567 = $566;
 HEAP32[$567>>2] = $564;
 $568 = (($566) + 4)|0;
 $569 = $568;
 HEAP32[$569>>2] = $565;
 $570 = $8;
 $571 = ($570|0)<(0);
 $572 = $571 << 31 >> 31;
 $573 = $23;
 $574 = ($573|0)<(0);
 $575 = $574 << 31 >> 31;
 $576 = (___muldi3(($570|0),($572|0),($573|0),($575|0))|0);
 $577 = (getTempRet0() | 0);
 $578 = $67;
 $579 = $578;
 HEAP32[$579>>2] = $576;
 $580 = (($578) + 4)|0;
 $581 = $580;
 HEAP32[$581>>2] = $577;
 $582 = $8;
 $583 = ($582|0)<(0);
 $584 = $583 << 31 >> 31;
 $585 = $33;
 $586 = ($585|0)<(0);
 $587 = $586 << 31 >> 31;
 $588 = (___muldi3(($582|0),($584|0),($585|0),($587|0))|0);
 $589 = (getTempRet0() | 0);
 $590 = $68;
 $591 = $590;
 HEAP32[$591>>2] = $588;
 $592 = (($590) + 4)|0;
 $593 = $592;
 HEAP32[$593>>2] = $589;
 $594 = $8;
 $595 = ($594|0)<(0);
 $596 = $595 << 31 >> 31;
 $597 = $34;
 $598 = ($597|0)<(0);
 $599 = $598 << 31 >> 31;
 $600 = (___muldi3(($594|0),($596|0),($597|0),($599|0))|0);
 $601 = (getTempRet0() | 0);
 $602 = $69;
 $603 = $602;
 HEAP32[$603>>2] = $600;
 $604 = (($602) + 4)|0;
 $605 = $604;
 HEAP32[$605>>2] = $601;
 $606 = $9;
 $607 = ($606|0)<(0);
 $608 = $607 << 31 >> 31;
 $609 = $16;
 $610 = ($609|0)<(0);
 $611 = $610 << 31 >> 31;
 $612 = (___muldi3(($606|0),($608|0),($609|0),($611|0))|0);
 $613 = (getTempRet0() | 0);
 $614 = $70;
 $615 = $614;
 HEAP32[$615>>2] = $612;
 $616 = (($614) + 4)|0;
 $617 = $616;
 HEAP32[$617>>2] = $613;
 $618 = $36;
 $619 = ($618|0)<(0);
 $620 = $619 << 31 >> 31;
 $621 = $17;
 $622 = ($621|0)<(0);
 $623 = $622 << 31 >> 31;
 $624 = (___muldi3(($618|0),($620|0),($621|0),($623|0))|0);
 $625 = (getTempRet0() | 0);
 $626 = $71;
 $627 = $626;
 HEAP32[$627>>2] = $624;
 $628 = (($626) + 4)|0;
 $629 = $628;
 HEAP32[$629>>2] = $625;
 $630 = $9;
 $631 = ($630|0)<(0);
 $632 = $631 << 31 >> 31;
 $633 = $18;
 $634 = ($633|0)<(0);
 $635 = $634 << 31 >> 31;
 $636 = (___muldi3(($630|0),($632|0),($633|0),($635|0))|0);
 $637 = (getTempRet0() | 0);
 $638 = $72;
 $639 = $638;
 HEAP32[$639>>2] = $636;
 $640 = (($638) + 4)|0;
 $641 = $640;
 HEAP32[$641>>2] = $637;
 $642 = $36;
 $643 = ($642|0)<(0);
 $644 = $643 << 31 >> 31;
 $645 = $19;
 $646 = ($645|0)<(0);
 $647 = $646 << 31 >> 31;
 $648 = (___muldi3(($642|0),($644|0),($645|0),($647|0))|0);
 $649 = (getTempRet0() | 0);
 $650 = $73;
 $651 = $650;
 HEAP32[$651>>2] = $648;
 $652 = (($650) + 4)|0;
 $653 = $652;
 HEAP32[$653>>2] = $649;
 $654 = $9;
 $655 = ($654|0)<(0);
 $656 = $655 << 31 >> 31;
 $657 = $20;
 $658 = ($657|0)<(0);
 $659 = $658 << 31 >> 31;
 $660 = (___muldi3(($654|0),($656|0),($657|0),($659|0))|0);
 $661 = (getTempRet0() | 0);
 $662 = $74;
 $663 = $662;
 HEAP32[$663>>2] = $660;
 $664 = (($662) + 4)|0;
 $665 = $664;
 HEAP32[$665>>2] = $661;
 $666 = $36;
 $667 = ($666|0)<(0);
 $668 = $667 << 31 >> 31;
 $669 = $21;
 $670 = ($669|0)<(0);
 $671 = $670 << 31 >> 31;
 $672 = (___muldi3(($666|0),($668|0),($669|0),($671|0))|0);
 $673 = (getTempRet0() | 0);
 $674 = $75;
 $675 = $674;
 HEAP32[$675>>2] = $672;
 $676 = (($674) + 4)|0;
 $677 = $676;
 HEAP32[$677>>2] = $673;
 $678 = $9;
 $679 = ($678|0)<(0);
 $680 = $679 << 31 >> 31;
 $681 = $22;
 $682 = ($681|0)<(0);
 $683 = $682 << 31 >> 31;
 $684 = (___muldi3(($678|0),($680|0),($681|0),($683|0))|0);
 $685 = (getTempRet0() | 0);
 $686 = $76;
 $687 = $686;
 HEAP32[$687>>2] = $684;
 $688 = (($686) + 4)|0;
 $689 = $688;
 HEAP32[$689>>2] = $685;
 $690 = $36;
 $691 = ($690|0)<(0);
 $692 = $691 << 31 >> 31;
 $693 = $32;
 $694 = ($693|0)<(0);
 $695 = $694 << 31 >> 31;
 $696 = (___muldi3(($690|0),($692|0),($693|0),($695|0))|0);
 $697 = (getTempRet0() | 0);
 $698 = $77;
 $699 = $698;
 HEAP32[$699>>2] = $696;
 $700 = (($698) + 4)|0;
 $701 = $700;
 HEAP32[$701>>2] = $697;
 $702 = $9;
 $703 = ($702|0)<(0);
 $704 = $703 << 31 >> 31;
 $705 = $33;
 $706 = ($705|0)<(0);
 $707 = $706 << 31 >> 31;
 $708 = (___muldi3(($702|0),($704|0),($705|0),($707|0))|0);
 $709 = (getTempRet0() | 0);
 $710 = $78;
 $711 = $710;
 HEAP32[$711>>2] = $708;
 $712 = (($710) + 4)|0;
 $713 = $712;
 HEAP32[$713>>2] = $709;
 $714 = $36;
 $715 = ($714|0)<(0);
 $716 = $715 << 31 >> 31;
 $717 = $34;
 $718 = ($717|0)<(0);
 $719 = $718 << 31 >> 31;
 $720 = (___muldi3(($714|0),($716|0),($717|0),($719|0))|0);
 $721 = (getTempRet0() | 0);
 $722 = $79;
 $723 = $722;
 HEAP32[$723>>2] = $720;
 $724 = (($722) + 4)|0;
 $725 = $724;
 HEAP32[$725>>2] = $721;
 $726 = $10;
 $727 = ($726|0)<(0);
 $728 = $727 << 31 >> 31;
 $729 = $16;
 $730 = ($729|0)<(0);
 $731 = $730 << 31 >> 31;
 $732 = (___muldi3(($726|0),($728|0),($729|0),($731|0))|0);
 $733 = (getTempRet0() | 0);
 $734 = $80;
 $735 = $734;
 HEAP32[$735>>2] = $732;
 $736 = (($734) + 4)|0;
 $737 = $736;
 HEAP32[$737>>2] = $733;
 $738 = $10;
 $739 = ($738|0)<(0);
 $740 = $739 << 31 >> 31;
 $741 = $17;
 $742 = ($741|0)<(0);
 $743 = $742 << 31 >> 31;
 $744 = (___muldi3(($738|0),($740|0),($741|0),($743|0))|0);
 $745 = (getTempRet0() | 0);
 $746 = $81;
 $747 = $746;
 HEAP32[$747>>2] = $744;
 $748 = (($746) + 4)|0;
 $749 = $748;
 HEAP32[$749>>2] = $745;
 $750 = $10;
 $751 = ($750|0)<(0);
 $752 = $751 << 31 >> 31;
 $753 = $18;
 $754 = ($753|0)<(0);
 $755 = $754 << 31 >> 31;
 $756 = (___muldi3(($750|0),($752|0),($753|0),($755|0))|0);
 $757 = (getTempRet0() | 0);
 $758 = $82;
 $759 = $758;
 HEAP32[$759>>2] = $756;
 $760 = (($758) + 4)|0;
 $761 = $760;
 HEAP32[$761>>2] = $757;
 $762 = $10;
 $763 = ($762|0)<(0);
 $764 = $763 << 31 >> 31;
 $765 = $19;
 $766 = ($765|0)<(0);
 $767 = $766 << 31 >> 31;
 $768 = (___muldi3(($762|0),($764|0),($765|0),($767|0))|0);
 $769 = (getTempRet0() | 0);
 $770 = $83;
 $771 = $770;
 HEAP32[$771>>2] = $768;
 $772 = (($770) + 4)|0;
 $773 = $772;
 HEAP32[$773>>2] = $769;
 $774 = $10;
 $775 = ($774|0)<(0);
 $776 = $775 << 31 >> 31;
 $777 = $20;
 $778 = ($777|0)<(0);
 $779 = $778 << 31 >> 31;
 $780 = (___muldi3(($774|0),($776|0),($777|0),($779|0))|0);
 $781 = (getTempRet0() | 0);
 $782 = $84;
 $783 = $782;
 HEAP32[$783>>2] = $780;
 $784 = (($782) + 4)|0;
 $785 = $784;
 HEAP32[$785>>2] = $781;
 $786 = $10;
 $787 = ($786|0)<(0);
 $788 = $787 << 31 >> 31;
 $789 = $21;
 $790 = ($789|0)<(0);
 $791 = $790 << 31 >> 31;
 $792 = (___muldi3(($786|0),($788|0),($789|0),($791|0))|0);
 $793 = (getTempRet0() | 0);
 $794 = $85;
 $795 = $794;
 HEAP32[$795>>2] = $792;
 $796 = (($794) + 4)|0;
 $797 = $796;
 HEAP32[$797>>2] = $793;
 $798 = $10;
 $799 = ($798|0)<(0);
 $800 = $799 << 31 >> 31;
 $801 = $31;
 $802 = ($801|0)<(0);
 $803 = $802 << 31 >> 31;
 $804 = (___muldi3(($798|0),($800|0),($801|0),($803|0))|0);
 $805 = (getTempRet0() | 0);
 $806 = $86;
 $807 = $806;
 HEAP32[$807>>2] = $804;
 $808 = (($806) + 4)|0;
 $809 = $808;
 HEAP32[$809>>2] = $805;
 $810 = $10;
 $811 = ($810|0)<(0);
 $812 = $811 << 31 >> 31;
 $813 = $32;
 $814 = ($813|0)<(0);
 $815 = $814 << 31 >> 31;
 $816 = (___muldi3(($810|0),($812|0),($813|0),($815|0))|0);
 $817 = (getTempRet0() | 0);
 $818 = $87;
 $819 = $818;
 HEAP32[$819>>2] = $816;
 $820 = (($818) + 4)|0;
 $821 = $820;
 HEAP32[$821>>2] = $817;
 $822 = $10;
 $823 = ($822|0)<(0);
 $824 = $823 << 31 >> 31;
 $825 = $33;
 $826 = ($825|0)<(0);
 $827 = $826 << 31 >> 31;
 $828 = (___muldi3(($822|0),($824|0),($825|0),($827|0))|0);
 $829 = (getTempRet0() | 0);
 $830 = $88;
 $831 = $830;
 HEAP32[$831>>2] = $828;
 $832 = (($830) + 4)|0;
 $833 = $832;
 HEAP32[$833>>2] = $829;
 $834 = $10;
 $835 = ($834|0)<(0);
 $836 = $835 << 31 >> 31;
 $837 = $34;
 $838 = ($837|0)<(0);
 $839 = $838 << 31 >> 31;
 $840 = (___muldi3(($834|0),($836|0),($837|0),($839|0))|0);
 $841 = (getTempRet0() | 0);
 $842 = $89;
 $843 = $842;
 HEAP32[$843>>2] = $840;
 $844 = (($842) + 4)|0;
 $845 = $844;
 HEAP32[$845>>2] = $841;
 $846 = $11;
 $847 = ($846|0)<(0);
 $848 = $847 << 31 >> 31;
 $849 = $16;
 $850 = ($849|0)<(0);
 $851 = $850 << 31 >> 31;
 $852 = (___muldi3(($846|0),($848|0),($849|0),($851|0))|0);
 $853 = (getTempRet0() | 0);
 $854 = $90;
 $855 = $854;
 HEAP32[$855>>2] = $852;
 $856 = (($854) + 4)|0;
 $857 = $856;
 HEAP32[$857>>2] = $853;
 $858 = $37;
 $859 = ($858|0)<(0);
 $860 = $859 << 31 >> 31;
 $861 = $17;
 $862 = ($861|0)<(0);
 $863 = $862 << 31 >> 31;
 $864 = (___muldi3(($858|0),($860|0),($861|0),($863|0))|0);
 $865 = (getTempRet0() | 0);
 $866 = $91;
 $867 = $866;
 HEAP32[$867>>2] = $864;
 $868 = (($866) + 4)|0;
 $869 = $868;
 HEAP32[$869>>2] = $865;
 $870 = $11;
 $871 = ($870|0)<(0);
 $872 = $871 << 31 >> 31;
 $873 = $18;
 $874 = ($873|0)<(0);
 $875 = $874 << 31 >> 31;
 $876 = (___muldi3(($870|0),($872|0),($873|0),($875|0))|0);
 $877 = (getTempRet0() | 0);
 $878 = $92;
 $879 = $878;
 HEAP32[$879>>2] = $876;
 $880 = (($878) + 4)|0;
 $881 = $880;
 HEAP32[$881>>2] = $877;
 $882 = $37;
 $883 = ($882|0)<(0);
 $884 = $883 << 31 >> 31;
 $885 = $19;
 $886 = ($885|0)<(0);
 $887 = $886 << 31 >> 31;
 $888 = (___muldi3(($882|0),($884|0),($885|0),($887|0))|0);
 $889 = (getTempRet0() | 0);
 $890 = $93;
 $891 = $890;
 HEAP32[$891>>2] = $888;
 $892 = (($890) + 4)|0;
 $893 = $892;
 HEAP32[$893>>2] = $889;
 $894 = $11;
 $895 = ($894|0)<(0);
 $896 = $895 << 31 >> 31;
 $897 = $20;
 $898 = ($897|0)<(0);
 $899 = $898 << 31 >> 31;
 $900 = (___muldi3(($894|0),($896|0),($897|0),($899|0))|0);
 $901 = (getTempRet0() | 0);
 $902 = $94;
 $903 = $902;
 HEAP32[$903>>2] = $900;
 $904 = (($902) + 4)|0;
 $905 = $904;
 HEAP32[$905>>2] = $901;
 $906 = $37;
 $907 = ($906|0)<(0);
 $908 = $907 << 31 >> 31;
 $909 = $30;
 $910 = ($909|0)<(0);
 $911 = $910 << 31 >> 31;
 $912 = (___muldi3(($906|0),($908|0),($909|0),($911|0))|0);
 $913 = (getTempRet0() | 0);
 $914 = $95;
 $915 = $914;
 HEAP32[$915>>2] = $912;
 $916 = (($914) + 4)|0;
 $917 = $916;
 HEAP32[$917>>2] = $913;
 $918 = $11;
 $919 = ($918|0)<(0);
 $920 = $919 << 31 >> 31;
 $921 = $31;
 $922 = ($921|0)<(0);
 $923 = $922 << 31 >> 31;
 $924 = (___muldi3(($918|0),($920|0),($921|0),($923|0))|0);
 $925 = (getTempRet0() | 0);
 $926 = $96;
 $927 = $926;
 HEAP32[$927>>2] = $924;
 $928 = (($926) + 4)|0;
 $929 = $928;
 HEAP32[$929>>2] = $925;
 $930 = $37;
 $931 = ($930|0)<(0);
 $932 = $931 << 31 >> 31;
 $933 = $32;
 $934 = ($933|0)<(0);
 $935 = $934 << 31 >> 31;
 $936 = (___muldi3(($930|0),($932|0),($933|0),($935|0))|0);
 $937 = (getTempRet0() | 0);
 $938 = $97;
 $939 = $938;
 HEAP32[$939>>2] = $936;
 $940 = (($938) + 4)|0;
 $941 = $940;
 HEAP32[$941>>2] = $937;
 $942 = $11;
 $943 = ($942|0)<(0);
 $944 = $943 << 31 >> 31;
 $945 = $33;
 $946 = ($945|0)<(0);
 $947 = $946 << 31 >> 31;
 $948 = (___muldi3(($942|0),($944|0),($945|0),($947|0))|0);
 $949 = (getTempRet0() | 0);
 $950 = $98;
 $951 = $950;
 HEAP32[$951>>2] = $948;
 $952 = (($950) + 4)|0;
 $953 = $952;
 HEAP32[$953>>2] = $949;
 $954 = $37;
 $955 = ($954|0)<(0);
 $956 = $955 << 31 >> 31;
 $957 = $34;
 $958 = ($957|0)<(0);
 $959 = $958 << 31 >> 31;
 $960 = (___muldi3(($954|0),($956|0),($957|0),($959|0))|0);
 $961 = (getTempRet0() | 0);
 $962 = $99;
 $963 = $962;
 HEAP32[$963>>2] = $960;
 $964 = (($962) + 4)|0;
 $965 = $964;
 HEAP32[$965>>2] = $961;
 $966 = $12;
 $967 = ($966|0)<(0);
 $968 = $967 << 31 >> 31;
 $969 = $16;
 $970 = ($969|0)<(0);
 $971 = $970 << 31 >> 31;
 $972 = (___muldi3(($966|0),($968|0),($969|0),($971|0))|0);
 $973 = (getTempRet0() | 0);
 $974 = $100;
 $975 = $974;
 HEAP32[$975>>2] = $972;
 $976 = (($974) + 4)|0;
 $977 = $976;
 HEAP32[$977>>2] = $973;
 $978 = $12;
 $979 = ($978|0)<(0);
 $980 = $979 << 31 >> 31;
 $981 = $17;
 $982 = ($981|0)<(0);
 $983 = $982 << 31 >> 31;
 $984 = (___muldi3(($978|0),($980|0),($981|0),($983|0))|0);
 $985 = (getTempRet0() | 0);
 $986 = $101;
 $987 = $986;
 HEAP32[$987>>2] = $984;
 $988 = (($986) + 4)|0;
 $989 = $988;
 HEAP32[$989>>2] = $985;
 $990 = $12;
 $991 = ($990|0)<(0);
 $992 = $991 << 31 >> 31;
 $993 = $18;
 $994 = ($993|0)<(0);
 $995 = $994 << 31 >> 31;
 $996 = (___muldi3(($990|0),($992|0),($993|0),($995|0))|0);
 $997 = (getTempRet0() | 0);
 $998 = $102;
 $999 = $998;
 HEAP32[$999>>2] = $996;
 $1000 = (($998) + 4)|0;
 $1001 = $1000;
 HEAP32[$1001>>2] = $997;
 $1002 = $12;
 $1003 = ($1002|0)<(0);
 $1004 = $1003 << 31 >> 31;
 $1005 = $19;
 $1006 = ($1005|0)<(0);
 $1007 = $1006 << 31 >> 31;
 $1008 = (___muldi3(($1002|0),($1004|0),($1005|0),($1007|0))|0);
 $1009 = (getTempRet0() | 0);
 $1010 = $103;
 $1011 = $1010;
 HEAP32[$1011>>2] = $1008;
 $1012 = (($1010) + 4)|0;
 $1013 = $1012;
 HEAP32[$1013>>2] = $1009;
 $1014 = $12;
 $1015 = ($1014|0)<(0);
 $1016 = $1015 << 31 >> 31;
 $1017 = $29;
 $1018 = ($1017|0)<(0);
 $1019 = $1018 << 31 >> 31;
 $1020 = (___muldi3(($1014|0),($1016|0),($1017|0),($1019|0))|0);
 $1021 = (getTempRet0() | 0);
 $1022 = $104;
 $1023 = $1022;
 HEAP32[$1023>>2] = $1020;
 $1024 = (($1022) + 4)|0;
 $1025 = $1024;
 HEAP32[$1025>>2] = $1021;
 $1026 = $12;
 $1027 = ($1026|0)<(0);
 $1028 = $1027 << 31 >> 31;
 $1029 = $30;
 $1030 = ($1029|0)<(0);
 $1031 = $1030 << 31 >> 31;
 $1032 = (___muldi3(($1026|0),($1028|0),($1029|0),($1031|0))|0);
 $1033 = (getTempRet0() | 0);
 $1034 = $105;
 $1035 = $1034;
 HEAP32[$1035>>2] = $1032;
 $1036 = (($1034) + 4)|0;
 $1037 = $1036;
 HEAP32[$1037>>2] = $1033;
 $1038 = $12;
 $1039 = ($1038|0)<(0);
 $1040 = $1039 << 31 >> 31;
 $1041 = $31;
 $1042 = ($1041|0)<(0);
 $1043 = $1042 << 31 >> 31;
 $1044 = (___muldi3(($1038|0),($1040|0),($1041|0),($1043|0))|0);
 $1045 = (getTempRet0() | 0);
 $1046 = $106;
 $1047 = $1046;
 HEAP32[$1047>>2] = $1044;
 $1048 = (($1046) + 4)|0;
 $1049 = $1048;
 HEAP32[$1049>>2] = $1045;
 $1050 = $12;
 $1051 = ($1050|0)<(0);
 $1052 = $1051 << 31 >> 31;
 $1053 = $32;
 $1054 = ($1053|0)<(0);
 $1055 = $1054 << 31 >> 31;
 $1056 = (___muldi3(($1050|0),($1052|0),($1053|0),($1055|0))|0);
 $1057 = (getTempRet0() | 0);
 $1058 = $107;
 $1059 = $1058;
 HEAP32[$1059>>2] = $1056;
 $1060 = (($1058) + 4)|0;
 $1061 = $1060;
 HEAP32[$1061>>2] = $1057;
 $1062 = $12;
 $1063 = ($1062|0)<(0);
 $1064 = $1063 << 31 >> 31;
 $1065 = $33;
 $1066 = ($1065|0)<(0);
 $1067 = $1066 << 31 >> 31;
 $1068 = (___muldi3(($1062|0),($1064|0),($1065|0),($1067|0))|0);
 $1069 = (getTempRet0() | 0);
 $1070 = $108;
 $1071 = $1070;
 HEAP32[$1071>>2] = $1068;
 $1072 = (($1070) + 4)|0;
 $1073 = $1072;
 HEAP32[$1073>>2] = $1069;
 $1074 = $12;
 $1075 = ($1074|0)<(0);
 $1076 = $1075 << 31 >> 31;
 $1077 = $34;
 $1078 = ($1077|0)<(0);
 $1079 = $1078 << 31 >> 31;
 $1080 = (___muldi3(($1074|0),($1076|0),($1077|0),($1079|0))|0);
 $1081 = (getTempRet0() | 0);
 $1082 = $109;
 $1083 = $1082;
 HEAP32[$1083>>2] = $1080;
 $1084 = (($1082) + 4)|0;
 $1085 = $1084;
 HEAP32[$1085>>2] = $1081;
 $1086 = $13;
 $1087 = ($1086|0)<(0);
 $1088 = $1087 << 31 >> 31;
 $1089 = $16;
 $1090 = ($1089|0)<(0);
 $1091 = $1090 << 31 >> 31;
 $1092 = (___muldi3(($1086|0),($1088|0),($1089|0),($1091|0))|0);
 $1093 = (getTempRet0() | 0);
 $1094 = $110;
 $1095 = $1094;
 HEAP32[$1095>>2] = $1092;
 $1096 = (($1094) + 4)|0;
 $1097 = $1096;
 HEAP32[$1097>>2] = $1093;
 $1098 = $38;
 $1099 = ($1098|0)<(0);
 $1100 = $1099 << 31 >> 31;
 $1101 = $17;
 $1102 = ($1101|0)<(0);
 $1103 = $1102 << 31 >> 31;
 $1104 = (___muldi3(($1098|0),($1100|0),($1101|0),($1103|0))|0);
 $1105 = (getTempRet0() | 0);
 $1106 = $111;
 $1107 = $1106;
 HEAP32[$1107>>2] = $1104;
 $1108 = (($1106) + 4)|0;
 $1109 = $1108;
 HEAP32[$1109>>2] = $1105;
 $1110 = $13;
 $1111 = ($1110|0)<(0);
 $1112 = $1111 << 31 >> 31;
 $1113 = $18;
 $1114 = ($1113|0)<(0);
 $1115 = $1114 << 31 >> 31;
 $1116 = (___muldi3(($1110|0),($1112|0),($1113|0),($1115|0))|0);
 $1117 = (getTempRet0() | 0);
 $1118 = $112;
 $1119 = $1118;
 HEAP32[$1119>>2] = $1116;
 $1120 = (($1118) + 4)|0;
 $1121 = $1120;
 HEAP32[$1121>>2] = $1117;
 $1122 = $38;
 $1123 = ($1122|0)<(0);
 $1124 = $1123 << 31 >> 31;
 $1125 = $28;
 $1126 = ($1125|0)<(0);
 $1127 = $1126 << 31 >> 31;
 $1128 = (___muldi3(($1122|0),($1124|0),($1125|0),($1127|0))|0);
 $1129 = (getTempRet0() | 0);
 $1130 = $113;
 $1131 = $1130;
 HEAP32[$1131>>2] = $1128;
 $1132 = (($1130) + 4)|0;
 $1133 = $1132;
 HEAP32[$1133>>2] = $1129;
 $1134 = $13;
 $1135 = ($1134|0)<(0);
 $1136 = $1135 << 31 >> 31;
 $1137 = $29;
 $1138 = ($1137|0)<(0);
 $1139 = $1138 << 31 >> 31;
 $1140 = (___muldi3(($1134|0),($1136|0),($1137|0),($1139|0))|0);
 $1141 = (getTempRet0() | 0);
 $1142 = $114;
 $1143 = $1142;
 HEAP32[$1143>>2] = $1140;
 $1144 = (($1142) + 4)|0;
 $1145 = $1144;
 HEAP32[$1145>>2] = $1141;
 $1146 = $38;
 $1147 = ($1146|0)<(0);
 $1148 = $1147 << 31 >> 31;
 $1149 = $30;
 $1150 = ($1149|0)<(0);
 $1151 = $1150 << 31 >> 31;
 $1152 = (___muldi3(($1146|0),($1148|0),($1149|0),($1151|0))|0);
 $1153 = (getTempRet0() | 0);
 $1154 = $115;
 $1155 = $1154;
 HEAP32[$1155>>2] = $1152;
 $1156 = (($1154) + 4)|0;
 $1157 = $1156;
 HEAP32[$1157>>2] = $1153;
 $1158 = $13;
 $1159 = ($1158|0)<(0);
 $1160 = $1159 << 31 >> 31;
 $1161 = $31;
 $1162 = ($1161|0)<(0);
 $1163 = $1162 << 31 >> 31;
 $1164 = (___muldi3(($1158|0),($1160|0),($1161|0),($1163|0))|0);
 $1165 = (getTempRet0() | 0);
 $1166 = $116;
 $1167 = $1166;
 HEAP32[$1167>>2] = $1164;
 $1168 = (($1166) + 4)|0;
 $1169 = $1168;
 HEAP32[$1169>>2] = $1165;
 $1170 = $38;
 $1171 = ($1170|0)<(0);
 $1172 = $1171 << 31 >> 31;
 $1173 = $32;
 $1174 = ($1173|0)<(0);
 $1175 = $1174 << 31 >> 31;
 $1176 = (___muldi3(($1170|0),($1172|0),($1173|0),($1175|0))|0);
 $1177 = (getTempRet0() | 0);
 $1178 = $117;
 $1179 = $1178;
 HEAP32[$1179>>2] = $1176;
 $1180 = (($1178) + 4)|0;
 $1181 = $1180;
 HEAP32[$1181>>2] = $1177;
 $1182 = $13;
 $1183 = ($1182|0)<(0);
 $1184 = $1183 << 31 >> 31;
 $1185 = $33;
 $1186 = ($1185|0)<(0);
 $1187 = $1186 << 31 >> 31;
 $1188 = (___muldi3(($1182|0),($1184|0),($1185|0),($1187|0))|0);
 $1189 = (getTempRet0() | 0);
 $1190 = $118;
 $1191 = $1190;
 HEAP32[$1191>>2] = $1188;
 $1192 = (($1190) + 4)|0;
 $1193 = $1192;
 HEAP32[$1193>>2] = $1189;
 $1194 = $38;
 $1195 = ($1194|0)<(0);
 $1196 = $1195 << 31 >> 31;
 $1197 = $34;
 $1198 = ($1197|0)<(0);
 $1199 = $1198 << 31 >> 31;
 $1200 = (___muldi3(($1194|0),($1196|0),($1197|0),($1199|0))|0);
 $1201 = (getTempRet0() | 0);
 $1202 = $119;
 $1203 = $1202;
 HEAP32[$1203>>2] = $1200;
 $1204 = (($1202) + 4)|0;
 $1205 = $1204;
 HEAP32[$1205>>2] = $1201;
 $1206 = $14;
 $1207 = ($1206|0)<(0);
 $1208 = $1207 << 31 >> 31;
 $1209 = $16;
 $1210 = ($1209|0)<(0);
 $1211 = $1210 << 31 >> 31;
 $1212 = (___muldi3(($1206|0),($1208|0),($1209|0),($1211|0))|0);
 $1213 = (getTempRet0() | 0);
 $1214 = $120;
 $1215 = $1214;
 HEAP32[$1215>>2] = $1212;
 $1216 = (($1214) + 4)|0;
 $1217 = $1216;
 HEAP32[$1217>>2] = $1213;
 $1218 = $14;
 $1219 = ($1218|0)<(0);
 $1220 = $1219 << 31 >> 31;
 $1221 = $17;
 $1222 = ($1221|0)<(0);
 $1223 = $1222 << 31 >> 31;
 $1224 = (___muldi3(($1218|0),($1220|0),($1221|0),($1223|0))|0);
 $1225 = (getTempRet0() | 0);
 $1226 = $121;
 $1227 = $1226;
 HEAP32[$1227>>2] = $1224;
 $1228 = (($1226) + 4)|0;
 $1229 = $1228;
 HEAP32[$1229>>2] = $1225;
 $1230 = $14;
 $1231 = ($1230|0)<(0);
 $1232 = $1231 << 31 >> 31;
 $1233 = $27;
 $1234 = ($1233|0)<(0);
 $1235 = $1234 << 31 >> 31;
 $1236 = (___muldi3(($1230|0),($1232|0),($1233|0),($1235|0))|0);
 $1237 = (getTempRet0() | 0);
 $1238 = $122;
 $1239 = $1238;
 HEAP32[$1239>>2] = $1236;
 $1240 = (($1238) + 4)|0;
 $1241 = $1240;
 HEAP32[$1241>>2] = $1237;
 $1242 = $14;
 $1243 = ($1242|0)<(0);
 $1244 = $1243 << 31 >> 31;
 $1245 = $28;
 $1246 = ($1245|0)<(0);
 $1247 = $1246 << 31 >> 31;
 $1248 = (___muldi3(($1242|0),($1244|0),($1245|0),($1247|0))|0);
 $1249 = (getTempRet0() | 0);
 $1250 = $123;
 $1251 = $1250;
 HEAP32[$1251>>2] = $1248;
 $1252 = (($1250) + 4)|0;
 $1253 = $1252;
 HEAP32[$1253>>2] = $1249;
 $1254 = $14;
 $1255 = ($1254|0)<(0);
 $1256 = $1255 << 31 >> 31;
 $1257 = $29;
 $1258 = ($1257|0)<(0);
 $1259 = $1258 << 31 >> 31;
 $1260 = (___muldi3(($1254|0),($1256|0),($1257|0),($1259|0))|0);
 $1261 = (getTempRet0() | 0);
 $1262 = $124;
 $1263 = $1262;
 HEAP32[$1263>>2] = $1260;
 $1264 = (($1262) + 4)|0;
 $1265 = $1264;
 HEAP32[$1265>>2] = $1261;
 $1266 = $14;
 $1267 = ($1266|0)<(0);
 $1268 = $1267 << 31 >> 31;
 $1269 = $30;
 $1270 = ($1269|0)<(0);
 $1271 = $1270 << 31 >> 31;
 $1272 = (___muldi3(($1266|0),($1268|0),($1269|0),($1271|0))|0);
 $1273 = (getTempRet0() | 0);
 $1274 = $125;
 $1275 = $1274;
 HEAP32[$1275>>2] = $1272;
 $1276 = (($1274) + 4)|0;
 $1277 = $1276;
 HEAP32[$1277>>2] = $1273;
 $1278 = $14;
 $1279 = ($1278|0)<(0);
 $1280 = $1279 << 31 >> 31;
 $1281 = $31;
 $1282 = ($1281|0)<(0);
 $1283 = $1282 << 31 >> 31;
 $1284 = (___muldi3(($1278|0),($1280|0),($1281|0),($1283|0))|0);
 $1285 = (getTempRet0() | 0);
 $1286 = $126;
 $1287 = $1286;
 HEAP32[$1287>>2] = $1284;
 $1288 = (($1286) + 4)|0;
 $1289 = $1288;
 HEAP32[$1289>>2] = $1285;
 $1290 = $14;
 $1291 = ($1290|0)<(0);
 $1292 = $1291 << 31 >> 31;
 $1293 = $32;
 $1294 = ($1293|0)<(0);
 $1295 = $1294 << 31 >> 31;
 $1296 = (___muldi3(($1290|0),($1292|0),($1293|0),($1295|0))|0);
 $1297 = (getTempRet0() | 0);
 $1298 = $127;
 $1299 = $1298;
 HEAP32[$1299>>2] = $1296;
 $1300 = (($1298) + 4)|0;
 $1301 = $1300;
 HEAP32[$1301>>2] = $1297;
 $1302 = $14;
 $1303 = ($1302|0)<(0);
 $1304 = $1303 << 31 >> 31;
 $1305 = $33;
 $1306 = ($1305|0)<(0);
 $1307 = $1306 << 31 >> 31;
 $1308 = (___muldi3(($1302|0),($1304|0),($1305|0),($1307|0))|0);
 $1309 = (getTempRet0() | 0);
 $1310 = $128;
 $1311 = $1310;
 HEAP32[$1311>>2] = $1308;
 $1312 = (($1310) + 4)|0;
 $1313 = $1312;
 HEAP32[$1313>>2] = $1309;
 $1314 = $14;
 $1315 = ($1314|0)<(0);
 $1316 = $1315 << 31 >> 31;
 $1317 = $34;
 $1318 = ($1317|0)<(0);
 $1319 = $1318 << 31 >> 31;
 $1320 = (___muldi3(($1314|0),($1316|0),($1317|0),($1319|0))|0);
 $1321 = (getTempRet0() | 0);
 $1322 = $129;
 $1323 = $1322;
 HEAP32[$1323>>2] = $1320;
 $1324 = (($1322) + 4)|0;
 $1325 = $1324;
 HEAP32[$1325>>2] = $1321;
 $1326 = $15;
 $1327 = ($1326|0)<(0);
 $1328 = $1327 << 31 >> 31;
 $1329 = $16;
 $1330 = ($1329|0)<(0);
 $1331 = $1330 << 31 >> 31;
 $1332 = (___muldi3(($1326|0),($1328|0),($1329|0),($1331|0))|0);
 $1333 = (getTempRet0() | 0);
 $1334 = $130;
 $1335 = $1334;
 HEAP32[$1335>>2] = $1332;
 $1336 = (($1334) + 4)|0;
 $1337 = $1336;
 HEAP32[$1337>>2] = $1333;
 $1338 = $39;
 $1339 = ($1338|0)<(0);
 $1340 = $1339 << 31 >> 31;
 $1341 = $26;
 $1342 = ($1341|0)<(0);
 $1343 = $1342 << 31 >> 31;
 $1344 = (___muldi3(($1338|0),($1340|0),($1341|0),($1343|0))|0);
 $1345 = (getTempRet0() | 0);
 $1346 = $131;
 $1347 = $1346;
 HEAP32[$1347>>2] = $1344;
 $1348 = (($1346) + 4)|0;
 $1349 = $1348;
 HEAP32[$1349>>2] = $1345;
 $1350 = $15;
 $1351 = ($1350|0)<(0);
 $1352 = $1351 << 31 >> 31;
 $1353 = $27;
 $1354 = ($1353|0)<(0);
 $1355 = $1354 << 31 >> 31;
 $1356 = (___muldi3(($1350|0),($1352|0),($1353|0),($1355|0))|0);
 $1357 = (getTempRet0() | 0);
 $1358 = $132;
 $1359 = $1358;
 HEAP32[$1359>>2] = $1356;
 $1360 = (($1358) + 4)|0;
 $1361 = $1360;
 HEAP32[$1361>>2] = $1357;
 $1362 = $39;
 $1363 = ($1362|0)<(0);
 $1364 = $1363 << 31 >> 31;
 $1365 = $28;
 $1366 = ($1365|0)<(0);
 $1367 = $1366 << 31 >> 31;
 $1368 = (___muldi3(($1362|0),($1364|0),($1365|0),($1367|0))|0);
 $1369 = (getTempRet0() | 0);
 $1370 = $133;
 $1371 = $1370;
 HEAP32[$1371>>2] = $1368;
 $1372 = (($1370) + 4)|0;
 $1373 = $1372;
 HEAP32[$1373>>2] = $1369;
 $1374 = $15;
 $1375 = ($1374|0)<(0);
 $1376 = $1375 << 31 >> 31;
 $1377 = $29;
 $1378 = ($1377|0)<(0);
 $1379 = $1378 << 31 >> 31;
 $1380 = (___muldi3(($1374|0),($1376|0),($1377|0),($1379|0))|0);
 $1381 = (getTempRet0() | 0);
 $1382 = $134;
 $1383 = $1382;
 HEAP32[$1383>>2] = $1380;
 $1384 = (($1382) + 4)|0;
 $1385 = $1384;
 HEAP32[$1385>>2] = $1381;
 $1386 = $39;
 $1387 = ($1386|0)<(0);
 $1388 = $1387 << 31 >> 31;
 $1389 = $30;
 $1390 = ($1389|0)<(0);
 $1391 = $1390 << 31 >> 31;
 $1392 = (___muldi3(($1386|0),($1388|0),($1389|0),($1391|0))|0);
 $1393 = (getTempRet0() | 0);
 $1394 = $135;
 $1395 = $1394;
 HEAP32[$1395>>2] = $1392;
 $1396 = (($1394) + 4)|0;
 $1397 = $1396;
 HEAP32[$1397>>2] = $1393;
 $1398 = $15;
 $1399 = ($1398|0)<(0);
 $1400 = $1399 << 31 >> 31;
 $1401 = $31;
 $1402 = ($1401|0)<(0);
 $1403 = $1402 << 31 >> 31;
 $1404 = (___muldi3(($1398|0),($1400|0),($1401|0),($1403|0))|0);
 $1405 = (getTempRet0() | 0);
 $1406 = $136;
 $1407 = $1406;
 HEAP32[$1407>>2] = $1404;
 $1408 = (($1406) + 4)|0;
 $1409 = $1408;
 HEAP32[$1409>>2] = $1405;
 $1410 = $39;
 $1411 = ($1410|0)<(0);
 $1412 = $1411 << 31 >> 31;
 $1413 = $32;
 $1414 = ($1413|0)<(0);
 $1415 = $1414 << 31 >> 31;
 $1416 = (___muldi3(($1410|0),($1412|0),($1413|0),($1415|0))|0);
 $1417 = (getTempRet0() | 0);
 $1418 = $137;
 $1419 = $1418;
 HEAP32[$1419>>2] = $1416;
 $1420 = (($1418) + 4)|0;
 $1421 = $1420;
 HEAP32[$1421>>2] = $1417;
 $1422 = $15;
 $1423 = ($1422|0)<(0);
 $1424 = $1423 << 31 >> 31;
 $1425 = $33;
 $1426 = ($1425|0)<(0);
 $1427 = $1426 << 31 >> 31;
 $1428 = (___muldi3(($1422|0),($1424|0),($1425|0),($1427|0))|0);
 $1429 = (getTempRet0() | 0);
 $1430 = $138;
 $1431 = $1430;
 HEAP32[$1431>>2] = $1428;
 $1432 = (($1430) + 4)|0;
 $1433 = $1432;
 HEAP32[$1433>>2] = $1429;
 $1434 = $39;
 $1435 = ($1434|0)<(0);
 $1436 = $1435 << 31 >> 31;
 $1437 = $34;
 $1438 = ($1437|0)<(0);
 $1439 = $1438 << 31 >> 31;
 $1440 = (___muldi3(($1434|0),($1436|0),($1437|0),($1439|0))|0);
 $1441 = (getTempRet0() | 0);
 $1442 = $139;
 $1443 = $1442;
 HEAP32[$1443>>2] = $1440;
 $1444 = (($1442) + 4)|0;
 $1445 = $1444;
 HEAP32[$1445>>2] = $1441;
 $1446 = $40;
 $1447 = $1446;
 $1448 = HEAP32[$1447>>2]|0;
 $1449 = (($1446) + 4)|0;
 $1450 = $1449;
 $1451 = HEAP32[$1450>>2]|0;
 $1452 = $59;
 $1453 = $1452;
 $1454 = HEAP32[$1453>>2]|0;
 $1455 = (($1452) + 4)|0;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (_i64Add(($1448|0),($1451|0),($1454|0),($1457|0))|0);
 $1459 = (getTempRet0() | 0);
 $1460 = $68;
 $1461 = $1460;
 $1462 = HEAP32[$1461>>2]|0;
 $1463 = (($1460) + 4)|0;
 $1464 = $1463;
 $1465 = HEAP32[$1464>>2]|0;
 $1466 = (_i64Add(($1458|0),($1459|0),($1462|0),($1465|0))|0);
 $1467 = (getTempRet0() | 0);
 $1468 = $77;
 $1469 = $1468;
 $1470 = HEAP32[$1469>>2]|0;
 $1471 = (($1468) + 4)|0;
 $1472 = $1471;
 $1473 = HEAP32[$1472>>2]|0;
 $1474 = (_i64Add(($1466|0),($1467|0),($1470|0),($1473|0))|0);
 $1475 = (getTempRet0() | 0);
 $1476 = $86;
 $1477 = $1476;
 $1478 = HEAP32[$1477>>2]|0;
 $1479 = (($1476) + 4)|0;
 $1480 = $1479;
 $1481 = HEAP32[$1480>>2]|0;
 $1482 = (_i64Add(($1474|0),($1475|0),($1478|0),($1481|0))|0);
 $1483 = (getTempRet0() | 0);
 $1484 = $95;
 $1485 = $1484;
 $1486 = HEAP32[$1485>>2]|0;
 $1487 = (($1484) + 4)|0;
 $1488 = $1487;
 $1489 = HEAP32[$1488>>2]|0;
 $1490 = (_i64Add(($1482|0),($1483|0),($1486|0),($1489|0))|0);
 $1491 = (getTempRet0() | 0);
 $1492 = $104;
 $1493 = $1492;
 $1494 = HEAP32[$1493>>2]|0;
 $1495 = (($1492) + 4)|0;
 $1496 = $1495;
 $1497 = HEAP32[$1496>>2]|0;
 $1498 = (_i64Add(($1490|0),($1491|0),($1494|0),($1497|0))|0);
 $1499 = (getTempRet0() | 0);
 $1500 = $113;
 $1501 = $1500;
 $1502 = HEAP32[$1501>>2]|0;
 $1503 = (($1500) + 4)|0;
 $1504 = $1503;
 $1505 = HEAP32[$1504>>2]|0;
 $1506 = (_i64Add(($1498|0),($1499|0),($1502|0),($1505|0))|0);
 $1507 = (getTempRet0() | 0);
 $1508 = $122;
 $1509 = $1508;
 $1510 = HEAP32[$1509>>2]|0;
 $1511 = (($1508) + 4)|0;
 $1512 = $1511;
 $1513 = HEAP32[$1512>>2]|0;
 $1514 = (_i64Add(($1506|0),($1507|0),($1510|0),($1513|0))|0);
 $1515 = (getTempRet0() | 0);
 $1516 = $131;
 $1517 = $1516;
 $1518 = HEAP32[$1517>>2]|0;
 $1519 = (($1516) + 4)|0;
 $1520 = $1519;
 $1521 = HEAP32[$1520>>2]|0;
 $1522 = (_i64Add(($1514|0),($1515|0),($1518|0),($1521|0))|0);
 $1523 = (getTempRet0() | 0);
 $1524 = $140;
 $1525 = $1524;
 HEAP32[$1525>>2] = $1522;
 $1526 = (($1524) + 4)|0;
 $1527 = $1526;
 HEAP32[$1527>>2] = $1523;
 $1528 = $41;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (($1528) + 4)|0;
 $1532 = $1531;
 $1533 = HEAP32[$1532>>2]|0;
 $1534 = $50;
 $1535 = $1534;
 $1536 = HEAP32[$1535>>2]|0;
 $1537 = (($1534) + 4)|0;
 $1538 = $1537;
 $1539 = HEAP32[$1538>>2]|0;
 $1540 = (_i64Add(($1530|0),($1533|0),($1536|0),($1539|0))|0);
 $1541 = (getTempRet0() | 0);
 $1542 = $69;
 $1543 = $1542;
 $1544 = HEAP32[$1543>>2]|0;
 $1545 = (($1542) + 4)|0;
 $1546 = $1545;
 $1547 = HEAP32[$1546>>2]|0;
 $1548 = (_i64Add(($1540|0),($1541|0),($1544|0),($1547|0))|0);
 $1549 = (getTempRet0() | 0);
 $1550 = $78;
 $1551 = $1550;
 $1552 = HEAP32[$1551>>2]|0;
 $1553 = (($1550) + 4)|0;
 $1554 = $1553;
 $1555 = HEAP32[$1554>>2]|0;
 $1556 = (_i64Add(($1548|0),($1549|0),($1552|0),($1555|0))|0);
 $1557 = (getTempRet0() | 0);
 $1558 = $87;
 $1559 = $1558;
 $1560 = HEAP32[$1559>>2]|0;
 $1561 = (($1558) + 4)|0;
 $1562 = $1561;
 $1563 = HEAP32[$1562>>2]|0;
 $1564 = (_i64Add(($1556|0),($1557|0),($1560|0),($1563|0))|0);
 $1565 = (getTempRet0() | 0);
 $1566 = $96;
 $1567 = $1566;
 $1568 = HEAP32[$1567>>2]|0;
 $1569 = (($1566) + 4)|0;
 $1570 = $1569;
 $1571 = HEAP32[$1570>>2]|0;
 $1572 = (_i64Add(($1564|0),($1565|0),($1568|0),($1571|0))|0);
 $1573 = (getTempRet0() | 0);
 $1574 = $105;
 $1575 = $1574;
 $1576 = HEAP32[$1575>>2]|0;
 $1577 = (($1574) + 4)|0;
 $1578 = $1577;
 $1579 = HEAP32[$1578>>2]|0;
 $1580 = (_i64Add(($1572|0),($1573|0),($1576|0),($1579|0))|0);
 $1581 = (getTempRet0() | 0);
 $1582 = $114;
 $1583 = $1582;
 $1584 = HEAP32[$1583>>2]|0;
 $1585 = (($1582) + 4)|0;
 $1586 = $1585;
 $1587 = HEAP32[$1586>>2]|0;
 $1588 = (_i64Add(($1580|0),($1581|0),($1584|0),($1587|0))|0);
 $1589 = (getTempRet0() | 0);
 $1590 = $123;
 $1591 = $1590;
 $1592 = HEAP32[$1591>>2]|0;
 $1593 = (($1590) + 4)|0;
 $1594 = $1593;
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = (_i64Add(($1588|0),($1589|0),($1592|0),($1595|0))|0);
 $1597 = (getTempRet0() | 0);
 $1598 = $132;
 $1599 = $1598;
 $1600 = HEAP32[$1599>>2]|0;
 $1601 = (($1598) + 4)|0;
 $1602 = $1601;
 $1603 = HEAP32[$1602>>2]|0;
 $1604 = (_i64Add(($1596|0),($1597|0),($1600|0),($1603|0))|0);
 $1605 = (getTempRet0() | 0);
 $1606 = $141;
 $1607 = $1606;
 HEAP32[$1607>>2] = $1604;
 $1608 = (($1606) + 4)|0;
 $1609 = $1608;
 HEAP32[$1609>>2] = $1605;
 $1610 = $42;
 $1611 = $1610;
 $1612 = HEAP32[$1611>>2]|0;
 $1613 = (($1610) + 4)|0;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = $51;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (($1616) + 4)|0;
 $1620 = $1619;
 $1621 = HEAP32[$1620>>2]|0;
 $1622 = (_i64Add(($1612|0),($1615|0),($1618|0),($1621|0))|0);
 $1623 = (getTempRet0() | 0);
 $1624 = $60;
 $1625 = $1624;
 $1626 = HEAP32[$1625>>2]|0;
 $1627 = (($1624) + 4)|0;
 $1628 = $1627;
 $1629 = HEAP32[$1628>>2]|0;
 $1630 = (_i64Add(($1622|0),($1623|0),($1626|0),($1629|0))|0);
 $1631 = (getTempRet0() | 0);
 $1632 = $79;
 $1633 = $1632;
 $1634 = HEAP32[$1633>>2]|0;
 $1635 = (($1632) + 4)|0;
 $1636 = $1635;
 $1637 = HEAP32[$1636>>2]|0;
 $1638 = (_i64Add(($1630|0),($1631|0),($1634|0),($1637|0))|0);
 $1639 = (getTempRet0() | 0);
 $1640 = $88;
 $1641 = $1640;
 $1642 = HEAP32[$1641>>2]|0;
 $1643 = (($1640) + 4)|0;
 $1644 = $1643;
 $1645 = HEAP32[$1644>>2]|0;
 $1646 = (_i64Add(($1638|0),($1639|0),($1642|0),($1645|0))|0);
 $1647 = (getTempRet0() | 0);
 $1648 = $97;
 $1649 = $1648;
 $1650 = HEAP32[$1649>>2]|0;
 $1651 = (($1648) + 4)|0;
 $1652 = $1651;
 $1653 = HEAP32[$1652>>2]|0;
 $1654 = (_i64Add(($1646|0),($1647|0),($1650|0),($1653|0))|0);
 $1655 = (getTempRet0() | 0);
 $1656 = $106;
 $1657 = $1656;
 $1658 = HEAP32[$1657>>2]|0;
 $1659 = (($1656) + 4)|0;
 $1660 = $1659;
 $1661 = HEAP32[$1660>>2]|0;
 $1662 = (_i64Add(($1654|0),($1655|0),($1658|0),($1661|0))|0);
 $1663 = (getTempRet0() | 0);
 $1664 = $115;
 $1665 = $1664;
 $1666 = HEAP32[$1665>>2]|0;
 $1667 = (($1664) + 4)|0;
 $1668 = $1667;
 $1669 = HEAP32[$1668>>2]|0;
 $1670 = (_i64Add(($1662|0),($1663|0),($1666|0),($1669|0))|0);
 $1671 = (getTempRet0() | 0);
 $1672 = $124;
 $1673 = $1672;
 $1674 = HEAP32[$1673>>2]|0;
 $1675 = (($1672) + 4)|0;
 $1676 = $1675;
 $1677 = HEAP32[$1676>>2]|0;
 $1678 = (_i64Add(($1670|0),($1671|0),($1674|0),($1677|0))|0);
 $1679 = (getTempRet0() | 0);
 $1680 = $133;
 $1681 = $1680;
 $1682 = HEAP32[$1681>>2]|0;
 $1683 = (($1680) + 4)|0;
 $1684 = $1683;
 $1685 = HEAP32[$1684>>2]|0;
 $1686 = (_i64Add(($1678|0),($1679|0),($1682|0),($1685|0))|0);
 $1687 = (getTempRet0() | 0);
 $1688 = $142;
 $1689 = $1688;
 HEAP32[$1689>>2] = $1686;
 $1690 = (($1688) + 4)|0;
 $1691 = $1690;
 HEAP32[$1691>>2] = $1687;
 $1692 = $43;
 $1693 = $1692;
 $1694 = HEAP32[$1693>>2]|0;
 $1695 = (($1692) + 4)|0;
 $1696 = $1695;
 $1697 = HEAP32[$1696>>2]|0;
 $1698 = $52;
 $1699 = $1698;
 $1700 = HEAP32[$1699>>2]|0;
 $1701 = (($1698) + 4)|0;
 $1702 = $1701;
 $1703 = HEAP32[$1702>>2]|0;
 $1704 = (_i64Add(($1694|0),($1697|0),($1700|0),($1703|0))|0);
 $1705 = (getTempRet0() | 0);
 $1706 = $61;
 $1707 = $1706;
 $1708 = HEAP32[$1707>>2]|0;
 $1709 = (($1706) + 4)|0;
 $1710 = $1709;
 $1711 = HEAP32[$1710>>2]|0;
 $1712 = (_i64Add(($1704|0),($1705|0),($1708|0),($1711|0))|0);
 $1713 = (getTempRet0() | 0);
 $1714 = $70;
 $1715 = $1714;
 $1716 = HEAP32[$1715>>2]|0;
 $1717 = (($1714) + 4)|0;
 $1718 = $1717;
 $1719 = HEAP32[$1718>>2]|0;
 $1720 = (_i64Add(($1712|0),($1713|0),($1716|0),($1719|0))|0);
 $1721 = (getTempRet0() | 0);
 $1722 = $89;
 $1723 = $1722;
 $1724 = HEAP32[$1723>>2]|0;
 $1725 = (($1722) + 4)|0;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (_i64Add(($1720|0),($1721|0),($1724|0),($1727|0))|0);
 $1729 = (getTempRet0() | 0);
 $1730 = $98;
 $1731 = $1730;
 $1732 = HEAP32[$1731>>2]|0;
 $1733 = (($1730) + 4)|0;
 $1734 = $1733;
 $1735 = HEAP32[$1734>>2]|0;
 $1736 = (_i64Add(($1728|0),($1729|0),($1732|0),($1735|0))|0);
 $1737 = (getTempRet0() | 0);
 $1738 = $107;
 $1739 = $1738;
 $1740 = HEAP32[$1739>>2]|0;
 $1741 = (($1738) + 4)|0;
 $1742 = $1741;
 $1743 = HEAP32[$1742>>2]|0;
 $1744 = (_i64Add(($1736|0),($1737|0),($1740|0),($1743|0))|0);
 $1745 = (getTempRet0() | 0);
 $1746 = $116;
 $1747 = $1746;
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = (($1746) + 4)|0;
 $1750 = $1749;
 $1751 = HEAP32[$1750>>2]|0;
 $1752 = (_i64Add(($1744|0),($1745|0),($1748|0),($1751|0))|0);
 $1753 = (getTempRet0() | 0);
 $1754 = $125;
 $1755 = $1754;
 $1756 = HEAP32[$1755>>2]|0;
 $1757 = (($1754) + 4)|0;
 $1758 = $1757;
 $1759 = HEAP32[$1758>>2]|0;
 $1760 = (_i64Add(($1752|0),($1753|0),($1756|0),($1759|0))|0);
 $1761 = (getTempRet0() | 0);
 $1762 = $134;
 $1763 = $1762;
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = (($1762) + 4)|0;
 $1766 = $1765;
 $1767 = HEAP32[$1766>>2]|0;
 $1768 = (_i64Add(($1760|0),($1761|0),($1764|0),($1767|0))|0);
 $1769 = (getTempRet0() | 0);
 $1770 = $143;
 $1771 = $1770;
 HEAP32[$1771>>2] = $1768;
 $1772 = (($1770) + 4)|0;
 $1773 = $1772;
 HEAP32[$1773>>2] = $1769;
 $1774 = $44;
 $1775 = $1774;
 $1776 = HEAP32[$1775>>2]|0;
 $1777 = (($1774) + 4)|0;
 $1778 = $1777;
 $1779 = HEAP32[$1778>>2]|0;
 $1780 = $53;
 $1781 = $1780;
 $1782 = HEAP32[$1781>>2]|0;
 $1783 = (($1780) + 4)|0;
 $1784 = $1783;
 $1785 = HEAP32[$1784>>2]|0;
 $1786 = (_i64Add(($1776|0),($1779|0),($1782|0),($1785|0))|0);
 $1787 = (getTempRet0() | 0);
 $1788 = $62;
 $1789 = $1788;
 $1790 = HEAP32[$1789>>2]|0;
 $1791 = (($1788) + 4)|0;
 $1792 = $1791;
 $1793 = HEAP32[$1792>>2]|0;
 $1794 = (_i64Add(($1786|0),($1787|0),($1790|0),($1793|0))|0);
 $1795 = (getTempRet0() | 0);
 $1796 = $71;
 $1797 = $1796;
 $1798 = HEAP32[$1797>>2]|0;
 $1799 = (($1796) + 4)|0;
 $1800 = $1799;
 $1801 = HEAP32[$1800>>2]|0;
 $1802 = (_i64Add(($1794|0),($1795|0),($1798|0),($1801|0))|0);
 $1803 = (getTempRet0() | 0);
 $1804 = $80;
 $1805 = $1804;
 $1806 = HEAP32[$1805>>2]|0;
 $1807 = (($1804) + 4)|0;
 $1808 = $1807;
 $1809 = HEAP32[$1808>>2]|0;
 $1810 = (_i64Add(($1802|0),($1803|0),($1806|0),($1809|0))|0);
 $1811 = (getTempRet0() | 0);
 $1812 = $99;
 $1813 = $1812;
 $1814 = HEAP32[$1813>>2]|0;
 $1815 = (($1812) + 4)|0;
 $1816 = $1815;
 $1817 = HEAP32[$1816>>2]|0;
 $1818 = (_i64Add(($1810|0),($1811|0),($1814|0),($1817|0))|0);
 $1819 = (getTempRet0() | 0);
 $1820 = $108;
 $1821 = $1820;
 $1822 = HEAP32[$1821>>2]|0;
 $1823 = (($1820) + 4)|0;
 $1824 = $1823;
 $1825 = HEAP32[$1824>>2]|0;
 $1826 = (_i64Add(($1818|0),($1819|0),($1822|0),($1825|0))|0);
 $1827 = (getTempRet0() | 0);
 $1828 = $117;
 $1829 = $1828;
 $1830 = HEAP32[$1829>>2]|0;
 $1831 = (($1828) + 4)|0;
 $1832 = $1831;
 $1833 = HEAP32[$1832>>2]|0;
 $1834 = (_i64Add(($1826|0),($1827|0),($1830|0),($1833|0))|0);
 $1835 = (getTempRet0() | 0);
 $1836 = $126;
 $1837 = $1836;
 $1838 = HEAP32[$1837>>2]|0;
 $1839 = (($1836) + 4)|0;
 $1840 = $1839;
 $1841 = HEAP32[$1840>>2]|0;
 $1842 = (_i64Add(($1834|0),($1835|0),($1838|0),($1841|0))|0);
 $1843 = (getTempRet0() | 0);
 $1844 = $135;
 $1845 = $1844;
 $1846 = HEAP32[$1845>>2]|0;
 $1847 = (($1844) + 4)|0;
 $1848 = $1847;
 $1849 = HEAP32[$1848>>2]|0;
 $1850 = (_i64Add(($1842|0),($1843|0),($1846|0),($1849|0))|0);
 $1851 = (getTempRet0() | 0);
 $1852 = $144;
 $1853 = $1852;
 HEAP32[$1853>>2] = $1850;
 $1854 = (($1852) + 4)|0;
 $1855 = $1854;
 HEAP32[$1855>>2] = $1851;
 $1856 = $45;
 $1857 = $1856;
 $1858 = HEAP32[$1857>>2]|0;
 $1859 = (($1856) + 4)|0;
 $1860 = $1859;
 $1861 = HEAP32[$1860>>2]|0;
 $1862 = $54;
 $1863 = $1862;
 $1864 = HEAP32[$1863>>2]|0;
 $1865 = (($1862) + 4)|0;
 $1866 = $1865;
 $1867 = HEAP32[$1866>>2]|0;
 $1868 = (_i64Add(($1858|0),($1861|0),($1864|0),($1867|0))|0);
 $1869 = (getTempRet0() | 0);
 $1870 = $63;
 $1871 = $1870;
 $1872 = HEAP32[$1871>>2]|0;
 $1873 = (($1870) + 4)|0;
 $1874 = $1873;
 $1875 = HEAP32[$1874>>2]|0;
 $1876 = (_i64Add(($1868|0),($1869|0),($1872|0),($1875|0))|0);
 $1877 = (getTempRet0() | 0);
 $1878 = $72;
 $1879 = $1878;
 $1880 = HEAP32[$1879>>2]|0;
 $1881 = (($1878) + 4)|0;
 $1882 = $1881;
 $1883 = HEAP32[$1882>>2]|0;
 $1884 = (_i64Add(($1876|0),($1877|0),($1880|0),($1883|0))|0);
 $1885 = (getTempRet0() | 0);
 $1886 = $81;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = (($1886) + 4)|0;
 $1890 = $1889;
 $1891 = HEAP32[$1890>>2]|0;
 $1892 = (_i64Add(($1884|0),($1885|0),($1888|0),($1891|0))|0);
 $1893 = (getTempRet0() | 0);
 $1894 = $90;
 $1895 = $1894;
 $1896 = HEAP32[$1895>>2]|0;
 $1897 = (($1894) + 4)|0;
 $1898 = $1897;
 $1899 = HEAP32[$1898>>2]|0;
 $1900 = (_i64Add(($1892|0),($1893|0),($1896|0),($1899|0))|0);
 $1901 = (getTempRet0() | 0);
 $1902 = $109;
 $1903 = $1902;
 $1904 = HEAP32[$1903>>2]|0;
 $1905 = (($1902) + 4)|0;
 $1906 = $1905;
 $1907 = HEAP32[$1906>>2]|0;
 $1908 = (_i64Add(($1900|0),($1901|0),($1904|0),($1907|0))|0);
 $1909 = (getTempRet0() | 0);
 $1910 = $118;
 $1911 = $1910;
 $1912 = HEAP32[$1911>>2]|0;
 $1913 = (($1910) + 4)|0;
 $1914 = $1913;
 $1915 = HEAP32[$1914>>2]|0;
 $1916 = (_i64Add(($1908|0),($1909|0),($1912|0),($1915|0))|0);
 $1917 = (getTempRet0() | 0);
 $1918 = $127;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = (($1918) + 4)|0;
 $1922 = $1921;
 $1923 = HEAP32[$1922>>2]|0;
 $1924 = (_i64Add(($1916|0),($1917|0),($1920|0),($1923|0))|0);
 $1925 = (getTempRet0() | 0);
 $1926 = $136;
 $1927 = $1926;
 $1928 = HEAP32[$1927>>2]|0;
 $1929 = (($1926) + 4)|0;
 $1930 = $1929;
 $1931 = HEAP32[$1930>>2]|0;
 $1932 = (_i64Add(($1924|0),($1925|0),($1928|0),($1931|0))|0);
 $1933 = (getTempRet0() | 0);
 $1934 = $145;
 $1935 = $1934;
 HEAP32[$1935>>2] = $1932;
 $1936 = (($1934) + 4)|0;
 $1937 = $1936;
 HEAP32[$1937>>2] = $1933;
 $1938 = $46;
 $1939 = $1938;
 $1940 = HEAP32[$1939>>2]|0;
 $1941 = (($1938) + 4)|0;
 $1942 = $1941;
 $1943 = HEAP32[$1942>>2]|0;
 $1944 = $55;
 $1945 = $1944;
 $1946 = HEAP32[$1945>>2]|0;
 $1947 = (($1944) + 4)|0;
 $1948 = $1947;
 $1949 = HEAP32[$1948>>2]|0;
 $1950 = (_i64Add(($1940|0),($1943|0),($1946|0),($1949|0))|0);
 $1951 = (getTempRet0() | 0);
 $1952 = $64;
 $1953 = $1952;
 $1954 = HEAP32[$1953>>2]|0;
 $1955 = (($1952) + 4)|0;
 $1956 = $1955;
 $1957 = HEAP32[$1956>>2]|0;
 $1958 = (_i64Add(($1950|0),($1951|0),($1954|0),($1957|0))|0);
 $1959 = (getTempRet0() | 0);
 $1960 = $73;
 $1961 = $1960;
 $1962 = HEAP32[$1961>>2]|0;
 $1963 = (($1960) + 4)|0;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (_i64Add(($1958|0),($1959|0),($1962|0),($1965|0))|0);
 $1967 = (getTempRet0() | 0);
 $1968 = $82;
 $1969 = $1968;
 $1970 = HEAP32[$1969>>2]|0;
 $1971 = (($1968) + 4)|0;
 $1972 = $1971;
 $1973 = HEAP32[$1972>>2]|0;
 $1974 = (_i64Add(($1966|0),($1967|0),($1970|0),($1973|0))|0);
 $1975 = (getTempRet0() | 0);
 $1976 = $91;
 $1977 = $1976;
 $1978 = HEAP32[$1977>>2]|0;
 $1979 = (($1976) + 4)|0;
 $1980 = $1979;
 $1981 = HEAP32[$1980>>2]|0;
 $1982 = (_i64Add(($1974|0),($1975|0),($1978|0),($1981|0))|0);
 $1983 = (getTempRet0() | 0);
 $1984 = $100;
 $1985 = $1984;
 $1986 = HEAP32[$1985>>2]|0;
 $1987 = (($1984) + 4)|0;
 $1988 = $1987;
 $1989 = HEAP32[$1988>>2]|0;
 $1990 = (_i64Add(($1982|0),($1983|0),($1986|0),($1989|0))|0);
 $1991 = (getTempRet0() | 0);
 $1992 = $119;
 $1993 = $1992;
 $1994 = HEAP32[$1993>>2]|0;
 $1995 = (($1992) + 4)|0;
 $1996 = $1995;
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = (_i64Add(($1990|0),($1991|0),($1994|0),($1997|0))|0);
 $1999 = (getTempRet0() | 0);
 $2000 = $128;
 $2001 = $2000;
 $2002 = HEAP32[$2001>>2]|0;
 $2003 = (($2000) + 4)|0;
 $2004 = $2003;
 $2005 = HEAP32[$2004>>2]|0;
 $2006 = (_i64Add(($1998|0),($1999|0),($2002|0),($2005|0))|0);
 $2007 = (getTempRet0() | 0);
 $2008 = $137;
 $2009 = $2008;
 $2010 = HEAP32[$2009>>2]|0;
 $2011 = (($2008) + 4)|0;
 $2012 = $2011;
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = (_i64Add(($2006|0),($2007|0),($2010|0),($2013|0))|0);
 $2015 = (getTempRet0() | 0);
 $2016 = $146;
 $2017 = $2016;
 HEAP32[$2017>>2] = $2014;
 $2018 = (($2016) + 4)|0;
 $2019 = $2018;
 HEAP32[$2019>>2] = $2015;
 $2020 = $47;
 $2021 = $2020;
 $2022 = HEAP32[$2021>>2]|0;
 $2023 = (($2020) + 4)|0;
 $2024 = $2023;
 $2025 = HEAP32[$2024>>2]|0;
 $2026 = $56;
 $2027 = $2026;
 $2028 = HEAP32[$2027>>2]|0;
 $2029 = (($2026) + 4)|0;
 $2030 = $2029;
 $2031 = HEAP32[$2030>>2]|0;
 $2032 = (_i64Add(($2022|0),($2025|0),($2028|0),($2031|0))|0);
 $2033 = (getTempRet0() | 0);
 $2034 = $65;
 $2035 = $2034;
 $2036 = HEAP32[$2035>>2]|0;
 $2037 = (($2034) + 4)|0;
 $2038 = $2037;
 $2039 = HEAP32[$2038>>2]|0;
 $2040 = (_i64Add(($2032|0),($2033|0),($2036|0),($2039|0))|0);
 $2041 = (getTempRet0() | 0);
 $2042 = $74;
 $2043 = $2042;
 $2044 = HEAP32[$2043>>2]|0;
 $2045 = (($2042) + 4)|0;
 $2046 = $2045;
 $2047 = HEAP32[$2046>>2]|0;
 $2048 = (_i64Add(($2040|0),($2041|0),($2044|0),($2047|0))|0);
 $2049 = (getTempRet0() | 0);
 $2050 = $83;
 $2051 = $2050;
 $2052 = HEAP32[$2051>>2]|0;
 $2053 = (($2050) + 4)|0;
 $2054 = $2053;
 $2055 = HEAP32[$2054>>2]|0;
 $2056 = (_i64Add(($2048|0),($2049|0),($2052|0),($2055|0))|0);
 $2057 = (getTempRet0() | 0);
 $2058 = $92;
 $2059 = $2058;
 $2060 = HEAP32[$2059>>2]|0;
 $2061 = (($2058) + 4)|0;
 $2062 = $2061;
 $2063 = HEAP32[$2062>>2]|0;
 $2064 = (_i64Add(($2056|0),($2057|0),($2060|0),($2063|0))|0);
 $2065 = (getTempRet0() | 0);
 $2066 = $101;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (($2066) + 4)|0;
 $2070 = $2069;
 $2071 = HEAP32[$2070>>2]|0;
 $2072 = (_i64Add(($2064|0),($2065|0),($2068|0),($2071|0))|0);
 $2073 = (getTempRet0() | 0);
 $2074 = $110;
 $2075 = $2074;
 $2076 = HEAP32[$2075>>2]|0;
 $2077 = (($2074) + 4)|0;
 $2078 = $2077;
 $2079 = HEAP32[$2078>>2]|0;
 $2080 = (_i64Add(($2072|0),($2073|0),($2076|0),($2079|0))|0);
 $2081 = (getTempRet0() | 0);
 $2082 = $129;
 $2083 = $2082;
 $2084 = HEAP32[$2083>>2]|0;
 $2085 = (($2082) + 4)|0;
 $2086 = $2085;
 $2087 = HEAP32[$2086>>2]|0;
 $2088 = (_i64Add(($2080|0),($2081|0),($2084|0),($2087|0))|0);
 $2089 = (getTempRet0() | 0);
 $2090 = $138;
 $2091 = $2090;
 $2092 = HEAP32[$2091>>2]|0;
 $2093 = (($2090) + 4)|0;
 $2094 = $2093;
 $2095 = HEAP32[$2094>>2]|0;
 $2096 = (_i64Add(($2088|0),($2089|0),($2092|0),($2095|0))|0);
 $2097 = (getTempRet0() | 0);
 $2098 = $147;
 $2099 = $2098;
 HEAP32[$2099>>2] = $2096;
 $2100 = (($2098) + 4)|0;
 $2101 = $2100;
 HEAP32[$2101>>2] = $2097;
 $2102 = $48;
 $2103 = $2102;
 $2104 = HEAP32[$2103>>2]|0;
 $2105 = (($2102) + 4)|0;
 $2106 = $2105;
 $2107 = HEAP32[$2106>>2]|0;
 $2108 = $57;
 $2109 = $2108;
 $2110 = HEAP32[$2109>>2]|0;
 $2111 = (($2108) + 4)|0;
 $2112 = $2111;
 $2113 = HEAP32[$2112>>2]|0;
 $2114 = (_i64Add(($2104|0),($2107|0),($2110|0),($2113|0))|0);
 $2115 = (getTempRet0() | 0);
 $2116 = $66;
 $2117 = $2116;
 $2118 = HEAP32[$2117>>2]|0;
 $2119 = (($2116) + 4)|0;
 $2120 = $2119;
 $2121 = HEAP32[$2120>>2]|0;
 $2122 = (_i64Add(($2114|0),($2115|0),($2118|0),($2121|0))|0);
 $2123 = (getTempRet0() | 0);
 $2124 = $75;
 $2125 = $2124;
 $2126 = HEAP32[$2125>>2]|0;
 $2127 = (($2124) + 4)|0;
 $2128 = $2127;
 $2129 = HEAP32[$2128>>2]|0;
 $2130 = (_i64Add(($2122|0),($2123|0),($2126|0),($2129|0))|0);
 $2131 = (getTempRet0() | 0);
 $2132 = $84;
 $2133 = $2132;
 $2134 = HEAP32[$2133>>2]|0;
 $2135 = (($2132) + 4)|0;
 $2136 = $2135;
 $2137 = HEAP32[$2136>>2]|0;
 $2138 = (_i64Add(($2130|0),($2131|0),($2134|0),($2137|0))|0);
 $2139 = (getTempRet0() | 0);
 $2140 = $93;
 $2141 = $2140;
 $2142 = HEAP32[$2141>>2]|0;
 $2143 = (($2140) + 4)|0;
 $2144 = $2143;
 $2145 = HEAP32[$2144>>2]|0;
 $2146 = (_i64Add(($2138|0),($2139|0),($2142|0),($2145|0))|0);
 $2147 = (getTempRet0() | 0);
 $2148 = $102;
 $2149 = $2148;
 $2150 = HEAP32[$2149>>2]|0;
 $2151 = (($2148) + 4)|0;
 $2152 = $2151;
 $2153 = HEAP32[$2152>>2]|0;
 $2154 = (_i64Add(($2146|0),($2147|0),($2150|0),($2153|0))|0);
 $2155 = (getTempRet0() | 0);
 $2156 = $111;
 $2157 = $2156;
 $2158 = HEAP32[$2157>>2]|0;
 $2159 = (($2156) + 4)|0;
 $2160 = $2159;
 $2161 = HEAP32[$2160>>2]|0;
 $2162 = (_i64Add(($2154|0),($2155|0),($2158|0),($2161|0))|0);
 $2163 = (getTempRet0() | 0);
 $2164 = $120;
 $2165 = $2164;
 $2166 = HEAP32[$2165>>2]|0;
 $2167 = (($2164) + 4)|0;
 $2168 = $2167;
 $2169 = HEAP32[$2168>>2]|0;
 $2170 = (_i64Add(($2162|0),($2163|0),($2166|0),($2169|0))|0);
 $2171 = (getTempRet0() | 0);
 $2172 = $139;
 $2173 = $2172;
 $2174 = HEAP32[$2173>>2]|0;
 $2175 = (($2172) + 4)|0;
 $2176 = $2175;
 $2177 = HEAP32[$2176>>2]|0;
 $2178 = (_i64Add(($2170|0),($2171|0),($2174|0),($2177|0))|0);
 $2179 = (getTempRet0() | 0);
 $2180 = $148;
 $2181 = $2180;
 HEAP32[$2181>>2] = $2178;
 $2182 = (($2180) + 4)|0;
 $2183 = $2182;
 HEAP32[$2183>>2] = $2179;
 $2184 = $49;
 $2185 = $2184;
 $2186 = HEAP32[$2185>>2]|0;
 $2187 = (($2184) + 4)|0;
 $2188 = $2187;
 $2189 = HEAP32[$2188>>2]|0;
 $2190 = $58;
 $2191 = $2190;
 $2192 = HEAP32[$2191>>2]|0;
 $2193 = (($2190) + 4)|0;
 $2194 = $2193;
 $2195 = HEAP32[$2194>>2]|0;
 $2196 = (_i64Add(($2186|0),($2189|0),($2192|0),($2195|0))|0);
 $2197 = (getTempRet0() | 0);
 $2198 = $67;
 $2199 = $2198;
 $2200 = HEAP32[$2199>>2]|0;
 $2201 = (($2198) + 4)|0;
 $2202 = $2201;
 $2203 = HEAP32[$2202>>2]|0;
 $2204 = (_i64Add(($2196|0),($2197|0),($2200|0),($2203|0))|0);
 $2205 = (getTempRet0() | 0);
 $2206 = $76;
 $2207 = $2206;
 $2208 = HEAP32[$2207>>2]|0;
 $2209 = (($2206) + 4)|0;
 $2210 = $2209;
 $2211 = HEAP32[$2210>>2]|0;
 $2212 = (_i64Add(($2204|0),($2205|0),($2208|0),($2211|0))|0);
 $2213 = (getTempRet0() | 0);
 $2214 = $85;
 $2215 = $2214;
 $2216 = HEAP32[$2215>>2]|0;
 $2217 = (($2214) + 4)|0;
 $2218 = $2217;
 $2219 = HEAP32[$2218>>2]|0;
 $2220 = (_i64Add(($2212|0),($2213|0),($2216|0),($2219|0))|0);
 $2221 = (getTempRet0() | 0);
 $2222 = $94;
 $2223 = $2222;
 $2224 = HEAP32[$2223>>2]|0;
 $2225 = (($2222) + 4)|0;
 $2226 = $2225;
 $2227 = HEAP32[$2226>>2]|0;
 $2228 = (_i64Add(($2220|0),($2221|0),($2224|0),($2227|0))|0);
 $2229 = (getTempRet0() | 0);
 $2230 = $103;
 $2231 = $2230;
 $2232 = HEAP32[$2231>>2]|0;
 $2233 = (($2230) + 4)|0;
 $2234 = $2233;
 $2235 = HEAP32[$2234>>2]|0;
 $2236 = (_i64Add(($2228|0),($2229|0),($2232|0),($2235|0))|0);
 $2237 = (getTempRet0() | 0);
 $2238 = $112;
 $2239 = $2238;
 $2240 = HEAP32[$2239>>2]|0;
 $2241 = (($2238) + 4)|0;
 $2242 = $2241;
 $2243 = HEAP32[$2242>>2]|0;
 $2244 = (_i64Add(($2236|0),($2237|0),($2240|0),($2243|0))|0);
 $2245 = (getTempRet0() | 0);
 $2246 = $121;
 $2247 = $2246;
 $2248 = HEAP32[$2247>>2]|0;
 $2249 = (($2246) + 4)|0;
 $2250 = $2249;
 $2251 = HEAP32[$2250>>2]|0;
 $2252 = (_i64Add(($2244|0),($2245|0),($2248|0),($2251|0))|0);
 $2253 = (getTempRet0() | 0);
 $2254 = $130;
 $2255 = $2254;
 $2256 = HEAP32[$2255>>2]|0;
 $2257 = (($2254) + 4)|0;
 $2258 = $2257;
 $2259 = HEAP32[$2258>>2]|0;
 $2260 = (_i64Add(($2252|0),($2253|0),($2256|0),($2259|0))|0);
 $2261 = (getTempRet0() | 0);
 $2262 = $149;
 $2263 = $2262;
 HEAP32[$2263>>2] = $2260;
 $2264 = (($2262) + 4)|0;
 $2265 = $2264;
 HEAP32[$2265>>2] = $2261;
 $2266 = $140;
 $2267 = $2266;
 $2268 = HEAP32[$2267>>2]|0;
 $2269 = (($2266) + 4)|0;
 $2270 = $2269;
 $2271 = HEAP32[$2270>>2]|0;
 $2272 = (_i64Add(($2268|0),($2271|0),33554432,0)|0);
 $2273 = (getTempRet0() | 0);
 $2274 = (_bitshift64Ashr(($2272|0),($2273|0),26)|0);
 $2275 = (getTempRet0() | 0);
 $2276 = $150;
 $2277 = $2276;
 HEAP32[$2277>>2] = $2274;
 $2278 = (($2276) + 4)|0;
 $2279 = $2278;
 HEAP32[$2279>>2] = $2275;
 $2280 = $150;
 $2281 = $2280;
 $2282 = HEAP32[$2281>>2]|0;
 $2283 = (($2280) + 4)|0;
 $2284 = $2283;
 $2285 = HEAP32[$2284>>2]|0;
 $2286 = $141;
 $2287 = $2286;
 $2288 = HEAP32[$2287>>2]|0;
 $2289 = (($2286) + 4)|0;
 $2290 = $2289;
 $2291 = HEAP32[$2290>>2]|0;
 $2292 = (_i64Add(($2288|0),($2291|0),($2282|0),($2285|0))|0);
 $2293 = (getTempRet0() | 0);
 $2294 = $141;
 $2295 = $2294;
 HEAP32[$2295>>2] = $2292;
 $2296 = (($2294) + 4)|0;
 $2297 = $2296;
 HEAP32[$2297>>2] = $2293;
 $2298 = $150;
 $2299 = $2298;
 $2300 = HEAP32[$2299>>2]|0;
 $2301 = (($2298) + 4)|0;
 $2302 = $2301;
 $2303 = HEAP32[$2302>>2]|0;
 $2304 = (_bitshift64Shl(($2300|0),($2303|0),26)|0);
 $2305 = (getTempRet0() | 0);
 $2306 = $140;
 $2307 = $2306;
 $2308 = HEAP32[$2307>>2]|0;
 $2309 = (($2306) + 4)|0;
 $2310 = $2309;
 $2311 = HEAP32[$2310>>2]|0;
 $2312 = (_i64Subtract(($2308|0),($2311|0),($2304|0),($2305|0))|0);
 $2313 = (getTempRet0() | 0);
 $2314 = $140;
 $2315 = $2314;
 HEAP32[$2315>>2] = $2312;
 $2316 = (($2314) + 4)|0;
 $2317 = $2316;
 HEAP32[$2317>>2] = $2313;
 $2318 = $144;
 $2319 = $2318;
 $2320 = HEAP32[$2319>>2]|0;
 $2321 = (($2318) + 4)|0;
 $2322 = $2321;
 $2323 = HEAP32[$2322>>2]|0;
 $2324 = (_i64Add(($2320|0),($2323|0),33554432,0)|0);
 $2325 = (getTempRet0() | 0);
 $2326 = (_bitshift64Ashr(($2324|0),($2325|0),26)|0);
 $2327 = (getTempRet0() | 0);
 $2328 = $154;
 $2329 = $2328;
 HEAP32[$2329>>2] = $2326;
 $2330 = (($2328) + 4)|0;
 $2331 = $2330;
 HEAP32[$2331>>2] = $2327;
 $2332 = $154;
 $2333 = $2332;
 $2334 = HEAP32[$2333>>2]|0;
 $2335 = (($2332) + 4)|0;
 $2336 = $2335;
 $2337 = HEAP32[$2336>>2]|0;
 $2338 = $145;
 $2339 = $2338;
 $2340 = HEAP32[$2339>>2]|0;
 $2341 = (($2338) + 4)|0;
 $2342 = $2341;
 $2343 = HEAP32[$2342>>2]|0;
 $2344 = (_i64Add(($2340|0),($2343|0),($2334|0),($2337|0))|0);
 $2345 = (getTempRet0() | 0);
 $2346 = $145;
 $2347 = $2346;
 HEAP32[$2347>>2] = $2344;
 $2348 = (($2346) + 4)|0;
 $2349 = $2348;
 HEAP32[$2349>>2] = $2345;
 $2350 = $154;
 $2351 = $2350;
 $2352 = HEAP32[$2351>>2]|0;
 $2353 = (($2350) + 4)|0;
 $2354 = $2353;
 $2355 = HEAP32[$2354>>2]|0;
 $2356 = (_bitshift64Shl(($2352|0),($2355|0),26)|0);
 $2357 = (getTempRet0() | 0);
 $2358 = $144;
 $2359 = $2358;
 $2360 = HEAP32[$2359>>2]|0;
 $2361 = (($2358) + 4)|0;
 $2362 = $2361;
 $2363 = HEAP32[$2362>>2]|0;
 $2364 = (_i64Subtract(($2360|0),($2363|0),($2356|0),($2357|0))|0);
 $2365 = (getTempRet0() | 0);
 $2366 = $144;
 $2367 = $2366;
 HEAP32[$2367>>2] = $2364;
 $2368 = (($2366) + 4)|0;
 $2369 = $2368;
 HEAP32[$2369>>2] = $2365;
 $2370 = $141;
 $2371 = $2370;
 $2372 = HEAP32[$2371>>2]|0;
 $2373 = (($2370) + 4)|0;
 $2374 = $2373;
 $2375 = HEAP32[$2374>>2]|0;
 $2376 = (_i64Add(($2372|0),($2375|0),16777216,0)|0);
 $2377 = (getTempRet0() | 0);
 $2378 = (_bitshift64Ashr(($2376|0),($2377|0),25)|0);
 $2379 = (getTempRet0() | 0);
 $2380 = $151;
 $2381 = $2380;
 HEAP32[$2381>>2] = $2378;
 $2382 = (($2380) + 4)|0;
 $2383 = $2382;
 HEAP32[$2383>>2] = $2379;
 $2384 = $151;
 $2385 = $2384;
 $2386 = HEAP32[$2385>>2]|0;
 $2387 = (($2384) + 4)|0;
 $2388 = $2387;
 $2389 = HEAP32[$2388>>2]|0;
 $2390 = $142;
 $2391 = $2390;
 $2392 = HEAP32[$2391>>2]|0;
 $2393 = (($2390) + 4)|0;
 $2394 = $2393;
 $2395 = HEAP32[$2394>>2]|0;
 $2396 = (_i64Add(($2392|0),($2395|0),($2386|0),($2389|0))|0);
 $2397 = (getTempRet0() | 0);
 $2398 = $142;
 $2399 = $2398;
 HEAP32[$2399>>2] = $2396;
 $2400 = (($2398) + 4)|0;
 $2401 = $2400;
 HEAP32[$2401>>2] = $2397;
 $2402 = $151;
 $2403 = $2402;
 $2404 = HEAP32[$2403>>2]|0;
 $2405 = (($2402) + 4)|0;
 $2406 = $2405;
 $2407 = HEAP32[$2406>>2]|0;
 $2408 = (_bitshift64Shl(($2404|0),($2407|0),25)|0);
 $2409 = (getTempRet0() | 0);
 $2410 = $141;
 $2411 = $2410;
 $2412 = HEAP32[$2411>>2]|0;
 $2413 = (($2410) + 4)|0;
 $2414 = $2413;
 $2415 = HEAP32[$2414>>2]|0;
 $2416 = (_i64Subtract(($2412|0),($2415|0),($2408|0),($2409|0))|0);
 $2417 = (getTempRet0() | 0);
 $2418 = $141;
 $2419 = $2418;
 HEAP32[$2419>>2] = $2416;
 $2420 = (($2418) + 4)|0;
 $2421 = $2420;
 HEAP32[$2421>>2] = $2417;
 $2422 = $145;
 $2423 = $2422;
 $2424 = HEAP32[$2423>>2]|0;
 $2425 = (($2422) + 4)|0;
 $2426 = $2425;
 $2427 = HEAP32[$2426>>2]|0;
 $2428 = (_i64Add(($2424|0),($2427|0),16777216,0)|0);
 $2429 = (getTempRet0() | 0);
 $2430 = (_bitshift64Ashr(($2428|0),($2429|0),25)|0);
 $2431 = (getTempRet0() | 0);
 $2432 = $155;
 $2433 = $2432;
 HEAP32[$2433>>2] = $2430;
 $2434 = (($2432) + 4)|0;
 $2435 = $2434;
 HEAP32[$2435>>2] = $2431;
 $2436 = $155;
 $2437 = $2436;
 $2438 = HEAP32[$2437>>2]|0;
 $2439 = (($2436) + 4)|0;
 $2440 = $2439;
 $2441 = HEAP32[$2440>>2]|0;
 $2442 = $146;
 $2443 = $2442;
 $2444 = HEAP32[$2443>>2]|0;
 $2445 = (($2442) + 4)|0;
 $2446 = $2445;
 $2447 = HEAP32[$2446>>2]|0;
 $2448 = (_i64Add(($2444|0),($2447|0),($2438|0),($2441|0))|0);
 $2449 = (getTempRet0() | 0);
 $2450 = $146;
 $2451 = $2450;
 HEAP32[$2451>>2] = $2448;
 $2452 = (($2450) + 4)|0;
 $2453 = $2452;
 HEAP32[$2453>>2] = $2449;
 $2454 = $155;
 $2455 = $2454;
 $2456 = HEAP32[$2455>>2]|0;
 $2457 = (($2454) + 4)|0;
 $2458 = $2457;
 $2459 = HEAP32[$2458>>2]|0;
 $2460 = (_bitshift64Shl(($2456|0),($2459|0),25)|0);
 $2461 = (getTempRet0() | 0);
 $2462 = $145;
 $2463 = $2462;
 $2464 = HEAP32[$2463>>2]|0;
 $2465 = (($2462) + 4)|0;
 $2466 = $2465;
 $2467 = HEAP32[$2466>>2]|0;
 $2468 = (_i64Subtract(($2464|0),($2467|0),($2460|0),($2461|0))|0);
 $2469 = (getTempRet0() | 0);
 $2470 = $145;
 $2471 = $2470;
 HEAP32[$2471>>2] = $2468;
 $2472 = (($2470) + 4)|0;
 $2473 = $2472;
 HEAP32[$2473>>2] = $2469;
 $2474 = $142;
 $2475 = $2474;
 $2476 = HEAP32[$2475>>2]|0;
 $2477 = (($2474) + 4)|0;
 $2478 = $2477;
 $2479 = HEAP32[$2478>>2]|0;
 $2480 = (_i64Add(($2476|0),($2479|0),33554432,0)|0);
 $2481 = (getTempRet0() | 0);
 $2482 = (_bitshift64Ashr(($2480|0),($2481|0),26)|0);
 $2483 = (getTempRet0() | 0);
 $2484 = $152;
 $2485 = $2484;
 HEAP32[$2485>>2] = $2482;
 $2486 = (($2484) + 4)|0;
 $2487 = $2486;
 HEAP32[$2487>>2] = $2483;
 $2488 = $152;
 $2489 = $2488;
 $2490 = HEAP32[$2489>>2]|0;
 $2491 = (($2488) + 4)|0;
 $2492 = $2491;
 $2493 = HEAP32[$2492>>2]|0;
 $2494 = $143;
 $2495 = $2494;
 $2496 = HEAP32[$2495>>2]|0;
 $2497 = (($2494) + 4)|0;
 $2498 = $2497;
 $2499 = HEAP32[$2498>>2]|0;
 $2500 = (_i64Add(($2496|0),($2499|0),($2490|0),($2493|0))|0);
 $2501 = (getTempRet0() | 0);
 $2502 = $143;
 $2503 = $2502;
 HEAP32[$2503>>2] = $2500;
 $2504 = (($2502) + 4)|0;
 $2505 = $2504;
 HEAP32[$2505>>2] = $2501;
 $2506 = $152;
 $2507 = $2506;
 $2508 = HEAP32[$2507>>2]|0;
 $2509 = (($2506) + 4)|0;
 $2510 = $2509;
 $2511 = HEAP32[$2510>>2]|0;
 $2512 = (_bitshift64Shl(($2508|0),($2511|0),26)|0);
 $2513 = (getTempRet0() | 0);
 $2514 = $142;
 $2515 = $2514;
 $2516 = HEAP32[$2515>>2]|0;
 $2517 = (($2514) + 4)|0;
 $2518 = $2517;
 $2519 = HEAP32[$2518>>2]|0;
 $2520 = (_i64Subtract(($2516|0),($2519|0),($2512|0),($2513|0))|0);
 $2521 = (getTempRet0() | 0);
 $2522 = $142;
 $2523 = $2522;
 HEAP32[$2523>>2] = $2520;
 $2524 = (($2522) + 4)|0;
 $2525 = $2524;
 HEAP32[$2525>>2] = $2521;
 $2526 = $146;
 $2527 = $2526;
 $2528 = HEAP32[$2527>>2]|0;
 $2529 = (($2526) + 4)|0;
 $2530 = $2529;
 $2531 = HEAP32[$2530>>2]|0;
 $2532 = (_i64Add(($2528|0),($2531|0),33554432,0)|0);
 $2533 = (getTempRet0() | 0);
 $2534 = (_bitshift64Ashr(($2532|0),($2533|0),26)|0);
 $2535 = (getTempRet0() | 0);
 $2536 = $156;
 $2537 = $2536;
 HEAP32[$2537>>2] = $2534;
 $2538 = (($2536) + 4)|0;
 $2539 = $2538;
 HEAP32[$2539>>2] = $2535;
 $2540 = $156;
 $2541 = $2540;
 $2542 = HEAP32[$2541>>2]|0;
 $2543 = (($2540) + 4)|0;
 $2544 = $2543;
 $2545 = HEAP32[$2544>>2]|0;
 $2546 = $147;
 $2547 = $2546;
 $2548 = HEAP32[$2547>>2]|0;
 $2549 = (($2546) + 4)|0;
 $2550 = $2549;
 $2551 = HEAP32[$2550>>2]|0;
 $2552 = (_i64Add(($2548|0),($2551|0),($2542|0),($2545|0))|0);
 $2553 = (getTempRet0() | 0);
 $2554 = $147;
 $2555 = $2554;
 HEAP32[$2555>>2] = $2552;
 $2556 = (($2554) + 4)|0;
 $2557 = $2556;
 HEAP32[$2557>>2] = $2553;
 $2558 = $156;
 $2559 = $2558;
 $2560 = HEAP32[$2559>>2]|0;
 $2561 = (($2558) + 4)|0;
 $2562 = $2561;
 $2563 = HEAP32[$2562>>2]|0;
 $2564 = (_bitshift64Shl(($2560|0),($2563|0),26)|0);
 $2565 = (getTempRet0() | 0);
 $2566 = $146;
 $2567 = $2566;
 $2568 = HEAP32[$2567>>2]|0;
 $2569 = (($2566) + 4)|0;
 $2570 = $2569;
 $2571 = HEAP32[$2570>>2]|0;
 $2572 = (_i64Subtract(($2568|0),($2571|0),($2564|0),($2565|0))|0);
 $2573 = (getTempRet0() | 0);
 $2574 = $146;
 $2575 = $2574;
 HEAP32[$2575>>2] = $2572;
 $2576 = (($2574) + 4)|0;
 $2577 = $2576;
 HEAP32[$2577>>2] = $2573;
 $2578 = $143;
 $2579 = $2578;
 $2580 = HEAP32[$2579>>2]|0;
 $2581 = (($2578) + 4)|0;
 $2582 = $2581;
 $2583 = HEAP32[$2582>>2]|0;
 $2584 = (_i64Add(($2580|0),($2583|0),16777216,0)|0);
 $2585 = (getTempRet0() | 0);
 $2586 = (_bitshift64Ashr(($2584|0),($2585|0),25)|0);
 $2587 = (getTempRet0() | 0);
 $2588 = $153;
 $2589 = $2588;
 HEAP32[$2589>>2] = $2586;
 $2590 = (($2588) + 4)|0;
 $2591 = $2590;
 HEAP32[$2591>>2] = $2587;
 $2592 = $153;
 $2593 = $2592;
 $2594 = HEAP32[$2593>>2]|0;
 $2595 = (($2592) + 4)|0;
 $2596 = $2595;
 $2597 = HEAP32[$2596>>2]|0;
 $2598 = $144;
 $2599 = $2598;
 $2600 = HEAP32[$2599>>2]|0;
 $2601 = (($2598) + 4)|0;
 $2602 = $2601;
 $2603 = HEAP32[$2602>>2]|0;
 $2604 = (_i64Add(($2600|0),($2603|0),($2594|0),($2597|0))|0);
 $2605 = (getTempRet0() | 0);
 $2606 = $144;
 $2607 = $2606;
 HEAP32[$2607>>2] = $2604;
 $2608 = (($2606) + 4)|0;
 $2609 = $2608;
 HEAP32[$2609>>2] = $2605;
 $2610 = $153;
 $2611 = $2610;
 $2612 = HEAP32[$2611>>2]|0;
 $2613 = (($2610) + 4)|0;
 $2614 = $2613;
 $2615 = HEAP32[$2614>>2]|0;
 $2616 = (_bitshift64Shl(($2612|0),($2615|0),25)|0);
 $2617 = (getTempRet0() | 0);
 $2618 = $143;
 $2619 = $2618;
 $2620 = HEAP32[$2619>>2]|0;
 $2621 = (($2618) + 4)|0;
 $2622 = $2621;
 $2623 = HEAP32[$2622>>2]|0;
 $2624 = (_i64Subtract(($2620|0),($2623|0),($2616|0),($2617|0))|0);
 $2625 = (getTempRet0() | 0);
 $2626 = $143;
 $2627 = $2626;
 HEAP32[$2627>>2] = $2624;
 $2628 = (($2626) + 4)|0;
 $2629 = $2628;
 HEAP32[$2629>>2] = $2625;
 $2630 = $147;
 $2631 = $2630;
 $2632 = HEAP32[$2631>>2]|0;
 $2633 = (($2630) + 4)|0;
 $2634 = $2633;
 $2635 = HEAP32[$2634>>2]|0;
 $2636 = (_i64Add(($2632|0),($2635|0),16777216,0)|0);
 $2637 = (getTempRet0() | 0);
 $2638 = (_bitshift64Ashr(($2636|0),($2637|0),25)|0);
 $2639 = (getTempRet0() | 0);
 $2640 = $157;
 $2641 = $2640;
 HEAP32[$2641>>2] = $2638;
 $2642 = (($2640) + 4)|0;
 $2643 = $2642;
 HEAP32[$2643>>2] = $2639;
 $2644 = $157;
 $2645 = $2644;
 $2646 = HEAP32[$2645>>2]|0;
 $2647 = (($2644) + 4)|0;
 $2648 = $2647;
 $2649 = HEAP32[$2648>>2]|0;
 $2650 = $148;
 $2651 = $2650;
 $2652 = HEAP32[$2651>>2]|0;
 $2653 = (($2650) + 4)|0;
 $2654 = $2653;
 $2655 = HEAP32[$2654>>2]|0;
 $2656 = (_i64Add(($2652|0),($2655|0),($2646|0),($2649|0))|0);
 $2657 = (getTempRet0() | 0);
 $2658 = $148;
 $2659 = $2658;
 HEAP32[$2659>>2] = $2656;
 $2660 = (($2658) + 4)|0;
 $2661 = $2660;
 HEAP32[$2661>>2] = $2657;
 $2662 = $157;
 $2663 = $2662;
 $2664 = HEAP32[$2663>>2]|0;
 $2665 = (($2662) + 4)|0;
 $2666 = $2665;
 $2667 = HEAP32[$2666>>2]|0;
 $2668 = (_bitshift64Shl(($2664|0),($2667|0),25)|0);
 $2669 = (getTempRet0() | 0);
 $2670 = $147;
 $2671 = $2670;
 $2672 = HEAP32[$2671>>2]|0;
 $2673 = (($2670) + 4)|0;
 $2674 = $2673;
 $2675 = HEAP32[$2674>>2]|0;
 $2676 = (_i64Subtract(($2672|0),($2675|0),($2668|0),($2669|0))|0);
 $2677 = (getTempRet0() | 0);
 $2678 = $147;
 $2679 = $2678;
 HEAP32[$2679>>2] = $2676;
 $2680 = (($2678) + 4)|0;
 $2681 = $2680;
 HEAP32[$2681>>2] = $2677;
 $2682 = $144;
 $2683 = $2682;
 $2684 = HEAP32[$2683>>2]|0;
 $2685 = (($2682) + 4)|0;
 $2686 = $2685;
 $2687 = HEAP32[$2686>>2]|0;
 $2688 = (_i64Add(($2684|0),($2687|0),33554432,0)|0);
 $2689 = (getTempRet0() | 0);
 $2690 = (_bitshift64Ashr(($2688|0),($2689|0),26)|0);
 $2691 = (getTempRet0() | 0);
 $2692 = $154;
 $2693 = $2692;
 HEAP32[$2693>>2] = $2690;
 $2694 = (($2692) + 4)|0;
 $2695 = $2694;
 HEAP32[$2695>>2] = $2691;
 $2696 = $154;
 $2697 = $2696;
 $2698 = HEAP32[$2697>>2]|0;
 $2699 = (($2696) + 4)|0;
 $2700 = $2699;
 $2701 = HEAP32[$2700>>2]|0;
 $2702 = $145;
 $2703 = $2702;
 $2704 = HEAP32[$2703>>2]|0;
 $2705 = (($2702) + 4)|0;
 $2706 = $2705;
 $2707 = HEAP32[$2706>>2]|0;
 $2708 = (_i64Add(($2704|0),($2707|0),($2698|0),($2701|0))|0);
 $2709 = (getTempRet0() | 0);
 $2710 = $145;
 $2711 = $2710;
 HEAP32[$2711>>2] = $2708;
 $2712 = (($2710) + 4)|0;
 $2713 = $2712;
 HEAP32[$2713>>2] = $2709;
 $2714 = $154;
 $2715 = $2714;
 $2716 = HEAP32[$2715>>2]|0;
 $2717 = (($2714) + 4)|0;
 $2718 = $2717;
 $2719 = HEAP32[$2718>>2]|0;
 $2720 = (_bitshift64Shl(($2716|0),($2719|0),26)|0);
 $2721 = (getTempRet0() | 0);
 $2722 = $144;
 $2723 = $2722;
 $2724 = HEAP32[$2723>>2]|0;
 $2725 = (($2722) + 4)|0;
 $2726 = $2725;
 $2727 = HEAP32[$2726>>2]|0;
 $2728 = (_i64Subtract(($2724|0),($2727|0),($2720|0),($2721|0))|0);
 $2729 = (getTempRet0() | 0);
 $2730 = $144;
 $2731 = $2730;
 HEAP32[$2731>>2] = $2728;
 $2732 = (($2730) + 4)|0;
 $2733 = $2732;
 HEAP32[$2733>>2] = $2729;
 $2734 = $148;
 $2735 = $2734;
 $2736 = HEAP32[$2735>>2]|0;
 $2737 = (($2734) + 4)|0;
 $2738 = $2737;
 $2739 = HEAP32[$2738>>2]|0;
 $2740 = (_i64Add(($2736|0),($2739|0),33554432,0)|0);
 $2741 = (getTempRet0() | 0);
 $2742 = (_bitshift64Ashr(($2740|0),($2741|0),26)|0);
 $2743 = (getTempRet0() | 0);
 $2744 = $158;
 $2745 = $2744;
 HEAP32[$2745>>2] = $2742;
 $2746 = (($2744) + 4)|0;
 $2747 = $2746;
 HEAP32[$2747>>2] = $2743;
 $2748 = $158;
 $2749 = $2748;
 $2750 = HEAP32[$2749>>2]|0;
 $2751 = (($2748) + 4)|0;
 $2752 = $2751;
 $2753 = HEAP32[$2752>>2]|0;
 $2754 = $149;
 $2755 = $2754;
 $2756 = HEAP32[$2755>>2]|0;
 $2757 = (($2754) + 4)|0;
 $2758 = $2757;
 $2759 = HEAP32[$2758>>2]|0;
 $2760 = (_i64Add(($2756|0),($2759|0),($2750|0),($2753|0))|0);
 $2761 = (getTempRet0() | 0);
 $2762 = $149;
 $2763 = $2762;
 HEAP32[$2763>>2] = $2760;
 $2764 = (($2762) + 4)|0;
 $2765 = $2764;
 HEAP32[$2765>>2] = $2761;
 $2766 = $158;
 $2767 = $2766;
 $2768 = HEAP32[$2767>>2]|0;
 $2769 = (($2766) + 4)|0;
 $2770 = $2769;
 $2771 = HEAP32[$2770>>2]|0;
 $2772 = (_bitshift64Shl(($2768|0),($2771|0),26)|0);
 $2773 = (getTempRet0() | 0);
 $2774 = $148;
 $2775 = $2774;
 $2776 = HEAP32[$2775>>2]|0;
 $2777 = (($2774) + 4)|0;
 $2778 = $2777;
 $2779 = HEAP32[$2778>>2]|0;
 $2780 = (_i64Subtract(($2776|0),($2779|0),($2772|0),($2773|0))|0);
 $2781 = (getTempRet0() | 0);
 $2782 = $148;
 $2783 = $2782;
 HEAP32[$2783>>2] = $2780;
 $2784 = (($2782) + 4)|0;
 $2785 = $2784;
 HEAP32[$2785>>2] = $2781;
 $2786 = $149;
 $2787 = $2786;
 $2788 = HEAP32[$2787>>2]|0;
 $2789 = (($2786) + 4)|0;
 $2790 = $2789;
 $2791 = HEAP32[$2790>>2]|0;
 $2792 = (_i64Add(($2788|0),($2791|0),16777216,0)|0);
 $2793 = (getTempRet0() | 0);
 $2794 = (_bitshift64Ashr(($2792|0),($2793|0),25)|0);
 $2795 = (getTempRet0() | 0);
 $2796 = $159;
 $2797 = $2796;
 HEAP32[$2797>>2] = $2794;
 $2798 = (($2796) + 4)|0;
 $2799 = $2798;
 HEAP32[$2799>>2] = $2795;
 $2800 = $159;
 $2801 = $2800;
 $2802 = HEAP32[$2801>>2]|0;
 $2803 = (($2800) + 4)|0;
 $2804 = $2803;
 $2805 = HEAP32[$2804>>2]|0;
 $2806 = (___muldi3(($2802|0),($2805|0),19,0)|0);
 $2807 = (getTempRet0() | 0);
 $2808 = $140;
 $2809 = $2808;
 $2810 = HEAP32[$2809>>2]|0;
 $2811 = (($2808) + 4)|0;
 $2812 = $2811;
 $2813 = HEAP32[$2812>>2]|0;
 $2814 = (_i64Add(($2810|0),($2813|0),($2806|0),($2807|0))|0);
 $2815 = (getTempRet0() | 0);
 $2816 = $140;
 $2817 = $2816;
 HEAP32[$2817>>2] = $2814;
 $2818 = (($2816) + 4)|0;
 $2819 = $2818;
 HEAP32[$2819>>2] = $2815;
 $2820 = $159;
 $2821 = $2820;
 $2822 = HEAP32[$2821>>2]|0;
 $2823 = (($2820) + 4)|0;
 $2824 = $2823;
 $2825 = HEAP32[$2824>>2]|0;
 $2826 = (_bitshift64Shl(($2822|0),($2825|0),25)|0);
 $2827 = (getTempRet0() | 0);
 $2828 = $149;
 $2829 = $2828;
 $2830 = HEAP32[$2829>>2]|0;
 $2831 = (($2828) + 4)|0;
 $2832 = $2831;
 $2833 = HEAP32[$2832>>2]|0;
 $2834 = (_i64Subtract(($2830|0),($2833|0),($2826|0),($2827|0))|0);
 $2835 = (getTempRet0() | 0);
 $2836 = $149;
 $2837 = $2836;
 HEAP32[$2837>>2] = $2834;
 $2838 = (($2836) + 4)|0;
 $2839 = $2838;
 HEAP32[$2839>>2] = $2835;
 $2840 = $140;
 $2841 = $2840;
 $2842 = HEAP32[$2841>>2]|0;
 $2843 = (($2840) + 4)|0;
 $2844 = $2843;
 $2845 = HEAP32[$2844>>2]|0;
 $2846 = (_i64Add(($2842|0),($2845|0),33554432,0)|0);
 $2847 = (getTempRet0() | 0);
 $2848 = (_bitshift64Ashr(($2846|0),($2847|0),26)|0);
 $2849 = (getTempRet0() | 0);
 $2850 = $150;
 $2851 = $2850;
 HEAP32[$2851>>2] = $2848;
 $2852 = (($2850) + 4)|0;
 $2853 = $2852;
 HEAP32[$2853>>2] = $2849;
 $2854 = $150;
 $2855 = $2854;
 $2856 = HEAP32[$2855>>2]|0;
 $2857 = (($2854) + 4)|0;
 $2858 = $2857;
 $2859 = HEAP32[$2858>>2]|0;
 $2860 = $141;
 $2861 = $2860;
 $2862 = HEAP32[$2861>>2]|0;
 $2863 = (($2860) + 4)|0;
 $2864 = $2863;
 $2865 = HEAP32[$2864>>2]|0;
 $2866 = (_i64Add(($2862|0),($2865|0),($2856|0),($2859|0))|0);
 $2867 = (getTempRet0() | 0);
 $2868 = $141;
 $2869 = $2868;
 HEAP32[$2869>>2] = $2866;
 $2870 = (($2868) + 4)|0;
 $2871 = $2870;
 HEAP32[$2871>>2] = $2867;
 $2872 = $150;
 $2873 = $2872;
 $2874 = HEAP32[$2873>>2]|0;
 $2875 = (($2872) + 4)|0;
 $2876 = $2875;
 $2877 = HEAP32[$2876>>2]|0;
 $2878 = (_bitshift64Shl(($2874|0),($2877|0),26)|0);
 $2879 = (getTempRet0() | 0);
 $2880 = $140;
 $2881 = $2880;
 $2882 = HEAP32[$2881>>2]|0;
 $2883 = (($2880) + 4)|0;
 $2884 = $2883;
 $2885 = HEAP32[$2884>>2]|0;
 $2886 = (_i64Subtract(($2882|0),($2885|0),($2878|0),($2879|0))|0);
 $2887 = (getTempRet0() | 0);
 $2888 = $140;
 $2889 = $2888;
 HEAP32[$2889>>2] = $2886;
 $2890 = (($2888) + 4)|0;
 $2891 = $2890;
 HEAP32[$2891>>2] = $2887;
 $2892 = $140;
 $2893 = $2892;
 $2894 = HEAP32[$2893>>2]|0;
 $2895 = (($2892) + 4)|0;
 $2896 = $2895;
 $2897 = HEAP32[$2896>>2]|0;
 $2898 = $3;
 HEAP32[$2898>>2] = $2894;
 $2899 = $141;
 $2900 = $2899;
 $2901 = HEAP32[$2900>>2]|0;
 $2902 = (($2899) + 4)|0;
 $2903 = $2902;
 $2904 = HEAP32[$2903>>2]|0;
 $2905 = $3;
 $2906 = ((($2905)) + 4|0);
 HEAP32[$2906>>2] = $2901;
 $2907 = $142;
 $2908 = $2907;
 $2909 = HEAP32[$2908>>2]|0;
 $2910 = (($2907) + 4)|0;
 $2911 = $2910;
 $2912 = HEAP32[$2911>>2]|0;
 $2913 = $3;
 $2914 = ((($2913)) + 8|0);
 HEAP32[$2914>>2] = $2909;
 $2915 = $143;
 $2916 = $2915;
 $2917 = HEAP32[$2916>>2]|0;
 $2918 = (($2915) + 4)|0;
 $2919 = $2918;
 $2920 = HEAP32[$2919>>2]|0;
 $2921 = $3;
 $2922 = ((($2921)) + 12|0);
 HEAP32[$2922>>2] = $2917;
 $2923 = $144;
 $2924 = $2923;
 $2925 = HEAP32[$2924>>2]|0;
 $2926 = (($2923) + 4)|0;
 $2927 = $2926;
 $2928 = HEAP32[$2927>>2]|0;
 $2929 = $3;
 $2930 = ((($2929)) + 16|0);
 HEAP32[$2930>>2] = $2925;
 $2931 = $145;
 $2932 = $2931;
 $2933 = HEAP32[$2932>>2]|0;
 $2934 = (($2931) + 4)|0;
 $2935 = $2934;
 $2936 = HEAP32[$2935>>2]|0;
 $2937 = $3;
 $2938 = ((($2937)) + 20|0);
 HEAP32[$2938>>2] = $2933;
 $2939 = $146;
 $2940 = $2939;
 $2941 = HEAP32[$2940>>2]|0;
 $2942 = (($2939) + 4)|0;
 $2943 = $2942;
 $2944 = HEAP32[$2943>>2]|0;
 $2945 = $3;
 $2946 = ((($2945)) + 24|0);
 HEAP32[$2946>>2] = $2941;
 $2947 = $147;
 $2948 = $2947;
 $2949 = HEAP32[$2948>>2]|0;
 $2950 = (($2947) + 4)|0;
 $2951 = $2950;
 $2952 = HEAP32[$2951>>2]|0;
 $2953 = $3;
 $2954 = ((($2953)) + 28|0);
 HEAP32[$2954>>2] = $2949;
 $2955 = $148;
 $2956 = $2955;
 $2957 = HEAP32[$2956>>2]|0;
 $2958 = (($2955) + 4)|0;
 $2959 = $2958;
 $2960 = HEAP32[$2959>>2]|0;
 $2961 = $3;
 $2962 = ((($2961)) + 32|0);
 HEAP32[$2962>>2] = $2957;
 $2963 = $149;
 $2964 = $2963;
 $2965 = HEAP32[$2964>>2]|0;
 $2966 = (($2963) + 4)|0;
 $2967 = $2966;
 $2968 = HEAP32[$2967>>2]|0;
 $2969 = $3;
 $2970 = ((($2969)) + 36|0);
 HEAP32[$2970>>2] = $2965;
 STACKTOP = sp;return;
}
function _ge_dsm_precomp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $4 = sp + 320|0;
 $5 = sp + 160|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 _ge_p3_to_cached($7,$8);
 $9 = $3;
 _ge_p3_dbl($4,$9);
 _ge_p1p1_to_p3($5,$4);
 $10 = $2;
 _ge_add($4,$5,$10);
 _ge_p1p1_to_p3($6,$4);
 $11 = $2;
 $12 = ((($11)) + 160|0);
 _ge_p3_to_cached($12,$6);
 $13 = $2;
 $14 = ((($13)) + 160|0);
 _ge_add($4,$5,$14);
 _ge_p1p1_to_p3($6,$4);
 $15 = $2;
 $16 = ((($15)) + 320|0);
 _ge_p3_to_cached($16,$6);
 $17 = $2;
 $18 = ((($17)) + 320|0);
 _ge_add($4,$5,$18);
 _ge_p1p1_to_p3($6,$4);
 $19 = $2;
 $20 = ((($19)) + 480|0);
 _ge_p3_to_cached($20,$6);
 $21 = $2;
 $22 = ((($21)) + 480|0);
 _ge_add($4,$5,$22);
 _ge_p1p1_to_p3($6,$4);
 $23 = $2;
 $24 = ((($23)) + 640|0);
 _ge_p3_to_cached($24,$6);
 $25 = $2;
 $26 = ((($25)) + 640|0);
 _ge_add($4,$5,$26);
 _ge_p1p1_to_p3($6,$4);
 $27 = $2;
 $28 = ((($27)) + 800|0);
 _ge_p3_to_cached($28,$6);
 $29 = $2;
 $30 = ((($29)) + 800|0);
 _ge_add($4,$5,$30);
 _ge_p1p1_to_p3($6,$4);
 $31 = $2;
 $32 = ((($31)) + 960|0);
 _ge_p3_to_cached($32,$6);
 $33 = $2;
 $34 = ((($33)) + 960|0);
 _ge_add($4,$5,$34);
 _ge_p1p1_to_p3($6,$4);
 $35 = $2;
 $36 = ((($35)) + 1120|0);
 _ge_p3_to_cached($36,$6);
 STACKTOP = sp;return;
}
function _ge_p3_to_cached($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = ((($5)) + 40|0);
 $7 = $3;
 _fe_add($4,$6,$7);
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $3;
 _fe_sub($9,$11,$12);
 $13 = $2;
 $14 = ((($13)) + 80|0);
 $15 = $3;
 $16 = ((($15)) + 80|0);
 _fe_copy($14,$16);
 $17 = $2;
 $18 = ((($17)) + 120|0);
 $19 = $3;
 $20 = ((($19)) + 120|0);
 _fe_mul($18,$20,112);
 STACKTOP = sp;return;
}
function _ge_p3_dbl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 _ge_p3_to_p2($4,$5);
 $6 = $2;
 _ge_p2_dbl($6,$4);
 STACKTOP = sp;return;
}
function _ge_p1p1_to_p3($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = ((($6)) + 120|0);
 _fe_mul($4,$5,$7);
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $3;
 $13 = ((($12)) + 80|0);
 _fe_mul($9,$11,$13);
 $14 = $2;
 $15 = ((($14)) + 80|0);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = ((($18)) + 120|0);
 _fe_mul($15,$17,$19);
 $20 = $2;
 $21 = ((($20)) + 120|0);
 $22 = $3;
 $23 = $3;
 $24 = ((($23)) + 40|0);
 _fe_mul($21,$22,$24);
 STACKTOP = sp;return;
}
function _ge_p3_to_p2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 _fe_copy($4,$5);
 $6 = $2;
 $7 = ((($6)) + 40|0);
 $8 = $3;
 $9 = ((($8)) + 40|0);
 _fe_copy($7,$9);
 $10 = $2;
 $11 = ((($10)) + 80|0);
 $12 = $3;
 $13 = ((($12)) + 80|0);
 _fe_copy($11,$13);
 STACKTOP = sp;return;
}
function _ge_p2_dbl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 _fe_sq($5,$6);
 $7 = $2;
 $8 = ((($7)) + 80|0);
 $9 = $3;
 $10 = ((($9)) + 40|0);
 _fe_sq($8,$10);
 $11 = $2;
 $12 = ((($11)) + 120|0);
 $13 = $3;
 $14 = ((($13)) + 80|0);
 _fe_sq2($12,$14);
 $15 = $2;
 $16 = ((($15)) + 40|0);
 $17 = $3;
 $18 = $3;
 $19 = ((($18)) + 40|0);
 _fe_add($16,$17,$19);
 $20 = $2;
 $21 = ((($20)) + 40|0);
 _fe_sq($4,$21);
 $22 = $2;
 $23 = ((($22)) + 40|0);
 $24 = $2;
 $25 = ((($24)) + 80|0);
 $26 = $2;
 _fe_add($23,$25,$26);
 $27 = $2;
 $28 = ((($27)) + 80|0);
 $29 = $2;
 $30 = ((($29)) + 80|0);
 $31 = $2;
 _fe_sub($28,$30,$31);
 $32 = $2;
 $33 = $2;
 $34 = ((($33)) + 40|0);
 _fe_sub($32,$4,$34);
 $35 = $2;
 $36 = ((($35)) + 120|0);
 $37 = $2;
 $38 = ((($37)) + 120|0);
 $39 = $2;
 $40 = ((($39)) + 80|0);
 _fe_sub($36,$38,$40);
 STACKTOP = sp;return;
}
function _fe_sq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $27 = sp + 592|0;
 $28 = sp + 584|0;
 $29 = sp + 576|0;
 $30 = sp + 568|0;
 $31 = sp + 560|0;
 $32 = sp + 552|0;
 $33 = sp + 544|0;
 $34 = sp + 536|0;
 $35 = sp + 528|0;
 $36 = sp + 520|0;
 $37 = sp + 512|0;
 $38 = sp + 504|0;
 $39 = sp + 496|0;
 $40 = sp + 488|0;
 $41 = sp + 480|0;
 $42 = sp + 472|0;
 $43 = sp + 464|0;
 $44 = sp + 456|0;
 $45 = sp + 448|0;
 $46 = sp + 440|0;
 $47 = sp + 432|0;
 $48 = sp + 424|0;
 $49 = sp + 416|0;
 $50 = sp + 408|0;
 $51 = sp + 400|0;
 $52 = sp + 392|0;
 $53 = sp + 384|0;
 $54 = sp + 376|0;
 $55 = sp + 368|0;
 $56 = sp + 360|0;
 $57 = sp + 352|0;
 $58 = sp + 344|0;
 $59 = sp + 336|0;
 $60 = sp + 328|0;
 $61 = sp + 320|0;
 $62 = sp + 312|0;
 $63 = sp + 304|0;
 $64 = sp + 296|0;
 $65 = sp + 288|0;
 $66 = sp + 280|0;
 $67 = sp + 272|0;
 $68 = sp + 264|0;
 $69 = sp + 256|0;
 $70 = sp + 248|0;
 $71 = sp + 240|0;
 $72 = sp + 232|0;
 $73 = sp + 224|0;
 $74 = sp + 216|0;
 $75 = sp + 208|0;
 $76 = sp + 200|0;
 $77 = sp + 192|0;
 $78 = sp + 184|0;
 $79 = sp + 176|0;
 $80 = sp + 168|0;
 $81 = sp + 160|0;
 $82 = sp + 152|0;
 $83 = sp + 144|0;
 $84 = sp + 136|0;
 $85 = sp + 128|0;
 $86 = sp + 120|0;
 $87 = sp + 112|0;
 $88 = sp + 104|0;
 $89 = sp + 96|0;
 $90 = sp + 88|0;
 $91 = sp + 80|0;
 $92 = sp + 72|0;
 $93 = sp + 64|0;
 $94 = sp + 56|0;
 $95 = sp + 48|0;
 $96 = sp + 40|0;
 $97 = sp + 32|0;
 $98 = sp + 24|0;
 $99 = sp + 16|0;
 $100 = sp + 8|0;
 $101 = sp;
 $2 = $0;
 $3 = $1;
 $102 = $3;
 $103 = HEAP32[$102>>2]|0;
 $4 = $103;
 $104 = $3;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $5 = $106;
 $107 = $3;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $6 = $109;
 $110 = $3;
 $111 = ((($110)) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $7 = $112;
 $113 = $3;
 $114 = ((($113)) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 $8 = $115;
 $116 = $3;
 $117 = ((($116)) + 20|0);
 $118 = HEAP32[$117>>2]|0;
 $9 = $118;
 $119 = $3;
 $120 = ((($119)) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $10 = $121;
 $122 = $3;
 $123 = ((($122)) + 28|0);
 $124 = HEAP32[$123>>2]|0;
 $11 = $124;
 $125 = $3;
 $126 = ((($125)) + 32|0);
 $127 = HEAP32[$126>>2]|0;
 $12 = $127;
 $128 = $3;
 $129 = ((($128)) + 36|0);
 $130 = HEAP32[$129>>2]|0;
 $13 = $130;
 $131 = $4;
 $132 = $131<<1;
 $14 = $132;
 $133 = $5;
 $134 = $133<<1;
 $15 = $134;
 $135 = $6;
 $136 = $135<<1;
 $16 = $136;
 $137 = $7;
 $138 = $137<<1;
 $17 = $138;
 $139 = $8;
 $140 = $139<<1;
 $18 = $140;
 $141 = $9;
 $142 = $141<<1;
 $19 = $142;
 $143 = $10;
 $144 = $143<<1;
 $20 = $144;
 $145 = $11;
 $146 = $145<<1;
 $21 = $146;
 $147 = $9;
 $148 = ($147*38)|0;
 $22 = $148;
 $149 = $10;
 $150 = ($149*19)|0;
 $23 = $150;
 $151 = $11;
 $152 = ($151*38)|0;
 $24 = $152;
 $153 = $12;
 $154 = ($153*19)|0;
 $25 = $154;
 $155 = $13;
 $156 = ($155*38)|0;
 $26 = $156;
 $157 = $4;
 $158 = ($157|0)<(0);
 $159 = $158 << 31 >> 31;
 $160 = $4;
 $161 = ($160|0)<(0);
 $162 = $161 << 31 >> 31;
 $163 = (___muldi3(($157|0),($159|0),($160|0),($162|0))|0);
 $164 = (getTempRet0() | 0);
 $165 = $27;
 $166 = $165;
 HEAP32[$166>>2] = $163;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $164;
 $169 = $14;
 $170 = ($169|0)<(0);
 $171 = $170 << 31 >> 31;
 $172 = $5;
 $173 = ($172|0)<(0);
 $174 = $173 << 31 >> 31;
 $175 = (___muldi3(($169|0),($171|0),($172|0),($174|0))|0);
 $176 = (getTempRet0() | 0);
 $177 = $28;
 $178 = $177;
 HEAP32[$178>>2] = $175;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = $176;
 $181 = $14;
 $182 = ($181|0)<(0);
 $183 = $182 << 31 >> 31;
 $184 = $6;
 $185 = ($184|0)<(0);
 $186 = $185 << 31 >> 31;
 $187 = (___muldi3(($181|0),($183|0),($184|0),($186|0))|0);
 $188 = (getTempRet0() | 0);
 $189 = $29;
 $190 = $189;
 HEAP32[$190>>2] = $187;
 $191 = (($189) + 4)|0;
 $192 = $191;
 HEAP32[$192>>2] = $188;
 $193 = $14;
 $194 = ($193|0)<(0);
 $195 = $194 << 31 >> 31;
 $196 = $7;
 $197 = ($196|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (___muldi3(($193|0),($195|0),($196|0),($198|0))|0);
 $200 = (getTempRet0() | 0);
 $201 = $30;
 $202 = $201;
 HEAP32[$202>>2] = $199;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = $200;
 $205 = $14;
 $206 = ($205|0)<(0);
 $207 = $206 << 31 >> 31;
 $208 = $8;
 $209 = ($208|0)<(0);
 $210 = $209 << 31 >> 31;
 $211 = (___muldi3(($205|0),($207|0),($208|0),($210|0))|0);
 $212 = (getTempRet0() | 0);
 $213 = $31;
 $214 = $213;
 HEAP32[$214>>2] = $211;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $212;
 $217 = $14;
 $218 = ($217|0)<(0);
 $219 = $218 << 31 >> 31;
 $220 = $9;
 $221 = ($220|0)<(0);
 $222 = $221 << 31 >> 31;
 $223 = (___muldi3(($217|0),($219|0),($220|0),($222|0))|0);
 $224 = (getTempRet0() | 0);
 $225 = $32;
 $226 = $225;
 HEAP32[$226>>2] = $223;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $224;
 $229 = $14;
 $230 = ($229|0)<(0);
 $231 = $230 << 31 >> 31;
 $232 = $10;
 $233 = ($232|0)<(0);
 $234 = $233 << 31 >> 31;
 $235 = (___muldi3(($229|0),($231|0),($232|0),($234|0))|0);
 $236 = (getTempRet0() | 0);
 $237 = $33;
 $238 = $237;
 HEAP32[$238>>2] = $235;
 $239 = (($237) + 4)|0;
 $240 = $239;
 HEAP32[$240>>2] = $236;
 $241 = $14;
 $242 = ($241|0)<(0);
 $243 = $242 << 31 >> 31;
 $244 = $11;
 $245 = ($244|0)<(0);
 $246 = $245 << 31 >> 31;
 $247 = (___muldi3(($241|0),($243|0),($244|0),($246|0))|0);
 $248 = (getTempRet0() | 0);
 $249 = $34;
 $250 = $249;
 HEAP32[$250>>2] = $247;
 $251 = (($249) + 4)|0;
 $252 = $251;
 HEAP32[$252>>2] = $248;
 $253 = $14;
 $254 = ($253|0)<(0);
 $255 = $254 << 31 >> 31;
 $256 = $12;
 $257 = ($256|0)<(0);
 $258 = $257 << 31 >> 31;
 $259 = (___muldi3(($253|0),($255|0),($256|0),($258|0))|0);
 $260 = (getTempRet0() | 0);
 $261 = $35;
 $262 = $261;
 HEAP32[$262>>2] = $259;
 $263 = (($261) + 4)|0;
 $264 = $263;
 HEAP32[$264>>2] = $260;
 $265 = $14;
 $266 = ($265|0)<(0);
 $267 = $266 << 31 >> 31;
 $268 = $13;
 $269 = ($268|0)<(0);
 $270 = $269 << 31 >> 31;
 $271 = (___muldi3(($265|0),($267|0),($268|0),($270|0))|0);
 $272 = (getTempRet0() | 0);
 $273 = $36;
 $274 = $273;
 HEAP32[$274>>2] = $271;
 $275 = (($273) + 4)|0;
 $276 = $275;
 HEAP32[$276>>2] = $272;
 $277 = $15;
 $278 = ($277|0)<(0);
 $279 = $278 << 31 >> 31;
 $280 = $5;
 $281 = ($280|0)<(0);
 $282 = $281 << 31 >> 31;
 $283 = (___muldi3(($277|0),($279|0),($280|0),($282|0))|0);
 $284 = (getTempRet0() | 0);
 $285 = $37;
 $286 = $285;
 HEAP32[$286>>2] = $283;
 $287 = (($285) + 4)|0;
 $288 = $287;
 HEAP32[$288>>2] = $284;
 $289 = $15;
 $290 = ($289|0)<(0);
 $291 = $290 << 31 >> 31;
 $292 = $6;
 $293 = ($292|0)<(0);
 $294 = $293 << 31 >> 31;
 $295 = (___muldi3(($289|0),($291|0),($292|0),($294|0))|0);
 $296 = (getTempRet0() | 0);
 $297 = $38;
 $298 = $297;
 HEAP32[$298>>2] = $295;
 $299 = (($297) + 4)|0;
 $300 = $299;
 HEAP32[$300>>2] = $296;
 $301 = $15;
 $302 = ($301|0)<(0);
 $303 = $302 << 31 >> 31;
 $304 = $17;
 $305 = ($304|0)<(0);
 $306 = $305 << 31 >> 31;
 $307 = (___muldi3(($301|0),($303|0),($304|0),($306|0))|0);
 $308 = (getTempRet0() | 0);
 $309 = $39;
 $310 = $309;
 HEAP32[$310>>2] = $307;
 $311 = (($309) + 4)|0;
 $312 = $311;
 HEAP32[$312>>2] = $308;
 $313 = $15;
 $314 = ($313|0)<(0);
 $315 = $314 << 31 >> 31;
 $316 = $8;
 $317 = ($316|0)<(0);
 $318 = $317 << 31 >> 31;
 $319 = (___muldi3(($313|0),($315|0),($316|0),($318|0))|0);
 $320 = (getTempRet0() | 0);
 $321 = $40;
 $322 = $321;
 HEAP32[$322>>2] = $319;
 $323 = (($321) + 4)|0;
 $324 = $323;
 HEAP32[$324>>2] = $320;
 $325 = $15;
 $326 = ($325|0)<(0);
 $327 = $326 << 31 >> 31;
 $328 = $19;
 $329 = ($328|0)<(0);
 $330 = $329 << 31 >> 31;
 $331 = (___muldi3(($325|0),($327|0),($328|0),($330|0))|0);
 $332 = (getTempRet0() | 0);
 $333 = $41;
 $334 = $333;
 HEAP32[$334>>2] = $331;
 $335 = (($333) + 4)|0;
 $336 = $335;
 HEAP32[$336>>2] = $332;
 $337 = $15;
 $338 = ($337|0)<(0);
 $339 = $338 << 31 >> 31;
 $340 = $10;
 $341 = ($340|0)<(0);
 $342 = $341 << 31 >> 31;
 $343 = (___muldi3(($337|0),($339|0),($340|0),($342|0))|0);
 $344 = (getTempRet0() | 0);
 $345 = $42;
 $346 = $345;
 HEAP32[$346>>2] = $343;
 $347 = (($345) + 4)|0;
 $348 = $347;
 HEAP32[$348>>2] = $344;
 $349 = $15;
 $350 = ($349|0)<(0);
 $351 = $350 << 31 >> 31;
 $352 = $21;
 $353 = ($352|0)<(0);
 $354 = $353 << 31 >> 31;
 $355 = (___muldi3(($349|0),($351|0),($352|0),($354|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = $43;
 $358 = $357;
 HEAP32[$358>>2] = $355;
 $359 = (($357) + 4)|0;
 $360 = $359;
 HEAP32[$360>>2] = $356;
 $361 = $15;
 $362 = ($361|0)<(0);
 $363 = $362 << 31 >> 31;
 $364 = $12;
 $365 = ($364|0)<(0);
 $366 = $365 << 31 >> 31;
 $367 = (___muldi3(($361|0),($363|0),($364|0),($366|0))|0);
 $368 = (getTempRet0() | 0);
 $369 = $44;
 $370 = $369;
 HEAP32[$370>>2] = $367;
 $371 = (($369) + 4)|0;
 $372 = $371;
 HEAP32[$372>>2] = $368;
 $373 = $15;
 $374 = ($373|0)<(0);
 $375 = $374 << 31 >> 31;
 $376 = $26;
 $377 = ($376|0)<(0);
 $378 = $377 << 31 >> 31;
 $379 = (___muldi3(($373|0),($375|0),($376|0),($378|0))|0);
 $380 = (getTempRet0() | 0);
 $381 = $45;
 $382 = $381;
 HEAP32[$382>>2] = $379;
 $383 = (($381) + 4)|0;
 $384 = $383;
 HEAP32[$384>>2] = $380;
 $385 = $6;
 $386 = ($385|0)<(0);
 $387 = $386 << 31 >> 31;
 $388 = $6;
 $389 = ($388|0)<(0);
 $390 = $389 << 31 >> 31;
 $391 = (___muldi3(($385|0),($387|0),($388|0),($390|0))|0);
 $392 = (getTempRet0() | 0);
 $393 = $46;
 $394 = $393;
 HEAP32[$394>>2] = $391;
 $395 = (($393) + 4)|0;
 $396 = $395;
 HEAP32[$396>>2] = $392;
 $397 = $16;
 $398 = ($397|0)<(0);
 $399 = $398 << 31 >> 31;
 $400 = $7;
 $401 = ($400|0)<(0);
 $402 = $401 << 31 >> 31;
 $403 = (___muldi3(($397|0),($399|0),($400|0),($402|0))|0);
 $404 = (getTempRet0() | 0);
 $405 = $47;
 $406 = $405;
 HEAP32[$406>>2] = $403;
 $407 = (($405) + 4)|0;
 $408 = $407;
 HEAP32[$408>>2] = $404;
 $409 = $16;
 $410 = ($409|0)<(0);
 $411 = $410 << 31 >> 31;
 $412 = $8;
 $413 = ($412|0)<(0);
 $414 = $413 << 31 >> 31;
 $415 = (___muldi3(($409|0),($411|0),($412|0),($414|0))|0);
 $416 = (getTempRet0() | 0);
 $417 = $48;
 $418 = $417;
 HEAP32[$418>>2] = $415;
 $419 = (($417) + 4)|0;
 $420 = $419;
 HEAP32[$420>>2] = $416;
 $421 = $16;
 $422 = ($421|0)<(0);
 $423 = $422 << 31 >> 31;
 $424 = $9;
 $425 = ($424|0)<(0);
 $426 = $425 << 31 >> 31;
 $427 = (___muldi3(($421|0),($423|0),($424|0),($426|0))|0);
 $428 = (getTempRet0() | 0);
 $429 = $49;
 $430 = $429;
 HEAP32[$430>>2] = $427;
 $431 = (($429) + 4)|0;
 $432 = $431;
 HEAP32[$432>>2] = $428;
 $433 = $16;
 $434 = ($433|0)<(0);
 $435 = $434 << 31 >> 31;
 $436 = $10;
 $437 = ($436|0)<(0);
 $438 = $437 << 31 >> 31;
 $439 = (___muldi3(($433|0),($435|0),($436|0),($438|0))|0);
 $440 = (getTempRet0() | 0);
 $441 = $50;
 $442 = $441;
 HEAP32[$442>>2] = $439;
 $443 = (($441) + 4)|0;
 $444 = $443;
 HEAP32[$444>>2] = $440;
 $445 = $16;
 $446 = ($445|0)<(0);
 $447 = $446 << 31 >> 31;
 $448 = $11;
 $449 = ($448|0)<(0);
 $450 = $449 << 31 >> 31;
 $451 = (___muldi3(($445|0),($447|0),($448|0),($450|0))|0);
 $452 = (getTempRet0() | 0);
 $453 = $51;
 $454 = $453;
 HEAP32[$454>>2] = $451;
 $455 = (($453) + 4)|0;
 $456 = $455;
 HEAP32[$456>>2] = $452;
 $457 = $16;
 $458 = ($457|0)<(0);
 $459 = $458 << 31 >> 31;
 $460 = $25;
 $461 = ($460|0)<(0);
 $462 = $461 << 31 >> 31;
 $463 = (___muldi3(($457|0),($459|0),($460|0),($462|0))|0);
 $464 = (getTempRet0() | 0);
 $465 = $52;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $6;
 $470 = ($469|0)<(0);
 $471 = $470 << 31 >> 31;
 $472 = $26;
 $473 = ($472|0)<(0);
 $474 = $473 << 31 >> 31;
 $475 = (___muldi3(($469|0),($471|0),($472|0),($474|0))|0);
 $476 = (getTempRet0() | 0);
 $477 = $53;
 $478 = $477;
 HEAP32[$478>>2] = $475;
 $479 = (($477) + 4)|0;
 $480 = $479;
 HEAP32[$480>>2] = $476;
 $481 = $17;
 $482 = ($481|0)<(0);
 $483 = $482 << 31 >> 31;
 $484 = $7;
 $485 = ($484|0)<(0);
 $486 = $485 << 31 >> 31;
 $487 = (___muldi3(($481|0),($483|0),($484|0),($486|0))|0);
 $488 = (getTempRet0() | 0);
 $489 = $54;
 $490 = $489;
 HEAP32[$490>>2] = $487;
 $491 = (($489) + 4)|0;
 $492 = $491;
 HEAP32[$492>>2] = $488;
 $493 = $17;
 $494 = ($493|0)<(0);
 $495 = $494 << 31 >> 31;
 $496 = $8;
 $497 = ($496|0)<(0);
 $498 = $497 << 31 >> 31;
 $499 = (___muldi3(($493|0),($495|0),($496|0),($498|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = $55;
 $502 = $501;
 HEAP32[$502>>2] = $499;
 $503 = (($501) + 4)|0;
 $504 = $503;
 HEAP32[$504>>2] = $500;
 $505 = $17;
 $506 = ($505|0)<(0);
 $507 = $506 << 31 >> 31;
 $508 = $19;
 $509 = ($508|0)<(0);
 $510 = $509 << 31 >> 31;
 $511 = (___muldi3(($505|0),($507|0),($508|0),($510|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = $56;
 $514 = $513;
 HEAP32[$514>>2] = $511;
 $515 = (($513) + 4)|0;
 $516 = $515;
 HEAP32[$516>>2] = $512;
 $517 = $17;
 $518 = ($517|0)<(0);
 $519 = $518 << 31 >> 31;
 $520 = $10;
 $521 = ($520|0)<(0);
 $522 = $521 << 31 >> 31;
 $523 = (___muldi3(($517|0),($519|0),($520|0),($522|0))|0);
 $524 = (getTempRet0() | 0);
 $525 = $57;
 $526 = $525;
 HEAP32[$526>>2] = $523;
 $527 = (($525) + 4)|0;
 $528 = $527;
 HEAP32[$528>>2] = $524;
 $529 = $17;
 $530 = ($529|0)<(0);
 $531 = $530 << 31 >> 31;
 $532 = $24;
 $533 = ($532|0)<(0);
 $534 = $533 << 31 >> 31;
 $535 = (___muldi3(($529|0),($531|0),($532|0),($534|0))|0);
 $536 = (getTempRet0() | 0);
 $537 = $58;
 $538 = $537;
 HEAP32[$538>>2] = $535;
 $539 = (($537) + 4)|0;
 $540 = $539;
 HEAP32[$540>>2] = $536;
 $541 = $17;
 $542 = ($541|0)<(0);
 $543 = $542 << 31 >> 31;
 $544 = $25;
 $545 = ($544|0)<(0);
 $546 = $545 << 31 >> 31;
 $547 = (___muldi3(($541|0),($543|0),($544|0),($546|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = $59;
 $550 = $549;
 HEAP32[$550>>2] = $547;
 $551 = (($549) + 4)|0;
 $552 = $551;
 HEAP32[$552>>2] = $548;
 $553 = $17;
 $554 = ($553|0)<(0);
 $555 = $554 << 31 >> 31;
 $556 = $26;
 $557 = ($556|0)<(0);
 $558 = $557 << 31 >> 31;
 $559 = (___muldi3(($553|0),($555|0),($556|0),($558|0))|0);
 $560 = (getTempRet0() | 0);
 $561 = $60;
 $562 = $561;
 HEAP32[$562>>2] = $559;
 $563 = (($561) + 4)|0;
 $564 = $563;
 HEAP32[$564>>2] = $560;
 $565 = $8;
 $566 = ($565|0)<(0);
 $567 = $566 << 31 >> 31;
 $568 = $8;
 $569 = ($568|0)<(0);
 $570 = $569 << 31 >> 31;
 $571 = (___muldi3(($565|0),($567|0),($568|0),($570|0))|0);
 $572 = (getTempRet0() | 0);
 $573 = $61;
 $574 = $573;
 HEAP32[$574>>2] = $571;
 $575 = (($573) + 4)|0;
 $576 = $575;
 HEAP32[$576>>2] = $572;
 $577 = $18;
 $578 = ($577|0)<(0);
 $579 = $578 << 31 >> 31;
 $580 = $9;
 $581 = ($580|0)<(0);
 $582 = $581 << 31 >> 31;
 $583 = (___muldi3(($577|0),($579|0),($580|0),($582|0))|0);
 $584 = (getTempRet0() | 0);
 $585 = $62;
 $586 = $585;
 HEAP32[$586>>2] = $583;
 $587 = (($585) + 4)|0;
 $588 = $587;
 HEAP32[$588>>2] = $584;
 $589 = $18;
 $590 = ($589|0)<(0);
 $591 = $590 << 31 >> 31;
 $592 = $23;
 $593 = ($592|0)<(0);
 $594 = $593 << 31 >> 31;
 $595 = (___muldi3(($589|0),($591|0),($592|0),($594|0))|0);
 $596 = (getTempRet0() | 0);
 $597 = $63;
 $598 = $597;
 HEAP32[$598>>2] = $595;
 $599 = (($597) + 4)|0;
 $600 = $599;
 HEAP32[$600>>2] = $596;
 $601 = $8;
 $602 = ($601|0)<(0);
 $603 = $602 << 31 >> 31;
 $604 = $24;
 $605 = ($604|0)<(0);
 $606 = $605 << 31 >> 31;
 $607 = (___muldi3(($601|0),($603|0),($604|0),($606|0))|0);
 $608 = (getTempRet0() | 0);
 $609 = $64;
 $610 = $609;
 HEAP32[$610>>2] = $607;
 $611 = (($609) + 4)|0;
 $612 = $611;
 HEAP32[$612>>2] = $608;
 $613 = $18;
 $614 = ($613|0)<(0);
 $615 = $614 << 31 >> 31;
 $616 = $25;
 $617 = ($616|0)<(0);
 $618 = $617 << 31 >> 31;
 $619 = (___muldi3(($613|0),($615|0),($616|0),($618|0))|0);
 $620 = (getTempRet0() | 0);
 $621 = $65;
 $622 = $621;
 HEAP32[$622>>2] = $619;
 $623 = (($621) + 4)|0;
 $624 = $623;
 HEAP32[$624>>2] = $620;
 $625 = $8;
 $626 = ($625|0)<(0);
 $627 = $626 << 31 >> 31;
 $628 = $26;
 $629 = ($628|0)<(0);
 $630 = $629 << 31 >> 31;
 $631 = (___muldi3(($625|0),($627|0),($628|0),($630|0))|0);
 $632 = (getTempRet0() | 0);
 $633 = $66;
 $634 = $633;
 HEAP32[$634>>2] = $631;
 $635 = (($633) + 4)|0;
 $636 = $635;
 HEAP32[$636>>2] = $632;
 $637 = $9;
 $638 = ($637|0)<(0);
 $639 = $638 << 31 >> 31;
 $640 = $22;
 $641 = ($640|0)<(0);
 $642 = $641 << 31 >> 31;
 $643 = (___muldi3(($637|0),($639|0),($640|0),($642|0))|0);
 $644 = (getTempRet0() | 0);
 $645 = $67;
 $646 = $645;
 HEAP32[$646>>2] = $643;
 $647 = (($645) + 4)|0;
 $648 = $647;
 HEAP32[$648>>2] = $644;
 $649 = $19;
 $650 = ($649|0)<(0);
 $651 = $650 << 31 >> 31;
 $652 = $23;
 $653 = ($652|0)<(0);
 $654 = $653 << 31 >> 31;
 $655 = (___muldi3(($649|0),($651|0),($652|0),($654|0))|0);
 $656 = (getTempRet0() | 0);
 $657 = $68;
 $658 = $657;
 HEAP32[$658>>2] = $655;
 $659 = (($657) + 4)|0;
 $660 = $659;
 HEAP32[$660>>2] = $656;
 $661 = $19;
 $662 = ($661|0)<(0);
 $663 = $662 << 31 >> 31;
 $664 = $24;
 $665 = ($664|0)<(0);
 $666 = $665 << 31 >> 31;
 $667 = (___muldi3(($661|0),($663|0),($664|0),($666|0))|0);
 $668 = (getTempRet0() | 0);
 $669 = $69;
 $670 = $669;
 HEAP32[$670>>2] = $667;
 $671 = (($669) + 4)|0;
 $672 = $671;
 HEAP32[$672>>2] = $668;
 $673 = $19;
 $674 = ($673|0)<(0);
 $675 = $674 << 31 >> 31;
 $676 = $25;
 $677 = ($676|0)<(0);
 $678 = $677 << 31 >> 31;
 $679 = (___muldi3(($673|0),($675|0),($676|0),($678|0))|0);
 $680 = (getTempRet0() | 0);
 $681 = $70;
 $682 = $681;
 HEAP32[$682>>2] = $679;
 $683 = (($681) + 4)|0;
 $684 = $683;
 HEAP32[$684>>2] = $680;
 $685 = $19;
 $686 = ($685|0)<(0);
 $687 = $686 << 31 >> 31;
 $688 = $26;
 $689 = ($688|0)<(0);
 $690 = $689 << 31 >> 31;
 $691 = (___muldi3(($685|0),($687|0),($688|0),($690|0))|0);
 $692 = (getTempRet0() | 0);
 $693 = $71;
 $694 = $693;
 HEAP32[$694>>2] = $691;
 $695 = (($693) + 4)|0;
 $696 = $695;
 HEAP32[$696>>2] = $692;
 $697 = $10;
 $698 = ($697|0)<(0);
 $699 = $698 << 31 >> 31;
 $700 = $23;
 $701 = ($700|0)<(0);
 $702 = $701 << 31 >> 31;
 $703 = (___muldi3(($697|0),($699|0),($700|0),($702|0))|0);
 $704 = (getTempRet0() | 0);
 $705 = $72;
 $706 = $705;
 HEAP32[$706>>2] = $703;
 $707 = (($705) + 4)|0;
 $708 = $707;
 HEAP32[$708>>2] = $704;
 $709 = $10;
 $710 = ($709|0)<(0);
 $711 = $710 << 31 >> 31;
 $712 = $24;
 $713 = ($712|0)<(0);
 $714 = $713 << 31 >> 31;
 $715 = (___muldi3(($709|0),($711|0),($712|0),($714|0))|0);
 $716 = (getTempRet0() | 0);
 $717 = $73;
 $718 = $717;
 HEAP32[$718>>2] = $715;
 $719 = (($717) + 4)|0;
 $720 = $719;
 HEAP32[$720>>2] = $716;
 $721 = $20;
 $722 = ($721|0)<(0);
 $723 = $722 << 31 >> 31;
 $724 = $25;
 $725 = ($724|0)<(0);
 $726 = $725 << 31 >> 31;
 $727 = (___muldi3(($721|0),($723|0),($724|0),($726|0))|0);
 $728 = (getTempRet0() | 0);
 $729 = $74;
 $730 = $729;
 HEAP32[$730>>2] = $727;
 $731 = (($729) + 4)|0;
 $732 = $731;
 HEAP32[$732>>2] = $728;
 $733 = $10;
 $734 = ($733|0)<(0);
 $735 = $734 << 31 >> 31;
 $736 = $26;
 $737 = ($736|0)<(0);
 $738 = $737 << 31 >> 31;
 $739 = (___muldi3(($733|0),($735|0),($736|0),($738|0))|0);
 $740 = (getTempRet0() | 0);
 $741 = $75;
 $742 = $741;
 HEAP32[$742>>2] = $739;
 $743 = (($741) + 4)|0;
 $744 = $743;
 HEAP32[$744>>2] = $740;
 $745 = $11;
 $746 = ($745|0)<(0);
 $747 = $746 << 31 >> 31;
 $748 = $24;
 $749 = ($748|0)<(0);
 $750 = $749 << 31 >> 31;
 $751 = (___muldi3(($745|0),($747|0),($748|0),($750|0))|0);
 $752 = (getTempRet0() | 0);
 $753 = $76;
 $754 = $753;
 HEAP32[$754>>2] = $751;
 $755 = (($753) + 4)|0;
 $756 = $755;
 HEAP32[$756>>2] = $752;
 $757 = $21;
 $758 = ($757|0)<(0);
 $759 = $758 << 31 >> 31;
 $760 = $25;
 $761 = ($760|0)<(0);
 $762 = $761 << 31 >> 31;
 $763 = (___muldi3(($757|0),($759|0),($760|0),($762|0))|0);
 $764 = (getTempRet0() | 0);
 $765 = $77;
 $766 = $765;
 HEAP32[$766>>2] = $763;
 $767 = (($765) + 4)|0;
 $768 = $767;
 HEAP32[$768>>2] = $764;
 $769 = $21;
 $770 = ($769|0)<(0);
 $771 = $770 << 31 >> 31;
 $772 = $26;
 $773 = ($772|0)<(0);
 $774 = $773 << 31 >> 31;
 $775 = (___muldi3(($769|0),($771|0),($772|0),($774|0))|0);
 $776 = (getTempRet0() | 0);
 $777 = $78;
 $778 = $777;
 HEAP32[$778>>2] = $775;
 $779 = (($777) + 4)|0;
 $780 = $779;
 HEAP32[$780>>2] = $776;
 $781 = $12;
 $782 = ($781|0)<(0);
 $783 = $782 << 31 >> 31;
 $784 = $25;
 $785 = ($784|0)<(0);
 $786 = $785 << 31 >> 31;
 $787 = (___muldi3(($781|0),($783|0),($784|0),($786|0))|0);
 $788 = (getTempRet0() | 0);
 $789 = $79;
 $790 = $789;
 HEAP32[$790>>2] = $787;
 $791 = (($789) + 4)|0;
 $792 = $791;
 HEAP32[$792>>2] = $788;
 $793 = $12;
 $794 = ($793|0)<(0);
 $795 = $794 << 31 >> 31;
 $796 = $26;
 $797 = ($796|0)<(0);
 $798 = $797 << 31 >> 31;
 $799 = (___muldi3(($793|0),($795|0),($796|0),($798|0))|0);
 $800 = (getTempRet0() | 0);
 $801 = $80;
 $802 = $801;
 HEAP32[$802>>2] = $799;
 $803 = (($801) + 4)|0;
 $804 = $803;
 HEAP32[$804>>2] = $800;
 $805 = $13;
 $806 = ($805|0)<(0);
 $807 = $806 << 31 >> 31;
 $808 = $26;
 $809 = ($808|0)<(0);
 $810 = $809 << 31 >> 31;
 $811 = (___muldi3(($805|0),($807|0),($808|0),($810|0))|0);
 $812 = (getTempRet0() | 0);
 $813 = $81;
 $814 = $813;
 HEAP32[$814>>2] = $811;
 $815 = (($813) + 4)|0;
 $816 = $815;
 HEAP32[$816>>2] = $812;
 $817 = $27;
 $818 = $817;
 $819 = HEAP32[$818>>2]|0;
 $820 = (($817) + 4)|0;
 $821 = $820;
 $822 = HEAP32[$821>>2]|0;
 $823 = $45;
 $824 = $823;
 $825 = HEAP32[$824>>2]|0;
 $826 = (($823) + 4)|0;
 $827 = $826;
 $828 = HEAP32[$827>>2]|0;
 $829 = (_i64Add(($819|0),($822|0),($825|0),($828|0))|0);
 $830 = (getTempRet0() | 0);
 $831 = $52;
 $832 = $831;
 $833 = HEAP32[$832>>2]|0;
 $834 = (($831) + 4)|0;
 $835 = $834;
 $836 = HEAP32[$835>>2]|0;
 $837 = (_i64Add(($829|0),($830|0),($833|0),($836|0))|0);
 $838 = (getTempRet0() | 0);
 $839 = $58;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = (_i64Add(($837|0),($838|0),($841|0),($844|0))|0);
 $846 = (getTempRet0() | 0);
 $847 = $63;
 $848 = $847;
 $849 = HEAP32[$848>>2]|0;
 $850 = (($847) + 4)|0;
 $851 = $850;
 $852 = HEAP32[$851>>2]|0;
 $853 = (_i64Add(($845|0),($846|0),($849|0),($852|0))|0);
 $854 = (getTempRet0() | 0);
 $855 = $67;
 $856 = $855;
 $857 = HEAP32[$856>>2]|0;
 $858 = (($855) + 4)|0;
 $859 = $858;
 $860 = HEAP32[$859>>2]|0;
 $861 = (_i64Add(($853|0),($854|0),($857|0),($860|0))|0);
 $862 = (getTempRet0() | 0);
 $863 = $82;
 $864 = $863;
 HEAP32[$864>>2] = $861;
 $865 = (($863) + 4)|0;
 $866 = $865;
 HEAP32[$866>>2] = $862;
 $867 = $28;
 $868 = $867;
 $869 = HEAP32[$868>>2]|0;
 $870 = (($867) + 4)|0;
 $871 = $870;
 $872 = HEAP32[$871>>2]|0;
 $873 = $53;
 $874 = $873;
 $875 = HEAP32[$874>>2]|0;
 $876 = (($873) + 4)|0;
 $877 = $876;
 $878 = HEAP32[$877>>2]|0;
 $879 = (_i64Add(($869|0),($872|0),($875|0),($878|0))|0);
 $880 = (getTempRet0() | 0);
 $881 = $59;
 $882 = $881;
 $883 = HEAP32[$882>>2]|0;
 $884 = (($881) + 4)|0;
 $885 = $884;
 $886 = HEAP32[$885>>2]|0;
 $887 = (_i64Add(($879|0),($880|0),($883|0),($886|0))|0);
 $888 = (getTempRet0() | 0);
 $889 = $64;
 $890 = $889;
 $891 = HEAP32[$890>>2]|0;
 $892 = (($889) + 4)|0;
 $893 = $892;
 $894 = HEAP32[$893>>2]|0;
 $895 = (_i64Add(($887|0),($888|0),($891|0),($894|0))|0);
 $896 = (getTempRet0() | 0);
 $897 = $68;
 $898 = $897;
 $899 = HEAP32[$898>>2]|0;
 $900 = (($897) + 4)|0;
 $901 = $900;
 $902 = HEAP32[$901>>2]|0;
 $903 = (_i64Add(($895|0),($896|0),($899|0),($902|0))|0);
 $904 = (getTempRet0() | 0);
 $905 = $83;
 $906 = $905;
 HEAP32[$906>>2] = $903;
 $907 = (($905) + 4)|0;
 $908 = $907;
 HEAP32[$908>>2] = $904;
 $909 = $29;
 $910 = $909;
 $911 = HEAP32[$910>>2]|0;
 $912 = (($909) + 4)|0;
 $913 = $912;
 $914 = HEAP32[$913>>2]|0;
 $915 = $37;
 $916 = $915;
 $917 = HEAP32[$916>>2]|0;
 $918 = (($915) + 4)|0;
 $919 = $918;
 $920 = HEAP32[$919>>2]|0;
 $921 = (_i64Add(($911|0),($914|0),($917|0),($920|0))|0);
 $922 = (getTempRet0() | 0);
 $923 = $60;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (_i64Add(($921|0),($922|0),($925|0),($928|0))|0);
 $930 = (getTempRet0() | 0);
 $931 = $65;
 $932 = $931;
 $933 = HEAP32[$932>>2]|0;
 $934 = (($931) + 4)|0;
 $935 = $934;
 $936 = HEAP32[$935>>2]|0;
 $937 = (_i64Add(($929|0),($930|0),($933|0),($936|0))|0);
 $938 = (getTempRet0() | 0);
 $939 = $69;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (_i64Add(($937|0),($938|0),($941|0),($944|0))|0);
 $946 = (getTempRet0() | 0);
 $947 = $72;
 $948 = $947;
 $949 = HEAP32[$948>>2]|0;
 $950 = (($947) + 4)|0;
 $951 = $950;
 $952 = HEAP32[$951>>2]|0;
 $953 = (_i64Add(($945|0),($946|0),($949|0),($952|0))|0);
 $954 = (getTempRet0() | 0);
 $955 = $84;
 $956 = $955;
 HEAP32[$956>>2] = $953;
 $957 = (($955) + 4)|0;
 $958 = $957;
 HEAP32[$958>>2] = $954;
 $959 = $30;
 $960 = $959;
 $961 = HEAP32[$960>>2]|0;
 $962 = (($959) + 4)|0;
 $963 = $962;
 $964 = HEAP32[$963>>2]|0;
 $965 = $38;
 $966 = $965;
 $967 = HEAP32[$966>>2]|0;
 $968 = (($965) + 4)|0;
 $969 = $968;
 $970 = HEAP32[$969>>2]|0;
 $971 = (_i64Add(($961|0),($964|0),($967|0),($970|0))|0);
 $972 = (getTempRet0() | 0);
 $973 = $66;
 $974 = $973;
 $975 = HEAP32[$974>>2]|0;
 $976 = (($973) + 4)|0;
 $977 = $976;
 $978 = HEAP32[$977>>2]|0;
 $979 = (_i64Add(($971|0),($972|0),($975|0),($978|0))|0);
 $980 = (getTempRet0() | 0);
 $981 = $70;
 $982 = $981;
 $983 = HEAP32[$982>>2]|0;
 $984 = (($981) + 4)|0;
 $985 = $984;
 $986 = HEAP32[$985>>2]|0;
 $987 = (_i64Add(($979|0),($980|0),($983|0),($986|0))|0);
 $988 = (getTempRet0() | 0);
 $989 = $73;
 $990 = $989;
 $991 = HEAP32[$990>>2]|0;
 $992 = (($989) + 4)|0;
 $993 = $992;
 $994 = HEAP32[$993>>2]|0;
 $995 = (_i64Add(($987|0),($988|0),($991|0),($994|0))|0);
 $996 = (getTempRet0() | 0);
 $997 = $85;
 $998 = $997;
 HEAP32[$998>>2] = $995;
 $999 = (($997) + 4)|0;
 $1000 = $999;
 HEAP32[$1000>>2] = $996;
 $1001 = $31;
 $1002 = $1001;
 $1003 = HEAP32[$1002>>2]|0;
 $1004 = (($1001) + 4)|0;
 $1005 = $1004;
 $1006 = HEAP32[$1005>>2]|0;
 $1007 = $39;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1007) + 4)|0;
 $1011 = $1010;
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (_i64Add(($1003|0),($1006|0),($1009|0),($1012|0))|0);
 $1014 = (getTempRet0() | 0);
 $1015 = $46;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = (($1015) + 4)|0;
 $1019 = $1018;
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (_i64Add(($1013|0),($1014|0),($1017|0),($1020|0))|0);
 $1022 = (getTempRet0() | 0);
 $1023 = $71;
 $1024 = $1023;
 $1025 = HEAP32[$1024>>2]|0;
 $1026 = (($1023) + 4)|0;
 $1027 = $1026;
 $1028 = HEAP32[$1027>>2]|0;
 $1029 = (_i64Add(($1021|0),($1022|0),($1025|0),($1028|0))|0);
 $1030 = (getTempRet0() | 0);
 $1031 = $74;
 $1032 = $1031;
 $1033 = HEAP32[$1032>>2]|0;
 $1034 = (($1031) + 4)|0;
 $1035 = $1034;
 $1036 = HEAP32[$1035>>2]|0;
 $1037 = (_i64Add(($1029|0),($1030|0),($1033|0),($1036|0))|0);
 $1038 = (getTempRet0() | 0);
 $1039 = $76;
 $1040 = $1039;
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = (($1039) + 4)|0;
 $1043 = $1042;
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = (_i64Add(($1037|0),($1038|0),($1041|0),($1044|0))|0);
 $1046 = (getTempRet0() | 0);
 $1047 = $86;
 $1048 = $1047;
 HEAP32[$1048>>2] = $1045;
 $1049 = (($1047) + 4)|0;
 $1050 = $1049;
 HEAP32[$1050>>2] = $1046;
 $1051 = $32;
 $1052 = $1051;
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + 4)|0;
 $1055 = $1054;
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = $40;
 $1058 = $1057;
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($1057) + 4)|0;
 $1061 = $1060;
 $1062 = HEAP32[$1061>>2]|0;
 $1063 = (_i64Add(($1053|0),($1056|0),($1059|0),($1062|0))|0);
 $1064 = (getTempRet0() | 0);
 $1065 = $47;
 $1066 = $1065;
 $1067 = HEAP32[$1066>>2]|0;
 $1068 = (($1065) + 4)|0;
 $1069 = $1068;
 $1070 = HEAP32[$1069>>2]|0;
 $1071 = (_i64Add(($1063|0),($1064|0),($1067|0),($1070|0))|0);
 $1072 = (getTempRet0() | 0);
 $1073 = $75;
 $1074 = $1073;
 $1075 = HEAP32[$1074>>2]|0;
 $1076 = (($1073) + 4)|0;
 $1077 = $1076;
 $1078 = HEAP32[$1077>>2]|0;
 $1079 = (_i64Add(($1071|0),($1072|0),($1075|0),($1078|0))|0);
 $1080 = (getTempRet0() | 0);
 $1081 = $77;
 $1082 = $1081;
 $1083 = HEAP32[$1082>>2]|0;
 $1084 = (($1081) + 4)|0;
 $1085 = $1084;
 $1086 = HEAP32[$1085>>2]|0;
 $1087 = (_i64Add(($1079|0),($1080|0),($1083|0),($1086|0))|0);
 $1088 = (getTempRet0() | 0);
 $1089 = $87;
 $1090 = $1089;
 HEAP32[$1090>>2] = $1087;
 $1091 = (($1089) + 4)|0;
 $1092 = $1091;
 HEAP32[$1092>>2] = $1088;
 $1093 = $33;
 $1094 = $1093;
 $1095 = HEAP32[$1094>>2]|0;
 $1096 = (($1093) + 4)|0;
 $1097 = $1096;
 $1098 = HEAP32[$1097>>2]|0;
 $1099 = $41;
 $1100 = $1099;
 $1101 = HEAP32[$1100>>2]|0;
 $1102 = (($1099) + 4)|0;
 $1103 = $1102;
 $1104 = HEAP32[$1103>>2]|0;
 $1105 = (_i64Add(($1095|0),($1098|0),($1101|0),($1104|0))|0);
 $1106 = (getTempRet0() | 0);
 $1107 = $48;
 $1108 = $1107;
 $1109 = HEAP32[$1108>>2]|0;
 $1110 = (($1107) + 4)|0;
 $1111 = $1110;
 $1112 = HEAP32[$1111>>2]|0;
 $1113 = (_i64Add(($1105|0),($1106|0),($1109|0),($1112|0))|0);
 $1114 = (getTempRet0() | 0);
 $1115 = $54;
 $1116 = $1115;
 $1117 = HEAP32[$1116>>2]|0;
 $1118 = (($1115) + 4)|0;
 $1119 = $1118;
 $1120 = HEAP32[$1119>>2]|0;
 $1121 = (_i64Add(($1113|0),($1114|0),($1117|0),($1120|0))|0);
 $1122 = (getTempRet0() | 0);
 $1123 = $78;
 $1124 = $1123;
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = (($1123) + 4)|0;
 $1127 = $1126;
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = (_i64Add(($1121|0),($1122|0),($1125|0),($1128|0))|0);
 $1130 = (getTempRet0() | 0);
 $1131 = $79;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = (_i64Add(($1129|0),($1130|0),($1133|0),($1136|0))|0);
 $1138 = (getTempRet0() | 0);
 $1139 = $88;
 $1140 = $1139;
 HEAP32[$1140>>2] = $1137;
 $1141 = (($1139) + 4)|0;
 $1142 = $1141;
 HEAP32[$1142>>2] = $1138;
 $1143 = $34;
 $1144 = $1143;
 $1145 = HEAP32[$1144>>2]|0;
 $1146 = (($1143) + 4)|0;
 $1147 = $1146;
 $1148 = HEAP32[$1147>>2]|0;
 $1149 = $42;
 $1150 = $1149;
 $1151 = HEAP32[$1150>>2]|0;
 $1152 = (($1149) + 4)|0;
 $1153 = $1152;
 $1154 = HEAP32[$1153>>2]|0;
 $1155 = (_i64Add(($1145|0),($1148|0),($1151|0),($1154|0))|0);
 $1156 = (getTempRet0() | 0);
 $1157 = $49;
 $1158 = $1157;
 $1159 = HEAP32[$1158>>2]|0;
 $1160 = (($1157) + 4)|0;
 $1161 = $1160;
 $1162 = HEAP32[$1161>>2]|0;
 $1163 = (_i64Add(($1155|0),($1156|0),($1159|0),($1162|0))|0);
 $1164 = (getTempRet0() | 0);
 $1165 = $55;
 $1166 = $1165;
 $1167 = HEAP32[$1166>>2]|0;
 $1168 = (($1165) + 4)|0;
 $1169 = $1168;
 $1170 = HEAP32[$1169>>2]|0;
 $1171 = (_i64Add(($1163|0),($1164|0),($1167|0),($1170|0))|0);
 $1172 = (getTempRet0() | 0);
 $1173 = $80;
 $1174 = $1173;
 $1175 = HEAP32[$1174>>2]|0;
 $1176 = (($1173) + 4)|0;
 $1177 = $1176;
 $1178 = HEAP32[$1177>>2]|0;
 $1179 = (_i64Add(($1171|0),($1172|0),($1175|0),($1178|0))|0);
 $1180 = (getTempRet0() | 0);
 $1181 = $89;
 $1182 = $1181;
 HEAP32[$1182>>2] = $1179;
 $1183 = (($1181) + 4)|0;
 $1184 = $1183;
 HEAP32[$1184>>2] = $1180;
 $1185 = $35;
 $1186 = $1185;
 $1187 = HEAP32[$1186>>2]|0;
 $1188 = (($1185) + 4)|0;
 $1189 = $1188;
 $1190 = HEAP32[$1189>>2]|0;
 $1191 = $43;
 $1192 = $1191;
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + 4)|0;
 $1195 = $1194;
 $1196 = HEAP32[$1195>>2]|0;
 $1197 = (_i64Add(($1187|0),($1190|0),($1193|0),($1196|0))|0);
 $1198 = (getTempRet0() | 0);
 $1199 = $50;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (_i64Add(($1197|0),($1198|0),($1201|0),($1204|0))|0);
 $1206 = (getTempRet0() | 0);
 $1207 = $56;
 $1208 = $1207;
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1207) + 4)|0;
 $1211 = $1210;
 $1212 = HEAP32[$1211>>2]|0;
 $1213 = (_i64Add(($1205|0),($1206|0),($1209|0),($1212|0))|0);
 $1214 = (getTempRet0() | 0);
 $1215 = $61;
 $1216 = $1215;
 $1217 = HEAP32[$1216>>2]|0;
 $1218 = (($1215) + 4)|0;
 $1219 = $1218;
 $1220 = HEAP32[$1219>>2]|0;
 $1221 = (_i64Add(($1213|0),($1214|0),($1217|0),($1220|0))|0);
 $1222 = (getTempRet0() | 0);
 $1223 = $81;
 $1224 = $1223;
 $1225 = HEAP32[$1224>>2]|0;
 $1226 = (($1223) + 4)|0;
 $1227 = $1226;
 $1228 = HEAP32[$1227>>2]|0;
 $1229 = (_i64Add(($1221|0),($1222|0),($1225|0),($1228|0))|0);
 $1230 = (getTempRet0() | 0);
 $1231 = $90;
 $1232 = $1231;
 HEAP32[$1232>>2] = $1229;
 $1233 = (($1231) + 4)|0;
 $1234 = $1233;
 HEAP32[$1234>>2] = $1230;
 $1235 = $36;
 $1236 = $1235;
 $1237 = HEAP32[$1236>>2]|0;
 $1238 = (($1235) + 4)|0;
 $1239 = $1238;
 $1240 = HEAP32[$1239>>2]|0;
 $1241 = $44;
 $1242 = $1241;
 $1243 = HEAP32[$1242>>2]|0;
 $1244 = (($1241) + 4)|0;
 $1245 = $1244;
 $1246 = HEAP32[$1245>>2]|0;
 $1247 = (_i64Add(($1237|0),($1240|0),($1243|0),($1246|0))|0);
 $1248 = (getTempRet0() | 0);
 $1249 = $51;
 $1250 = $1249;
 $1251 = HEAP32[$1250>>2]|0;
 $1252 = (($1249) + 4)|0;
 $1253 = $1252;
 $1254 = HEAP32[$1253>>2]|0;
 $1255 = (_i64Add(($1247|0),($1248|0),($1251|0),($1254|0))|0);
 $1256 = (getTempRet0() | 0);
 $1257 = $57;
 $1258 = $1257;
 $1259 = HEAP32[$1258>>2]|0;
 $1260 = (($1257) + 4)|0;
 $1261 = $1260;
 $1262 = HEAP32[$1261>>2]|0;
 $1263 = (_i64Add(($1255|0),($1256|0),($1259|0),($1262|0))|0);
 $1264 = (getTempRet0() | 0);
 $1265 = $62;
 $1266 = $1265;
 $1267 = HEAP32[$1266>>2]|0;
 $1268 = (($1265) + 4)|0;
 $1269 = $1268;
 $1270 = HEAP32[$1269>>2]|0;
 $1271 = (_i64Add(($1263|0),($1264|0),($1267|0),($1270|0))|0);
 $1272 = (getTempRet0() | 0);
 $1273 = $91;
 $1274 = $1273;
 HEAP32[$1274>>2] = $1271;
 $1275 = (($1273) + 4)|0;
 $1276 = $1275;
 HEAP32[$1276>>2] = $1272;
 $1277 = $82;
 $1278 = $1277;
 $1279 = HEAP32[$1278>>2]|0;
 $1280 = (($1277) + 4)|0;
 $1281 = $1280;
 $1282 = HEAP32[$1281>>2]|0;
 $1283 = (_i64Add(($1279|0),($1282|0),33554432,0)|0);
 $1284 = (getTempRet0() | 0);
 $1285 = (_bitshift64Ashr(($1283|0),($1284|0),26)|0);
 $1286 = (getTempRet0() | 0);
 $1287 = $92;
 $1288 = $1287;
 HEAP32[$1288>>2] = $1285;
 $1289 = (($1287) + 4)|0;
 $1290 = $1289;
 HEAP32[$1290>>2] = $1286;
 $1291 = $92;
 $1292 = $1291;
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = (($1291) + 4)|0;
 $1295 = $1294;
 $1296 = HEAP32[$1295>>2]|0;
 $1297 = $83;
 $1298 = $1297;
 $1299 = HEAP32[$1298>>2]|0;
 $1300 = (($1297) + 4)|0;
 $1301 = $1300;
 $1302 = HEAP32[$1301>>2]|0;
 $1303 = (_i64Add(($1299|0),($1302|0),($1293|0),($1296|0))|0);
 $1304 = (getTempRet0() | 0);
 $1305 = $83;
 $1306 = $1305;
 HEAP32[$1306>>2] = $1303;
 $1307 = (($1305) + 4)|0;
 $1308 = $1307;
 HEAP32[$1308>>2] = $1304;
 $1309 = $92;
 $1310 = $1309;
 $1311 = HEAP32[$1310>>2]|0;
 $1312 = (($1309) + 4)|0;
 $1313 = $1312;
 $1314 = HEAP32[$1313>>2]|0;
 $1315 = (_bitshift64Shl(($1311|0),($1314|0),26)|0);
 $1316 = (getTempRet0() | 0);
 $1317 = $82;
 $1318 = $1317;
 $1319 = HEAP32[$1318>>2]|0;
 $1320 = (($1317) + 4)|0;
 $1321 = $1320;
 $1322 = HEAP32[$1321>>2]|0;
 $1323 = (_i64Subtract(($1319|0),($1322|0),($1315|0),($1316|0))|0);
 $1324 = (getTempRet0() | 0);
 $1325 = $82;
 $1326 = $1325;
 HEAP32[$1326>>2] = $1323;
 $1327 = (($1325) + 4)|0;
 $1328 = $1327;
 HEAP32[$1328>>2] = $1324;
 $1329 = $86;
 $1330 = $1329;
 $1331 = HEAP32[$1330>>2]|0;
 $1332 = (($1329) + 4)|0;
 $1333 = $1332;
 $1334 = HEAP32[$1333>>2]|0;
 $1335 = (_i64Add(($1331|0),($1334|0),33554432,0)|0);
 $1336 = (getTempRet0() | 0);
 $1337 = (_bitshift64Ashr(($1335|0),($1336|0),26)|0);
 $1338 = (getTempRet0() | 0);
 $1339 = $96;
 $1340 = $1339;
 HEAP32[$1340>>2] = $1337;
 $1341 = (($1339) + 4)|0;
 $1342 = $1341;
 HEAP32[$1342>>2] = $1338;
 $1343 = $96;
 $1344 = $1343;
 $1345 = HEAP32[$1344>>2]|0;
 $1346 = (($1343) + 4)|0;
 $1347 = $1346;
 $1348 = HEAP32[$1347>>2]|0;
 $1349 = $87;
 $1350 = $1349;
 $1351 = HEAP32[$1350>>2]|0;
 $1352 = (($1349) + 4)|0;
 $1353 = $1352;
 $1354 = HEAP32[$1353>>2]|0;
 $1355 = (_i64Add(($1351|0),($1354|0),($1345|0),($1348|0))|0);
 $1356 = (getTempRet0() | 0);
 $1357 = $87;
 $1358 = $1357;
 HEAP32[$1358>>2] = $1355;
 $1359 = (($1357) + 4)|0;
 $1360 = $1359;
 HEAP32[$1360>>2] = $1356;
 $1361 = $96;
 $1362 = $1361;
 $1363 = HEAP32[$1362>>2]|0;
 $1364 = (($1361) + 4)|0;
 $1365 = $1364;
 $1366 = HEAP32[$1365>>2]|0;
 $1367 = (_bitshift64Shl(($1363|0),($1366|0),26)|0);
 $1368 = (getTempRet0() | 0);
 $1369 = $86;
 $1370 = $1369;
 $1371 = HEAP32[$1370>>2]|0;
 $1372 = (($1369) + 4)|0;
 $1373 = $1372;
 $1374 = HEAP32[$1373>>2]|0;
 $1375 = (_i64Subtract(($1371|0),($1374|0),($1367|0),($1368|0))|0);
 $1376 = (getTempRet0() | 0);
 $1377 = $86;
 $1378 = $1377;
 HEAP32[$1378>>2] = $1375;
 $1379 = (($1377) + 4)|0;
 $1380 = $1379;
 HEAP32[$1380>>2] = $1376;
 $1381 = $83;
 $1382 = $1381;
 $1383 = HEAP32[$1382>>2]|0;
 $1384 = (($1381) + 4)|0;
 $1385 = $1384;
 $1386 = HEAP32[$1385>>2]|0;
 $1387 = (_i64Add(($1383|0),($1386|0),16777216,0)|0);
 $1388 = (getTempRet0() | 0);
 $1389 = (_bitshift64Ashr(($1387|0),($1388|0),25)|0);
 $1390 = (getTempRet0() | 0);
 $1391 = $93;
 $1392 = $1391;
 HEAP32[$1392>>2] = $1389;
 $1393 = (($1391) + 4)|0;
 $1394 = $1393;
 HEAP32[$1394>>2] = $1390;
 $1395 = $93;
 $1396 = $1395;
 $1397 = HEAP32[$1396>>2]|0;
 $1398 = (($1395) + 4)|0;
 $1399 = $1398;
 $1400 = HEAP32[$1399>>2]|0;
 $1401 = $84;
 $1402 = $1401;
 $1403 = HEAP32[$1402>>2]|0;
 $1404 = (($1401) + 4)|0;
 $1405 = $1404;
 $1406 = HEAP32[$1405>>2]|0;
 $1407 = (_i64Add(($1403|0),($1406|0),($1397|0),($1400|0))|0);
 $1408 = (getTempRet0() | 0);
 $1409 = $84;
 $1410 = $1409;
 HEAP32[$1410>>2] = $1407;
 $1411 = (($1409) + 4)|0;
 $1412 = $1411;
 HEAP32[$1412>>2] = $1408;
 $1413 = $93;
 $1414 = $1413;
 $1415 = HEAP32[$1414>>2]|0;
 $1416 = (($1413) + 4)|0;
 $1417 = $1416;
 $1418 = HEAP32[$1417>>2]|0;
 $1419 = (_bitshift64Shl(($1415|0),($1418|0),25)|0);
 $1420 = (getTempRet0() | 0);
 $1421 = $83;
 $1422 = $1421;
 $1423 = HEAP32[$1422>>2]|0;
 $1424 = (($1421) + 4)|0;
 $1425 = $1424;
 $1426 = HEAP32[$1425>>2]|0;
 $1427 = (_i64Subtract(($1423|0),($1426|0),($1419|0),($1420|0))|0);
 $1428 = (getTempRet0() | 0);
 $1429 = $83;
 $1430 = $1429;
 HEAP32[$1430>>2] = $1427;
 $1431 = (($1429) + 4)|0;
 $1432 = $1431;
 HEAP32[$1432>>2] = $1428;
 $1433 = $87;
 $1434 = $1433;
 $1435 = HEAP32[$1434>>2]|0;
 $1436 = (($1433) + 4)|0;
 $1437 = $1436;
 $1438 = HEAP32[$1437>>2]|0;
 $1439 = (_i64Add(($1435|0),($1438|0),16777216,0)|0);
 $1440 = (getTempRet0() | 0);
 $1441 = (_bitshift64Ashr(($1439|0),($1440|0),25)|0);
 $1442 = (getTempRet0() | 0);
 $1443 = $97;
 $1444 = $1443;
 HEAP32[$1444>>2] = $1441;
 $1445 = (($1443) + 4)|0;
 $1446 = $1445;
 HEAP32[$1446>>2] = $1442;
 $1447 = $97;
 $1448 = $1447;
 $1449 = HEAP32[$1448>>2]|0;
 $1450 = (($1447) + 4)|0;
 $1451 = $1450;
 $1452 = HEAP32[$1451>>2]|0;
 $1453 = $88;
 $1454 = $1453;
 $1455 = HEAP32[$1454>>2]|0;
 $1456 = (($1453) + 4)|0;
 $1457 = $1456;
 $1458 = HEAP32[$1457>>2]|0;
 $1459 = (_i64Add(($1455|0),($1458|0),($1449|0),($1452|0))|0);
 $1460 = (getTempRet0() | 0);
 $1461 = $88;
 $1462 = $1461;
 HEAP32[$1462>>2] = $1459;
 $1463 = (($1461) + 4)|0;
 $1464 = $1463;
 HEAP32[$1464>>2] = $1460;
 $1465 = $97;
 $1466 = $1465;
 $1467 = HEAP32[$1466>>2]|0;
 $1468 = (($1465) + 4)|0;
 $1469 = $1468;
 $1470 = HEAP32[$1469>>2]|0;
 $1471 = (_bitshift64Shl(($1467|0),($1470|0),25)|0);
 $1472 = (getTempRet0() | 0);
 $1473 = $87;
 $1474 = $1473;
 $1475 = HEAP32[$1474>>2]|0;
 $1476 = (($1473) + 4)|0;
 $1477 = $1476;
 $1478 = HEAP32[$1477>>2]|0;
 $1479 = (_i64Subtract(($1475|0),($1478|0),($1471|0),($1472|0))|0);
 $1480 = (getTempRet0() | 0);
 $1481 = $87;
 $1482 = $1481;
 HEAP32[$1482>>2] = $1479;
 $1483 = (($1481) + 4)|0;
 $1484 = $1483;
 HEAP32[$1484>>2] = $1480;
 $1485 = $84;
 $1486 = $1485;
 $1487 = HEAP32[$1486>>2]|0;
 $1488 = (($1485) + 4)|0;
 $1489 = $1488;
 $1490 = HEAP32[$1489>>2]|0;
 $1491 = (_i64Add(($1487|0),($1490|0),33554432,0)|0);
 $1492 = (getTempRet0() | 0);
 $1493 = (_bitshift64Ashr(($1491|0),($1492|0),26)|0);
 $1494 = (getTempRet0() | 0);
 $1495 = $94;
 $1496 = $1495;
 HEAP32[$1496>>2] = $1493;
 $1497 = (($1495) + 4)|0;
 $1498 = $1497;
 HEAP32[$1498>>2] = $1494;
 $1499 = $94;
 $1500 = $1499;
 $1501 = HEAP32[$1500>>2]|0;
 $1502 = (($1499) + 4)|0;
 $1503 = $1502;
 $1504 = HEAP32[$1503>>2]|0;
 $1505 = $85;
 $1506 = $1505;
 $1507 = HEAP32[$1506>>2]|0;
 $1508 = (($1505) + 4)|0;
 $1509 = $1508;
 $1510 = HEAP32[$1509>>2]|0;
 $1511 = (_i64Add(($1507|0),($1510|0),($1501|0),($1504|0))|0);
 $1512 = (getTempRet0() | 0);
 $1513 = $85;
 $1514 = $1513;
 HEAP32[$1514>>2] = $1511;
 $1515 = (($1513) + 4)|0;
 $1516 = $1515;
 HEAP32[$1516>>2] = $1512;
 $1517 = $94;
 $1518 = $1517;
 $1519 = HEAP32[$1518>>2]|0;
 $1520 = (($1517) + 4)|0;
 $1521 = $1520;
 $1522 = HEAP32[$1521>>2]|0;
 $1523 = (_bitshift64Shl(($1519|0),($1522|0),26)|0);
 $1524 = (getTempRet0() | 0);
 $1525 = $84;
 $1526 = $1525;
 $1527 = HEAP32[$1526>>2]|0;
 $1528 = (($1525) + 4)|0;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (_i64Subtract(($1527|0),($1530|0),($1523|0),($1524|0))|0);
 $1532 = (getTempRet0() | 0);
 $1533 = $84;
 $1534 = $1533;
 HEAP32[$1534>>2] = $1531;
 $1535 = (($1533) + 4)|0;
 $1536 = $1535;
 HEAP32[$1536>>2] = $1532;
 $1537 = $88;
 $1538 = $1537;
 $1539 = HEAP32[$1538>>2]|0;
 $1540 = (($1537) + 4)|0;
 $1541 = $1540;
 $1542 = HEAP32[$1541>>2]|0;
 $1543 = (_i64Add(($1539|0),($1542|0),33554432,0)|0);
 $1544 = (getTempRet0() | 0);
 $1545 = (_bitshift64Ashr(($1543|0),($1544|0),26)|0);
 $1546 = (getTempRet0() | 0);
 $1547 = $98;
 $1548 = $1547;
 HEAP32[$1548>>2] = $1545;
 $1549 = (($1547) + 4)|0;
 $1550 = $1549;
 HEAP32[$1550>>2] = $1546;
 $1551 = $98;
 $1552 = $1551;
 $1553 = HEAP32[$1552>>2]|0;
 $1554 = (($1551) + 4)|0;
 $1555 = $1554;
 $1556 = HEAP32[$1555>>2]|0;
 $1557 = $89;
 $1558 = $1557;
 $1559 = HEAP32[$1558>>2]|0;
 $1560 = (($1557) + 4)|0;
 $1561 = $1560;
 $1562 = HEAP32[$1561>>2]|0;
 $1563 = (_i64Add(($1559|0),($1562|0),($1553|0),($1556|0))|0);
 $1564 = (getTempRet0() | 0);
 $1565 = $89;
 $1566 = $1565;
 HEAP32[$1566>>2] = $1563;
 $1567 = (($1565) + 4)|0;
 $1568 = $1567;
 HEAP32[$1568>>2] = $1564;
 $1569 = $98;
 $1570 = $1569;
 $1571 = HEAP32[$1570>>2]|0;
 $1572 = (($1569) + 4)|0;
 $1573 = $1572;
 $1574 = HEAP32[$1573>>2]|0;
 $1575 = (_bitshift64Shl(($1571|0),($1574|0),26)|0);
 $1576 = (getTempRet0() | 0);
 $1577 = $88;
 $1578 = $1577;
 $1579 = HEAP32[$1578>>2]|0;
 $1580 = (($1577) + 4)|0;
 $1581 = $1580;
 $1582 = HEAP32[$1581>>2]|0;
 $1583 = (_i64Subtract(($1579|0),($1582|0),($1575|0),($1576|0))|0);
 $1584 = (getTempRet0() | 0);
 $1585 = $88;
 $1586 = $1585;
 HEAP32[$1586>>2] = $1583;
 $1587 = (($1585) + 4)|0;
 $1588 = $1587;
 HEAP32[$1588>>2] = $1584;
 $1589 = $85;
 $1590 = $1589;
 $1591 = HEAP32[$1590>>2]|0;
 $1592 = (($1589) + 4)|0;
 $1593 = $1592;
 $1594 = HEAP32[$1593>>2]|0;
 $1595 = (_i64Add(($1591|0),($1594|0),16777216,0)|0);
 $1596 = (getTempRet0() | 0);
 $1597 = (_bitshift64Ashr(($1595|0),($1596|0),25)|0);
 $1598 = (getTempRet0() | 0);
 $1599 = $95;
 $1600 = $1599;
 HEAP32[$1600>>2] = $1597;
 $1601 = (($1599) + 4)|0;
 $1602 = $1601;
 HEAP32[$1602>>2] = $1598;
 $1603 = $95;
 $1604 = $1603;
 $1605 = HEAP32[$1604>>2]|0;
 $1606 = (($1603) + 4)|0;
 $1607 = $1606;
 $1608 = HEAP32[$1607>>2]|0;
 $1609 = $86;
 $1610 = $1609;
 $1611 = HEAP32[$1610>>2]|0;
 $1612 = (($1609) + 4)|0;
 $1613 = $1612;
 $1614 = HEAP32[$1613>>2]|0;
 $1615 = (_i64Add(($1611|0),($1614|0),($1605|0),($1608|0))|0);
 $1616 = (getTempRet0() | 0);
 $1617 = $86;
 $1618 = $1617;
 HEAP32[$1618>>2] = $1615;
 $1619 = (($1617) + 4)|0;
 $1620 = $1619;
 HEAP32[$1620>>2] = $1616;
 $1621 = $95;
 $1622 = $1621;
 $1623 = HEAP32[$1622>>2]|0;
 $1624 = (($1621) + 4)|0;
 $1625 = $1624;
 $1626 = HEAP32[$1625>>2]|0;
 $1627 = (_bitshift64Shl(($1623|0),($1626|0),25)|0);
 $1628 = (getTempRet0() | 0);
 $1629 = $85;
 $1630 = $1629;
 $1631 = HEAP32[$1630>>2]|0;
 $1632 = (($1629) + 4)|0;
 $1633 = $1632;
 $1634 = HEAP32[$1633>>2]|0;
 $1635 = (_i64Subtract(($1631|0),($1634|0),($1627|0),($1628|0))|0);
 $1636 = (getTempRet0() | 0);
 $1637 = $85;
 $1638 = $1637;
 HEAP32[$1638>>2] = $1635;
 $1639 = (($1637) + 4)|0;
 $1640 = $1639;
 HEAP32[$1640>>2] = $1636;
 $1641 = $89;
 $1642 = $1641;
 $1643 = HEAP32[$1642>>2]|0;
 $1644 = (($1641) + 4)|0;
 $1645 = $1644;
 $1646 = HEAP32[$1645>>2]|0;
 $1647 = (_i64Add(($1643|0),($1646|0),16777216,0)|0);
 $1648 = (getTempRet0() | 0);
 $1649 = (_bitshift64Ashr(($1647|0),($1648|0),25)|0);
 $1650 = (getTempRet0() | 0);
 $1651 = $99;
 $1652 = $1651;
 HEAP32[$1652>>2] = $1649;
 $1653 = (($1651) + 4)|0;
 $1654 = $1653;
 HEAP32[$1654>>2] = $1650;
 $1655 = $99;
 $1656 = $1655;
 $1657 = HEAP32[$1656>>2]|0;
 $1658 = (($1655) + 4)|0;
 $1659 = $1658;
 $1660 = HEAP32[$1659>>2]|0;
 $1661 = $90;
 $1662 = $1661;
 $1663 = HEAP32[$1662>>2]|0;
 $1664 = (($1661) + 4)|0;
 $1665 = $1664;
 $1666 = HEAP32[$1665>>2]|0;
 $1667 = (_i64Add(($1663|0),($1666|0),($1657|0),($1660|0))|0);
 $1668 = (getTempRet0() | 0);
 $1669 = $90;
 $1670 = $1669;
 HEAP32[$1670>>2] = $1667;
 $1671 = (($1669) + 4)|0;
 $1672 = $1671;
 HEAP32[$1672>>2] = $1668;
 $1673 = $99;
 $1674 = $1673;
 $1675 = HEAP32[$1674>>2]|0;
 $1676 = (($1673) + 4)|0;
 $1677 = $1676;
 $1678 = HEAP32[$1677>>2]|0;
 $1679 = (_bitshift64Shl(($1675|0),($1678|0),25)|0);
 $1680 = (getTempRet0() | 0);
 $1681 = $89;
 $1682 = $1681;
 $1683 = HEAP32[$1682>>2]|0;
 $1684 = (($1681) + 4)|0;
 $1685 = $1684;
 $1686 = HEAP32[$1685>>2]|0;
 $1687 = (_i64Subtract(($1683|0),($1686|0),($1679|0),($1680|0))|0);
 $1688 = (getTempRet0() | 0);
 $1689 = $89;
 $1690 = $1689;
 HEAP32[$1690>>2] = $1687;
 $1691 = (($1689) + 4)|0;
 $1692 = $1691;
 HEAP32[$1692>>2] = $1688;
 $1693 = $86;
 $1694 = $1693;
 $1695 = HEAP32[$1694>>2]|0;
 $1696 = (($1693) + 4)|0;
 $1697 = $1696;
 $1698 = HEAP32[$1697>>2]|0;
 $1699 = (_i64Add(($1695|0),($1698|0),33554432,0)|0);
 $1700 = (getTempRet0() | 0);
 $1701 = (_bitshift64Ashr(($1699|0),($1700|0),26)|0);
 $1702 = (getTempRet0() | 0);
 $1703 = $96;
 $1704 = $1703;
 HEAP32[$1704>>2] = $1701;
 $1705 = (($1703) + 4)|0;
 $1706 = $1705;
 HEAP32[$1706>>2] = $1702;
 $1707 = $96;
 $1708 = $1707;
 $1709 = HEAP32[$1708>>2]|0;
 $1710 = (($1707) + 4)|0;
 $1711 = $1710;
 $1712 = HEAP32[$1711>>2]|0;
 $1713 = $87;
 $1714 = $1713;
 $1715 = HEAP32[$1714>>2]|0;
 $1716 = (($1713) + 4)|0;
 $1717 = $1716;
 $1718 = HEAP32[$1717>>2]|0;
 $1719 = (_i64Add(($1715|0),($1718|0),($1709|0),($1712|0))|0);
 $1720 = (getTempRet0() | 0);
 $1721 = $87;
 $1722 = $1721;
 HEAP32[$1722>>2] = $1719;
 $1723 = (($1721) + 4)|0;
 $1724 = $1723;
 HEAP32[$1724>>2] = $1720;
 $1725 = $96;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (($1725) + 4)|0;
 $1729 = $1728;
 $1730 = HEAP32[$1729>>2]|0;
 $1731 = (_bitshift64Shl(($1727|0),($1730|0),26)|0);
 $1732 = (getTempRet0() | 0);
 $1733 = $86;
 $1734 = $1733;
 $1735 = HEAP32[$1734>>2]|0;
 $1736 = (($1733) + 4)|0;
 $1737 = $1736;
 $1738 = HEAP32[$1737>>2]|0;
 $1739 = (_i64Subtract(($1735|0),($1738|0),($1731|0),($1732|0))|0);
 $1740 = (getTempRet0() | 0);
 $1741 = $86;
 $1742 = $1741;
 HEAP32[$1742>>2] = $1739;
 $1743 = (($1741) + 4)|0;
 $1744 = $1743;
 HEAP32[$1744>>2] = $1740;
 $1745 = $90;
 $1746 = $1745;
 $1747 = HEAP32[$1746>>2]|0;
 $1748 = (($1745) + 4)|0;
 $1749 = $1748;
 $1750 = HEAP32[$1749>>2]|0;
 $1751 = (_i64Add(($1747|0),($1750|0),33554432,0)|0);
 $1752 = (getTempRet0() | 0);
 $1753 = (_bitshift64Ashr(($1751|0),($1752|0),26)|0);
 $1754 = (getTempRet0() | 0);
 $1755 = $100;
 $1756 = $1755;
 HEAP32[$1756>>2] = $1753;
 $1757 = (($1755) + 4)|0;
 $1758 = $1757;
 HEAP32[$1758>>2] = $1754;
 $1759 = $100;
 $1760 = $1759;
 $1761 = HEAP32[$1760>>2]|0;
 $1762 = (($1759) + 4)|0;
 $1763 = $1762;
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = $91;
 $1766 = $1765;
 $1767 = HEAP32[$1766>>2]|0;
 $1768 = (($1765) + 4)|0;
 $1769 = $1768;
 $1770 = HEAP32[$1769>>2]|0;
 $1771 = (_i64Add(($1767|0),($1770|0),($1761|0),($1764|0))|0);
 $1772 = (getTempRet0() | 0);
 $1773 = $91;
 $1774 = $1773;
 HEAP32[$1774>>2] = $1771;
 $1775 = (($1773) + 4)|0;
 $1776 = $1775;
 HEAP32[$1776>>2] = $1772;
 $1777 = $100;
 $1778 = $1777;
 $1779 = HEAP32[$1778>>2]|0;
 $1780 = (($1777) + 4)|0;
 $1781 = $1780;
 $1782 = HEAP32[$1781>>2]|0;
 $1783 = (_bitshift64Shl(($1779|0),($1782|0),26)|0);
 $1784 = (getTempRet0() | 0);
 $1785 = $90;
 $1786 = $1785;
 $1787 = HEAP32[$1786>>2]|0;
 $1788 = (($1785) + 4)|0;
 $1789 = $1788;
 $1790 = HEAP32[$1789>>2]|0;
 $1791 = (_i64Subtract(($1787|0),($1790|0),($1783|0),($1784|0))|0);
 $1792 = (getTempRet0() | 0);
 $1793 = $90;
 $1794 = $1793;
 HEAP32[$1794>>2] = $1791;
 $1795 = (($1793) + 4)|0;
 $1796 = $1795;
 HEAP32[$1796>>2] = $1792;
 $1797 = $91;
 $1798 = $1797;
 $1799 = HEAP32[$1798>>2]|0;
 $1800 = (($1797) + 4)|0;
 $1801 = $1800;
 $1802 = HEAP32[$1801>>2]|0;
 $1803 = (_i64Add(($1799|0),($1802|0),16777216,0)|0);
 $1804 = (getTempRet0() | 0);
 $1805 = (_bitshift64Ashr(($1803|0),($1804|0),25)|0);
 $1806 = (getTempRet0() | 0);
 $1807 = $101;
 $1808 = $1807;
 HEAP32[$1808>>2] = $1805;
 $1809 = (($1807) + 4)|0;
 $1810 = $1809;
 HEAP32[$1810>>2] = $1806;
 $1811 = $101;
 $1812 = $1811;
 $1813 = HEAP32[$1812>>2]|0;
 $1814 = (($1811) + 4)|0;
 $1815 = $1814;
 $1816 = HEAP32[$1815>>2]|0;
 $1817 = (___muldi3(($1813|0),($1816|0),19,0)|0);
 $1818 = (getTempRet0() | 0);
 $1819 = $82;
 $1820 = $1819;
 $1821 = HEAP32[$1820>>2]|0;
 $1822 = (($1819) + 4)|0;
 $1823 = $1822;
 $1824 = HEAP32[$1823>>2]|0;
 $1825 = (_i64Add(($1821|0),($1824|0),($1817|0),($1818|0))|0);
 $1826 = (getTempRet0() | 0);
 $1827 = $82;
 $1828 = $1827;
 HEAP32[$1828>>2] = $1825;
 $1829 = (($1827) + 4)|0;
 $1830 = $1829;
 HEAP32[$1830>>2] = $1826;
 $1831 = $101;
 $1832 = $1831;
 $1833 = HEAP32[$1832>>2]|0;
 $1834 = (($1831) + 4)|0;
 $1835 = $1834;
 $1836 = HEAP32[$1835>>2]|0;
 $1837 = (_bitshift64Shl(($1833|0),($1836|0),25)|0);
 $1838 = (getTempRet0() | 0);
 $1839 = $91;
 $1840 = $1839;
 $1841 = HEAP32[$1840>>2]|0;
 $1842 = (($1839) + 4)|0;
 $1843 = $1842;
 $1844 = HEAP32[$1843>>2]|0;
 $1845 = (_i64Subtract(($1841|0),($1844|0),($1837|0),($1838|0))|0);
 $1846 = (getTempRet0() | 0);
 $1847 = $91;
 $1848 = $1847;
 HEAP32[$1848>>2] = $1845;
 $1849 = (($1847) + 4)|0;
 $1850 = $1849;
 HEAP32[$1850>>2] = $1846;
 $1851 = $82;
 $1852 = $1851;
 $1853 = HEAP32[$1852>>2]|0;
 $1854 = (($1851) + 4)|0;
 $1855 = $1854;
 $1856 = HEAP32[$1855>>2]|0;
 $1857 = (_i64Add(($1853|0),($1856|0),33554432,0)|0);
 $1858 = (getTempRet0() | 0);
 $1859 = (_bitshift64Ashr(($1857|0),($1858|0),26)|0);
 $1860 = (getTempRet0() | 0);
 $1861 = $92;
 $1862 = $1861;
 HEAP32[$1862>>2] = $1859;
 $1863 = (($1861) + 4)|0;
 $1864 = $1863;
 HEAP32[$1864>>2] = $1860;
 $1865 = $92;
 $1866 = $1865;
 $1867 = HEAP32[$1866>>2]|0;
 $1868 = (($1865) + 4)|0;
 $1869 = $1868;
 $1870 = HEAP32[$1869>>2]|0;
 $1871 = $83;
 $1872 = $1871;
 $1873 = HEAP32[$1872>>2]|0;
 $1874 = (($1871) + 4)|0;
 $1875 = $1874;
 $1876 = HEAP32[$1875>>2]|0;
 $1877 = (_i64Add(($1873|0),($1876|0),($1867|0),($1870|0))|0);
 $1878 = (getTempRet0() | 0);
 $1879 = $83;
 $1880 = $1879;
 HEAP32[$1880>>2] = $1877;
 $1881 = (($1879) + 4)|0;
 $1882 = $1881;
 HEAP32[$1882>>2] = $1878;
 $1883 = $92;
 $1884 = $1883;
 $1885 = HEAP32[$1884>>2]|0;
 $1886 = (($1883) + 4)|0;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = (_bitshift64Shl(($1885|0),($1888|0),26)|0);
 $1890 = (getTempRet0() | 0);
 $1891 = $82;
 $1892 = $1891;
 $1893 = HEAP32[$1892>>2]|0;
 $1894 = (($1891) + 4)|0;
 $1895 = $1894;
 $1896 = HEAP32[$1895>>2]|0;
 $1897 = (_i64Subtract(($1893|0),($1896|0),($1889|0),($1890|0))|0);
 $1898 = (getTempRet0() | 0);
 $1899 = $82;
 $1900 = $1899;
 HEAP32[$1900>>2] = $1897;
 $1901 = (($1899) + 4)|0;
 $1902 = $1901;
 HEAP32[$1902>>2] = $1898;
 $1903 = $82;
 $1904 = $1903;
 $1905 = HEAP32[$1904>>2]|0;
 $1906 = (($1903) + 4)|0;
 $1907 = $1906;
 $1908 = HEAP32[$1907>>2]|0;
 $1909 = $2;
 HEAP32[$1909>>2] = $1905;
 $1910 = $83;
 $1911 = $1910;
 $1912 = HEAP32[$1911>>2]|0;
 $1913 = (($1910) + 4)|0;
 $1914 = $1913;
 $1915 = HEAP32[$1914>>2]|0;
 $1916 = $2;
 $1917 = ((($1916)) + 4|0);
 HEAP32[$1917>>2] = $1912;
 $1918 = $84;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = (($1918) + 4)|0;
 $1922 = $1921;
 $1923 = HEAP32[$1922>>2]|0;
 $1924 = $2;
 $1925 = ((($1924)) + 8|0);
 HEAP32[$1925>>2] = $1920;
 $1926 = $85;
 $1927 = $1926;
 $1928 = HEAP32[$1927>>2]|0;
 $1929 = (($1926) + 4)|0;
 $1930 = $1929;
 $1931 = HEAP32[$1930>>2]|0;
 $1932 = $2;
 $1933 = ((($1932)) + 12|0);
 HEAP32[$1933>>2] = $1928;
 $1934 = $86;
 $1935 = $1934;
 $1936 = HEAP32[$1935>>2]|0;
 $1937 = (($1934) + 4)|0;
 $1938 = $1937;
 $1939 = HEAP32[$1938>>2]|0;
 $1940 = $2;
 $1941 = ((($1940)) + 16|0);
 HEAP32[$1941>>2] = $1936;
 $1942 = $87;
 $1943 = $1942;
 $1944 = HEAP32[$1943>>2]|0;
 $1945 = (($1942) + 4)|0;
 $1946 = $1945;
 $1947 = HEAP32[$1946>>2]|0;
 $1948 = $2;
 $1949 = ((($1948)) + 20|0);
 HEAP32[$1949>>2] = $1944;
 $1950 = $88;
 $1951 = $1950;
 $1952 = HEAP32[$1951>>2]|0;
 $1953 = (($1950) + 4)|0;
 $1954 = $1953;
 $1955 = HEAP32[$1954>>2]|0;
 $1956 = $2;
 $1957 = ((($1956)) + 24|0);
 HEAP32[$1957>>2] = $1952;
 $1958 = $89;
 $1959 = $1958;
 $1960 = HEAP32[$1959>>2]|0;
 $1961 = (($1958) + 4)|0;
 $1962 = $1961;
 $1963 = HEAP32[$1962>>2]|0;
 $1964 = $2;
 $1965 = ((($1964)) + 28|0);
 HEAP32[$1965>>2] = $1960;
 $1966 = $90;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = (($1966) + 4)|0;
 $1970 = $1969;
 $1971 = HEAP32[$1970>>2]|0;
 $1972 = $2;
 $1973 = ((($1972)) + 32|0);
 HEAP32[$1973>>2] = $1968;
 $1974 = $91;
 $1975 = $1974;
 $1976 = HEAP32[$1975>>2]|0;
 $1977 = (($1974) + 4)|0;
 $1978 = $1977;
 $1979 = HEAP32[$1978>>2]|0;
 $1980 = $2;
 $1981 = ((($1980)) + 36|0);
 HEAP32[$1981>>2] = $1976;
 STACKTOP = sp;return;
}
function _fe_sq2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0;
 var $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0;
 var $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0;
 var $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0;
 var $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0;
 var $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0;
 var $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0;
 var $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0;
 var $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0;
 var $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(704|0);
 $27 = sp + 592|0;
 $28 = sp + 584|0;
 $29 = sp + 576|0;
 $30 = sp + 568|0;
 $31 = sp + 560|0;
 $32 = sp + 552|0;
 $33 = sp + 544|0;
 $34 = sp + 536|0;
 $35 = sp + 528|0;
 $36 = sp + 520|0;
 $37 = sp + 512|0;
 $38 = sp + 504|0;
 $39 = sp + 496|0;
 $40 = sp + 488|0;
 $41 = sp + 480|0;
 $42 = sp + 472|0;
 $43 = sp + 464|0;
 $44 = sp + 456|0;
 $45 = sp + 448|0;
 $46 = sp + 440|0;
 $47 = sp + 432|0;
 $48 = sp + 424|0;
 $49 = sp + 416|0;
 $50 = sp + 408|0;
 $51 = sp + 400|0;
 $52 = sp + 392|0;
 $53 = sp + 384|0;
 $54 = sp + 376|0;
 $55 = sp + 368|0;
 $56 = sp + 360|0;
 $57 = sp + 352|0;
 $58 = sp + 344|0;
 $59 = sp + 336|0;
 $60 = sp + 328|0;
 $61 = sp + 320|0;
 $62 = sp + 312|0;
 $63 = sp + 304|0;
 $64 = sp + 296|0;
 $65 = sp + 288|0;
 $66 = sp + 280|0;
 $67 = sp + 272|0;
 $68 = sp + 264|0;
 $69 = sp + 256|0;
 $70 = sp + 248|0;
 $71 = sp + 240|0;
 $72 = sp + 232|0;
 $73 = sp + 224|0;
 $74 = sp + 216|0;
 $75 = sp + 208|0;
 $76 = sp + 200|0;
 $77 = sp + 192|0;
 $78 = sp + 184|0;
 $79 = sp + 176|0;
 $80 = sp + 168|0;
 $81 = sp + 160|0;
 $82 = sp + 152|0;
 $83 = sp + 144|0;
 $84 = sp + 136|0;
 $85 = sp + 128|0;
 $86 = sp + 120|0;
 $87 = sp + 112|0;
 $88 = sp + 104|0;
 $89 = sp + 96|0;
 $90 = sp + 88|0;
 $91 = sp + 80|0;
 $92 = sp + 72|0;
 $93 = sp + 64|0;
 $94 = sp + 56|0;
 $95 = sp + 48|0;
 $96 = sp + 40|0;
 $97 = sp + 32|0;
 $98 = sp + 24|0;
 $99 = sp + 16|0;
 $100 = sp + 8|0;
 $101 = sp;
 $2 = $0;
 $3 = $1;
 $102 = $3;
 $103 = HEAP32[$102>>2]|0;
 $4 = $103;
 $104 = $3;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $5 = $106;
 $107 = $3;
 $108 = ((($107)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $6 = $109;
 $110 = $3;
 $111 = ((($110)) + 12|0);
 $112 = HEAP32[$111>>2]|0;
 $7 = $112;
 $113 = $3;
 $114 = ((($113)) + 16|0);
 $115 = HEAP32[$114>>2]|0;
 $8 = $115;
 $116 = $3;
 $117 = ((($116)) + 20|0);
 $118 = HEAP32[$117>>2]|0;
 $9 = $118;
 $119 = $3;
 $120 = ((($119)) + 24|0);
 $121 = HEAP32[$120>>2]|0;
 $10 = $121;
 $122 = $3;
 $123 = ((($122)) + 28|0);
 $124 = HEAP32[$123>>2]|0;
 $11 = $124;
 $125 = $3;
 $126 = ((($125)) + 32|0);
 $127 = HEAP32[$126>>2]|0;
 $12 = $127;
 $128 = $3;
 $129 = ((($128)) + 36|0);
 $130 = HEAP32[$129>>2]|0;
 $13 = $130;
 $131 = $4;
 $132 = $131<<1;
 $14 = $132;
 $133 = $5;
 $134 = $133<<1;
 $15 = $134;
 $135 = $6;
 $136 = $135<<1;
 $16 = $136;
 $137 = $7;
 $138 = $137<<1;
 $17 = $138;
 $139 = $8;
 $140 = $139<<1;
 $18 = $140;
 $141 = $9;
 $142 = $141<<1;
 $19 = $142;
 $143 = $10;
 $144 = $143<<1;
 $20 = $144;
 $145 = $11;
 $146 = $145<<1;
 $21 = $146;
 $147 = $9;
 $148 = ($147*38)|0;
 $22 = $148;
 $149 = $10;
 $150 = ($149*19)|0;
 $23 = $150;
 $151 = $11;
 $152 = ($151*38)|0;
 $24 = $152;
 $153 = $12;
 $154 = ($153*19)|0;
 $25 = $154;
 $155 = $13;
 $156 = ($155*38)|0;
 $26 = $156;
 $157 = $4;
 $158 = ($157|0)<(0);
 $159 = $158 << 31 >> 31;
 $160 = $4;
 $161 = ($160|0)<(0);
 $162 = $161 << 31 >> 31;
 $163 = (___muldi3(($157|0),($159|0),($160|0),($162|0))|0);
 $164 = (getTempRet0() | 0);
 $165 = $27;
 $166 = $165;
 HEAP32[$166>>2] = $163;
 $167 = (($165) + 4)|0;
 $168 = $167;
 HEAP32[$168>>2] = $164;
 $169 = $14;
 $170 = ($169|0)<(0);
 $171 = $170 << 31 >> 31;
 $172 = $5;
 $173 = ($172|0)<(0);
 $174 = $173 << 31 >> 31;
 $175 = (___muldi3(($169|0),($171|0),($172|0),($174|0))|0);
 $176 = (getTempRet0() | 0);
 $177 = $28;
 $178 = $177;
 HEAP32[$178>>2] = $175;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = $176;
 $181 = $14;
 $182 = ($181|0)<(0);
 $183 = $182 << 31 >> 31;
 $184 = $6;
 $185 = ($184|0)<(0);
 $186 = $185 << 31 >> 31;
 $187 = (___muldi3(($181|0),($183|0),($184|0),($186|0))|0);
 $188 = (getTempRet0() | 0);
 $189 = $29;
 $190 = $189;
 HEAP32[$190>>2] = $187;
 $191 = (($189) + 4)|0;
 $192 = $191;
 HEAP32[$192>>2] = $188;
 $193 = $14;
 $194 = ($193|0)<(0);
 $195 = $194 << 31 >> 31;
 $196 = $7;
 $197 = ($196|0)<(0);
 $198 = $197 << 31 >> 31;
 $199 = (___muldi3(($193|0),($195|0),($196|0),($198|0))|0);
 $200 = (getTempRet0() | 0);
 $201 = $30;
 $202 = $201;
 HEAP32[$202>>2] = $199;
 $203 = (($201) + 4)|0;
 $204 = $203;
 HEAP32[$204>>2] = $200;
 $205 = $14;
 $206 = ($205|0)<(0);
 $207 = $206 << 31 >> 31;
 $208 = $8;
 $209 = ($208|0)<(0);
 $210 = $209 << 31 >> 31;
 $211 = (___muldi3(($205|0),($207|0),($208|0),($210|0))|0);
 $212 = (getTempRet0() | 0);
 $213 = $31;
 $214 = $213;
 HEAP32[$214>>2] = $211;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $212;
 $217 = $14;
 $218 = ($217|0)<(0);
 $219 = $218 << 31 >> 31;
 $220 = $9;
 $221 = ($220|0)<(0);
 $222 = $221 << 31 >> 31;
 $223 = (___muldi3(($217|0),($219|0),($220|0),($222|0))|0);
 $224 = (getTempRet0() | 0);
 $225 = $32;
 $226 = $225;
 HEAP32[$226>>2] = $223;
 $227 = (($225) + 4)|0;
 $228 = $227;
 HEAP32[$228>>2] = $224;
 $229 = $14;
 $230 = ($229|0)<(0);
 $231 = $230 << 31 >> 31;
 $232 = $10;
 $233 = ($232|0)<(0);
 $234 = $233 << 31 >> 31;
 $235 = (___muldi3(($229|0),($231|0),($232|0),($234|0))|0);
 $236 = (getTempRet0() | 0);
 $237 = $33;
 $238 = $237;
 HEAP32[$238>>2] = $235;
 $239 = (($237) + 4)|0;
 $240 = $239;
 HEAP32[$240>>2] = $236;
 $241 = $14;
 $242 = ($241|0)<(0);
 $243 = $242 << 31 >> 31;
 $244 = $11;
 $245 = ($244|0)<(0);
 $246 = $245 << 31 >> 31;
 $247 = (___muldi3(($241|0),($243|0),($244|0),($246|0))|0);
 $248 = (getTempRet0() | 0);
 $249 = $34;
 $250 = $249;
 HEAP32[$250>>2] = $247;
 $251 = (($249) + 4)|0;
 $252 = $251;
 HEAP32[$252>>2] = $248;
 $253 = $14;
 $254 = ($253|0)<(0);
 $255 = $254 << 31 >> 31;
 $256 = $12;
 $257 = ($256|0)<(0);
 $258 = $257 << 31 >> 31;
 $259 = (___muldi3(($253|0),($255|0),($256|0),($258|0))|0);
 $260 = (getTempRet0() | 0);
 $261 = $35;
 $262 = $261;
 HEAP32[$262>>2] = $259;
 $263 = (($261) + 4)|0;
 $264 = $263;
 HEAP32[$264>>2] = $260;
 $265 = $14;
 $266 = ($265|0)<(0);
 $267 = $266 << 31 >> 31;
 $268 = $13;
 $269 = ($268|0)<(0);
 $270 = $269 << 31 >> 31;
 $271 = (___muldi3(($265|0),($267|0),($268|0),($270|0))|0);
 $272 = (getTempRet0() | 0);
 $273 = $36;
 $274 = $273;
 HEAP32[$274>>2] = $271;
 $275 = (($273) + 4)|0;
 $276 = $275;
 HEAP32[$276>>2] = $272;
 $277 = $15;
 $278 = ($277|0)<(0);
 $279 = $278 << 31 >> 31;
 $280 = $5;
 $281 = ($280|0)<(0);
 $282 = $281 << 31 >> 31;
 $283 = (___muldi3(($277|0),($279|0),($280|0),($282|0))|0);
 $284 = (getTempRet0() | 0);
 $285 = $37;
 $286 = $285;
 HEAP32[$286>>2] = $283;
 $287 = (($285) + 4)|0;
 $288 = $287;
 HEAP32[$288>>2] = $284;
 $289 = $15;
 $290 = ($289|0)<(0);
 $291 = $290 << 31 >> 31;
 $292 = $6;
 $293 = ($292|0)<(0);
 $294 = $293 << 31 >> 31;
 $295 = (___muldi3(($289|0),($291|0),($292|0),($294|0))|0);
 $296 = (getTempRet0() | 0);
 $297 = $38;
 $298 = $297;
 HEAP32[$298>>2] = $295;
 $299 = (($297) + 4)|0;
 $300 = $299;
 HEAP32[$300>>2] = $296;
 $301 = $15;
 $302 = ($301|0)<(0);
 $303 = $302 << 31 >> 31;
 $304 = $17;
 $305 = ($304|0)<(0);
 $306 = $305 << 31 >> 31;
 $307 = (___muldi3(($301|0),($303|0),($304|0),($306|0))|0);
 $308 = (getTempRet0() | 0);
 $309 = $39;
 $310 = $309;
 HEAP32[$310>>2] = $307;
 $311 = (($309) + 4)|0;
 $312 = $311;
 HEAP32[$312>>2] = $308;
 $313 = $15;
 $314 = ($313|0)<(0);
 $315 = $314 << 31 >> 31;
 $316 = $8;
 $317 = ($316|0)<(0);
 $318 = $317 << 31 >> 31;
 $319 = (___muldi3(($313|0),($315|0),($316|0),($318|0))|0);
 $320 = (getTempRet0() | 0);
 $321 = $40;
 $322 = $321;
 HEAP32[$322>>2] = $319;
 $323 = (($321) + 4)|0;
 $324 = $323;
 HEAP32[$324>>2] = $320;
 $325 = $15;
 $326 = ($325|0)<(0);
 $327 = $326 << 31 >> 31;
 $328 = $19;
 $329 = ($328|0)<(0);
 $330 = $329 << 31 >> 31;
 $331 = (___muldi3(($325|0),($327|0),($328|0),($330|0))|0);
 $332 = (getTempRet0() | 0);
 $333 = $41;
 $334 = $333;
 HEAP32[$334>>2] = $331;
 $335 = (($333) + 4)|0;
 $336 = $335;
 HEAP32[$336>>2] = $332;
 $337 = $15;
 $338 = ($337|0)<(0);
 $339 = $338 << 31 >> 31;
 $340 = $10;
 $341 = ($340|0)<(0);
 $342 = $341 << 31 >> 31;
 $343 = (___muldi3(($337|0),($339|0),($340|0),($342|0))|0);
 $344 = (getTempRet0() | 0);
 $345 = $42;
 $346 = $345;
 HEAP32[$346>>2] = $343;
 $347 = (($345) + 4)|0;
 $348 = $347;
 HEAP32[$348>>2] = $344;
 $349 = $15;
 $350 = ($349|0)<(0);
 $351 = $350 << 31 >> 31;
 $352 = $21;
 $353 = ($352|0)<(0);
 $354 = $353 << 31 >> 31;
 $355 = (___muldi3(($349|0),($351|0),($352|0),($354|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = $43;
 $358 = $357;
 HEAP32[$358>>2] = $355;
 $359 = (($357) + 4)|0;
 $360 = $359;
 HEAP32[$360>>2] = $356;
 $361 = $15;
 $362 = ($361|0)<(0);
 $363 = $362 << 31 >> 31;
 $364 = $12;
 $365 = ($364|0)<(0);
 $366 = $365 << 31 >> 31;
 $367 = (___muldi3(($361|0),($363|0),($364|0),($366|0))|0);
 $368 = (getTempRet0() | 0);
 $369 = $44;
 $370 = $369;
 HEAP32[$370>>2] = $367;
 $371 = (($369) + 4)|0;
 $372 = $371;
 HEAP32[$372>>2] = $368;
 $373 = $15;
 $374 = ($373|0)<(0);
 $375 = $374 << 31 >> 31;
 $376 = $26;
 $377 = ($376|0)<(0);
 $378 = $377 << 31 >> 31;
 $379 = (___muldi3(($373|0),($375|0),($376|0),($378|0))|0);
 $380 = (getTempRet0() | 0);
 $381 = $45;
 $382 = $381;
 HEAP32[$382>>2] = $379;
 $383 = (($381) + 4)|0;
 $384 = $383;
 HEAP32[$384>>2] = $380;
 $385 = $6;
 $386 = ($385|0)<(0);
 $387 = $386 << 31 >> 31;
 $388 = $6;
 $389 = ($388|0)<(0);
 $390 = $389 << 31 >> 31;
 $391 = (___muldi3(($385|0),($387|0),($388|0),($390|0))|0);
 $392 = (getTempRet0() | 0);
 $393 = $46;
 $394 = $393;
 HEAP32[$394>>2] = $391;
 $395 = (($393) + 4)|0;
 $396 = $395;
 HEAP32[$396>>2] = $392;
 $397 = $16;
 $398 = ($397|0)<(0);
 $399 = $398 << 31 >> 31;
 $400 = $7;
 $401 = ($400|0)<(0);
 $402 = $401 << 31 >> 31;
 $403 = (___muldi3(($397|0),($399|0),($400|0),($402|0))|0);
 $404 = (getTempRet0() | 0);
 $405 = $47;
 $406 = $405;
 HEAP32[$406>>2] = $403;
 $407 = (($405) + 4)|0;
 $408 = $407;
 HEAP32[$408>>2] = $404;
 $409 = $16;
 $410 = ($409|0)<(0);
 $411 = $410 << 31 >> 31;
 $412 = $8;
 $413 = ($412|0)<(0);
 $414 = $413 << 31 >> 31;
 $415 = (___muldi3(($409|0),($411|0),($412|0),($414|0))|0);
 $416 = (getTempRet0() | 0);
 $417 = $48;
 $418 = $417;
 HEAP32[$418>>2] = $415;
 $419 = (($417) + 4)|0;
 $420 = $419;
 HEAP32[$420>>2] = $416;
 $421 = $16;
 $422 = ($421|0)<(0);
 $423 = $422 << 31 >> 31;
 $424 = $9;
 $425 = ($424|0)<(0);
 $426 = $425 << 31 >> 31;
 $427 = (___muldi3(($421|0),($423|0),($424|0),($426|0))|0);
 $428 = (getTempRet0() | 0);
 $429 = $49;
 $430 = $429;
 HEAP32[$430>>2] = $427;
 $431 = (($429) + 4)|0;
 $432 = $431;
 HEAP32[$432>>2] = $428;
 $433 = $16;
 $434 = ($433|0)<(0);
 $435 = $434 << 31 >> 31;
 $436 = $10;
 $437 = ($436|0)<(0);
 $438 = $437 << 31 >> 31;
 $439 = (___muldi3(($433|0),($435|0),($436|0),($438|0))|0);
 $440 = (getTempRet0() | 0);
 $441 = $50;
 $442 = $441;
 HEAP32[$442>>2] = $439;
 $443 = (($441) + 4)|0;
 $444 = $443;
 HEAP32[$444>>2] = $440;
 $445 = $16;
 $446 = ($445|0)<(0);
 $447 = $446 << 31 >> 31;
 $448 = $11;
 $449 = ($448|0)<(0);
 $450 = $449 << 31 >> 31;
 $451 = (___muldi3(($445|0),($447|0),($448|0),($450|0))|0);
 $452 = (getTempRet0() | 0);
 $453 = $51;
 $454 = $453;
 HEAP32[$454>>2] = $451;
 $455 = (($453) + 4)|0;
 $456 = $455;
 HEAP32[$456>>2] = $452;
 $457 = $16;
 $458 = ($457|0)<(0);
 $459 = $458 << 31 >> 31;
 $460 = $25;
 $461 = ($460|0)<(0);
 $462 = $461 << 31 >> 31;
 $463 = (___muldi3(($457|0),($459|0),($460|0),($462|0))|0);
 $464 = (getTempRet0() | 0);
 $465 = $52;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $6;
 $470 = ($469|0)<(0);
 $471 = $470 << 31 >> 31;
 $472 = $26;
 $473 = ($472|0)<(0);
 $474 = $473 << 31 >> 31;
 $475 = (___muldi3(($469|0),($471|0),($472|0),($474|0))|0);
 $476 = (getTempRet0() | 0);
 $477 = $53;
 $478 = $477;
 HEAP32[$478>>2] = $475;
 $479 = (($477) + 4)|0;
 $480 = $479;
 HEAP32[$480>>2] = $476;
 $481 = $17;
 $482 = ($481|0)<(0);
 $483 = $482 << 31 >> 31;
 $484 = $7;
 $485 = ($484|0)<(0);
 $486 = $485 << 31 >> 31;
 $487 = (___muldi3(($481|0),($483|0),($484|0),($486|0))|0);
 $488 = (getTempRet0() | 0);
 $489 = $54;
 $490 = $489;
 HEAP32[$490>>2] = $487;
 $491 = (($489) + 4)|0;
 $492 = $491;
 HEAP32[$492>>2] = $488;
 $493 = $17;
 $494 = ($493|0)<(0);
 $495 = $494 << 31 >> 31;
 $496 = $8;
 $497 = ($496|0)<(0);
 $498 = $497 << 31 >> 31;
 $499 = (___muldi3(($493|0),($495|0),($496|0),($498|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = $55;
 $502 = $501;
 HEAP32[$502>>2] = $499;
 $503 = (($501) + 4)|0;
 $504 = $503;
 HEAP32[$504>>2] = $500;
 $505 = $17;
 $506 = ($505|0)<(0);
 $507 = $506 << 31 >> 31;
 $508 = $19;
 $509 = ($508|0)<(0);
 $510 = $509 << 31 >> 31;
 $511 = (___muldi3(($505|0),($507|0),($508|0),($510|0))|0);
 $512 = (getTempRet0() | 0);
 $513 = $56;
 $514 = $513;
 HEAP32[$514>>2] = $511;
 $515 = (($513) + 4)|0;
 $516 = $515;
 HEAP32[$516>>2] = $512;
 $517 = $17;
 $518 = ($517|0)<(0);
 $519 = $518 << 31 >> 31;
 $520 = $10;
 $521 = ($520|0)<(0);
 $522 = $521 << 31 >> 31;
 $523 = (___muldi3(($517|0),($519|0),($520|0),($522|0))|0);
 $524 = (getTempRet0() | 0);
 $525 = $57;
 $526 = $525;
 HEAP32[$526>>2] = $523;
 $527 = (($525) + 4)|0;
 $528 = $527;
 HEAP32[$528>>2] = $524;
 $529 = $17;
 $530 = ($529|0)<(0);
 $531 = $530 << 31 >> 31;
 $532 = $24;
 $533 = ($532|0)<(0);
 $534 = $533 << 31 >> 31;
 $535 = (___muldi3(($529|0),($531|0),($532|0),($534|0))|0);
 $536 = (getTempRet0() | 0);
 $537 = $58;
 $538 = $537;
 HEAP32[$538>>2] = $535;
 $539 = (($537) + 4)|0;
 $540 = $539;
 HEAP32[$540>>2] = $536;
 $541 = $17;
 $542 = ($541|0)<(0);
 $543 = $542 << 31 >> 31;
 $544 = $25;
 $545 = ($544|0)<(0);
 $546 = $545 << 31 >> 31;
 $547 = (___muldi3(($541|0),($543|0),($544|0),($546|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = $59;
 $550 = $549;
 HEAP32[$550>>2] = $547;
 $551 = (($549) + 4)|0;
 $552 = $551;
 HEAP32[$552>>2] = $548;
 $553 = $17;
 $554 = ($553|0)<(0);
 $555 = $554 << 31 >> 31;
 $556 = $26;
 $557 = ($556|0)<(0);
 $558 = $557 << 31 >> 31;
 $559 = (___muldi3(($553|0),($555|0),($556|0),($558|0))|0);
 $560 = (getTempRet0() | 0);
 $561 = $60;
 $562 = $561;
 HEAP32[$562>>2] = $559;
 $563 = (($561) + 4)|0;
 $564 = $563;
 HEAP32[$564>>2] = $560;
 $565 = $8;
 $566 = ($565|0)<(0);
 $567 = $566 << 31 >> 31;
 $568 = $8;
 $569 = ($568|0)<(0);
 $570 = $569 << 31 >> 31;
 $571 = (___muldi3(($565|0),($567|0),($568|0),($570|0))|0);
 $572 = (getTempRet0() | 0);
 $573 = $61;
 $574 = $573;
 HEAP32[$574>>2] = $571;
 $575 = (($573) + 4)|0;
 $576 = $575;
 HEAP32[$576>>2] = $572;
 $577 = $18;
 $578 = ($577|0)<(0);
 $579 = $578 << 31 >> 31;
 $580 = $9;
 $581 = ($580|0)<(0);
 $582 = $581 << 31 >> 31;
 $583 = (___muldi3(($577|0),($579|0),($580|0),($582|0))|0);
 $584 = (getTempRet0() | 0);
 $585 = $62;
 $586 = $585;
 HEAP32[$586>>2] = $583;
 $587 = (($585) + 4)|0;
 $588 = $587;
 HEAP32[$588>>2] = $584;
 $589 = $18;
 $590 = ($589|0)<(0);
 $591 = $590 << 31 >> 31;
 $592 = $23;
 $593 = ($592|0)<(0);
 $594 = $593 << 31 >> 31;
 $595 = (___muldi3(($589|0),($591|0),($592|0),($594|0))|0);
 $596 = (getTempRet0() | 0);
 $597 = $63;
 $598 = $597;
 HEAP32[$598>>2] = $595;
 $599 = (($597) + 4)|0;
 $600 = $599;
 HEAP32[$600>>2] = $596;
 $601 = $8;
 $602 = ($601|0)<(0);
 $603 = $602 << 31 >> 31;
 $604 = $24;
 $605 = ($604|0)<(0);
 $606 = $605 << 31 >> 31;
 $607 = (___muldi3(($601|0),($603|0),($604|0),($606|0))|0);
 $608 = (getTempRet0() | 0);
 $609 = $64;
 $610 = $609;
 HEAP32[$610>>2] = $607;
 $611 = (($609) + 4)|0;
 $612 = $611;
 HEAP32[$612>>2] = $608;
 $613 = $18;
 $614 = ($613|0)<(0);
 $615 = $614 << 31 >> 31;
 $616 = $25;
 $617 = ($616|0)<(0);
 $618 = $617 << 31 >> 31;
 $619 = (___muldi3(($613|0),($615|0),($616|0),($618|0))|0);
 $620 = (getTempRet0() | 0);
 $621 = $65;
 $622 = $621;
 HEAP32[$622>>2] = $619;
 $623 = (($621) + 4)|0;
 $624 = $623;
 HEAP32[$624>>2] = $620;
 $625 = $8;
 $626 = ($625|0)<(0);
 $627 = $626 << 31 >> 31;
 $628 = $26;
 $629 = ($628|0)<(0);
 $630 = $629 << 31 >> 31;
 $631 = (___muldi3(($625|0),($627|0),($628|0),($630|0))|0);
 $632 = (getTempRet0() | 0);
 $633 = $66;
 $634 = $633;
 HEAP32[$634>>2] = $631;
 $635 = (($633) + 4)|0;
 $636 = $635;
 HEAP32[$636>>2] = $632;
 $637 = $9;
 $638 = ($637|0)<(0);
 $639 = $638 << 31 >> 31;
 $640 = $22;
 $641 = ($640|0)<(0);
 $642 = $641 << 31 >> 31;
 $643 = (___muldi3(($637|0),($639|0),($640|0),($642|0))|0);
 $644 = (getTempRet0() | 0);
 $645 = $67;
 $646 = $645;
 HEAP32[$646>>2] = $643;
 $647 = (($645) + 4)|0;
 $648 = $647;
 HEAP32[$648>>2] = $644;
 $649 = $19;
 $650 = ($649|0)<(0);
 $651 = $650 << 31 >> 31;
 $652 = $23;
 $653 = ($652|0)<(0);
 $654 = $653 << 31 >> 31;
 $655 = (___muldi3(($649|0),($651|0),($652|0),($654|0))|0);
 $656 = (getTempRet0() | 0);
 $657 = $68;
 $658 = $657;
 HEAP32[$658>>2] = $655;
 $659 = (($657) + 4)|0;
 $660 = $659;
 HEAP32[$660>>2] = $656;
 $661 = $19;
 $662 = ($661|0)<(0);
 $663 = $662 << 31 >> 31;
 $664 = $24;
 $665 = ($664|0)<(0);
 $666 = $665 << 31 >> 31;
 $667 = (___muldi3(($661|0),($663|0),($664|0),($666|0))|0);
 $668 = (getTempRet0() | 0);
 $669 = $69;
 $670 = $669;
 HEAP32[$670>>2] = $667;
 $671 = (($669) + 4)|0;
 $672 = $671;
 HEAP32[$672>>2] = $668;
 $673 = $19;
 $674 = ($673|0)<(0);
 $675 = $674 << 31 >> 31;
 $676 = $25;
 $677 = ($676|0)<(0);
 $678 = $677 << 31 >> 31;
 $679 = (___muldi3(($673|0),($675|0),($676|0),($678|0))|0);
 $680 = (getTempRet0() | 0);
 $681 = $70;
 $682 = $681;
 HEAP32[$682>>2] = $679;
 $683 = (($681) + 4)|0;
 $684 = $683;
 HEAP32[$684>>2] = $680;
 $685 = $19;
 $686 = ($685|0)<(0);
 $687 = $686 << 31 >> 31;
 $688 = $26;
 $689 = ($688|0)<(0);
 $690 = $689 << 31 >> 31;
 $691 = (___muldi3(($685|0),($687|0),($688|0),($690|0))|0);
 $692 = (getTempRet0() | 0);
 $693 = $71;
 $694 = $693;
 HEAP32[$694>>2] = $691;
 $695 = (($693) + 4)|0;
 $696 = $695;
 HEAP32[$696>>2] = $692;
 $697 = $10;
 $698 = ($697|0)<(0);
 $699 = $698 << 31 >> 31;
 $700 = $23;
 $701 = ($700|0)<(0);
 $702 = $701 << 31 >> 31;
 $703 = (___muldi3(($697|0),($699|0),($700|0),($702|0))|0);
 $704 = (getTempRet0() | 0);
 $705 = $72;
 $706 = $705;
 HEAP32[$706>>2] = $703;
 $707 = (($705) + 4)|0;
 $708 = $707;
 HEAP32[$708>>2] = $704;
 $709 = $10;
 $710 = ($709|0)<(0);
 $711 = $710 << 31 >> 31;
 $712 = $24;
 $713 = ($712|0)<(0);
 $714 = $713 << 31 >> 31;
 $715 = (___muldi3(($709|0),($711|0),($712|0),($714|0))|0);
 $716 = (getTempRet0() | 0);
 $717 = $73;
 $718 = $717;
 HEAP32[$718>>2] = $715;
 $719 = (($717) + 4)|0;
 $720 = $719;
 HEAP32[$720>>2] = $716;
 $721 = $20;
 $722 = ($721|0)<(0);
 $723 = $722 << 31 >> 31;
 $724 = $25;
 $725 = ($724|0)<(0);
 $726 = $725 << 31 >> 31;
 $727 = (___muldi3(($721|0),($723|0),($724|0),($726|0))|0);
 $728 = (getTempRet0() | 0);
 $729 = $74;
 $730 = $729;
 HEAP32[$730>>2] = $727;
 $731 = (($729) + 4)|0;
 $732 = $731;
 HEAP32[$732>>2] = $728;
 $733 = $10;
 $734 = ($733|0)<(0);
 $735 = $734 << 31 >> 31;
 $736 = $26;
 $737 = ($736|0)<(0);
 $738 = $737 << 31 >> 31;
 $739 = (___muldi3(($733|0),($735|0),($736|0),($738|0))|0);
 $740 = (getTempRet0() | 0);
 $741 = $75;
 $742 = $741;
 HEAP32[$742>>2] = $739;
 $743 = (($741) + 4)|0;
 $744 = $743;
 HEAP32[$744>>2] = $740;
 $745 = $11;
 $746 = ($745|0)<(0);
 $747 = $746 << 31 >> 31;
 $748 = $24;
 $749 = ($748|0)<(0);
 $750 = $749 << 31 >> 31;
 $751 = (___muldi3(($745|0),($747|0),($748|0),($750|0))|0);
 $752 = (getTempRet0() | 0);
 $753 = $76;
 $754 = $753;
 HEAP32[$754>>2] = $751;
 $755 = (($753) + 4)|0;
 $756 = $755;
 HEAP32[$756>>2] = $752;
 $757 = $21;
 $758 = ($757|0)<(0);
 $759 = $758 << 31 >> 31;
 $760 = $25;
 $761 = ($760|0)<(0);
 $762 = $761 << 31 >> 31;
 $763 = (___muldi3(($757|0),($759|0),($760|0),($762|0))|0);
 $764 = (getTempRet0() | 0);
 $765 = $77;
 $766 = $765;
 HEAP32[$766>>2] = $763;
 $767 = (($765) + 4)|0;
 $768 = $767;
 HEAP32[$768>>2] = $764;
 $769 = $21;
 $770 = ($769|0)<(0);
 $771 = $770 << 31 >> 31;
 $772 = $26;
 $773 = ($772|0)<(0);
 $774 = $773 << 31 >> 31;
 $775 = (___muldi3(($769|0),($771|0),($772|0),($774|0))|0);
 $776 = (getTempRet0() | 0);
 $777 = $78;
 $778 = $777;
 HEAP32[$778>>2] = $775;
 $779 = (($777) + 4)|0;
 $780 = $779;
 HEAP32[$780>>2] = $776;
 $781 = $12;
 $782 = ($781|0)<(0);
 $783 = $782 << 31 >> 31;
 $784 = $25;
 $785 = ($784|0)<(0);
 $786 = $785 << 31 >> 31;
 $787 = (___muldi3(($781|0),($783|0),($784|0),($786|0))|0);
 $788 = (getTempRet0() | 0);
 $789 = $79;
 $790 = $789;
 HEAP32[$790>>2] = $787;
 $791 = (($789) + 4)|0;
 $792 = $791;
 HEAP32[$792>>2] = $788;
 $793 = $12;
 $794 = ($793|0)<(0);
 $795 = $794 << 31 >> 31;
 $796 = $26;
 $797 = ($796|0)<(0);
 $798 = $797 << 31 >> 31;
 $799 = (___muldi3(($793|0),($795|0),($796|0),($798|0))|0);
 $800 = (getTempRet0() | 0);
 $801 = $80;
 $802 = $801;
 HEAP32[$802>>2] = $799;
 $803 = (($801) + 4)|0;
 $804 = $803;
 HEAP32[$804>>2] = $800;
 $805 = $13;
 $806 = ($805|0)<(0);
 $807 = $806 << 31 >> 31;
 $808 = $26;
 $809 = ($808|0)<(0);
 $810 = $809 << 31 >> 31;
 $811 = (___muldi3(($805|0),($807|0),($808|0),($810|0))|0);
 $812 = (getTempRet0() | 0);
 $813 = $81;
 $814 = $813;
 HEAP32[$814>>2] = $811;
 $815 = (($813) + 4)|0;
 $816 = $815;
 HEAP32[$816>>2] = $812;
 $817 = $27;
 $818 = $817;
 $819 = HEAP32[$818>>2]|0;
 $820 = (($817) + 4)|0;
 $821 = $820;
 $822 = HEAP32[$821>>2]|0;
 $823 = $45;
 $824 = $823;
 $825 = HEAP32[$824>>2]|0;
 $826 = (($823) + 4)|0;
 $827 = $826;
 $828 = HEAP32[$827>>2]|0;
 $829 = (_i64Add(($819|0),($822|0),($825|0),($828|0))|0);
 $830 = (getTempRet0() | 0);
 $831 = $52;
 $832 = $831;
 $833 = HEAP32[$832>>2]|0;
 $834 = (($831) + 4)|0;
 $835 = $834;
 $836 = HEAP32[$835>>2]|0;
 $837 = (_i64Add(($829|0),($830|0),($833|0),($836|0))|0);
 $838 = (getTempRet0() | 0);
 $839 = $58;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = (_i64Add(($837|0),($838|0),($841|0),($844|0))|0);
 $846 = (getTempRet0() | 0);
 $847 = $63;
 $848 = $847;
 $849 = HEAP32[$848>>2]|0;
 $850 = (($847) + 4)|0;
 $851 = $850;
 $852 = HEAP32[$851>>2]|0;
 $853 = (_i64Add(($845|0),($846|0),($849|0),($852|0))|0);
 $854 = (getTempRet0() | 0);
 $855 = $67;
 $856 = $855;
 $857 = HEAP32[$856>>2]|0;
 $858 = (($855) + 4)|0;
 $859 = $858;
 $860 = HEAP32[$859>>2]|0;
 $861 = (_i64Add(($853|0),($854|0),($857|0),($860|0))|0);
 $862 = (getTempRet0() | 0);
 $863 = $82;
 $864 = $863;
 HEAP32[$864>>2] = $861;
 $865 = (($863) + 4)|0;
 $866 = $865;
 HEAP32[$866>>2] = $862;
 $867 = $28;
 $868 = $867;
 $869 = HEAP32[$868>>2]|0;
 $870 = (($867) + 4)|0;
 $871 = $870;
 $872 = HEAP32[$871>>2]|0;
 $873 = $53;
 $874 = $873;
 $875 = HEAP32[$874>>2]|0;
 $876 = (($873) + 4)|0;
 $877 = $876;
 $878 = HEAP32[$877>>2]|0;
 $879 = (_i64Add(($869|0),($872|0),($875|0),($878|0))|0);
 $880 = (getTempRet0() | 0);
 $881 = $59;
 $882 = $881;
 $883 = HEAP32[$882>>2]|0;
 $884 = (($881) + 4)|0;
 $885 = $884;
 $886 = HEAP32[$885>>2]|0;
 $887 = (_i64Add(($879|0),($880|0),($883|0),($886|0))|0);
 $888 = (getTempRet0() | 0);
 $889 = $64;
 $890 = $889;
 $891 = HEAP32[$890>>2]|0;
 $892 = (($889) + 4)|0;
 $893 = $892;
 $894 = HEAP32[$893>>2]|0;
 $895 = (_i64Add(($887|0),($888|0),($891|0),($894|0))|0);
 $896 = (getTempRet0() | 0);
 $897 = $68;
 $898 = $897;
 $899 = HEAP32[$898>>2]|0;
 $900 = (($897) + 4)|0;
 $901 = $900;
 $902 = HEAP32[$901>>2]|0;
 $903 = (_i64Add(($895|0),($896|0),($899|0),($902|0))|0);
 $904 = (getTempRet0() | 0);
 $905 = $83;
 $906 = $905;
 HEAP32[$906>>2] = $903;
 $907 = (($905) + 4)|0;
 $908 = $907;
 HEAP32[$908>>2] = $904;
 $909 = $29;
 $910 = $909;
 $911 = HEAP32[$910>>2]|0;
 $912 = (($909) + 4)|0;
 $913 = $912;
 $914 = HEAP32[$913>>2]|0;
 $915 = $37;
 $916 = $915;
 $917 = HEAP32[$916>>2]|0;
 $918 = (($915) + 4)|0;
 $919 = $918;
 $920 = HEAP32[$919>>2]|0;
 $921 = (_i64Add(($911|0),($914|0),($917|0),($920|0))|0);
 $922 = (getTempRet0() | 0);
 $923 = $60;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (_i64Add(($921|0),($922|0),($925|0),($928|0))|0);
 $930 = (getTempRet0() | 0);
 $931 = $65;
 $932 = $931;
 $933 = HEAP32[$932>>2]|0;
 $934 = (($931) + 4)|0;
 $935 = $934;
 $936 = HEAP32[$935>>2]|0;
 $937 = (_i64Add(($929|0),($930|0),($933|0),($936|0))|0);
 $938 = (getTempRet0() | 0);
 $939 = $69;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (_i64Add(($937|0),($938|0),($941|0),($944|0))|0);
 $946 = (getTempRet0() | 0);
 $947 = $72;
 $948 = $947;
 $949 = HEAP32[$948>>2]|0;
 $950 = (($947) + 4)|0;
 $951 = $950;
 $952 = HEAP32[$951>>2]|0;
 $953 = (_i64Add(($945|0),($946|0),($949|0),($952|0))|0);
 $954 = (getTempRet0() | 0);
 $955 = $84;
 $956 = $955;
 HEAP32[$956>>2] = $953;
 $957 = (($955) + 4)|0;
 $958 = $957;
 HEAP32[$958>>2] = $954;
 $959 = $30;
 $960 = $959;
 $961 = HEAP32[$960>>2]|0;
 $962 = (($959) + 4)|0;
 $963 = $962;
 $964 = HEAP32[$963>>2]|0;
 $965 = $38;
 $966 = $965;
 $967 = HEAP32[$966>>2]|0;
 $968 = (($965) + 4)|0;
 $969 = $968;
 $970 = HEAP32[$969>>2]|0;
 $971 = (_i64Add(($961|0),($964|0),($967|0),($970|0))|0);
 $972 = (getTempRet0() | 0);
 $973 = $66;
 $974 = $973;
 $975 = HEAP32[$974>>2]|0;
 $976 = (($973) + 4)|0;
 $977 = $976;
 $978 = HEAP32[$977>>2]|0;
 $979 = (_i64Add(($971|0),($972|0),($975|0),($978|0))|0);
 $980 = (getTempRet0() | 0);
 $981 = $70;
 $982 = $981;
 $983 = HEAP32[$982>>2]|0;
 $984 = (($981) + 4)|0;
 $985 = $984;
 $986 = HEAP32[$985>>2]|0;
 $987 = (_i64Add(($979|0),($980|0),($983|0),($986|0))|0);
 $988 = (getTempRet0() | 0);
 $989 = $73;
 $990 = $989;
 $991 = HEAP32[$990>>2]|0;
 $992 = (($989) + 4)|0;
 $993 = $992;
 $994 = HEAP32[$993>>2]|0;
 $995 = (_i64Add(($987|0),($988|0),($991|0),($994|0))|0);
 $996 = (getTempRet0() | 0);
 $997 = $85;
 $998 = $997;
 HEAP32[$998>>2] = $995;
 $999 = (($997) + 4)|0;
 $1000 = $999;
 HEAP32[$1000>>2] = $996;
 $1001 = $31;
 $1002 = $1001;
 $1003 = HEAP32[$1002>>2]|0;
 $1004 = (($1001) + 4)|0;
 $1005 = $1004;
 $1006 = HEAP32[$1005>>2]|0;
 $1007 = $39;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1007) + 4)|0;
 $1011 = $1010;
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (_i64Add(($1003|0),($1006|0),($1009|0),($1012|0))|0);
 $1014 = (getTempRet0() | 0);
 $1015 = $46;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = (($1015) + 4)|0;
 $1019 = $1018;
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (_i64Add(($1013|0),($1014|0),($1017|0),($1020|0))|0);
 $1022 = (getTempRet0() | 0);
 $1023 = $71;
 $1024 = $1023;
 $1025 = HEAP32[$1024>>2]|0;
 $1026 = (($1023) + 4)|0;
 $1027 = $1026;
 $1028 = HEAP32[$1027>>2]|0;
 $1029 = (_i64Add(($1021|0),($1022|0),($1025|0),($1028|0))|0);
 $1030 = (getTempRet0() | 0);
 $1031 = $74;
 $1032 = $1031;
 $1033 = HEAP32[$1032>>2]|0;
 $1034 = (($1031) + 4)|0;
 $1035 = $1034;
 $1036 = HEAP32[$1035>>2]|0;
 $1037 = (_i64Add(($1029|0),($1030|0),($1033|0),($1036|0))|0);
 $1038 = (getTempRet0() | 0);
 $1039 = $76;
 $1040 = $1039;
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = (($1039) + 4)|0;
 $1043 = $1042;
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = (_i64Add(($1037|0),($1038|0),($1041|0),($1044|0))|0);
 $1046 = (getTempRet0() | 0);
 $1047 = $86;
 $1048 = $1047;
 HEAP32[$1048>>2] = $1045;
 $1049 = (($1047) + 4)|0;
 $1050 = $1049;
 HEAP32[$1050>>2] = $1046;
 $1051 = $32;
 $1052 = $1051;
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + 4)|0;
 $1055 = $1054;
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = $40;
 $1058 = $1057;
 $1059 = HEAP32[$1058>>2]|0;
 $1060 = (($1057) + 4)|0;
 $1061 = $1060;
 $1062 = HEAP32[$1061>>2]|0;
 $1063 = (_i64Add(($1053|0),($1056|0),($1059|0),($1062|0))|0);
 $1064 = (getTempRet0() | 0);
 $1065 = $47;
 $1066 = $1065;
 $1067 = HEAP32[$1066>>2]|0;
 $1068 = (($1065) + 4)|0;
 $1069 = $1068;
 $1070 = HEAP32[$1069>>2]|0;
 $1071 = (_i64Add(($1063|0),($1064|0),($1067|0),($1070|0))|0);
 $1072 = (getTempRet0() | 0);
 $1073 = $75;
 $1074 = $1073;
 $1075 = HEAP32[$1074>>2]|0;
 $1076 = (($1073) + 4)|0;
 $1077 = $1076;
 $1078 = HEAP32[$1077>>2]|0;
 $1079 = (_i64Add(($1071|0),($1072|0),($1075|0),($1078|0))|0);
 $1080 = (getTempRet0() | 0);
 $1081 = $77;
 $1082 = $1081;
 $1083 = HEAP32[$1082>>2]|0;
 $1084 = (($1081) + 4)|0;
 $1085 = $1084;
 $1086 = HEAP32[$1085>>2]|0;
 $1087 = (_i64Add(($1079|0),($1080|0),($1083|0),($1086|0))|0);
 $1088 = (getTempRet0() | 0);
 $1089 = $87;
 $1090 = $1089;
 HEAP32[$1090>>2] = $1087;
 $1091 = (($1089) + 4)|0;
 $1092 = $1091;
 HEAP32[$1092>>2] = $1088;
 $1093 = $33;
 $1094 = $1093;
 $1095 = HEAP32[$1094>>2]|0;
 $1096 = (($1093) + 4)|0;
 $1097 = $1096;
 $1098 = HEAP32[$1097>>2]|0;
 $1099 = $41;
 $1100 = $1099;
 $1101 = HEAP32[$1100>>2]|0;
 $1102 = (($1099) + 4)|0;
 $1103 = $1102;
 $1104 = HEAP32[$1103>>2]|0;
 $1105 = (_i64Add(($1095|0),($1098|0),($1101|0),($1104|0))|0);
 $1106 = (getTempRet0() | 0);
 $1107 = $48;
 $1108 = $1107;
 $1109 = HEAP32[$1108>>2]|0;
 $1110 = (($1107) + 4)|0;
 $1111 = $1110;
 $1112 = HEAP32[$1111>>2]|0;
 $1113 = (_i64Add(($1105|0),($1106|0),($1109|0),($1112|0))|0);
 $1114 = (getTempRet0() | 0);
 $1115 = $54;
 $1116 = $1115;
 $1117 = HEAP32[$1116>>2]|0;
 $1118 = (($1115) + 4)|0;
 $1119 = $1118;
 $1120 = HEAP32[$1119>>2]|0;
 $1121 = (_i64Add(($1113|0),($1114|0),($1117|0),($1120|0))|0);
 $1122 = (getTempRet0() | 0);
 $1123 = $78;
 $1124 = $1123;
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = (($1123) + 4)|0;
 $1127 = $1126;
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = (_i64Add(($1121|0),($1122|0),($1125|0),($1128|0))|0);
 $1130 = (getTempRet0() | 0);
 $1131 = $79;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = (_i64Add(($1129|0),($1130|0),($1133|0),($1136|0))|0);
 $1138 = (getTempRet0() | 0);
 $1139 = $88;
 $1140 = $1139;
 HEAP32[$1140>>2] = $1137;
 $1141 = (($1139) + 4)|0;
 $1142 = $1141;
 HEAP32[$1142>>2] = $1138;
 $1143 = $34;
 $1144 = $1143;
 $1145 = HEAP32[$1144>>2]|0;
 $1146 = (($1143) + 4)|0;
 $1147 = $1146;
 $1148 = HEAP32[$1147>>2]|0;
 $1149 = $42;
 $1150 = $1149;
 $1151 = HEAP32[$1150>>2]|0;
 $1152 = (($1149) + 4)|0;
 $1153 = $1152;
 $1154 = HEAP32[$1153>>2]|0;
 $1155 = (_i64Add(($1145|0),($1148|0),($1151|0),($1154|0))|0);
 $1156 = (getTempRet0() | 0);
 $1157 = $49;
 $1158 = $1157;
 $1159 = HEAP32[$1158>>2]|0;
 $1160 = (($1157) + 4)|0;
 $1161 = $1160;
 $1162 = HEAP32[$1161>>2]|0;
 $1163 = (_i64Add(($1155|0),($1156|0),($1159|0),($1162|0))|0);
 $1164 = (getTempRet0() | 0);
 $1165 = $55;
 $1166 = $1165;
 $1167 = HEAP32[$1166>>2]|0;
 $1168 = (($1165) + 4)|0;
 $1169 = $1168;
 $1170 = HEAP32[$1169>>2]|0;
 $1171 = (_i64Add(($1163|0),($1164|0),($1167|0),($1170|0))|0);
 $1172 = (getTempRet0() | 0);
 $1173 = $80;
 $1174 = $1173;
 $1175 = HEAP32[$1174>>2]|0;
 $1176 = (($1173) + 4)|0;
 $1177 = $1176;
 $1178 = HEAP32[$1177>>2]|0;
 $1179 = (_i64Add(($1171|0),($1172|0),($1175|0),($1178|0))|0);
 $1180 = (getTempRet0() | 0);
 $1181 = $89;
 $1182 = $1181;
 HEAP32[$1182>>2] = $1179;
 $1183 = (($1181) + 4)|0;
 $1184 = $1183;
 HEAP32[$1184>>2] = $1180;
 $1185 = $35;
 $1186 = $1185;
 $1187 = HEAP32[$1186>>2]|0;
 $1188 = (($1185) + 4)|0;
 $1189 = $1188;
 $1190 = HEAP32[$1189>>2]|0;
 $1191 = $43;
 $1192 = $1191;
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + 4)|0;
 $1195 = $1194;
 $1196 = HEAP32[$1195>>2]|0;
 $1197 = (_i64Add(($1187|0),($1190|0),($1193|0),($1196|0))|0);
 $1198 = (getTempRet0() | 0);
 $1199 = $50;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (_i64Add(($1197|0),($1198|0),($1201|0),($1204|0))|0);
 $1206 = (getTempRet0() | 0);
 $1207 = $56;
 $1208 = $1207;
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1207) + 4)|0;
 $1211 = $1210;
 $1212 = HEAP32[$1211>>2]|0;
 $1213 = (_i64Add(($1205|0),($1206|0),($1209|0),($1212|0))|0);
 $1214 = (getTempRet0() | 0);
 $1215 = $61;
 $1216 = $1215;
 $1217 = HEAP32[$1216>>2]|0;
 $1218 = (($1215) + 4)|0;
 $1219 = $1218;
 $1220 = HEAP32[$1219>>2]|0;
 $1221 = (_i64Add(($1213|0),($1214|0),($1217|0),($1220|0))|0);
 $1222 = (getTempRet0() | 0);
 $1223 = $81;
 $1224 = $1223;
 $1225 = HEAP32[$1224>>2]|0;
 $1226 = (($1223) + 4)|0;
 $1227 = $1226;
 $1228 = HEAP32[$1227>>2]|0;
 $1229 = (_i64Add(($1221|0),($1222|0),($1225|0),($1228|0))|0);
 $1230 = (getTempRet0() | 0);
 $1231 = $90;
 $1232 = $1231;
 HEAP32[$1232>>2] = $1229;
 $1233 = (($1231) + 4)|0;
 $1234 = $1233;
 HEAP32[$1234>>2] = $1230;
 $1235 = $36;
 $1236 = $1235;
 $1237 = HEAP32[$1236>>2]|0;
 $1238 = (($1235) + 4)|0;
 $1239 = $1238;
 $1240 = HEAP32[$1239>>2]|0;
 $1241 = $44;
 $1242 = $1241;
 $1243 = HEAP32[$1242>>2]|0;
 $1244 = (($1241) + 4)|0;
 $1245 = $1244;
 $1246 = HEAP32[$1245>>2]|0;
 $1247 = (_i64Add(($1237|0),($1240|0),($1243|0),($1246|0))|0);
 $1248 = (getTempRet0() | 0);
 $1249 = $51;
 $1250 = $1249;
 $1251 = HEAP32[$1250>>2]|0;
 $1252 = (($1249) + 4)|0;
 $1253 = $1252;
 $1254 = HEAP32[$1253>>2]|0;
 $1255 = (_i64Add(($1247|0),($1248|0),($1251|0),($1254|0))|0);
 $1256 = (getTempRet0() | 0);
 $1257 = $57;
 $1258 = $1257;
 $1259 = HEAP32[$1258>>2]|0;
 $1260 = (($1257) + 4)|0;
 $1261 = $1260;
 $1262 = HEAP32[$1261>>2]|0;
 $1263 = (_i64Add(($1255|0),($1256|0),($1259|0),($1262|0))|0);
 $1264 = (getTempRet0() | 0);
 $1265 = $62;
 $1266 = $1265;
 $1267 = HEAP32[$1266>>2]|0;
 $1268 = (($1265) + 4)|0;
 $1269 = $1268;
 $1270 = HEAP32[$1269>>2]|0;
 $1271 = (_i64Add(($1263|0),($1264|0),($1267|0),($1270|0))|0);
 $1272 = (getTempRet0() | 0);
 $1273 = $91;
 $1274 = $1273;
 HEAP32[$1274>>2] = $1271;
 $1275 = (($1273) + 4)|0;
 $1276 = $1275;
 HEAP32[$1276>>2] = $1272;
 $1277 = $82;
 $1278 = $1277;
 $1279 = HEAP32[$1278>>2]|0;
 $1280 = (($1277) + 4)|0;
 $1281 = $1280;
 $1282 = HEAP32[$1281>>2]|0;
 $1283 = $82;
 $1284 = $1283;
 $1285 = HEAP32[$1284>>2]|0;
 $1286 = (($1283) + 4)|0;
 $1287 = $1286;
 $1288 = HEAP32[$1287>>2]|0;
 $1289 = (_i64Add(($1285|0),($1288|0),($1279|0),($1282|0))|0);
 $1290 = (getTempRet0() | 0);
 $1291 = $82;
 $1292 = $1291;
 HEAP32[$1292>>2] = $1289;
 $1293 = (($1291) + 4)|0;
 $1294 = $1293;
 HEAP32[$1294>>2] = $1290;
 $1295 = $83;
 $1296 = $1295;
 $1297 = HEAP32[$1296>>2]|0;
 $1298 = (($1295) + 4)|0;
 $1299 = $1298;
 $1300 = HEAP32[$1299>>2]|0;
 $1301 = $83;
 $1302 = $1301;
 $1303 = HEAP32[$1302>>2]|0;
 $1304 = (($1301) + 4)|0;
 $1305 = $1304;
 $1306 = HEAP32[$1305>>2]|0;
 $1307 = (_i64Add(($1303|0),($1306|0),($1297|0),($1300|0))|0);
 $1308 = (getTempRet0() | 0);
 $1309 = $83;
 $1310 = $1309;
 HEAP32[$1310>>2] = $1307;
 $1311 = (($1309) + 4)|0;
 $1312 = $1311;
 HEAP32[$1312>>2] = $1308;
 $1313 = $84;
 $1314 = $1313;
 $1315 = HEAP32[$1314>>2]|0;
 $1316 = (($1313) + 4)|0;
 $1317 = $1316;
 $1318 = HEAP32[$1317>>2]|0;
 $1319 = $84;
 $1320 = $1319;
 $1321 = HEAP32[$1320>>2]|0;
 $1322 = (($1319) + 4)|0;
 $1323 = $1322;
 $1324 = HEAP32[$1323>>2]|0;
 $1325 = (_i64Add(($1321|0),($1324|0),($1315|0),($1318|0))|0);
 $1326 = (getTempRet0() | 0);
 $1327 = $84;
 $1328 = $1327;
 HEAP32[$1328>>2] = $1325;
 $1329 = (($1327) + 4)|0;
 $1330 = $1329;
 HEAP32[$1330>>2] = $1326;
 $1331 = $85;
 $1332 = $1331;
 $1333 = HEAP32[$1332>>2]|0;
 $1334 = (($1331) + 4)|0;
 $1335 = $1334;
 $1336 = HEAP32[$1335>>2]|0;
 $1337 = $85;
 $1338 = $1337;
 $1339 = HEAP32[$1338>>2]|0;
 $1340 = (($1337) + 4)|0;
 $1341 = $1340;
 $1342 = HEAP32[$1341>>2]|0;
 $1343 = (_i64Add(($1339|0),($1342|0),($1333|0),($1336|0))|0);
 $1344 = (getTempRet0() | 0);
 $1345 = $85;
 $1346 = $1345;
 HEAP32[$1346>>2] = $1343;
 $1347 = (($1345) + 4)|0;
 $1348 = $1347;
 HEAP32[$1348>>2] = $1344;
 $1349 = $86;
 $1350 = $1349;
 $1351 = HEAP32[$1350>>2]|0;
 $1352 = (($1349) + 4)|0;
 $1353 = $1352;
 $1354 = HEAP32[$1353>>2]|0;
 $1355 = $86;
 $1356 = $1355;
 $1357 = HEAP32[$1356>>2]|0;
 $1358 = (($1355) + 4)|0;
 $1359 = $1358;
 $1360 = HEAP32[$1359>>2]|0;
 $1361 = (_i64Add(($1357|0),($1360|0),($1351|0),($1354|0))|0);
 $1362 = (getTempRet0() | 0);
 $1363 = $86;
 $1364 = $1363;
 HEAP32[$1364>>2] = $1361;
 $1365 = (($1363) + 4)|0;
 $1366 = $1365;
 HEAP32[$1366>>2] = $1362;
 $1367 = $87;
 $1368 = $1367;
 $1369 = HEAP32[$1368>>2]|0;
 $1370 = (($1367) + 4)|0;
 $1371 = $1370;
 $1372 = HEAP32[$1371>>2]|0;
 $1373 = $87;
 $1374 = $1373;
 $1375 = HEAP32[$1374>>2]|0;
 $1376 = (($1373) + 4)|0;
 $1377 = $1376;
 $1378 = HEAP32[$1377>>2]|0;
 $1379 = (_i64Add(($1375|0),($1378|0),($1369|0),($1372|0))|0);
 $1380 = (getTempRet0() | 0);
 $1381 = $87;
 $1382 = $1381;
 HEAP32[$1382>>2] = $1379;
 $1383 = (($1381) + 4)|0;
 $1384 = $1383;
 HEAP32[$1384>>2] = $1380;
 $1385 = $88;
 $1386 = $1385;
 $1387 = HEAP32[$1386>>2]|0;
 $1388 = (($1385) + 4)|0;
 $1389 = $1388;
 $1390 = HEAP32[$1389>>2]|0;
 $1391 = $88;
 $1392 = $1391;
 $1393 = HEAP32[$1392>>2]|0;
 $1394 = (($1391) + 4)|0;
 $1395 = $1394;
 $1396 = HEAP32[$1395>>2]|0;
 $1397 = (_i64Add(($1393|0),($1396|0),($1387|0),($1390|0))|0);
 $1398 = (getTempRet0() | 0);
 $1399 = $88;
 $1400 = $1399;
 HEAP32[$1400>>2] = $1397;
 $1401 = (($1399) + 4)|0;
 $1402 = $1401;
 HEAP32[$1402>>2] = $1398;
 $1403 = $89;
 $1404 = $1403;
 $1405 = HEAP32[$1404>>2]|0;
 $1406 = (($1403) + 4)|0;
 $1407 = $1406;
 $1408 = HEAP32[$1407>>2]|0;
 $1409 = $89;
 $1410 = $1409;
 $1411 = HEAP32[$1410>>2]|0;
 $1412 = (($1409) + 4)|0;
 $1413 = $1412;
 $1414 = HEAP32[$1413>>2]|0;
 $1415 = (_i64Add(($1411|0),($1414|0),($1405|0),($1408|0))|0);
 $1416 = (getTempRet0() | 0);
 $1417 = $89;
 $1418 = $1417;
 HEAP32[$1418>>2] = $1415;
 $1419 = (($1417) + 4)|0;
 $1420 = $1419;
 HEAP32[$1420>>2] = $1416;
 $1421 = $90;
 $1422 = $1421;
 $1423 = HEAP32[$1422>>2]|0;
 $1424 = (($1421) + 4)|0;
 $1425 = $1424;
 $1426 = HEAP32[$1425>>2]|0;
 $1427 = $90;
 $1428 = $1427;
 $1429 = HEAP32[$1428>>2]|0;
 $1430 = (($1427) + 4)|0;
 $1431 = $1430;
 $1432 = HEAP32[$1431>>2]|0;
 $1433 = (_i64Add(($1429|0),($1432|0),($1423|0),($1426|0))|0);
 $1434 = (getTempRet0() | 0);
 $1435 = $90;
 $1436 = $1435;
 HEAP32[$1436>>2] = $1433;
 $1437 = (($1435) + 4)|0;
 $1438 = $1437;
 HEAP32[$1438>>2] = $1434;
 $1439 = $91;
 $1440 = $1439;
 $1441 = HEAP32[$1440>>2]|0;
 $1442 = (($1439) + 4)|0;
 $1443 = $1442;
 $1444 = HEAP32[$1443>>2]|0;
 $1445 = $91;
 $1446 = $1445;
 $1447 = HEAP32[$1446>>2]|0;
 $1448 = (($1445) + 4)|0;
 $1449 = $1448;
 $1450 = HEAP32[$1449>>2]|0;
 $1451 = (_i64Add(($1447|0),($1450|0),($1441|0),($1444|0))|0);
 $1452 = (getTempRet0() | 0);
 $1453 = $91;
 $1454 = $1453;
 HEAP32[$1454>>2] = $1451;
 $1455 = (($1453) + 4)|0;
 $1456 = $1455;
 HEAP32[$1456>>2] = $1452;
 $1457 = $82;
 $1458 = $1457;
 $1459 = HEAP32[$1458>>2]|0;
 $1460 = (($1457) + 4)|0;
 $1461 = $1460;
 $1462 = HEAP32[$1461>>2]|0;
 $1463 = (_i64Add(($1459|0),($1462|0),33554432,0)|0);
 $1464 = (getTempRet0() | 0);
 $1465 = (_bitshift64Ashr(($1463|0),($1464|0),26)|0);
 $1466 = (getTempRet0() | 0);
 $1467 = $92;
 $1468 = $1467;
 HEAP32[$1468>>2] = $1465;
 $1469 = (($1467) + 4)|0;
 $1470 = $1469;
 HEAP32[$1470>>2] = $1466;
 $1471 = $92;
 $1472 = $1471;
 $1473 = HEAP32[$1472>>2]|0;
 $1474 = (($1471) + 4)|0;
 $1475 = $1474;
 $1476 = HEAP32[$1475>>2]|0;
 $1477 = $83;
 $1478 = $1477;
 $1479 = HEAP32[$1478>>2]|0;
 $1480 = (($1477) + 4)|0;
 $1481 = $1480;
 $1482 = HEAP32[$1481>>2]|0;
 $1483 = (_i64Add(($1479|0),($1482|0),($1473|0),($1476|0))|0);
 $1484 = (getTempRet0() | 0);
 $1485 = $83;
 $1486 = $1485;
 HEAP32[$1486>>2] = $1483;
 $1487 = (($1485) + 4)|0;
 $1488 = $1487;
 HEAP32[$1488>>2] = $1484;
 $1489 = $92;
 $1490 = $1489;
 $1491 = HEAP32[$1490>>2]|0;
 $1492 = (($1489) + 4)|0;
 $1493 = $1492;
 $1494 = HEAP32[$1493>>2]|0;
 $1495 = (_bitshift64Shl(($1491|0),($1494|0),26)|0);
 $1496 = (getTempRet0() | 0);
 $1497 = $82;
 $1498 = $1497;
 $1499 = HEAP32[$1498>>2]|0;
 $1500 = (($1497) + 4)|0;
 $1501 = $1500;
 $1502 = HEAP32[$1501>>2]|0;
 $1503 = (_i64Subtract(($1499|0),($1502|0),($1495|0),($1496|0))|0);
 $1504 = (getTempRet0() | 0);
 $1505 = $82;
 $1506 = $1505;
 HEAP32[$1506>>2] = $1503;
 $1507 = (($1505) + 4)|0;
 $1508 = $1507;
 HEAP32[$1508>>2] = $1504;
 $1509 = $86;
 $1510 = $1509;
 $1511 = HEAP32[$1510>>2]|0;
 $1512 = (($1509) + 4)|0;
 $1513 = $1512;
 $1514 = HEAP32[$1513>>2]|0;
 $1515 = (_i64Add(($1511|0),($1514|0),33554432,0)|0);
 $1516 = (getTempRet0() | 0);
 $1517 = (_bitshift64Ashr(($1515|0),($1516|0),26)|0);
 $1518 = (getTempRet0() | 0);
 $1519 = $96;
 $1520 = $1519;
 HEAP32[$1520>>2] = $1517;
 $1521 = (($1519) + 4)|0;
 $1522 = $1521;
 HEAP32[$1522>>2] = $1518;
 $1523 = $96;
 $1524 = $1523;
 $1525 = HEAP32[$1524>>2]|0;
 $1526 = (($1523) + 4)|0;
 $1527 = $1526;
 $1528 = HEAP32[$1527>>2]|0;
 $1529 = $87;
 $1530 = $1529;
 $1531 = HEAP32[$1530>>2]|0;
 $1532 = (($1529) + 4)|0;
 $1533 = $1532;
 $1534 = HEAP32[$1533>>2]|0;
 $1535 = (_i64Add(($1531|0),($1534|0),($1525|0),($1528|0))|0);
 $1536 = (getTempRet0() | 0);
 $1537 = $87;
 $1538 = $1537;
 HEAP32[$1538>>2] = $1535;
 $1539 = (($1537) + 4)|0;
 $1540 = $1539;
 HEAP32[$1540>>2] = $1536;
 $1541 = $96;
 $1542 = $1541;
 $1543 = HEAP32[$1542>>2]|0;
 $1544 = (($1541) + 4)|0;
 $1545 = $1544;
 $1546 = HEAP32[$1545>>2]|0;
 $1547 = (_bitshift64Shl(($1543|0),($1546|0),26)|0);
 $1548 = (getTempRet0() | 0);
 $1549 = $86;
 $1550 = $1549;
 $1551 = HEAP32[$1550>>2]|0;
 $1552 = (($1549) + 4)|0;
 $1553 = $1552;
 $1554 = HEAP32[$1553>>2]|0;
 $1555 = (_i64Subtract(($1551|0),($1554|0),($1547|0),($1548|0))|0);
 $1556 = (getTempRet0() | 0);
 $1557 = $86;
 $1558 = $1557;
 HEAP32[$1558>>2] = $1555;
 $1559 = (($1557) + 4)|0;
 $1560 = $1559;
 HEAP32[$1560>>2] = $1556;
 $1561 = $83;
 $1562 = $1561;
 $1563 = HEAP32[$1562>>2]|0;
 $1564 = (($1561) + 4)|0;
 $1565 = $1564;
 $1566 = HEAP32[$1565>>2]|0;
 $1567 = (_i64Add(($1563|0),($1566|0),16777216,0)|0);
 $1568 = (getTempRet0() | 0);
 $1569 = (_bitshift64Ashr(($1567|0),($1568|0),25)|0);
 $1570 = (getTempRet0() | 0);
 $1571 = $93;
 $1572 = $1571;
 HEAP32[$1572>>2] = $1569;
 $1573 = (($1571) + 4)|0;
 $1574 = $1573;
 HEAP32[$1574>>2] = $1570;
 $1575 = $93;
 $1576 = $1575;
 $1577 = HEAP32[$1576>>2]|0;
 $1578 = (($1575) + 4)|0;
 $1579 = $1578;
 $1580 = HEAP32[$1579>>2]|0;
 $1581 = $84;
 $1582 = $1581;
 $1583 = HEAP32[$1582>>2]|0;
 $1584 = (($1581) + 4)|0;
 $1585 = $1584;
 $1586 = HEAP32[$1585>>2]|0;
 $1587 = (_i64Add(($1583|0),($1586|0),($1577|0),($1580|0))|0);
 $1588 = (getTempRet0() | 0);
 $1589 = $84;
 $1590 = $1589;
 HEAP32[$1590>>2] = $1587;
 $1591 = (($1589) + 4)|0;
 $1592 = $1591;
 HEAP32[$1592>>2] = $1588;
 $1593 = $93;
 $1594 = $1593;
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = (($1593) + 4)|0;
 $1597 = $1596;
 $1598 = HEAP32[$1597>>2]|0;
 $1599 = (_bitshift64Shl(($1595|0),($1598|0),25)|0);
 $1600 = (getTempRet0() | 0);
 $1601 = $83;
 $1602 = $1601;
 $1603 = HEAP32[$1602>>2]|0;
 $1604 = (($1601) + 4)|0;
 $1605 = $1604;
 $1606 = HEAP32[$1605>>2]|0;
 $1607 = (_i64Subtract(($1603|0),($1606|0),($1599|0),($1600|0))|0);
 $1608 = (getTempRet0() | 0);
 $1609 = $83;
 $1610 = $1609;
 HEAP32[$1610>>2] = $1607;
 $1611 = (($1609) + 4)|0;
 $1612 = $1611;
 HEAP32[$1612>>2] = $1608;
 $1613 = $87;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = (($1613) + 4)|0;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (_i64Add(($1615|0),($1618|0),16777216,0)|0);
 $1620 = (getTempRet0() | 0);
 $1621 = (_bitshift64Ashr(($1619|0),($1620|0),25)|0);
 $1622 = (getTempRet0() | 0);
 $1623 = $97;
 $1624 = $1623;
 HEAP32[$1624>>2] = $1621;
 $1625 = (($1623) + 4)|0;
 $1626 = $1625;
 HEAP32[$1626>>2] = $1622;
 $1627 = $97;
 $1628 = $1627;
 $1629 = HEAP32[$1628>>2]|0;
 $1630 = (($1627) + 4)|0;
 $1631 = $1630;
 $1632 = HEAP32[$1631>>2]|0;
 $1633 = $88;
 $1634 = $1633;
 $1635 = HEAP32[$1634>>2]|0;
 $1636 = (($1633) + 4)|0;
 $1637 = $1636;
 $1638 = HEAP32[$1637>>2]|0;
 $1639 = (_i64Add(($1635|0),($1638|0),($1629|0),($1632|0))|0);
 $1640 = (getTempRet0() | 0);
 $1641 = $88;
 $1642 = $1641;
 HEAP32[$1642>>2] = $1639;
 $1643 = (($1641) + 4)|0;
 $1644 = $1643;
 HEAP32[$1644>>2] = $1640;
 $1645 = $97;
 $1646 = $1645;
 $1647 = HEAP32[$1646>>2]|0;
 $1648 = (($1645) + 4)|0;
 $1649 = $1648;
 $1650 = HEAP32[$1649>>2]|0;
 $1651 = (_bitshift64Shl(($1647|0),($1650|0),25)|0);
 $1652 = (getTempRet0() | 0);
 $1653 = $87;
 $1654 = $1653;
 $1655 = HEAP32[$1654>>2]|0;
 $1656 = (($1653) + 4)|0;
 $1657 = $1656;
 $1658 = HEAP32[$1657>>2]|0;
 $1659 = (_i64Subtract(($1655|0),($1658|0),($1651|0),($1652|0))|0);
 $1660 = (getTempRet0() | 0);
 $1661 = $87;
 $1662 = $1661;
 HEAP32[$1662>>2] = $1659;
 $1663 = (($1661) + 4)|0;
 $1664 = $1663;
 HEAP32[$1664>>2] = $1660;
 $1665 = $84;
 $1666 = $1665;
 $1667 = HEAP32[$1666>>2]|0;
 $1668 = (($1665) + 4)|0;
 $1669 = $1668;
 $1670 = HEAP32[$1669>>2]|0;
 $1671 = (_i64Add(($1667|0),($1670|0),33554432,0)|0);
 $1672 = (getTempRet0() | 0);
 $1673 = (_bitshift64Ashr(($1671|0),($1672|0),26)|0);
 $1674 = (getTempRet0() | 0);
 $1675 = $94;
 $1676 = $1675;
 HEAP32[$1676>>2] = $1673;
 $1677 = (($1675) + 4)|0;
 $1678 = $1677;
 HEAP32[$1678>>2] = $1674;
 $1679 = $94;
 $1680 = $1679;
 $1681 = HEAP32[$1680>>2]|0;
 $1682 = (($1679) + 4)|0;
 $1683 = $1682;
 $1684 = HEAP32[$1683>>2]|0;
 $1685 = $85;
 $1686 = $1685;
 $1687 = HEAP32[$1686>>2]|0;
 $1688 = (($1685) + 4)|0;
 $1689 = $1688;
 $1690 = HEAP32[$1689>>2]|0;
 $1691 = (_i64Add(($1687|0),($1690|0),($1681|0),($1684|0))|0);
 $1692 = (getTempRet0() | 0);
 $1693 = $85;
 $1694 = $1693;
 HEAP32[$1694>>2] = $1691;
 $1695 = (($1693) + 4)|0;
 $1696 = $1695;
 HEAP32[$1696>>2] = $1692;
 $1697 = $94;
 $1698 = $1697;
 $1699 = HEAP32[$1698>>2]|0;
 $1700 = (($1697) + 4)|0;
 $1701 = $1700;
 $1702 = HEAP32[$1701>>2]|0;
 $1703 = (_bitshift64Shl(($1699|0),($1702|0),26)|0);
 $1704 = (getTempRet0() | 0);
 $1705 = $84;
 $1706 = $1705;
 $1707 = HEAP32[$1706>>2]|0;
 $1708 = (($1705) + 4)|0;
 $1709 = $1708;
 $1710 = HEAP32[$1709>>2]|0;
 $1711 = (_i64Subtract(($1707|0),($1710|0),($1703|0),($1704|0))|0);
 $1712 = (getTempRet0() | 0);
 $1713 = $84;
 $1714 = $1713;
 HEAP32[$1714>>2] = $1711;
 $1715 = (($1713) + 4)|0;
 $1716 = $1715;
 HEAP32[$1716>>2] = $1712;
 $1717 = $88;
 $1718 = $1717;
 $1719 = HEAP32[$1718>>2]|0;
 $1720 = (($1717) + 4)|0;
 $1721 = $1720;
 $1722 = HEAP32[$1721>>2]|0;
 $1723 = (_i64Add(($1719|0),($1722|0),33554432,0)|0);
 $1724 = (getTempRet0() | 0);
 $1725 = (_bitshift64Ashr(($1723|0),($1724|0),26)|0);
 $1726 = (getTempRet0() | 0);
 $1727 = $98;
 $1728 = $1727;
 HEAP32[$1728>>2] = $1725;
 $1729 = (($1727) + 4)|0;
 $1730 = $1729;
 HEAP32[$1730>>2] = $1726;
 $1731 = $98;
 $1732 = $1731;
 $1733 = HEAP32[$1732>>2]|0;
 $1734 = (($1731) + 4)|0;
 $1735 = $1734;
 $1736 = HEAP32[$1735>>2]|0;
 $1737 = $89;
 $1738 = $1737;
 $1739 = HEAP32[$1738>>2]|0;
 $1740 = (($1737) + 4)|0;
 $1741 = $1740;
 $1742 = HEAP32[$1741>>2]|0;
 $1743 = (_i64Add(($1739|0),($1742|0),($1733|0),($1736|0))|0);
 $1744 = (getTempRet0() | 0);
 $1745 = $89;
 $1746 = $1745;
 HEAP32[$1746>>2] = $1743;
 $1747 = (($1745) + 4)|0;
 $1748 = $1747;
 HEAP32[$1748>>2] = $1744;
 $1749 = $98;
 $1750 = $1749;
 $1751 = HEAP32[$1750>>2]|0;
 $1752 = (($1749) + 4)|0;
 $1753 = $1752;
 $1754 = HEAP32[$1753>>2]|0;
 $1755 = (_bitshift64Shl(($1751|0),($1754|0),26)|0);
 $1756 = (getTempRet0() | 0);
 $1757 = $88;
 $1758 = $1757;
 $1759 = HEAP32[$1758>>2]|0;
 $1760 = (($1757) + 4)|0;
 $1761 = $1760;
 $1762 = HEAP32[$1761>>2]|0;
 $1763 = (_i64Subtract(($1759|0),($1762|0),($1755|0),($1756|0))|0);
 $1764 = (getTempRet0() | 0);
 $1765 = $88;
 $1766 = $1765;
 HEAP32[$1766>>2] = $1763;
 $1767 = (($1765) + 4)|0;
 $1768 = $1767;
 HEAP32[$1768>>2] = $1764;
 $1769 = $85;
 $1770 = $1769;
 $1771 = HEAP32[$1770>>2]|0;
 $1772 = (($1769) + 4)|0;
 $1773 = $1772;
 $1774 = HEAP32[$1773>>2]|0;
 $1775 = (_i64Add(($1771|0),($1774|0),16777216,0)|0);
 $1776 = (getTempRet0() | 0);
 $1777 = (_bitshift64Ashr(($1775|0),($1776|0),25)|0);
 $1778 = (getTempRet0() | 0);
 $1779 = $95;
 $1780 = $1779;
 HEAP32[$1780>>2] = $1777;
 $1781 = (($1779) + 4)|0;
 $1782 = $1781;
 HEAP32[$1782>>2] = $1778;
 $1783 = $95;
 $1784 = $1783;
 $1785 = HEAP32[$1784>>2]|0;
 $1786 = (($1783) + 4)|0;
 $1787 = $1786;
 $1788 = HEAP32[$1787>>2]|0;
 $1789 = $86;
 $1790 = $1789;
 $1791 = HEAP32[$1790>>2]|0;
 $1792 = (($1789) + 4)|0;
 $1793 = $1792;
 $1794 = HEAP32[$1793>>2]|0;
 $1795 = (_i64Add(($1791|0),($1794|0),($1785|0),($1788|0))|0);
 $1796 = (getTempRet0() | 0);
 $1797 = $86;
 $1798 = $1797;
 HEAP32[$1798>>2] = $1795;
 $1799 = (($1797) + 4)|0;
 $1800 = $1799;
 HEAP32[$1800>>2] = $1796;
 $1801 = $95;
 $1802 = $1801;
 $1803 = HEAP32[$1802>>2]|0;
 $1804 = (($1801) + 4)|0;
 $1805 = $1804;
 $1806 = HEAP32[$1805>>2]|0;
 $1807 = (_bitshift64Shl(($1803|0),($1806|0),25)|0);
 $1808 = (getTempRet0() | 0);
 $1809 = $85;
 $1810 = $1809;
 $1811 = HEAP32[$1810>>2]|0;
 $1812 = (($1809) + 4)|0;
 $1813 = $1812;
 $1814 = HEAP32[$1813>>2]|0;
 $1815 = (_i64Subtract(($1811|0),($1814|0),($1807|0),($1808|0))|0);
 $1816 = (getTempRet0() | 0);
 $1817 = $85;
 $1818 = $1817;
 HEAP32[$1818>>2] = $1815;
 $1819 = (($1817) + 4)|0;
 $1820 = $1819;
 HEAP32[$1820>>2] = $1816;
 $1821 = $89;
 $1822 = $1821;
 $1823 = HEAP32[$1822>>2]|0;
 $1824 = (($1821) + 4)|0;
 $1825 = $1824;
 $1826 = HEAP32[$1825>>2]|0;
 $1827 = (_i64Add(($1823|0),($1826|0),16777216,0)|0);
 $1828 = (getTempRet0() | 0);
 $1829 = (_bitshift64Ashr(($1827|0),($1828|0),25)|0);
 $1830 = (getTempRet0() | 0);
 $1831 = $99;
 $1832 = $1831;
 HEAP32[$1832>>2] = $1829;
 $1833 = (($1831) + 4)|0;
 $1834 = $1833;
 HEAP32[$1834>>2] = $1830;
 $1835 = $99;
 $1836 = $1835;
 $1837 = HEAP32[$1836>>2]|0;
 $1838 = (($1835) + 4)|0;
 $1839 = $1838;
 $1840 = HEAP32[$1839>>2]|0;
 $1841 = $90;
 $1842 = $1841;
 $1843 = HEAP32[$1842>>2]|0;
 $1844 = (($1841) + 4)|0;
 $1845 = $1844;
 $1846 = HEAP32[$1845>>2]|0;
 $1847 = (_i64Add(($1843|0),($1846|0),($1837|0),($1840|0))|0);
 $1848 = (getTempRet0() | 0);
 $1849 = $90;
 $1850 = $1849;
 HEAP32[$1850>>2] = $1847;
 $1851 = (($1849) + 4)|0;
 $1852 = $1851;
 HEAP32[$1852>>2] = $1848;
 $1853 = $99;
 $1854 = $1853;
 $1855 = HEAP32[$1854>>2]|0;
 $1856 = (($1853) + 4)|0;
 $1857 = $1856;
 $1858 = HEAP32[$1857>>2]|0;
 $1859 = (_bitshift64Shl(($1855|0),($1858|0),25)|0);
 $1860 = (getTempRet0() | 0);
 $1861 = $89;
 $1862 = $1861;
 $1863 = HEAP32[$1862>>2]|0;
 $1864 = (($1861) + 4)|0;
 $1865 = $1864;
 $1866 = HEAP32[$1865>>2]|0;
 $1867 = (_i64Subtract(($1863|0),($1866|0),($1859|0),($1860|0))|0);
 $1868 = (getTempRet0() | 0);
 $1869 = $89;
 $1870 = $1869;
 HEAP32[$1870>>2] = $1867;
 $1871 = (($1869) + 4)|0;
 $1872 = $1871;
 HEAP32[$1872>>2] = $1868;
 $1873 = $86;
 $1874 = $1873;
 $1875 = HEAP32[$1874>>2]|0;
 $1876 = (($1873) + 4)|0;
 $1877 = $1876;
 $1878 = HEAP32[$1877>>2]|0;
 $1879 = (_i64Add(($1875|0),($1878|0),33554432,0)|0);
 $1880 = (getTempRet0() | 0);
 $1881 = (_bitshift64Ashr(($1879|0),($1880|0),26)|0);
 $1882 = (getTempRet0() | 0);
 $1883 = $96;
 $1884 = $1883;
 HEAP32[$1884>>2] = $1881;
 $1885 = (($1883) + 4)|0;
 $1886 = $1885;
 HEAP32[$1886>>2] = $1882;
 $1887 = $96;
 $1888 = $1887;
 $1889 = HEAP32[$1888>>2]|0;
 $1890 = (($1887) + 4)|0;
 $1891 = $1890;
 $1892 = HEAP32[$1891>>2]|0;
 $1893 = $87;
 $1894 = $1893;
 $1895 = HEAP32[$1894>>2]|0;
 $1896 = (($1893) + 4)|0;
 $1897 = $1896;
 $1898 = HEAP32[$1897>>2]|0;
 $1899 = (_i64Add(($1895|0),($1898|0),($1889|0),($1892|0))|0);
 $1900 = (getTempRet0() | 0);
 $1901 = $87;
 $1902 = $1901;
 HEAP32[$1902>>2] = $1899;
 $1903 = (($1901) + 4)|0;
 $1904 = $1903;
 HEAP32[$1904>>2] = $1900;
 $1905 = $96;
 $1906 = $1905;
 $1907 = HEAP32[$1906>>2]|0;
 $1908 = (($1905) + 4)|0;
 $1909 = $1908;
 $1910 = HEAP32[$1909>>2]|0;
 $1911 = (_bitshift64Shl(($1907|0),($1910|0),26)|0);
 $1912 = (getTempRet0() | 0);
 $1913 = $86;
 $1914 = $1913;
 $1915 = HEAP32[$1914>>2]|0;
 $1916 = (($1913) + 4)|0;
 $1917 = $1916;
 $1918 = HEAP32[$1917>>2]|0;
 $1919 = (_i64Subtract(($1915|0),($1918|0),($1911|0),($1912|0))|0);
 $1920 = (getTempRet0() | 0);
 $1921 = $86;
 $1922 = $1921;
 HEAP32[$1922>>2] = $1919;
 $1923 = (($1921) + 4)|0;
 $1924 = $1923;
 HEAP32[$1924>>2] = $1920;
 $1925 = $90;
 $1926 = $1925;
 $1927 = HEAP32[$1926>>2]|0;
 $1928 = (($1925) + 4)|0;
 $1929 = $1928;
 $1930 = HEAP32[$1929>>2]|0;
 $1931 = (_i64Add(($1927|0),($1930|0),33554432,0)|0);
 $1932 = (getTempRet0() | 0);
 $1933 = (_bitshift64Ashr(($1931|0),($1932|0),26)|0);
 $1934 = (getTempRet0() | 0);
 $1935 = $100;
 $1936 = $1935;
 HEAP32[$1936>>2] = $1933;
 $1937 = (($1935) + 4)|0;
 $1938 = $1937;
 HEAP32[$1938>>2] = $1934;
 $1939 = $100;
 $1940 = $1939;
 $1941 = HEAP32[$1940>>2]|0;
 $1942 = (($1939) + 4)|0;
 $1943 = $1942;
 $1944 = HEAP32[$1943>>2]|0;
 $1945 = $91;
 $1946 = $1945;
 $1947 = HEAP32[$1946>>2]|0;
 $1948 = (($1945) + 4)|0;
 $1949 = $1948;
 $1950 = HEAP32[$1949>>2]|0;
 $1951 = (_i64Add(($1947|0),($1950|0),($1941|0),($1944|0))|0);
 $1952 = (getTempRet0() | 0);
 $1953 = $91;
 $1954 = $1953;
 HEAP32[$1954>>2] = $1951;
 $1955 = (($1953) + 4)|0;
 $1956 = $1955;
 HEAP32[$1956>>2] = $1952;
 $1957 = $100;
 $1958 = $1957;
 $1959 = HEAP32[$1958>>2]|0;
 $1960 = (($1957) + 4)|0;
 $1961 = $1960;
 $1962 = HEAP32[$1961>>2]|0;
 $1963 = (_bitshift64Shl(($1959|0),($1962|0),26)|0);
 $1964 = (getTempRet0() | 0);
 $1965 = $90;
 $1966 = $1965;
 $1967 = HEAP32[$1966>>2]|0;
 $1968 = (($1965) + 4)|0;
 $1969 = $1968;
 $1970 = HEAP32[$1969>>2]|0;
 $1971 = (_i64Subtract(($1967|0),($1970|0),($1963|0),($1964|0))|0);
 $1972 = (getTempRet0() | 0);
 $1973 = $90;
 $1974 = $1973;
 HEAP32[$1974>>2] = $1971;
 $1975 = (($1973) + 4)|0;
 $1976 = $1975;
 HEAP32[$1976>>2] = $1972;
 $1977 = $91;
 $1978 = $1977;
 $1979 = HEAP32[$1978>>2]|0;
 $1980 = (($1977) + 4)|0;
 $1981 = $1980;
 $1982 = HEAP32[$1981>>2]|0;
 $1983 = (_i64Add(($1979|0),($1982|0),16777216,0)|0);
 $1984 = (getTempRet0() | 0);
 $1985 = (_bitshift64Ashr(($1983|0),($1984|0),25)|0);
 $1986 = (getTempRet0() | 0);
 $1987 = $101;
 $1988 = $1987;
 HEAP32[$1988>>2] = $1985;
 $1989 = (($1987) + 4)|0;
 $1990 = $1989;
 HEAP32[$1990>>2] = $1986;
 $1991 = $101;
 $1992 = $1991;
 $1993 = HEAP32[$1992>>2]|0;
 $1994 = (($1991) + 4)|0;
 $1995 = $1994;
 $1996 = HEAP32[$1995>>2]|0;
 $1997 = (___muldi3(($1993|0),($1996|0),19,0)|0);
 $1998 = (getTempRet0() | 0);
 $1999 = $82;
 $2000 = $1999;
 $2001 = HEAP32[$2000>>2]|0;
 $2002 = (($1999) + 4)|0;
 $2003 = $2002;
 $2004 = HEAP32[$2003>>2]|0;
 $2005 = (_i64Add(($2001|0),($2004|0),($1997|0),($1998|0))|0);
 $2006 = (getTempRet0() | 0);
 $2007 = $82;
 $2008 = $2007;
 HEAP32[$2008>>2] = $2005;
 $2009 = (($2007) + 4)|0;
 $2010 = $2009;
 HEAP32[$2010>>2] = $2006;
 $2011 = $101;
 $2012 = $2011;
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = (($2011) + 4)|0;
 $2015 = $2014;
 $2016 = HEAP32[$2015>>2]|0;
 $2017 = (_bitshift64Shl(($2013|0),($2016|0),25)|0);
 $2018 = (getTempRet0() | 0);
 $2019 = $91;
 $2020 = $2019;
 $2021 = HEAP32[$2020>>2]|0;
 $2022 = (($2019) + 4)|0;
 $2023 = $2022;
 $2024 = HEAP32[$2023>>2]|0;
 $2025 = (_i64Subtract(($2021|0),($2024|0),($2017|0),($2018|0))|0);
 $2026 = (getTempRet0() | 0);
 $2027 = $91;
 $2028 = $2027;
 HEAP32[$2028>>2] = $2025;
 $2029 = (($2027) + 4)|0;
 $2030 = $2029;
 HEAP32[$2030>>2] = $2026;
 $2031 = $82;
 $2032 = $2031;
 $2033 = HEAP32[$2032>>2]|0;
 $2034 = (($2031) + 4)|0;
 $2035 = $2034;
 $2036 = HEAP32[$2035>>2]|0;
 $2037 = (_i64Add(($2033|0),($2036|0),33554432,0)|0);
 $2038 = (getTempRet0() | 0);
 $2039 = (_bitshift64Ashr(($2037|0),($2038|0),26)|0);
 $2040 = (getTempRet0() | 0);
 $2041 = $92;
 $2042 = $2041;
 HEAP32[$2042>>2] = $2039;
 $2043 = (($2041) + 4)|0;
 $2044 = $2043;
 HEAP32[$2044>>2] = $2040;
 $2045 = $92;
 $2046 = $2045;
 $2047 = HEAP32[$2046>>2]|0;
 $2048 = (($2045) + 4)|0;
 $2049 = $2048;
 $2050 = HEAP32[$2049>>2]|0;
 $2051 = $83;
 $2052 = $2051;
 $2053 = HEAP32[$2052>>2]|0;
 $2054 = (($2051) + 4)|0;
 $2055 = $2054;
 $2056 = HEAP32[$2055>>2]|0;
 $2057 = (_i64Add(($2053|0),($2056|0),($2047|0),($2050|0))|0);
 $2058 = (getTempRet0() | 0);
 $2059 = $83;
 $2060 = $2059;
 HEAP32[$2060>>2] = $2057;
 $2061 = (($2059) + 4)|0;
 $2062 = $2061;
 HEAP32[$2062>>2] = $2058;
 $2063 = $92;
 $2064 = $2063;
 $2065 = HEAP32[$2064>>2]|0;
 $2066 = (($2063) + 4)|0;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (_bitshift64Shl(($2065|0),($2068|0),26)|0);
 $2070 = (getTempRet0() | 0);
 $2071 = $82;
 $2072 = $2071;
 $2073 = HEAP32[$2072>>2]|0;
 $2074 = (($2071) + 4)|0;
 $2075 = $2074;
 $2076 = HEAP32[$2075>>2]|0;
 $2077 = (_i64Subtract(($2073|0),($2076|0),($2069|0),($2070|0))|0);
 $2078 = (getTempRet0() | 0);
 $2079 = $82;
 $2080 = $2079;
 HEAP32[$2080>>2] = $2077;
 $2081 = (($2079) + 4)|0;
 $2082 = $2081;
 HEAP32[$2082>>2] = $2078;
 $2083 = $82;
 $2084 = $2083;
 $2085 = HEAP32[$2084>>2]|0;
 $2086 = (($2083) + 4)|0;
 $2087 = $2086;
 $2088 = HEAP32[$2087>>2]|0;
 $2089 = $2;
 HEAP32[$2089>>2] = $2085;
 $2090 = $83;
 $2091 = $2090;
 $2092 = HEAP32[$2091>>2]|0;
 $2093 = (($2090) + 4)|0;
 $2094 = $2093;
 $2095 = HEAP32[$2094>>2]|0;
 $2096 = $2;
 $2097 = ((($2096)) + 4|0);
 HEAP32[$2097>>2] = $2092;
 $2098 = $84;
 $2099 = $2098;
 $2100 = HEAP32[$2099>>2]|0;
 $2101 = (($2098) + 4)|0;
 $2102 = $2101;
 $2103 = HEAP32[$2102>>2]|0;
 $2104 = $2;
 $2105 = ((($2104)) + 8|0);
 HEAP32[$2105>>2] = $2100;
 $2106 = $85;
 $2107 = $2106;
 $2108 = HEAP32[$2107>>2]|0;
 $2109 = (($2106) + 4)|0;
 $2110 = $2109;
 $2111 = HEAP32[$2110>>2]|0;
 $2112 = $2;
 $2113 = ((($2112)) + 12|0);
 HEAP32[$2113>>2] = $2108;
 $2114 = $86;
 $2115 = $2114;
 $2116 = HEAP32[$2115>>2]|0;
 $2117 = (($2114) + 4)|0;
 $2118 = $2117;
 $2119 = HEAP32[$2118>>2]|0;
 $2120 = $2;
 $2121 = ((($2120)) + 16|0);
 HEAP32[$2121>>2] = $2116;
 $2122 = $87;
 $2123 = $2122;
 $2124 = HEAP32[$2123>>2]|0;
 $2125 = (($2122) + 4)|0;
 $2126 = $2125;
 $2127 = HEAP32[$2126>>2]|0;
 $2128 = $2;
 $2129 = ((($2128)) + 20|0);
 HEAP32[$2129>>2] = $2124;
 $2130 = $88;
 $2131 = $2130;
 $2132 = HEAP32[$2131>>2]|0;
 $2133 = (($2130) + 4)|0;
 $2134 = $2133;
 $2135 = HEAP32[$2134>>2]|0;
 $2136 = $2;
 $2137 = ((($2136)) + 24|0);
 HEAP32[$2137>>2] = $2132;
 $2138 = $89;
 $2139 = $2138;
 $2140 = HEAP32[$2139>>2]|0;
 $2141 = (($2138) + 4)|0;
 $2142 = $2141;
 $2143 = HEAP32[$2142>>2]|0;
 $2144 = $2;
 $2145 = ((($2144)) + 28|0);
 HEAP32[$2145>>2] = $2140;
 $2146 = $90;
 $2147 = $2146;
 $2148 = HEAP32[$2147>>2]|0;
 $2149 = (($2146) + 4)|0;
 $2150 = $2149;
 $2151 = HEAP32[$2150>>2]|0;
 $2152 = $2;
 $2153 = ((($2152)) + 32|0);
 HEAP32[$2153>>2] = $2148;
 $2154 = $91;
 $2155 = $2154;
 $2156 = HEAP32[$2155>>2]|0;
 $2157 = (($2154) + 4)|0;
 $2158 = $2157;
 $2159 = HEAP32[$2158>>2]|0;
 $2160 = $2;
 $2161 = ((($2160)) + 36|0);
 HEAP32[$2161>>2] = $2156;
 STACKTOP = sp;return;
}
function _fe_copy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $4 = $15;
 $16 = $3;
 $17 = ((($16)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $5 = $18;
 $19 = $3;
 $20 = ((($19)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $6 = $21;
 $22 = $3;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $3;
 $26 = ((($25)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $8 = $27;
 $28 = $3;
 $29 = ((($28)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $9 = $30;
 $31 = $3;
 $32 = ((($31)) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $10 = $33;
 $34 = $3;
 $35 = ((($34)) + 28|0);
 $36 = HEAP32[$35>>2]|0;
 $11 = $36;
 $37 = $3;
 $38 = ((($37)) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $12 = $39;
 $40 = $3;
 $41 = ((($40)) + 36|0);
 $42 = HEAP32[$41>>2]|0;
 $13 = $42;
 $43 = $4;
 $44 = $2;
 HEAP32[$44>>2] = $43;
 $45 = $5;
 $46 = $2;
 $47 = ((($46)) + 4|0);
 HEAP32[$47>>2] = $45;
 $48 = $6;
 $49 = $2;
 $50 = ((($49)) + 8|0);
 HEAP32[$50>>2] = $48;
 $51 = $7;
 $52 = $2;
 $53 = ((($52)) + 12|0);
 HEAP32[$53>>2] = $51;
 $54 = $8;
 $55 = $2;
 $56 = ((($55)) + 16|0);
 HEAP32[$56>>2] = $54;
 $57 = $9;
 $58 = $2;
 $59 = ((($58)) + 20|0);
 HEAP32[$59>>2] = $57;
 $60 = $10;
 $61 = $2;
 $62 = ((($61)) + 24|0);
 HEAP32[$62>>2] = $60;
 $63 = $11;
 $64 = $2;
 $65 = ((($64)) + 28|0);
 HEAP32[$65>>2] = $63;
 $66 = $12;
 $67 = $2;
 $68 = ((($67)) + 32|0);
 HEAP32[$68>>2] = $66;
 $69 = $13;
 $70 = $2;
 $71 = ((($70)) + 36|0);
 HEAP32[$71>>2] = $69;
 STACKTOP = sp;return;
}
function _ge_double_scalarmult_base_vartime($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2144|0);
 $8 = sp + 1536|0;
 $9 = sp + 1280|0;
 $10 = sp;
 $11 = sp + 1960|0;
 $12 = sp + 1800|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $14 = $5;
 _slide($8,$14);
 $15 = $7;
 _slide($9,$15);
 $16 = $6;
 _ge_dsm_precomp($10,$16);
 $17 = $4;
 _ge_p2_0($17);
 $13 = 255;
 while(1) {
  $18 = $13;
  $19 = ($18|0)>=(0);
  if (!($19)) {
   break;
  }
  $20 = $13;
  $21 = (($8) + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if ($24) {
   break;
  }
  $25 = $13;
  $26 = (($9) + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)!=(0);
  if ($29) {
   break;
  }
  $30 = $13;
  $31 = (($30) + -1)|0;
  $13 = $31;
 }
 while(1) {
  $32 = $13;
  $33 = ($32|0)>=(0);
  if (!($33)) {
   break;
  }
  $34 = $4;
  _ge_p2_dbl($11,$34);
  $35 = $13;
  $36 = (($8) + ($35)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)>(0);
  if ($39) {
   _ge_p1p1_to_p3($12,$11);
   $40 = $13;
   $41 = (($8) + ($40)|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42 << 24 >> 24;
   $44 = (($43|0) / 2)&-1;
   $45 = (($10) + (($44*160)|0)|0);
   _ge_add($11,$12,$45);
  } else {
   $46 = $13;
   $47 = (($8) + ($46)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48 << 24 >> 24;
   $50 = ($49|0)<(0);
   if ($50) {
    _ge_p1p1_to_p3($12,$11);
    $51 = $13;
    $52 = (($8) + ($51)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 << 24 >> 24;
    $55 = (0 - ($54))|0;
    $56 = (($55|0) / 2)&-1;
    $57 = (($10) + (($56*160)|0)|0);
    _ge_sub($11,$12,$57);
   }
  }
  $58 = $13;
  $59 = (($9) + ($58)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60 << 24 >> 24;
  $62 = ($61|0)>(0);
  if ($62) {
   _ge_p1p1_to_p3($12,$11);
   $63 = $13;
   $64 = (($9) + ($63)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65 << 24 >> 24;
   $67 = (($66|0) / 2)&-1;
   $68 = (30880 + (($67*120)|0)|0);
   _ge_madd($11,$12,$68);
  } else {
   $69 = $13;
   $70 = (($9) + ($69)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 << 24 >> 24;
   $73 = ($72|0)<(0);
   if ($73) {
    _ge_p1p1_to_p3($12,$11);
    $74 = $13;
    $75 = (($9) + ($74)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76 << 24 >> 24;
    $78 = (0 - ($77))|0;
    $79 = (($78|0) / 2)&-1;
    $80 = (30880 + (($79*120)|0)|0);
    _ge_msub($11,$12,$80);
   }
  }
  $81 = $4;
  _ge_p1p1_to_p2($81,$11);
  $82 = $13;
  $83 = (($82) + -1)|0;
  $13 = $83;
 }
 STACKTOP = sp;return;
}
function _slide($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 while(1) {
  $7 = $4;
  $8 = ($7|0)<(256);
  if (!($8)) {
   break;
  }
  $9 = $3;
  $10 = $4;
  $11 = $10 >> 3;
  $12 = (($9) + ($11)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $4;
  $16 = $15 & 7;
  $17 = $14 >> $16;
  $18 = 1 & $17;
  $19 = $18&255;
  $20 = $2;
  $21 = $4;
  $22 = (($20) + ($21)|0);
  HEAP8[$22>>0] = $19;
  $23 = $4;
  $24 = (($23) + 1)|0;
  $4 = $24;
 }
 $4 = 0;
 while(1) {
  $25 = $4;
  $26 = ($25|0)<(256);
  if (!($26)) {
   break;
  }
  $27 = $2;
  $28 = $4;
  $29 = (($27) + ($28)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)!=(0);
  L8: do {
   if ($31) {
    $5 = 1;
    while(1) {
     $32 = $5;
     $33 = ($32|0)<=(6);
     if (!($33)) {
      break L8;
     }
     $34 = $4;
     $35 = $5;
     $36 = (($34) + ($35))|0;
     $37 = ($36|0)<(256);
     if (!($37)) {
      break L8;
     }
     $38 = $2;
     $39 = $4;
     $40 = $5;
     $41 = (($39) + ($40))|0;
     $42 = (($38) + ($41)|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)!=(0);
     L14: do {
      if ($44) {
       $45 = $2;
       $46 = $4;
       $47 = (($45) + ($46)|0);
       $48 = HEAP8[$47>>0]|0;
       $49 = $48 << 24 >> 24;
       $50 = $2;
       $51 = $4;
       $52 = $5;
       $53 = (($51) + ($52))|0;
       $54 = (($50) + ($53)|0);
       $55 = HEAP8[$54>>0]|0;
       $56 = $55 << 24 >> 24;
       $57 = $5;
       $58 = $56 << $57;
       $59 = (($49) + ($58))|0;
       $60 = ($59|0)<=(15);
       $61 = $2;
       $62 = $4;
       if ($60) {
        $63 = $5;
        $64 = (($62) + ($63))|0;
        $65 = (($61) + ($64)|0);
        $66 = HEAP8[$65>>0]|0;
        $67 = $66 << 24 >> 24;
        $68 = $5;
        $69 = $67 << $68;
        $70 = $2;
        $71 = $4;
        $72 = (($70) + ($71)|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = $73 << 24 >> 24;
        $75 = (($74) + ($69))|0;
        $76 = $75&255;
        HEAP8[$72>>0] = $76;
        $77 = $2;
        $78 = $4;
        $79 = $5;
        $80 = (($78) + ($79))|0;
        $81 = (($77) + ($80)|0);
        HEAP8[$81>>0] = 0;
        break;
       }
       $82 = (($61) + ($62)|0);
       $83 = HEAP8[$82>>0]|0;
       $84 = $83 << 24 >> 24;
       $85 = $2;
       $86 = $4;
       $87 = $5;
       $88 = (($86) + ($87))|0;
       $89 = (($85) + ($88)|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = $90 << 24 >> 24;
       $92 = $5;
       $93 = $91 << $92;
       $94 = (($84) - ($93))|0;
       $95 = ($94|0)>=(-15);
       if (!($95)) {
        break L8;
       }
       $96 = $2;
       $97 = $4;
       $98 = $5;
       $99 = (($97) + ($98))|0;
       $100 = (($96) + ($99)|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101 << 24 >> 24;
       $103 = $5;
       $104 = $102 << $103;
       $105 = $2;
       $106 = $4;
       $107 = (($105) + ($106)|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = $108 << 24 >> 24;
       $110 = (($109) - ($104))|0;
       $111 = $110&255;
       HEAP8[$107>>0] = $111;
       $112 = $4;
       $113 = $5;
       $114 = (($112) + ($113))|0;
       $6 = $114;
       while(1) {
        $115 = $6;
        $116 = ($115|0)<(256);
        if (!($116)) {
         break L14;
        }
        $117 = $2;
        $118 = $6;
        $119 = (($117) + ($118)|0);
        $120 = HEAP8[$119>>0]|0;
        $121 = ($120<<24>>24)!=(0);
        $122 = $2;
        $123 = $6;
        $124 = (($122) + ($123)|0);
        if (!($121)) {
         break;
        }
        HEAP8[$124>>0] = 0;
        $125 = $6;
        $126 = (($125) + 1)|0;
        $6 = $126;
       }
       HEAP8[$124>>0] = 1;
      }
     } while(0);
     $127 = $5;
     $128 = (($127) + 1)|0;
     $5 = $128;
    }
   }
  } while(0);
  $129 = $4;
  $130 = (($129) + 1)|0;
  $4 = $130;
 }
 STACKTOP = sp;return;
}
function _ge_p2_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _fe_0($2);
 $3 = $1;
 $4 = ((($3)) + 40|0);
 _fe_1($4);
 $5 = $1;
 $6 = ((($5)) + 80|0);
 _fe_1($6);
 STACKTOP = sp;return;
}
function _ge_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 $20 = ((($19)) + 40|0);
 _fe_mul($17,$18,$20);
 $21 = $3;
 $22 = ((($21)) + 40|0);
 $23 = $3;
 $24 = ((($23)) + 40|0);
 $25 = $5;
 _fe_mul($22,$24,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 120|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _fe_mul($27,$29,$31);
 $32 = $3;
 $33 = $4;
 $34 = ((($33)) + 80|0);
 $35 = $5;
 $36 = ((($35)) + 80|0);
 _fe_mul($32,$34,$36);
 $37 = $3;
 $38 = $3;
 _fe_add($6,$37,$38);
 $39 = $3;
 $40 = $3;
 $41 = ((($40)) + 80|0);
 $42 = $3;
 $43 = ((($42)) + 40|0);
 _fe_sub($39,$41,$43);
 $44 = $3;
 $45 = ((($44)) + 40|0);
 $46 = $3;
 $47 = ((($46)) + 80|0);
 $48 = $3;
 $49 = ((($48)) + 40|0);
 _fe_add($45,$47,$49);
 $50 = $3;
 $51 = ((($50)) + 80|0);
 $52 = $3;
 $53 = ((($52)) + 120|0);
 _fe_sub($51,$6,$53);
 $54 = $3;
 $55 = ((($54)) + 120|0);
 $56 = $3;
 $57 = ((($56)) + 120|0);
 _fe_add($55,$6,$57);
 STACKTOP = sp;return;
}
function _ge_madd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 _fe_mul($17,$18,$19);
 $20 = $3;
 $21 = ((($20)) + 40|0);
 $22 = $3;
 $23 = ((($22)) + 40|0);
 $24 = $5;
 $25 = ((($24)) + 40|0);
 _fe_mul($21,$23,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 80|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _fe_mul($27,$29,$31);
 $32 = $4;
 $33 = ((($32)) + 80|0);
 $34 = $4;
 $35 = ((($34)) + 80|0);
 _fe_add($6,$33,$35);
 $36 = $3;
 $37 = $3;
 $38 = ((($37)) + 80|0);
 $39 = $3;
 $40 = ((($39)) + 40|0);
 _fe_sub($36,$38,$40);
 $41 = $3;
 $42 = ((($41)) + 40|0);
 $43 = $3;
 $44 = ((($43)) + 80|0);
 $45 = $3;
 $46 = ((($45)) + 40|0);
 _fe_add($42,$44,$46);
 $47 = $3;
 $48 = ((($47)) + 80|0);
 $49 = $3;
 $50 = ((($49)) + 120|0);
 _fe_add($48,$6,$50);
 $51 = $3;
 $52 = ((($51)) + 120|0);
 $53 = $3;
 $54 = ((($53)) + 120|0);
 _fe_sub($52,$6,$54);
 STACKTOP = sp;return;
}
function _ge_msub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 $9 = ((($8)) + 40|0);
 $10 = $4;
 _fe_add($7,$9,$10);
 $11 = $3;
 $12 = ((($11)) + 40|0);
 $13 = $4;
 $14 = ((($13)) + 40|0);
 $15 = $4;
 _fe_sub($12,$14,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = $5;
 $20 = ((($19)) + 40|0);
 _fe_mul($17,$18,$20);
 $21 = $3;
 $22 = ((($21)) + 40|0);
 $23 = $3;
 $24 = ((($23)) + 40|0);
 $25 = $5;
 _fe_mul($22,$24,$25);
 $26 = $3;
 $27 = ((($26)) + 120|0);
 $28 = $5;
 $29 = ((($28)) + 80|0);
 $30 = $4;
 $31 = ((($30)) + 120|0);
 _fe_mul($27,$29,$31);
 $32 = $4;
 $33 = ((($32)) + 80|0);
 $34 = $4;
 $35 = ((($34)) + 80|0);
 _fe_add($6,$33,$35);
 $36 = $3;
 $37 = $3;
 $38 = ((($37)) + 80|0);
 $39 = $3;
 $40 = ((($39)) + 40|0);
 _fe_sub($36,$38,$40);
 $41 = $3;
 $42 = ((($41)) + 40|0);
 $43 = $3;
 $44 = ((($43)) + 80|0);
 $45 = $3;
 $46 = ((($45)) + 40|0);
 _fe_add($42,$44,$46);
 $47 = $3;
 $48 = ((($47)) + 80|0);
 $49 = $3;
 $50 = ((($49)) + 120|0);
 _fe_sub($48,$6,$50);
 $51 = $3;
 $52 = ((($51)) + 120|0);
 $53 = $3;
 $54 = ((($53)) + 120|0);
 _fe_add($52,$6,$54);
 STACKTOP = sp;return;
}
function _ge_p1p1_to_p2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = $3;
 $7 = ((($6)) + 120|0);
 _fe_mul($4,$5,$7);
 $8 = $2;
 $9 = ((($8)) + 40|0);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $3;
 $13 = ((($12)) + 80|0);
 _fe_mul($9,$11,$13);
 $14 = $2;
 $15 = ((($14)) + 80|0);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $3;
 $19 = ((($18)) + 120|0);
 _fe_mul($15,$17,$19);
 STACKTOP = sp;return;
}
function _fe_0($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 24|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 36|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _fe_1($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 24|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 32|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 36|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _ge_frombytes_vartime($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $5 = sp + 144|0;
 $6 = sp + 96|0;
 $7 = sp + 48|0;
 $8 = sp;
 $9 = sp + 336|0;
 $10 = sp + 328|0;
 $11 = sp + 320|0;
 $12 = sp + 312|0;
 $13 = sp + 304|0;
 $14 = sp + 296|0;
 $15 = sp + 288|0;
 $16 = sp + 280|0;
 $17 = sp + 272|0;
 $18 = sp + 264|0;
 $19 = sp + 256|0;
 $20 = sp + 248|0;
 $21 = sp + 240|0;
 $22 = sp + 232|0;
 $23 = sp + 224|0;
 $24 = sp + 216|0;
 $25 = sp + 208|0;
 $26 = sp + 200|0;
 $27 = sp + 192|0;
 $28 = sp + 184|0;
 $3 = $0;
 $4 = $1;
 $29 = $4;
 $30 = (_load_4($29)|0);
 $31 = (getTempRet0() | 0);
 $32 = $9;
 $33 = $32;
 HEAP32[$33>>2] = $30;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $36 = $4;
 $37 = ((($36)) + 4|0);
 $38 = (_load_3($37)|0);
 $39 = (getTempRet0() | 0);
 $40 = (_bitshift64Shl(($38|0),($39|0),6)|0);
 $41 = (getTempRet0() | 0);
 $42 = $10;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $4;
 $47 = ((($46)) + 7|0);
 $48 = (_load_3($47)|0);
 $49 = (getTempRet0() | 0);
 $50 = (_bitshift64Shl(($48|0),($49|0),5)|0);
 $51 = (getTempRet0() | 0);
 $52 = $11;
 $53 = $52;
 HEAP32[$53>>2] = $50;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = $51;
 $56 = $4;
 $57 = ((($56)) + 10|0);
 $58 = (_load_3($57)|0);
 $59 = (getTempRet0() | 0);
 $60 = (_bitshift64Shl(($58|0),($59|0),3)|0);
 $61 = (getTempRet0() | 0);
 $62 = $12;
 $63 = $62;
 HEAP32[$63>>2] = $60;
 $64 = (($62) + 4)|0;
 $65 = $64;
 HEAP32[$65>>2] = $61;
 $66 = $4;
 $67 = ((($66)) + 13|0);
 $68 = (_load_3($67)|0);
 $69 = (getTempRet0() | 0);
 $70 = (_bitshift64Shl(($68|0),($69|0),2)|0);
 $71 = (getTempRet0() | 0);
 $72 = $13;
 $73 = $72;
 HEAP32[$73>>2] = $70;
 $74 = (($72) + 4)|0;
 $75 = $74;
 HEAP32[$75>>2] = $71;
 $76 = $4;
 $77 = ((($76)) + 16|0);
 $78 = (_load_4($77)|0);
 $79 = (getTempRet0() | 0);
 $80 = $14;
 $81 = $80;
 HEAP32[$81>>2] = $78;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = $79;
 $84 = $4;
 $85 = ((($84)) + 20|0);
 $86 = (_load_3($85)|0);
 $87 = (getTempRet0() | 0);
 $88 = (_bitshift64Shl(($86|0),($87|0),7)|0);
 $89 = (getTempRet0() | 0);
 $90 = $15;
 $91 = $90;
 HEAP32[$91>>2] = $88;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = $89;
 $94 = $4;
 $95 = ((($94)) + 23|0);
 $96 = (_load_3($95)|0);
 $97 = (getTempRet0() | 0);
 $98 = (_bitshift64Shl(($96|0),($97|0),5)|0);
 $99 = (getTempRet0() | 0);
 $100 = $16;
 $101 = $100;
 HEAP32[$101>>2] = $98;
 $102 = (($100) + 4)|0;
 $103 = $102;
 HEAP32[$103>>2] = $99;
 $104 = $4;
 $105 = ((($104)) + 26|0);
 $106 = (_load_3($105)|0);
 $107 = (getTempRet0() | 0);
 $108 = (_bitshift64Shl(($106|0),($107|0),4)|0);
 $109 = (getTempRet0() | 0);
 $110 = $17;
 $111 = $110;
 HEAP32[$111>>2] = $108;
 $112 = (($110) + 4)|0;
 $113 = $112;
 HEAP32[$113>>2] = $109;
 $114 = $4;
 $115 = ((($114)) + 29|0);
 $116 = (_load_3($115)|0);
 $117 = (getTempRet0() | 0);
 $118 = $116 & 8388607;
 $119 = (_bitshift64Shl(($118|0),0,2)|0);
 $120 = (getTempRet0() | 0);
 $121 = $18;
 $122 = $121;
 HEAP32[$122>>2] = $119;
 $123 = (($121) + 4)|0;
 $124 = $123;
 HEAP32[$124>>2] = $120;
 $125 = $18;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $128 = (($125) + 4)|0;
 $129 = $128;
 $130 = HEAP32[$129>>2]|0;
 $131 = ($127|0)==(33554428);
 $132 = ($130|0)==(0);
 $133 = $131 & $132;
 $134 = $17;
 $135 = $134;
 $136 = HEAP32[$135>>2]|0;
 $137 = (($134) + 4)|0;
 $138 = $137;
 $139 = HEAP32[$138>>2]|0;
 $140 = ($136|0)==(268435440);
 $141 = ($139|0)==(0);
 $142 = $140 & $141;
 $or$cond = $133 & $142;
 $143 = $16;
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = (($143) + 4)|0;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = ($145|0)==(536870880);
 $150 = ($148|0)==(0);
 $151 = $149 & $150;
 $or$cond3 = $or$cond & $151;
 $152 = $15;
 $153 = $152;
 $154 = HEAP32[$153>>2]|0;
 $155 = (($152) + 4)|0;
 $156 = $155;
 $157 = HEAP32[$156>>2]|0;
 $158 = ($154|0)==(2147483520);
 $159 = ($157|0)==(0);
 $160 = $158 & $159;
 $or$cond5 = $or$cond3 & $160;
 $161 = $14;
 $162 = $161;
 $163 = HEAP32[$162>>2]|0;
 $164 = (($161) + 4)|0;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = ($163|0)==(-1);
 $168 = ($166|0)==(0);
 $169 = $167 & $168;
 $or$cond7 = $or$cond5 & $169;
 $170 = $13;
 $171 = $170;
 $172 = HEAP32[$171>>2]|0;
 $173 = (($170) + 4)|0;
 $174 = $173;
 $175 = HEAP32[$174>>2]|0;
 $176 = ($172|0)==(67108860);
 $177 = ($175|0)==(0);
 $178 = $176 & $177;
 $or$cond9 = $or$cond7 & $178;
 $179 = $12;
 $180 = $179;
 $181 = HEAP32[$180>>2]|0;
 $182 = (($179) + 4)|0;
 $183 = $182;
 $184 = HEAP32[$183>>2]|0;
 $185 = ($181|0)==(134217720);
 $186 = ($184|0)==(0);
 $187 = $185 & $186;
 $or$cond11 = $or$cond9 & $187;
 $188 = $11;
 $189 = $188;
 $190 = HEAP32[$189>>2]|0;
 $191 = (($188) + 4)|0;
 $192 = $191;
 $193 = HEAP32[$192>>2]|0;
 $194 = ($190|0)==(536870880);
 $195 = ($193|0)==(0);
 $196 = $194 & $195;
 $or$cond13 = $or$cond11 & $196;
 $197 = $10;
 $198 = $197;
 $199 = HEAP32[$198>>2]|0;
 $200 = (($197) + 4)|0;
 $201 = $200;
 $202 = HEAP32[$201>>2]|0;
 $203 = ($199|0)==(1073741760);
 $204 = ($202|0)==(0);
 $205 = $203 & $204;
 $or$cond15 = $or$cond13 & $205;
 $206 = $9;
 $207 = $206;
 $208 = HEAP32[$207>>2]|0;
 $209 = (($206) + 4)|0;
 $210 = $209;
 $211 = HEAP32[$210>>2]|0;
 $212 = ($211|0)>(0);
 $213 = ($208>>>0)>=(4294967277);
 $214 = ($211|0)==(0);
 $215 = $214 & $213;
 $216 = $212 | $215;
 $or$cond17 = $or$cond15 & $216;
 if ($or$cond17) {
  $2 = -1;
  $862 = $2;
  STACKTOP = sp;return ($862|0);
 }
 $217 = $18;
 $218 = $217;
 $219 = HEAP32[$218>>2]|0;
 $220 = (($217) + 4)|0;
 $221 = $220;
 $222 = HEAP32[$221>>2]|0;
 $223 = (_i64Add(($219|0),($222|0),16777216,0)|0);
 $224 = (getTempRet0() | 0);
 $225 = (_bitshift64Ashr(($223|0),($224|0),25)|0);
 $226 = (getTempRet0() | 0);
 $227 = $28;
 $228 = $227;
 HEAP32[$228>>2] = $225;
 $229 = (($227) + 4)|0;
 $230 = $229;
 HEAP32[$230>>2] = $226;
 $231 = $28;
 $232 = $231;
 $233 = HEAP32[$232>>2]|0;
 $234 = (($231) + 4)|0;
 $235 = $234;
 $236 = HEAP32[$235>>2]|0;
 $237 = (___muldi3(($233|0),($236|0),19,0)|0);
 $238 = (getTempRet0() | 0);
 $239 = $9;
 $240 = $239;
 $241 = HEAP32[$240>>2]|0;
 $242 = (($239) + 4)|0;
 $243 = $242;
 $244 = HEAP32[$243>>2]|0;
 $245 = (_i64Add(($241|0),($244|0),($237|0),($238|0))|0);
 $246 = (getTempRet0() | 0);
 $247 = $9;
 $248 = $247;
 HEAP32[$248>>2] = $245;
 $249 = (($247) + 4)|0;
 $250 = $249;
 HEAP32[$250>>2] = $246;
 $251 = $28;
 $252 = $251;
 $253 = HEAP32[$252>>2]|0;
 $254 = (($251) + 4)|0;
 $255 = $254;
 $256 = HEAP32[$255>>2]|0;
 $257 = (_bitshift64Shl(($253|0),($256|0),25)|0);
 $258 = (getTempRet0() | 0);
 $259 = $18;
 $260 = $259;
 $261 = HEAP32[$260>>2]|0;
 $262 = (($259) + 4)|0;
 $263 = $262;
 $264 = HEAP32[$263>>2]|0;
 $265 = (_i64Subtract(($261|0),($264|0),($257|0),($258|0))|0);
 $266 = (getTempRet0() | 0);
 $267 = $18;
 $268 = $267;
 HEAP32[$268>>2] = $265;
 $269 = (($267) + 4)|0;
 $270 = $269;
 HEAP32[$270>>2] = $266;
 $271 = $10;
 $272 = $271;
 $273 = HEAP32[$272>>2]|0;
 $274 = (($271) + 4)|0;
 $275 = $274;
 $276 = HEAP32[$275>>2]|0;
 $277 = (_i64Add(($273|0),($276|0),16777216,0)|0);
 $278 = (getTempRet0() | 0);
 $279 = (_bitshift64Ashr(($277|0),($278|0),25)|0);
 $280 = (getTempRet0() | 0);
 $281 = $20;
 $282 = $281;
 HEAP32[$282>>2] = $279;
 $283 = (($281) + 4)|0;
 $284 = $283;
 HEAP32[$284>>2] = $280;
 $285 = $20;
 $286 = $285;
 $287 = HEAP32[$286>>2]|0;
 $288 = (($285) + 4)|0;
 $289 = $288;
 $290 = HEAP32[$289>>2]|0;
 $291 = $11;
 $292 = $291;
 $293 = HEAP32[$292>>2]|0;
 $294 = (($291) + 4)|0;
 $295 = $294;
 $296 = HEAP32[$295>>2]|0;
 $297 = (_i64Add(($293|0),($296|0),($287|0),($290|0))|0);
 $298 = (getTempRet0() | 0);
 $299 = $11;
 $300 = $299;
 HEAP32[$300>>2] = $297;
 $301 = (($299) + 4)|0;
 $302 = $301;
 HEAP32[$302>>2] = $298;
 $303 = $20;
 $304 = $303;
 $305 = HEAP32[$304>>2]|0;
 $306 = (($303) + 4)|0;
 $307 = $306;
 $308 = HEAP32[$307>>2]|0;
 $309 = (_bitshift64Shl(($305|0),($308|0),25)|0);
 $310 = (getTempRet0() | 0);
 $311 = $10;
 $312 = $311;
 $313 = HEAP32[$312>>2]|0;
 $314 = (($311) + 4)|0;
 $315 = $314;
 $316 = HEAP32[$315>>2]|0;
 $317 = (_i64Subtract(($313|0),($316|0),($309|0),($310|0))|0);
 $318 = (getTempRet0() | 0);
 $319 = $10;
 $320 = $319;
 HEAP32[$320>>2] = $317;
 $321 = (($319) + 4)|0;
 $322 = $321;
 HEAP32[$322>>2] = $318;
 $323 = $12;
 $324 = $323;
 $325 = HEAP32[$324>>2]|0;
 $326 = (($323) + 4)|0;
 $327 = $326;
 $328 = HEAP32[$327>>2]|0;
 $329 = (_i64Add(($325|0),($328|0),16777216,0)|0);
 $330 = (getTempRet0() | 0);
 $331 = (_bitshift64Ashr(($329|0),($330|0),25)|0);
 $332 = (getTempRet0() | 0);
 $333 = $22;
 $334 = $333;
 HEAP32[$334>>2] = $331;
 $335 = (($333) + 4)|0;
 $336 = $335;
 HEAP32[$336>>2] = $332;
 $337 = $22;
 $338 = $337;
 $339 = HEAP32[$338>>2]|0;
 $340 = (($337) + 4)|0;
 $341 = $340;
 $342 = HEAP32[$341>>2]|0;
 $343 = $13;
 $344 = $343;
 $345 = HEAP32[$344>>2]|0;
 $346 = (($343) + 4)|0;
 $347 = $346;
 $348 = HEAP32[$347>>2]|0;
 $349 = (_i64Add(($345|0),($348|0),($339|0),($342|0))|0);
 $350 = (getTempRet0() | 0);
 $351 = $13;
 $352 = $351;
 HEAP32[$352>>2] = $349;
 $353 = (($351) + 4)|0;
 $354 = $353;
 HEAP32[$354>>2] = $350;
 $355 = $22;
 $356 = $355;
 $357 = HEAP32[$356>>2]|0;
 $358 = (($355) + 4)|0;
 $359 = $358;
 $360 = HEAP32[$359>>2]|0;
 $361 = (_bitshift64Shl(($357|0),($360|0),25)|0);
 $362 = (getTempRet0() | 0);
 $363 = $12;
 $364 = $363;
 $365 = HEAP32[$364>>2]|0;
 $366 = (($363) + 4)|0;
 $367 = $366;
 $368 = HEAP32[$367>>2]|0;
 $369 = (_i64Subtract(($365|0),($368|0),($361|0),($362|0))|0);
 $370 = (getTempRet0() | 0);
 $371 = $12;
 $372 = $371;
 HEAP32[$372>>2] = $369;
 $373 = (($371) + 4)|0;
 $374 = $373;
 HEAP32[$374>>2] = $370;
 $375 = $14;
 $376 = $375;
 $377 = HEAP32[$376>>2]|0;
 $378 = (($375) + 4)|0;
 $379 = $378;
 $380 = HEAP32[$379>>2]|0;
 $381 = (_i64Add(($377|0),($380|0),16777216,0)|0);
 $382 = (getTempRet0() | 0);
 $383 = (_bitshift64Ashr(($381|0),($382|0),25)|0);
 $384 = (getTempRet0() | 0);
 $385 = $24;
 $386 = $385;
 HEAP32[$386>>2] = $383;
 $387 = (($385) + 4)|0;
 $388 = $387;
 HEAP32[$388>>2] = $384;
 $389 = $24;
 $390 = $389;
 $391 = HEAP32[$390>>2]|0;
 $392 = (($389) + 4)|0;
 $393 = $392;
 $394 = HEAP32[$393>>2]|0;
 $395 = $15;
 $396 = $395;
 $397 = HEAP32[$396>>2]|0;
 $398 = (($395) + 4)|0;
 $399 = $398;
 $400 = HEAP32[$399>>2]|0;
 $401 = (_i64Add(($397|0),($400|0),($391|0),($394|0))|0);
 $402 = (getTempRet0() | 0);
 $403 = $15;
 $404 = $403;
 HEAP32[$404>>2] = $401;
 $405 = (($403) + 4)|0;
 $406 = $405;
 HEAP32[$406>>2] = $402;
 $407 = $24;
 $408 = $407;
 $409 = HEAP32[$408>>2]|0;
 $410 = (($407) + 4)|0;
 $411 = $410;
 $412 = HEAP32[$411>>2]|0;
 $413 = (_bitshift64Shl(($409|0),($412|0),25)|0);
 $414 = (getTempRet0() | 0);
 $415 = $14;
 $416 = $415;
 $417 = HEAP32[$416>>2]|0;
 $418 = (($415) + 4)|0;
 $419 = $418;
 $420 = HEAP32[$419>>2]|0;
 $421 = (_i64Subtract(($417|0),($420|0),($413|0),($414|0))|0);
 $422 = (getTempRet0() | 0);
 $423 = $14;
 $424 = $423;
 HEAP32[$424>>2] = $421;
 $425 = (($423) + 4)|0;
 $426 = $425;
 HEAP32[$426>>2] = $422;
 $427 = $16;
 $428 = $427;
 $429 = HEAP32[$428>>2]|0;
 $430 = (($427) + 4)|0;
 $431 = $430;
 $432 = HEAP32[$431>>2]|0;
 $433 = (_i64Add(($429|0),($432|0),16777216,0)|0);
 $434 = (getTempRet0() | 0);
 $435 = (_bitshift64Ashr(($433|0),($434|0),25)|0);
 $436 = (getTempRet0() | 0);
 $437 = $26;
 $438 = $437;
 HEAP32[$438>>2] = $435;
 $439 = (($437) + 4)|0;
 $440 = $439;
 HEAP32[$440>>2] = $436;
 $441 = $26;
 $442 = $441;
 $443 = HEAP32[$442>>2]|0;
 $444 = (($441) + 4)|0;
 $445 = $444;
 $446 = HEAP32[$445>>2]|0;
 $447 = $17;
 $448 = $447;
 $449 = HEAP32[$448>>2]|0;
 $450 = (($447) + 4)|0;
 $451 = $450;
 $452 = HEAP32[$451>>2]|0;
 $453 = (_i64Add(($449|0),($452|0),($443|0),($446|0))|0);
 $454 = (getTempRet0() | 0);
 $455 = $17;
 $456 = $455;
 HEAP32[$456>>2] = $453;
 $457 = (($455) + 4)|0;
 $458 = $457;
 HEAP32[$458>>2] = $454;
 $459 = $26;
 $460 = $459;
 $461 = HEAP32[$460>>2]|0;
 $462 = (($459) + 4)|0;
 $463 = $462;
 $464 = HEAP32[$463>>2]|0;
 $465 = (_bitshift64Shl(($461|0),($464|0),25)|0);
 $466 = (getTempRet0() | 0);
 $467 = $16;
 $468 = $467;
 $469 = HEAP32[$468>>2]|0;
 $470 = (($467) + 4)|0;
 $471 = $470;
 $472 = HEAP32[$471>>2]|0;
 $473 = (_i64Subtract(($469|0),($472|0),($465|0),($466|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = $16;
 $476 = $475;
 HEAP32[$476>>2] = $473;
 $477 = (($475) + 4)|0;
 $478 = $477;
 HEAP32[$478>>2] = $474;
 $479 = $9;
 $480 = $479;
 $481 = HEAP32[$480>>2]|0;
 $482 = (($479) + 4)|0;
 $483 = $482;
 $484 = HEAP32[$483>>2]|0;
 $485 = (_i64Add(($481|0),($484|0),33554432,0)|0);
 $486 = (getTempRet0() | 0);
 $487 = (_bitshift64Ashr(($485|0),($486|0),26)|0);
 $488 = (getTempRet0() | 0);
 $489 = $19;
 $490 = $489;
 HEAP32[$490>>2] = $487;
 $491 = (($489) + 4)|0;
 $492 = $491;
 HEAP32[$492>>2] = $488;
 $493 = $19;
 $494 = $493;
 $495 = HEAP32[$494>>2]|0;
 $496 = (($493) + 4)|0;
 $497 = $496;
 $498 = HEAP32[$497>>2]|0;
 $499 = $10;
 $500 = $499;
 $501 = HEAP32[$500>>2]|0;
 $502 = (($499) + 4)|0;
 $503 = $502;
 $504 = HEAP32[$503>>2]|0;
 $505 = (_i64Add(($501|0),($504|0),($495|0),($498|0))|0);
 $506 = (getTempRet0() | 0);
 $507 = $10;
 $508 = $507;
 HEAP32[$508>>2] = $505;
 $509 = (($507) + 4)|0;
 $510 = $509;
 HEAP32[$510>>2] = $506;
 $511 = $19;
 $512 = $511;
 $513 = HEAP32[$512>>2]|0;
 $514 = (($511) + 4)|0;
 $515 = $514;
 $516 = HEAP32[$515>>2]|0;
 $517 = (_bitshift64Shl(($513|0),($516|0),26)|0);
 $518 = (getTempRet0() | 0);
 $519 = $9;
 $520 = $519;
 $521 = HEAP32[$520>>2]|0;
 $522 = (($519) + 4)|0;
 $523 = $522;
 $524 = HEAP32[$523>>2]|0;
 $525 = (_i64Subtract(($521|0),($524|0),($517|0),($518|0))|0);
 $526 = (getTempRet0() | 0);
 $527 = $9;
 $528 = $527;
 HEAP32[$528>>2] = $525;
 $529 = (($527) + 4)|0;
 $530 = $529;
 HEAP32[$530>>2] = $526;
 $531 = $11;
 $532 = $531;
 $533 = HEAP32[$532>>2]|0;
 $534 = (($531) + 4)|0;
 $535 = $534;
 $536 = HEAP32[$535>>2]|0;
 $537 = (_i64Add(($533|0),($536|0),33554432,0)|0);
 $538 = (getTempRet0() | 0);
 $539 = (_bitshift64Ashr(($537|0),($538|0),26)|0);
 $540 = (getTempRet0() | 0);
 $541 = $21;
 $542 = $541;
 HEAP32[$542>>2] = $539;
 $543 = (($541) + 4)|0;
 $544 = $543;
 HEAP32[$544>>2] = $540;
 $545 = $21;
 $546 = $545;
 $547 = HEAP32[$546>>2]|0;
 $548 = (($545) + 4)|0;
 $549 = $548;
 $550 = HEAP32[$549>>2]|0;
 $551 = $12;
 $552 = $551;
 $553 = HEAP32[$552>>2]|0;
 $554 = (($551) + 4)|0;
 $555 = $554;
 $556 = HEAP32[$555>>2]|0;
 $557 = (_i64Add(($553|0),($556|0),($547|0),($550|0))|0);
 $558 = (getTempRet0() | 0);
 $559 = $12;
 $560 = $559;
 HEAP32[$560>>2] = $557;
 $561 = (($559) + 4)|0;
 $562 = $561;
 HEAP32[$562>>2] = $558;
 $563 = $21;
 $564 = $563;
 $565 = HEAP32[$564>>2]|0;
 $566 = (($563) + 4)|0;
 $567 = $566;
 $568 = HEAP32[$567>>2]|0;
 $569 = (_bitshift64Shl(($565|0),($568|0),26)|0);
 $570 = (getTempRet0() | 0);
 $571 = $11;
 $572 = $571;
 $573 = HEAP32[$572>>2]|0;
 $574 = (($571) + 4)|0;
 $575 = $574;
 $576 = HEAP32[$575>>2]|0;
 $577 = (_i64Subtract(($573|0),($576|0),($569|0),($570|0))|0);
 $578 = (getTempRet0() | 0);
 $579 = $11;
 $580 = $579;
 HEAP32[$580>>2] = $577;
 $581 = (($579) + 4)|0;
 $582 = $581;
 HEAP32[$582>>2] = $578;
 $583 = $13;
 $584 = $583;
 $585 = HEAP32[$584>>2]|0;
 $586 = (($583) + 4)|0;
 $587 = $586;
 $588 = HEAP32[$587>>2]|0;
 $589 = (_i64Add(($585|0),($588|0),33554432,0)|0);
 $590 = (getTempRet0() | 0);
 $591 = (_bitshift64Ashr(($589|0),($590|0),26)|0);
 $592 = (getTempRet0() | 0);
 $593 = $23;
 $594 = $593;
 HEAP32[$594>>2] = $591;
 $595 = (($593) + 4)|0;
 $596 = $595;
 HEAP32[$596>>2] = $592;
 $597 = $23;
 $598 = $597;
 $599 = HEAP32[$598>>2]|0;
 $600 = (($597) + 4)|0;
 $601 = $600;
 $602 = HEAP32[$601>>2]|0;
 $603 = $14;
 $604 = $603;
 $605 = HEAP32[$604>>2]|0;
 $606 = (($603) + 4)|0;
 $607 = $606;
 $608 = HEAP32[$607>>2]|0;
 $609 = (_i64Add(($605|0),($608|0),($599|0),($602|0))|0);
 $610 = (getTempRet0() | 0);
 $611 = $14;
 $612 = $611;
 HEAP32[$612>>2] = $609;
 $613 = (($611) + 4)|0;
 $614 = $613;
 HEAP32[$614>>2] = $610;
 $615 = $23;
 $616 = $615;
 $617 = HEAP32[$616>>2]|0;
 $618 = (($615) + 4)|0;
 $619 = $618;
 $620 = HEAP32[$619>>2]|0;
 $621 = (_bitshift64Shl(($617|0),($620|0),26)|0);
 $622 = (getTempRet0() | 0);
 $623 = $13;
 $624 = $623;
 $625 = HEAP32[$624>>2]|0;
 $626 = (($623) + 4)|0;
 $627 = $626;
 $628 = HEAP32[$627>>2]|0;
 $629 = (_i64Subtract(($625|0),($628|0),($621|0),($622|0))|0);
 $630 = (getTempRet0() | 0);
 $631 = $13;
 $632 = $631;
 HEAP32[$632>>2] = $629;
 $633 = (($631) + 4)|0;
 $634 = $633;
 HEAP32[$634>>2] = $630;
 $635 = $15;
 $636 = $635;
 $637 = HEAP32[$636>>2]|0;
 $638 = (($635) + 4)|0;
 $639 = $638;
 $640 = HEAP32[$639>>2]|0;
 $641 = (_i64Add(($637|0),($640|0),33554432,0)|0);
 $642 = (getTempRet0() | 0);
 $643 = (_bitshift64Ashr(($641|0),($642|0),26)|0);
 $644 = (getTempRet0() | 0);
 $645 = $25;
 $646 = $645;
 HEAP32[$646>>2] = $643;
 $647 = (($645) + 4)|0;
 $648 = $647;
 HEAP32[$648>>2] = $644;
 $649 = $25;
 $650 = $649;
 $651 = HEAP32[$650>>2]|0;
 $652 = (($649) + 4)|0;
 $653 = $652;
 $654 = HEAP32[$653>>2]|0;
 $655 = $16;
 $656 = $655;
 $657 = HEAP32[$656>>2]|0;
 $658 = (($655) + 4)|0;
 $659 = $658;
 $660 = HEAP32[$659>>2]|0;
 $661 = (_i64Add(($657|0),($660|0),($651|0),($654|0))|0);
 $662 = (getTempRet0() | 0);
 $663 = $16;
 $664 = $663;
 HEAP32[$664>>2] = $661;
 $665 = (($663) + 4)|0;
 $666 = $665;
 HEAP32[$666>>2] = $662;
 $667 = $25;
 $668 = $667;
 $669 = HEAP32[$668>>2]|0;
 $670 = (($667) + 4)|0;
 $671 = $670;
 $672 = HEAP32[$671>>2]|0;
 $673 = (_bitshift64Shl(($669|0),($672|0),26)|0);
 $674 = (getTempRet0() | 0);
 $675 = $15;
 $676 = $675;
 $677 = HEAP32[$676>>2]|0;
 $678 = (($675) + 4)|0;
 $679 = $678;
 $680 = HEAP32[$679>>2]|0;
 $681 = (_i64Subtract(($677|0),($680|0),($673|0),($674|0))|0);
 $682 = (getTempRet0() | 0);
 $683 = $15;
 $684 = $683;
 HEAP32[$684>>2] = $681;
 $685 = (($683) + 4)|0;
 $686 = $685;
 HEAP32[$686>>2] = $682;
 $687 = $17;
 $688 = $687;
 $689 = HEAP32[$688>>2]|0;
 $690 = (($687) + 4)|0;
 $691 = $690;
 $692 = HEAP32[$691>>2]|0;
 $693 = (_i64Add(($689|0),($692|0),33554432,0)|0);
 $694 = (getTempRet0() | 0);
 $695 = (_bitshift64Ashr(($693|0),($694|0),26)|0);
 $696 = (getTempRet0() | 0);
 $697 = $27;
 $698 = $697;
 HEAP32[$698>>2] = $695;
 $699 = (($697) + 4)|0;
 $700 = $699;
 HEAP32[$700>>2] = $696;
 $701 = $27;
 $702 = $701;
 $703 = HEAP32[$702>>2]|0;
 $704 = (($701) + 4)|0;
 $705 = $704;
 $706 = HEAP32[$705>>2]|0;
 $707 = $18;
 $708 = $707;
 $709 = HEAP32[$708>>2]|0;
 $710 = (($707) + 4)|0;
 $711 = $710;
 $712 = HEAP32[$711>>2]|0;
 $713 = (_i64Add(($709|0),($712|0),($703|0),($706|0))|0);
 $714 = (getTempRet0() | 0);
 $715 = $18;
 $716 = $715;
 HEAP32[$716>>2] = $713;
 $717 = (($715) + 4)|0;
 $718 = $717;
 HEAP32[$718>>2] = $714;
 $719 = $27;
 $720 = $719;
 $721 = HEAP32[$720>>2]|0;
 $722 = (($719) + 4)|0;
 $723 = $722;
 $724 = HEAP32[$723>>2]|0;
 $725 = (_bitshift64Shl(($721|0),($724|0),26)|0);
 $726 = (getTempRet0() | 0);
 $727 = $17;
 $728 = $727;
 $729 = HEAP32[$728>>2]|0;
 $730 = (($727) + 4)|0;
 $731 = $730;
 $732 = HEAP32[$731>>2]|0;
 $733 = (_i64Subtract(($729|0),($732|0),($725|0),($726|0))|0);
 $734 = (getTempRet0() | 0);
 $735 = $17;
 $736 = $735;
 HEAP32[$736>>2] = $733;
 $737 = (($735) + 4)|0;
 $738 = $737;
 HEAP32[$738>>2] = $734;
 $739 = $9;
 $740 = $739;
 $741 = HEAP32[$740>>2]|0;
 $742 = (($739) + 4)|0;
 $743 = $742;
 $744 = HEAP32[$743>>2]|0;
 $745 = $3;
 $746 = ((($745)) + 40|0);
 HEAP32[$746>>2] = $741;
 $747 = $10;
 $748 = $747;
 $749 = HEAP32[$748>>2]|0;
 $750 = (($747) + 4)|0;
 $751 = $750;
 $752 = HEAP32[$751>>2]|0;
 $753 = $3;
 $754 = ((($753)) + 40|0);
 $755 = ((($754)) + 4|0);
 HEAP32[$755>>2] = $749;
 $756 = $11;
 $757 = $756;
 $758 = HEAP32[$757>>2]|0;
 $759 = (($756) + 4)|0;
 $760 = $759;
 $761 = HEAP32[$760>>2]|0;
 $762 = $3;
 $763 = ((($762)) + 40|0);
 $764 = ((($763)) + 8|0);
 HEAP32[$764>>2] = $758;
 $765 = $12;
 $766 = $765;
 $767 = HEAP32[$766>>2]|0;
 $768 = (($765) + 4)|0;
 $769 = $768;
 $770 = HEAP32[$769>>2]|0;
 $771 = $3;
 $772 = ((($771)) + 40|0);
 $773 = ((($772)) + 12|0);
 HEAP32[$773>>2] = $767;
 $774 = $13;
 $775 = $774;
 $776 = HEAP32[$775>>2]|0;
 $777 = (($774) + 4)|0;
 $778 = $777;
 $779 = HEAP32[$778>>2]|0;
 $780 = $3;
 $781 = ((($780)) + 40|0);
 $782 = ((($781)) + 16|0);
 HEAP32[$782>>2] = $776;
 $783 = $14;
 $784 = $783;
 $785 = HEAP32[$784>>2]|0;
 $786 = (($783) + 4)|0;
 $787 = $786;
 $788 = HEAP32[$787>>2]|0;
 $789 = $3;
 $790 = ((($789)) + 40|0);
 $791 = ((($790)) + 20|0);
 HEAP32[$791>>2] = $785;
 $792 = $15;
 $793 = $792;
 $794 = HEAP32[$793>>2]|0;
 $795 = (($792) + 4)|0;
 $796 = $795;
 $797 = HEAP32[$796>>2]|0;
 $798 = $3;
 $799 = ((($798)) + 40|0);
 $800 = ((($799)) + 24|0);
 HEAP32[$800>>2] = $794;
 $801 = $16;
 $802 = $801;
 $803 = HEAP32[$802>>2]|0;
 $804 = (($801) + 4)|0;
 $805 = $804;
 $806 = HEAP32[$805>>2]|0;
 $807 = $3;
 $808 = ((($807)) + 40|0);
 $809 = ((($808)) + 28|0);
 HEAP32[$809>>2] = $803;
 $810 = $17;
 $811 = $810;
 $812 = HEAP32[$811>>2]|0;
 $813 = (($810) + 4)|0;
 $814 = $813;
 $815 = HEAP32[$814>>2]|0;
 $816 = $3;
 $817 = ((($816)) + 40|0);
 $818 = ((($817)) + 32|0);
 HEAP32[$818>>2] = $812;
 $819 = $18;
 $820 = $819;
 $821 = HEAP32[$820>>2]|0;
 $822 = (($819) + 4)|0;
 $823 = $822;
 $824 = HEAP32[$823>>2]|0;
 $825 = $3;
 $826 = ((($825)) + 40|0);
 $827 = ((($826)) + 36|0);
 HEAP32[$827>>2] = $821;
 $828 = $3;
 $829 = ((($828)) + 80|0);
 _fe_1($829);
 $830 = $3;
 $831 = ((($830)) + 40|0);
 _fe_sq($5,$831);
 _fe_mul($6,$5,16);
 $832 = $3;
 $833 = ((($832)) + 80|0);
 _fe_sub($5,$5,$833);
 $834 = $3;
 $835 = ((($834)) + 80|0);
 _fe_add($6,$6,$835);
 $836 = $3;
 _fe_divpowm1($836,$5,$6);
 $837 = $3;
 _fe_sq($7,$837);
 _fe_mul($7,$7,$6);
 _fe_sub($8,$7,$5);
 $838 = (_fe_isnonzero($8)|0);
 $839 = ($838|0)!=(0);
 do {
  if ($839) {
   _fe_add($8,$7,$5);
   $840 = (_fe_isnonzero($8)|0);
   $841 = ($840|0)!=(0);
   if (!($841)) {
    $842 = $3;
    $843 = $3;
    _fe_mul($842,$843,64);
    break;
   }
   $2 = -1;
   $862 = $2;
   STACKTOP = sp;return ($862|0);
  }
 } while(0);
 $844 = $3;
 $845 = (_fe_isnegative($844)|0);
 $846 = $4;
 $847 = ((($846)) + 31|0);
 $848 = HEAP8[$847>>0]|0;
 $849 = $848&255;
 $850 = $849 >> 7;
 $851 = ($845|0)!=($850|0);
 do {
  if ($851) {
   $852 = $3;
   $853 = (_fe_isnonzero($852)|0);
   $854 = ($853|0)!=(0);
   if ($854) {
    $855 = $3;
    $856 = $3;
    _fe_neg($855,$856);
    break;
   }
   $2 = -1;
   $862 = $2;
   STACKTOP = sp;return ($862|0);
  }
 } while(0);
 $857 = $3;
 $858 = ((($857)) + 120|0);
 $859 = $3;
 $860 = $3;
 $861 = ((($860)) + 40|0);
 _fe_mul($858,$859,$861);
 $2 = 0;
 $862 = $2;
 STACKTOP = sp;return ($862|0);
}
function _load_4($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = (getTempRet0() | 0);
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = (getTempRet0() | 0);
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $1;
 $47 = ((($46)) + 3|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = (_bitshift64Shl(($49|0),0,24)|0);
 $51 = (getTempRet0() | 0);
 $52 = $2;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $54 | $50;
 $59 = $57 | $51;
 $60 = $2;
 $61 = $60;
 HEAP32[$61>>2] = $58;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $59;
 $64 = $2;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($64) + 4)|0;
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 setTempRet0(($69) | 0);
 STACKTOP = sp;return ($66|0);
}
function _load_3($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $2;
 $7 = $6;
 HEAP32[$7>>2] = $5;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (_bitshift64Shl(($13|0),0,8)|0);
 $15 = (getTempRet0() | 0);
 $16 = $2;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) + 4)|0;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = $18 | $14;
 $23 = $21 | $15;
 $24 = $2;
 $25 = $24;
 HEAP32[$25>>2] = $22;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 $28 = $1;
 $29 = ((($28)) + 2|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (_bitshift64Shl(($31|0),0,16)|0);
 $33 = (getTempRet0() | 0);
 $34 = $2;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $36 | $32;
 $41 = $39 | $33;
 $42 = $2;
 $43 = $42;
 HEAP32[$43>>2] = $40;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = $41;
 $46 = $2;
 $47 = $46;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 4)|0;
 $50 = $49;
 $51 = HEAP32[$50>>2]|0;
 setTempRet0(($51) | 0);
 STACKTOP = sp;return ($48|0);
}
function _fe_divpowm1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $6 = sp + 192|0;
 $7 = sp + 144|0;
 $8 = sp + 96|0;
 $9 = sp + 48|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $12 = $5;
 _fe_sq($6,$12);
 $13 = $5;
 _fe_mul($6,$6,$13);
 _fe_sq($7,$6);
 $14 = $5;
 _fe_mul($7,$7,$14);
 $15 = $4;
 _fe_mul($7,$7,$15);
 _fe_sq($8,$7);
 _fe_sq($9,$8);
 _fe_sq($9,$9);
 _fe_mul($9,$7,$9);
 _fe_mul($8,$8,$9);
 _fe_sq($8,$8);
 _fe_mul($8,$9,$8);
 _fe_sq($9,$8);
 $11 = 0;
 while(1) {
  $16 = $11;
  $17 = ($16|0)<(4);
  if (!($17)) {
   break;
  }
  _fe_sq($9,$9);
  $18 = $11;
  $19 = (($18) + 1)|0;
  $11 = $19;
 }
 _fe_mul($8,$9,$8);
 _fe_sq($9,$8);
 $11 = 0;
 while(1) {
  $20 = $11;
  $21 = ($20|0)<(9);
  if (!($21)) {
   break;
  }
  _fe_sq($9,$9);
  $22 = $11;
  $23 = (($22) + 1)|0;
  $11 = $23;
 }
 _fe_mul($9,$9,$8);
 _fe_sq($10,$9);
 $11 = 0;
 while(1) {
  $24 = $11;
  $25 = ($24|0)<(19);
  if (!($25)) {
   break;
  }
  _fe_sq($10,$10);
  $26 = $11;
  $27 = (($26) + 1)|0;
  $11 = $27;
 }
 _fe_mul($9,$10,$9);
 $11 = 0;
 while(1) {
  $28 = $11;
  $29 = ($28|0)<(10);
  if (!($29)) {
   break;
  }
  _fe_sq($9,$9);
  $30 = $11;
  $31 = (($30) + 1)|0;
  $11 = $31;
 }
 _fe_mul($8,$9,$8);
 _fe_sq($9,$8);
 $11 = 0;
 while(1) {
  $32 = $11;
  $33 = ($32|0)<(49);
  if (!($33)) {
   break;
  }
  _fe_sq($9,$9);
  $34 = $11;
  $35 = (($34) + 1)|0;
  $11 = $35;
 }
 _fe_mul($9,$9,$8);
 _fe_sq($10,$9);
 $11 = 0;
 while(1) {
  $36 = $11;
  $37 = ($36|0)<(99);
  if (!($37)) {
   break;
  }
  _fe_sq($10,$10);
  $38 = $11;
  $39 = (($38) + 1)|0;
  $11 = $39;
 }
 _fe_mul($9,$10,$9);
 $11 = 0;
 while(1) {
  $40 = $11;
  $41 = ($40|0)<(50);
  if (!($41)) {
   break;
  }
  _fe_sq($9,$9);
  $42 = $11;
  $43 = (($42) + 1)|0;
  $11 = $43;
 }
 _fe_mul($8,$9,$8);
 _fe_sq($8,$8);
 _fe_sq($8,$8);
 _fe_mul($8,$8,$7);
 _fe_mul($8,$8,$6);
 $44 = $3;
 $45 = $4;
 _fe_mul($44,$8,$45);
 STACKTOP = sp;return;
}
function _fe_isnonzero($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 _fe_tobytes($2,$3);
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $5 | $8;
 $10 = ((($2)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $9 | $12;
 $14 = ((($2)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $13 | $16;
 $18 = ((($2)) + 4|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($2)) + 5|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $21 | $24;
 $26 = ((($2)) + 6|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $25 | $28;
 $30 = ((($2)) + 7|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $29 | $32;
 $34 = ((($2)) + 8|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $33 | $36;
 $38 = ((($2)) + 9|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $37 | $40;
 $42 = ((($2)) + 10|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $41 | $44;
 $46 = ((($2)) + 11|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $45 | $48;
 $50 = ((($2)) + 12|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $49 | $52;
 $54 = ((($2)) + 13|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $53 | $56;
 $58 = ((($2)) + 14|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $57 | $60;
 $62 = ((($2)) + 15|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $61 | $64;
 $66 = ((($2)) + 16|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = $65 | $68;
 $70 = ((($2)) + 17|0);
 $71 = HEAP8[$70>>0]|0;
 $72 = $71&255;
 $73 = $69 | $72;
 $74 = ((($2)) + 18|0);
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $73 | $76;
 $78 = ((($2)) + 19|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = $79&255;
 $81 = $77 | $80;
 $82 = ((($2)) + 20|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = $81 | $84;
 $86 = ((($2)) + 21|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = $85 | $88;
 $90 = ((($2)) + 22|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $89 | $92;
 $94 = ((($2)) + 23|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 $97 = $93 | $96;
 $98 = ((($2)) + 24|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = $99&255;
 $101 = $97 | $100;
 $102 = ((($2)) + 25|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103&255;
 $105 = $101 | $104;
 $106 = ((($2)) + 26|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = $105 | $108;
 $110 = ((($2)) + 27|0);
 $111 = HEAP8[$110>>0]|0;
 $112 = $111&255;
 $113 = $109 | $112;
 $114 = ((($2)) + 28|0);
 $115 = HEAP8[$114>>0]|0;
 $116 = $115&255;
 $117 = $113 | $116;
 $118 = ((($2)) + 29|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $117 | $120;
 $122 = ((($2)) + 30|0);
 $123 = HEAP8[$122>>0]|0;
 $124 = $123&255;
 $125 = $121 | $124;
 $126 = ((($2)) + 31|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = $125 | $128;
 $130 = (($129) - 1)|0;
 $131 = $130 >> 8;
 $132 = (($131) + 1)|0;
 STACKTOP = sp;return ($132|0);
}
function _fe_isnegative($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 _fe_tobytes($2,$3);
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 & 1;
 STACKTOP = sp;return ($6|0);
}
function _fe_neg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = $0;
 $3 = $1;
 $24 = $3;
 $25 = HEAP32[$24>>2]|0;
 $4 = $25;
 $26 = $3;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $5 = $28;
 $29 = $3;
 $30 = ((($29)) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $6 = $31;
 $32 = $3;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $7 = $34;
 $35 = $3;
 $36 = ((($35)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $8 = $37;
 $38 = $3;
 $39 = ((($38)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $9 = $40;
 $41 = $3;
 $42 = ((($41)) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $10 = $43;
 $44 = $3;
 $45 = ((($44)) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $11 = $46;
 $47 = $3;
 $48 = ((($47)) + 32|0);
 $49 = HEAP32[$48>>2]|0;
 $12 = $49;
 $50 = $3;
 $51 = ((($50)) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $13 = $52;
 $53 = $4;
 $54 = (0 - ($53))|0;
 $14 = $54;
 $55 = $5;
 $56 = (0 - ($55))|0;
 $15 = $56;
 $57 = $6;
 $58 = (0 - ($57))|0;
 $16 = $58;
 $59 = $7;
 $60 = (0 - ($59))|0;
 $17 = $60;
 $61 = $8;
 $62 = (0 - ($61))|0;
 $18 = $62;
 $63 = $9;
 $64 = (0 - ($63))|0;
 $19 = $64;
 $65 = $10;
 $66 = (0 - ($65))|0;
 $20 = $66;
 $67 = $11;
 $68 = (0 - ($67))|0;
 $21 = $68;
 $69 = $12;
 $70 = (0 - ($69))|0;
 $22 = $70;
 $71 = $13;
 $72 = (0 - ($71))|0;
 $23 = $72;
 $73 = $14;
 $74 = $2;
 HEAP32[$74>>2] = $73;
 $75 = $15;
 $76 = $2;
 $77 = ((($76)) + 4|0);
 HEAP32[$77>>2] = $75;
 $78 = $16;
 $79 = $2;
 $80 = ((($79)) + 8|0);
 HEAP32[$80>>2] = $78;
 $81 = $17;
 $82 = $2;
 $83 = ((($82)) + 12|0);
 HEAP32[$83>>2] = $81;
 $84 = $18;
 $85 = $2;
 $86 = ((($85)) + 16|0);
 HEAP32[$86>>2] = $84;
 $87 = $19;
 $88 = $2;
 $89 = ((($88)) + 20|0);
 HEAP32[$89>>2] = $87;
 $90 = $20;
 $91 = $2;
 $92 = ((($91)) + 24|0);
 HEAP32[$92>>2] = $90;
 $93 = $21;
 $94 = $2;
 $95 = ((($94)) + 28|0);
 HEAP32[$95>>2] = $93;
 $96 = $22;
 $97 = $2;
 $98 = ((($97)) + 32|0);
 HEAP32[$98>>2] = $96;
 $99 = $23;
 $100 = $2;
 $101 = ((($100)) + 36|0);
 HEAP32[$101>>2] = $99;
 STACKTOP = sp;return;
}
function _fe_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = $0;
 $3 = $1;
 $25 = $3;
 $26 = HEAP32[$25>>2]|0;
 $4 = $26;
 $27 = $3;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $5 = $29;
 $30 = $3;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $6 = $32;
 $33 = $3;
 $34 = ((($33)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $7 = $35;
 $36 = $3;
 $37 = ((($36)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $8 = $38;
 $39 = $3;
 $40 = ((($39)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $9 = $41;
 $42 = $3;
 $43 = ((($42)) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $10 = $44;
 $45 = $3;
 $46 = ((($45)) + 28|0);
 $47 = HEAP32[$46>>2]|0;
 $11 = $47;
 $48 = $3;
 $49 = ((($48)) + 32|0);
 $50 = HEAP32[$49>>2]|0;
 $12 = $50;
 $51 = $3;
 $52 = ((($51)) + 36|0);
 $53 = HEAP32[$52>>2]|0;
 $13 = $53;
 $54 = $13;
 $55 = ($54*19)|0;
 $56 = (($55) + 16777216)|0;
 $57 = $56 >> 25;
 $14 = $57;
 $58 = $4;
 $59 = $14;
 $60 = (($58) + ($59))|0;
 $61 = $60 >> 26;
 $14 = $61;
 $62 = $5;
 $63 = $14;
 $64 = (($62) + ($63))|0;
 $65 = $64 >> 25;
 $14 = $65;
 $66 = $6;
 $67 = $14;
 $68 = (($66) + ($67))|0;
 $69 = $68 >> 26;
 $14 = $69;
 $70 = $7;
 $71 = $14;
 $72 = (($70) + ($71))|0;
 $73 = $72 >> 25;
 $14 = $73;
 $74 = $8;
 $75 = $14;
 $76 = (($74) + ($75))|0;
 $77 = $76 >> 26;
 $14 = $77;
 $78 = $9;
 $79 = $14;
 $80 = (($78) + ($79))|0;
 $81 = $80 >> 25;
 $14 = $81;
 $82 = $10;
 $83 = $14;
 $84 = (($82) + ($83))|0;
 $85 = $84 >> 26;
 $14 = $85;
 $86 = $11;
 $87 = $14;
 $88 = (($86) + ($87))|0;
 $89 = $88 >> 25;
 $14 = $89;
 $90 = $12;
 $91 = $14;
 $92 = (($90) + ($91))|0;
 $93 = $92 >> 26;
 $14 = $93;
 $94 = $13;
 $95 = $14;
 $96 = (($94) + ($95))|0;
 $97 = $96 >> 25;
 $14 = $97;
 $98 = $14;
 $99 = ($98*19)|0;
 $100 = $4;
 $101 = (($100) + ($99))|0;
 $4 = $101;
 $102 = $4;
 $103 = $102 >> 26;
 $15 = $103;
 $104 = $15;
 $105 = $5;
 $106 = (($105) + ($104))|0;
 $5 = $106;
 $107 = $15;
 $108 = $107 << 26;
 $109 = $4;
 $110 = (($109) - ($108))|0;
 $4 = $110;
 $111 = $5;
 $112 = $111 >> 25;
 $16 = $112;
 $113 = $16;
 $114 = $6;
 $115 = (($114) + ($113))|0;
 $6 = $115;
 $116 = $16;
 $117 = $116 << 25;
 $118 = $5;
 $119 = (($118) - ($117))|0;
 $5 = $119;
 $120 = $6;
 $121 = $120 >> 26;
 $17 = $121;
 $122 = $17;
 $123 = $7;
 $124 = (($123) + ($122))|0;
 $7 = $124;
 $125 = $17;
 $126 = $125 << 26;
 $127 = $6;
 $128 = (($127) - ($126))|0;
 $6 = $128;
 $129 = $7;
 $130 = $129 >> 25;
 $18 = $130;
 $131 = $18;
 $132 = $8;
 $133 = (($132) + ($131))|0;
 $8 = $133;
 $134 = $18;
 $135 = $134 << 25;
 $136 = $7;
 $137 = (($136) - ($135))|0;
 $7 = $137;
 $138 = $8;
 $139 = $138 >> 26;
 $19 = $139;
 $140 = $19;
 $141 = $9;
 $142 = (($141) + ($140))|0;
 $9 = $142;
 $143 = $19;
 $144 = $143 << 26;
 $145 = $8;
 $146 = (($145) - ($144))|0;
 $8 = $146;
 $147 = $9;
 $148 = $147 >> 25;
 $20 = $148;
 $149 = $20;
 $150 = $10;
 $151 = (($150) + ($149))|0;
 $10 = $151;
 $152 = $20;
 $153 = $152 << 25;
 $154 = $9;
 $155 = (($154) - ($153))|0;
 $9 = $155;
 $156 = $10;
 $157 = $156 >> 26;
 $21 = $157;
 $158 = $21;
 $159 = $11;
 $160 = (($159) + ($158))|0;
 $11 = $160;
 $161 = $21;
 $162 = $161 << 26;
 $163 = $10;
 $164 = (($163) - ($162))|0;
 $10 = $164;
 $165 = $11;
 $166 = $165 >> 25;
 $22 = $166;
 $167 = $22;
 $168 = $12;
 $169 = (($168) + ($167))|0;
 $12 = $169;
 $170 = $22;
 $171 = $170 << 25;
 $172 = $11;
 $173 = (($172) - ($171))|0;
 $11 = $173;
 $174 = $12;
 $175 = $174 >> 26;
 $23 = $175;
 $176 = $23;
 $177 = $13;
 $178 = (($177) + ($176))|0;
 $13 = $178;
 $179 = $23;
 $180 = $179 << 26;
 $181 = $12;
 $182 = (($181) - ($180))|0;
 $12 = $182;
 $183 = $13;
 $184 = $183 >> 25;
 $24 = $184;
 $185 = $24;
 $186 = $185 << 25;
 $187 = $13;
 $188 = (($187) - ($186))|0;
 $13 = $188;
 $189 = $4;
 $190 = $189 >> 0;
 $191 = $190&255;
 $192 = $2;
 HEAP8[$192>>0] = $191;
 $193 = $4;
 $194 = $193 >> 8;
 $195 = $194&255;
 $196 = $2;
 $197 = ((($196)) + 1|0);
 HEAP8[$197>>0] = $195;
 $198 = $4;
 $199 = $198 >> 16;
 $200 = $199&255;
 $201 = $2;
 $202 = ((($201)) + 2|0);
 HEAP8[$202>>0] = $200;
 $203 = $4;
 $204 = $203 >> 24;
 $205 = $5;
 $206 = $205 << 2;
 $207 = $204 | $206;
 $208 = $207&255;
 $209 = $2;
 $210 = ((($209)) + 3|0);
 HEAP8[$210>>0] = $208;
 $211 = $5;
 $212 = $211 >> 6;
 $213 = $212&255;
 $214 = $2;
 $215 = ((($214)) + 4|0);
 HEAP8[$215>>0] = $213;
 $216 = $5;
 $217 = $216 >> 14;
 $218 = $217&255;
 $219 = $2;
 $220 = ((($219)) + 5|0);
 HEAP8[$220>>0] = $218;
 $221 = $5;
 $222 = $221 >> 22;
 $223 = $6;
 $224 = $223 << 3;
 $225 = $222 | $224;
 $226 = $225&255;
 $227 = $2;
 $228 = ((($227)) + 6|0);
 HEAP8[$228>>0] = $226;
 $229 = $6;
 $230 = $229 >> 5;
 $231 = $230&255;
 $232 = $2;
 $233 = ((($232)) + 7|0);
 HEAP8[$233>>0] = $231;
 $234 = $6;
 $235 = $234 >> 13;
 $236 = $235&255;
 $237 = $2;
 $238 = ((($237)) + 8|0);
 HEAP8[$238>>0] = $236;
 $239 = $6;
 $240 = $239 >> 21;
 $241 = $7;
 $242 = $241 << 5;
 $243 = $240 | $242;
 $244 = $243&255;
 $245 = $2;
 $246 = ((($245)) + 9|0);
 HEAP8[$246>>0] = $244;
 $247 = $7;
 $248 = $247 >> 3;
 $249 = $248&255;
 $250 = $2;
 $251 = ((($250)) + 10|0);
 HEAP8[$251>>0] = $249;
 $252 = $7;
 $253 = $252 >> 11;
 $254 = $253&255;
 $255 = $2;
 $256 = ((($255)) + 11|0);
 HEAP8[$256>>0] = $254;
 $257 = $7;
 $258 = $257 >> 19;
 $259 = $8;
 $260 = $259 << 6;
 $261 = $258 | $260;
 $262 = $261&255;
 $263 = $2;
 $264 = ((($263)) + 12|0);
 HEAP8[$264>>0] = $262;
 $265 = $8;
 $266 = $265 >> 2;
 $267 = $266&255;
 $268 = $2;
 $269 = ((($268)) + 13|0);
 HEAP8[$269>>0] = $267;
 $270 = $8;
 $271 = $270 >> 10;
 $272 = $271&255;
 $273 = $2;
 $274 = ((($273)) + 14|0);
 HEAP8[$274>>0] = $272;
 $275 = $8;
 $276 = $275 >> 18;
 $277 = $276&255;
 $278 = $2;
 $279 = ((($278)) + 15|0);
 HEAP8[$279>>0] = $277;
 $280 = $9;
 $281 = $280 >> 0;
 $282 = $281&255;
 $283 = $2;
 $284 = ((($283)) + 16|0);
 HEAP8[$284>>0] = $282;
 $285 = $9;
 $286 = $285 >> 8;
 $287 = $286&255;
 $288 = $2;
 $289 = ((($288)) + 17|0);
 HEAP8[$289>>0] = $287;
 $290 = $9;
 $291 = $290 >> 16;
 $292 = $291&255;
 $293 = $2;
 $294 = ((($293)) + 18|0);
 HEAP8[$294>>0] = $292;
 $295 = $9;
 $296 = $295 >> 24;
 $297 = $10;
 $298 = $297 << 1;
 $299 = $296 | $298;
 $300 = $299&255;
 $301 = $2;
 $302 = ((($301)) + 19|0);
 HEAP8[$302>>0] = $300;
 $303 = $10;
 $304 = $303 >> 7;
 $305 = $304&255;
 $306 = $2;
 $307 = ((($306)) + 20|0);
 HEAP8[$307>>0] = $305;
 $308 = $10;
 $309 = $308 >> 15;
 $310 = $309&255;
 $311 = $2;
 $312 = ((($311)) + 21|0);
 HEAP8[$312>>0] = $310;
 $313 = $10;
 $314 = $313 >> 23;
 $315 = $11;
 $316 = $315 << 3;
 $317 = $314 | $316;
 $318 = $317&255;
 $319 = $2;
 $320 = ((($319)) + 22|0);
 HEAP8[$320>>0] = $318;
 $321 = $11;
 $322 = $321 >> 5;
 $323 = $322&255;
 $324 = $2;
 $325 = ((($324)) + 23|0);
 HEAP8[$325>>0] = $323;
 $326 = $11;
 $327 = $326 >> 13;
 $328 = $327&255;
 $329 = $2;
 $330 = ((($329)) + 24|0);
 HEAP8[$330>>0] = $328;
 $331 = $11;
 $332 = $331 >> 21;
 $333 = $12;
 $334 = $333 << 4;
 $335 = $332 | $334;
 $336 = $335&255;
 $337 = $2;
 $338 = ((($337)) + 25|0);
 HEAP8[$338>>0] = $336;
 $339 = $12;
 $340 = $339 >> 4;
 $341 = $340&255;
 $342 = $2;
 $343 = ((($342)) + 26|0);
 HEAP8[$343>>0] = $341;
 $344 = $12;
 $345 = $344 >> 12;
 $346 = $345&255;
 $347 = $2;
 $348 = ((($347)) + 27|0);
 HEAP8[$348>>0] = $346;
 $349 = $12;
 $350 = $349 >> 20;
 $351 = $13;
 $352 = $351 << 6;
 $353 = $350 | $352;
 $354 = $353&255;
 $355 = $2;
 $356 = ((($355)) + 28|0);
 HEAP8[$356>>0] = $354;
 $357 = $13;
 $358 = $357 >> 2;
 $359 = $358&255;
 $360 = $2;
 $361 = ((($360)) + 29|0);
 HEAP8[$361>>0] = $359;
 $362 = $13;
 $363 = $362 >> 10;
 $364 = $363&255;
 $365 = $2;
 $366 = ((($365)) + 30|0);
 HEAP8[$366>>0] = $364;
 $367 = $13;
 $368 = $367 >> 18;
 $369 = $368&255;
 $370 = $2;
 $371 = ((($370)) + 31|0);
 HEAP8[$371>>0] = $369;
 STACKTOP = sp;return;
}
function _ge_p3_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 96|0;
 $5 = sp + 48|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 80|0);
 _fe_invert($4,$8);
 $9 = $3;
 _fe_mul($5,$9,$4);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 _fe_mul($6,$11,$4);
 $12 = $2;
 _fe_tobytes($12,$6);
 $13 = (_fe_isnegative($5)|0);
 $14 = $13 << 7;
 $15 = $2;
 $16 = ((($15)) + 31|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 ^ $14;
 $20 = $19&255;
 HEAP8[$16>>0] = $20;
 STACKTOP = sp;return;
}
function _fe_invert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 144|0;
 $5 = sp + 96|0;
 $6 = sp + 48|0;
 $7 = sp;
 $2 = $0;
 $3 = $1;
 $9 = $3;
 _fe_sq($4,$9);
 _fe_sq($5,$4);
 _fe_sq($5,$5);
 $10 = $3;
 _fe_mul($5,$10,$5);
 _fe_mul($4,$4,$5);
 _fe_sq($6,$4);
 _fe_mul($5,$5,$6);
 _fe_sq($6,$5);
 $8 = 0;
 while(1) {
  $11 = $8;
  $12 = ($11|0)<(4);
  if (!($12)) {
   break;
  }
  _fe_sq($6,$6);
  $13 = $8;
  $14 = (($13) + 1)|0;
  $8 = $14;
 }
 _fe_mul($5,$6,$5);
 _fe_sq($6,$5);
 $8 = 0;
 while(1) {
  $15 = $8;
  $16 = ($15|0)<(9);
  if (!($16)) {
   break;
  }
  _fe_sq($6,$6);
  $17 = $8;
  $18 = (($17) + 1)|0;
  $8 = $18;
 }
 _fe_mul($6,$6,$5);
 _fe_sq($7,$6);
 $8 = 0;
 while(1) {
  $19 = $8;
  $20 = ($19|0)<(19);
  if (!($20)) {
   break;
  }
  _fe_sq($7,$7);
  $21 = $8;
  $22 = (($21) + 1)|0;
  $8 = $22;
 }
 _fe_mul($6,$7,$6);
 _fe_sq($6,$6);
 $8 = 0;
 while(1) {
  $23 = $8;
  $24 = ($23|0)<(9);
  if (!($24)) {
   break;
  }
  _fe_sq($6,$6);
  $25 = $8;
  $26 = (($25) + 1)|0;
  $8 = $26;
 }
 _fe_mul($5,$6,$5);
 _fe_sq($6,$5);
 $8 = 0;
 while(1) {
  $27 = $8;
  $28 = ($27|0)<(49);
  if (!($28)) {
   break;
  }
  _fe_sq($6,$6);
  $29 = $8;
  $30 = (($29) + 1)|0;
  $8 = $30;
 }
 _fe_mul($6,$6,$5);
 _fe_sq($7,$6);
 $8 = 0;
 while(1) {
  $31 = $8;
  $32 = ($31|0)<(99);
  if (!($32)) {
   break;
  }
  _fe_sq($7,$7);
  $33 = $8;
  $34 = (($33) + 1)|0;
  $8 = $34;
 }
 _fe_mul($6,$7,$6);
 _fe_sq($6,$6);
 $8 = 0;
 while(1) {
  $35 = $8;
  $36 = ($35|0)<(49);
  if (!($36)) {
   break;
  }
  _fe_sq($6,$6);
  $37 = $8;
  $38 = (($37) + 1)|0;
  $8 = $38;
 }
 _fe_mul($5,$6,$5);
 _fe_sq($5,$5);
 $8 = 0;
 while(1) {
  $39 = $8;
  $40 = ($39|0)<(4);
  if (!($40)) {
   break;
  }
  _fe_sq($5,$5);
  $41 = $8;
  $42 = (($41) + 1)|0;
  $8 = $42;
 }
 $43 = $2;
 _fe_mul($43,$5,$4);
 STACKTOP = sp;return;
}
function _ge_scalarmult_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $4 = sp;
 $6 = sp + 312|0;
 $7 = sp + 192|0;
 $8 = sp + 72|0;
 $2 = $0;
 $3 = $1;
 $9 = 0;
 while(1) {
  $10 = $9;
  $11 = ($10|0)<(32);
  if (!($11)) {
   break;
  }
  $12 = $3;
  $13 = $9;
  $14 = (($12) + ($13)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $16 >> 0;
  $18 = $17 & 15;
  $19 = $18&255;
  $20 = $9;
  $21 = $20<<1;
  $22 = (($21) + 0)|0;
  $23 = (($4) + ($22)|0);
  HEAP8[$23>>0] = $19;
  $24 = $3;
  $25 = $9;
  $26 = (($24) + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $28 >> 4;
  $30 = $29 & 15;
  $31 = $30&255;
  $32 = $9;
  $33 = $32<<1;
  $34 = (($33) + 1)|0;
  $35 = (($4) + ($34)|0);
  HEAP8[$35>>0] = $31;
  $36 = $9;
  $37 = (($36) + 1)|0;
  $9 = $37;
 }
 $5 = 0;
 $9 = 0;
 while(1) {
  $38 = $9;
  $39 = ($38|0)<(63);
  $40 = $5;
  $41 = $40 << 24 >> 24;
  if (!($39)) {
   break;
  }
  $42 = $9;
  $43 = (($4) + ($42)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44 << 24 >> 24;
  $46 = (($45) + ($41))|0;
  $47 = $46&255;
  HEAP8[$43>>0] = $47;
  $48 = $9;
  $49 = (($4) + ($48)|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  $52 = (($51) + 8)|0;
  $53 = $52&255;
  $5 = $53;
  $54 = $5;
  $55 = $54 << 24 >> 24;
  $56 = $55 >> 4;
  $57 = $56&255;
  $5 = $57;
  $58 = $5;
  $59 = $58 << 24 >> 24;
  $60 = $59 << 4;
  $61 = $9;
  $62 = (($4) + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 << 24 >> 24;
  $65 = (($64) - ($60))|0;
  $66 = $65&255;
  HEAP8[$62>>0] = $66;
  $67 = $9;
  $68 = (($67) + 1)|0;
  $9 = $68;
 }
 $69 = ((($4)) + 63|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70 << 24 >> 24;
 $72 = (($71) + ($41))|0;
 $73 = $72&255;
 HEAP8[$69>>0] = $73;
 $74 = $2;
 _ge_p3_0($74);
 $9 = 1;
 while(1) {
  $75 = $9;
  $76 = ($75|0)<(64);
  if (!($76)) {
   break;
  }
  $77 = $9;
  $78 = (($77|0) / 2)&-1;
  $79 = $9;
  $80 = (($4) + ($79)|0);
  $81 = HEAP8[$80>>0]|0;
  _select_84($8,$78,$81);
  $82 = $2;
  _ge_madd($6,$82,$8);
  $83 = $2;
  _ge_p1p1_to_p3($83,$6);
  $84 = $9;
  $85 = (($84) + 2)|0;
  $9 = $85;
 }
 $86 = $2;
 _ge_p3_dbl($6,$86);
 _ge_p1p1_to_p2($7,$6);
 _ge_p2_dbl($6,$7);
 _ge_p1p1_to_p2($7,$6);
 _ge_p2_dbl($6,$7);
 _ge_p1p1_to_p2($7,$6);
 _ge_p2_dbl($6,$7);
 $87 = $2;
 _ge_p1p1_to_p3($87,$6);
 $9 = 0;
 while(1) {
  $88 = $9;
  $89 = ($88|0)<(64);
  if (!($89)) {
   break;
  }
  $90 = $9;
  $91 = (($90|0) / 2)&-1;
  $92 = $9;
  $93 = (($4) + ($92)|0);
  $94 = HEAP8[$93>>0]|0;
  _select_84($8,$91,$94);
  $95 = $2;
  _ge_madd($6,$95,$8);
  $96 = $2;
  _ge_p1p1_to_p3($96,$6);
  $97 = $9;
  $98 = (($97) + 2)|0;
  $9 = $98;
 }
 STACKTOP = sp;return;
}
function _ge_p3_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _fe_0($2);
 $3 = $1;
 $4 = ((($3)) + 40|0);
 _fe_1($4);
 $5 = $1;
 $6 = ((($5)) + 80|0);
 _fe_1($6);
 $7 = $1;
 $8 = ((($7)) + 120|0);
 _fe_0($8);
 STACKTOP = sp;return;
}
function _select_84($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $5;
 $10 = (_negative($9)|0);
 $7 = $10;
 $11 = $5;
 $12 = $11 << 24 >> 24;
 $13 = $7;
 $14 = $13&255;
 $15 = (0 - ($14))|0;
 $16 = $5;
 $17 = $16 << 24 >> 24;
 $18 = $15 & $17;
 $19 = $18 << 1;
 $20 = (($12) - ($19))|0;
 $21 = $20&255;
 $8 = $21;
 $22 = $3;
 _ge_precomp_0($22);
 $23 = $3;
 $24 = $4;
 $25 = (160 + (($24*960)|0)|0);
 $26 = $8;
 $27 = (_equal($26,1)|0);
 _ge_precomp_cmov($23,$25,$27);
 $28 = $3;
 $29 = $4;
 $30 = (160 + (($29*960)|0)|0);
 $31 = ((($30)) + 120|0);
 $32 = $8;
 $33 = (_equal($32,2)|0);
 _ge_precomp_cmov($28,$31,$33);
 $34 = $3;
 $35 = $4;
 $36 = (160 + (($35*960)|0)|0);
 $37 = ((($36)) + 240|0);
 $38 = $8;
 $39 = (_equal($38,3)|0);
 _ge_precomp_cmov($34,$37,$39);
 $40 = $3;
 $41 = $4;
 $42 = (160 + (($41*960)|0)|0);
 $43 = ((($42)) + 360|0);
 $44 = $8;
 $45 = (_equal($44,4)|0);
 _ge_precomp_cmov($40,$43,$45);
 $46 = $3;
 $47 = $4;
 $48 = (160 + (($47*960)|0)|0);
 $49 = ((($48)) + 480|0);
 $50 = $8;
 $51 = (_equal($50,5)|0);
 _ge_precomp_cmov($46,$49,$51);
 $52 = $3;
 $53 = $4;
 $54 = (160 + (($53*960)|0)|0);
 $55 = ((($54)) + 600|0);
 $56 = $8;
 $57 = (_equal($56,6)|0);
 _ge_precomp_cmov($52,$55,$57);
 $58 = $3;
 $59 = $4;
 $60 = (160 + (($59*960)|0)|0);
 $61 = ((($60)) + 720|0);
 $62 = $8;
 $63 = (_equal($62,7)|0);
 _ge_precomp_cmov($58,$61,$63);
 $64 = $3;
 $65 = $4;
 $66 = (160 + (($65*960)|0)|0);
 $67 = ((($66)) + 840|0);
 $68 = $8;
 $69 = (_equal($68,8)|0);
 _ge_precomp_cmov($64,$67,$69);
 $70 = $3;
 $71 = ((($70)) + 40|0);
 _fe_copy($6,$71);
 $72 = ((($6)) + 40|0);
 $73 = $3;
 _fe_copy($72,$73);
 $74 = ((($6)) + 80|0);
 $75 = $3;
 $76 = ((($75)) + 80|0);
 _fe_neg($74,$76);
 $77 = $3;
 $78 = $7;
 _ge_precomp_cmov($77,$6,$78);
 STACKTOP = sp;return;
}
function _negative($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 $4 = $3 << 24 >> 24;
 $5 = ($4|0)<(0);
 $6 = $5 << 31 >> 31;
 $7 = $2;
 $8 = $7;
 HEAP32[$8>>2] = $4;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = $2;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (_bitshift64Lshr(($13|0),($16|0),63)|0);
 $18 = (getTempRet0() | 0);
 $19 = $2;
 $20 = $19;
 HEAP32[$20>>2] = $17;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $18;
 $23 = $2;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $25&255;
 STACKTOP = sp;return ($29|0);
}
function _ge_precomp_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _fe_1($2);
 $3 = $1;
 $4 = ((($3)) + 40|0);
 _fe_1($4);
 $5 = $1;
 $6 = ((($5)) + 80|0);
 _fe_0($6);
 STACKTOP = sp;return;
}
function _equal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $3;
 $5 = $9;
 $10 = $4;
 $11 = $10&255;
 $12 = $5;
 $13 = $12&255;
 $14 = $11 ^ $13;
 $15 = $14&255;
 $6 = $15;
 $16 = $6;
 $17 = $16&255;
 $7 = $17;
 $18 = $7;
 $19 = (($18) - 1)|0;
 $7 = $19;
 $20 = $7;
 $21 = $20 >>> 31;
 $7 = $21;
 $22 = $7;
 $23 = $22&255;
 STACKTOP = sp;return ($23|0);
}
function _ge_precomp_cmov($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = $8&255;
 _fe_cmov($6,$7,$9);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $4;
 $13 = ((($12)) + 40|0);
 $14 = $5;
 $15 = $14&255;
 _fe_cmov($11,$13,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $4;
 $19 = ((($18)) + 80|0);
 $20 = $5;
 $21 = $20&255;
 _fe_cmov($17,$19,$21);
 STACKTOP = sp;return;
}
function _fe_cmov($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $36 = $3;
 $37 = HEAP32[$36>>2]|0;
 $6 = $37;
 $38 = $3;
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $7 = $40;
 $41 = $3;
 $42 = ((($41)) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $8 = $43;
 $44 = $3;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $9 = $46;
 $47 = $3;
 $48 = ((($47)) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $10 = $49;
 $50 = $3;
 $51 = ((($50)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $11 = $52;
 $53 = $3;
 $54 = ((($53)) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $3;
 $57 = ((($56)) + 28|0);
 $58 = HEAP32[$57>>2]|0;
 $13 = $58;
 $59 = $3;
 $60 = ((($59)) + 32|0);
 $61 = HEAP32[$60>>2]|0;
 $14 = $61;
 $62 = $3;
 $63 = ((($62)) + 36|0);
 $64 = HEAP32[$63>>2]|0;
 $15 = $64;
 $65 = $4;
 $66 = HEAP32[$65>>2]|0;
 $16 = $66;
 $67 = $4;
 $68 = ((($67)) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $17 = $69;
 $70 = $4;
 $71 = ((($70)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $18 = $72;
 $73 = $4;
 $74 = ((($73)) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $19 = $75;
 $76 = $4;
 $77 = ((($76)) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $20 = $78;
 $79 = $4;
 $80 = ((($79)) + 20|0);
 $81 = HEAP32[$80>>2]|0;
 $21 = $81;
 $82 = $4;
 $83 = ((($82)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 $22 = $84;
 $85 = $4;
 $86 = ((($85)) + 28|0);
 $87 = HEAP32[$86>>2]|0;
 $23 = $87;
 $88 = $4;
 $89 = ((($88)) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $24 = $90;
 $91 = $4;
 $92 = ((($91)) + 36|0);
 $93 = HEAP32[$92>>2]|0;
 $25 = $93;
 $94 = $6;
 $95 = $16;
 $96 = $94 ^ $95;
 $26 = $96;
 $97 = $7;
 $98 = $17;
 $99 = $97 ^ $98;
 $27 = $99;
 $100 = $8;
 $101 = $18;
 $102 = $100 ^ $101;
 $28 = $102;
 $103 = $9;
 $104 = $19;
 $105 = $103 ^ $104;
 $29 = $105;
 $106 = $10;
 $107 = $20;
 $108 = $106 ^ $107;
 $30 = $108;
 $109 = $11;
 $110 = $21;
 $111 = $109 ^ $110;
 $31 = $111;
 $112 = $12;
 $113 = $22;
 $114 = $112 ^ $113;
 $32 = $114;
 $115 = $13;
 $116 = $23;
 $117 = $115 ^ $116;
 $33 = $117;
 $118 = $14;
 $119 = $24;
 $120 = $118 ^ $119;
 $34 = $120;
 $121 = $15;
 $122 = $25;
 $123 = $121 ^ $122;
 $35 = $123;
 $124 = $5;
 $125 = (($124) - 1)|0;
 $126 = $5;
 $127 = $126 ^ -1;
 $128 = $125 & $127;
 $129 = $5;
 $130 = (($129) - 2)|0;
 $131 = $5;
 $132 = (($131) - 1)|0;
 $133 = $132 ^ -1;
 $134 = $130 & $133;
 $135 = $128 | $134;
 $136 = ($135|0)==(-1);
 if ($136) {
  $137 = $5;
  $138 = (0 - ($137))|0;
  $5 = $138;
  $139 = $5;
  $140 = $26;
  $141 = $140 & $139;
  $26 = $141;
  $142 = $5;
  $143 = $27;
  $144 = $143 & $142;
  $27 = $144;
  $145 = $5;
  $146 = $28;
  $147 = $146 & $145;
  $28 = $147;
  $148 = $5;
  $149 = $29;
  $150 = $149 & $148;
  $29 = $150;
  $151 = $5;
  $152 = $30;
  $153 = $152 & $151;
  $30 = $153;
  $154 = $5;
  $155 = $31;
  $156 = $155 & $154;
  $31 = $156;
  $157 = $5;
  $158 = $32;
  $159 = $158 & $157;
  $32 = $159;
  $160 = $5;
  $161 = $33;
  $162 = $161 & $160;
  $33 = $162;
  $163 = $5;
  $164 = $34;
  $165 = $164 & $163;
  $34 = $165;
  $166 = $5;
  $167 = $35;
  $168 = $167 & $166;
  $35 = $168;
  $169 = $6;
  $170 = $26;
  $171 = $169 ^ $170;
  $172 = $3;
  HEAP32[$172>>2] = $171;
  $173 = $7;
  $174 = $27;
  $175 = $173 ^ $174;
  $176 = $3;
  $177 = ((($176)) + 4|0);
  HEAP32[$177>>2] = $175;
  $178 = $8;
  $179 = $28;
  $180 = $178 ^ $179;
  $181 = $3;
  $182 = ((($181)) + 8|0);
  HEAP32[$182>>2] = $180;
  $183 = $9;
  $184 = $29;
  $185 = $183 ^ $184;
  $186 = $3;
  $187 = ((($186)) + 12|0);
  HEAP32[$187>>2] = $185;
  $188 = $10;
  $189 = $30;
  $190 = $188 ^ $189;
  $191 = $3;
  $192 = ((($191)) + 16|0);
  HEAP32[$192>>2] = $190;
  $193 = $11;
  $194 = $31;
  $195 = $193 ^ $194;
  $196 = $3;
  $197 = ((($196)) + 20|0);
  HEAP32[$197>>2] = $195;
  $198 = $12;
  $199 = $32;
  $200 = $198 ^ $199;
  $201 = $3;
  $202 = ((($201)) + 24|0);
  HEAP32[$202>>2] = $200;
  $203 = $13;
  $204 = $33;
  $205 = $203 ^ $204;
  $206 = $3;
  $207 = ((($206)) + 28|0);
  HEAP32[$207>>2] = $205;
  $208 = $14;
  $209 = $34;
  $210 = $208 ^ $209;
  $211 = $3;
  $212 = ((($211)) + 32|0);
  HEAP32[$212>>2] = $210;
  $213 = $15;
  $214 = $35;
  $215 = $213 ^ $214;
  $216 = $3;
  $217 = ((($216)) + 36|0);
  HEAP32[$217>>2] = $215;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((36600|0),(36661|0),177,(36681|0));
  // unreachable;
 }
}
function _ge_tobytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $4 = sp + 96|0;
 $5 = sp + 48|0;
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ((($7)) + 80|0);
 _fe_invert($4,$8);
 $9 = $3;
 _fe_mul($5,$9,$4);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 _fe_mul($6,$11,$4);
 $12 = $2;
 _fe_tobytes($12,$6);
 $13 = (_fe_isnegative($5)|0);
 $14 = $13 << 7;
 $15 = $2;
 $16 = ((($15)) + 31|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 ^ $14;
 $20 = $19&255;
 HEAP8[$16>>0] = $20;
 STACKTOP = sp;return;
}
function _sc_reduce($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0;
 var $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0;
 var $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0;
 var $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0;
 var $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0;
 var $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0;
 var $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0;
 var $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0;
 var $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0;
 var $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0;
 var $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0;
 var $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0;
 var $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0;
 var $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0;
 var $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0;
 var $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0;
 var $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0;
 var $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0;
 var $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0;
 var $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0;
 var $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0;
 var $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0;
 var $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0;
 var $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0;
 var $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0;
 var $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0;
 var $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0;
 var $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0;
 var $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0;
 var $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0;
 var $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0;
 var $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0;
 var $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0;
 var $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0;
 var $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0;
 var $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0;
 var $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0;
 var $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0;
 var $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0;
 var $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0;
 var $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0;
 var $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0;
 var $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0;
 var $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0;
 var $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0;
 var $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0;
 var $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0;
 var $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0;
 var $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0;
 var $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0;
 var $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0;
 var $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0;
 var $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0;
 var $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0;
 var $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0;
 var $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0;
 var $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0;
 var $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0;
 var $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0;
 var $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0;
 var $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0;
 var $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0;
 var $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0;
 var $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0;
 var $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0;
 var $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0;
 var $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0;
 var $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0;
 var $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0;
 var $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0;
 var $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0;
 var $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0;
 var $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0;
 var $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0;
 var $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0;
 var $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0;
 var $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0;
 var $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0;
 var $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0;
 var $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0;
 var $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0;
 var $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0;
 var $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0;
 var $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0;
 var $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0;
 var $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0;
 var $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0;
 var $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0;
 var $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0;
 var $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0;
 var $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0;
 var $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0;
 var $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0;
 var $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0;
 var $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0;
 var $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0;
 var $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0;
 var $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0;
 var $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0;
 var $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0;
 var $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0;
 var $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0;
 var $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0;
 var $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0;
 var $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0;
 var $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0;
 var $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0;
 var $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0;
 var $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0;
 var $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0;
 var $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0;
 var $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0;
 var $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0;
 var $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0;
 var $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0;
 var $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0;
 var $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0;
 var $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0;
 var $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0;
 var $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0;
 var $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0;
 var $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0;
 var $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0;
 var $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0;
 var $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0;
 var $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0;
 var $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0;
 var $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0;
 var $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0;
 var $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0;
 var $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0;
 var $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0;
 var $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0;
 var $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0;
 var $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0;
 var $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0;
 var $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0;
 var $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0;
 var $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0;
 var $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0;
 var $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0;
 var $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0;
 var $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0;
 var $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0;
 var $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0;
 var $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0;
 var $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0;
 var $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0;
 var $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0;
 var $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0;
 var $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0;
 var $4004 = 0, $4005 = 0, $4006 = 0, $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0;
 var $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0;
 var $4040 = 0, $4041 = 0, $4042 = 0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0;
 var $4059 = 0, $406 = 0, $4060 = 0, $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0;
 var $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0;
 var $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0;
 var $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0;
 var $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0;
 var $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0;
 var $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0;
 var $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0;
 var $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0;
 var $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0;
 var $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0;
 var $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0;
 var $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0;
 var $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0;
 var $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0;
 var $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0;
 var $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0;
 var $4365 = 0, $4366 = 0, $4367 = 0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0;
 var $4383 = 0, $4384 = 0, $4385 = 0, $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0;
 var $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0;
 var $4419 = 0, $442 = 0, $4420 = 0, $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0;
 var $4437 = 0, $4438 = 0, $4439 = 0, $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0;
 var $4455 = 0, $4456 = 0, $4457 = 0, $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0;
 var $4473 = 0, $4474 = 0, $4475 = 0, $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0;
 var $4491 = 0, $4492 = 0, $4493 = 0, $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0;
 var $4509 = 0, $451 = 0, $4510 = 0, $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0, $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0;
 var $4527 = 0, $4528 = 0, $4529 = 0, $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0, $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0;
 var $4545 = 0, $4546 = 0, $4547 = 0, $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0, $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0;
 var $4563 = 0, $4564 = 0, $4565 = 0, $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0, $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0;
 var $4581 = 0, $4582 = 0, $4583 = 0, $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0, $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0;
 var $46 = 0, $460 = 0, $4600 = 0, $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0, $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0;
 var $4617 = 0, $4618 = 0, $4619 = 0, $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0, $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0;
 var $4635 = 0, $4636 = 0, $4637 = 0, $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0, $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0;
 var $4653 = 0, $4654 = 0, $4655 = 0, $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0, $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0;
 var $4671 = 0, $4672 = 0, $4673 = 0, $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0, $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0;
 var $469 = 0, $4690 = 0, $4691 = 0, $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0, $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0;
 var $4707 = 0, $4708 = 0, $4709 = 0, $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0;
 var $4725 = 0, $4726 = 0, $4727 = 0, $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0;
 var $4743 = 0, $4744 = 0, $4745 = 0, $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0;
 var $4761 = 0, $4762 = 0, $4763 = 0, $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $2 = sp + 320|0;
 $3 = sp + 312|0;
 $4 = sp + 304|0;
 $5 = sp + 296|0;
 $6 = sp + 288|0;
 $7 = sp + 280|0;
 $8 = sp + 272|0;
 $9 = sp + 264|0;
 $10 = sp + 256|0;
 $11 = sp + 248|0;
 $12 = sp + 240|0;
 $13 = sp + 232|0;
 $14 = sp + 224|0;
 $15 = sp + 216|0;
 $16 = sp + 208|0;
 $17 = sp + 200|0;
 $18 = sp + 192|0;
 $19 = sp + 184|0;
 $20 = sp + 176|0;
 $21 = sp + 168|0;
 $22 = sp + 160|0;
 $23 = sp + 152|0;
 $24 = sp + 144|0;
 $25 = sp + 136|0;
 $26 = sp + 128|0;
 $27 = sp + 120|0;
 $28 = sp + 112|0;
 $29 = sp + 104|0;
 $30 = sp + 96|0;
 $31 = sp + 88|0;
 $32 = sp + 80|0;
 $33 = sp + 72|0;
 $34 = sp + 64|0;
 $35 = sp + 56|0;
 $36 = sp + 48|0;
 $37 = sp + 40|0;
 $38 = sp + 32|0;
 $39 = sp + 24|0;
 $40 = sp + 16|0;
 $41 = sp + 8|0;
 $42 = sp;
 $1 = $0;
 $43 = $1;
 $44 = (_load_3($43)|0);
 $45 = (getTempRet0() | 0);
 $46 = 2097151 & $44;
 $47 = $2;
 $48 = $47;
 HEAP32[$48>>2] = $46;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = 0;
 $51 = $1;
 $52 = ((($51)) + 2|0);
 $53 = (_load_4($52)|0);
 $54 = (getTempRet0() | 0);
 $55 = (_bitshift64Lshr(($53|0),($54|0),5)|0);
 $56 = (getTempRet0() | 0);
 $57 = 2097151 & $55;
 $58 = $3;
 $59 = $58;
 HEAP32[$59>>2] = $57;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = 0;
 $62 = $1;
 $63 = ((($62)) + 5|0);
 $64 = (_load_3($63)|0);
 $65 = (getTempRet0() | 0);
 $66 = (_bitshift64Lshr(($64|0),($65|0),2)|0);
 $67 = (getTempRet0() | 0);
 $68 = 2097151 & $66;
 $69 = $4;
 $70 = $69;
 HEAP32[$70>>2] = $68;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $73 = $1;
 $74 = ((($73)) + 7|0);
 $75 = (_load_4($74)|0);
 $76 = (getTempRet0() | 0);
 $77 = (_bitshift64Lshr(($75|0),($76|0),7)|0);
 $78 = (getTempRet0() | 0);
 $79 = 2097151 & $77;
 $80 = $5;
 $81 = $80;
 HEAP32[$81>>2] = $79;
 $82 = (($80) + 4)|0;
 $83 = $82;
 HEAP32[$83>>2] = 0;
 $84 = $1;
 $85 = ((($84)) + 10|0);
 $86 = (_load_4($85)|0);
 $87 = (getTempRet0() | 0);
 $88 = (_bitshift64Lshr(($86|0),($87|0),4)|0);
 $89 = (getTempRet0() | 0);
 $90 = 2097151 & $88;
 $91 = $6;
 $92 = $91;
 HEAP32[$92>>2] = $90;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = 0;
 $95 = $1;
 $96 = ((($95)) + 13|0);
 $97 = (_load_3($96)|0);
 $98 = (getTempRet0() | 0);
 $99 = (_bitshift64Lshr(($97|0),($98|0),1)|0);
 $100 = (getTempRet0() | 0);
 $101 = 2097151 & $99;
 $102 = $7;
 $103 = $102;
 HEAP32[$103>>2] = $101;
 $104 = (($102) + 4)|0;
 $105 = $104;
 HEAP32[$105>>2] = 0;
 $106 = $1;
 $107 = ((($106)) + 15|0);
 $108 = (_load_4($107)|0);
 $109 = (getTempRet0() | 0);
 $110 = (_bitshift64Lshr(($108|0),($109|0),6)|0);
 $111 = (getTempRet0() | 0);
 $112 = 2097151 & $110;
 $113 = $8;
 $114 = $113;
 HEAP32[$114>>2] = $112;
 $115 = (($113) + 4)|0;
 $116 = $115;
 HEAP32[$116>>2] = 0;
 $117 = $1;
 $118 = ((($117)) + 18|0);
 $119 = (_load_3($118)|0);
 $120 = (getTempRet0() | 0);
 $121 = (_bitshift64Lshr(($119|0),($120|0),3)|0);
 $122 = (getTempRet0() | 0);
 $123 = 2097151 & $121;
 $124 = $9;
 $125 = $124;
 HEAP32[$125>>2] = $123;
 $126 = (($124) + 4)|0;
 $127 = $126;
 HEAP32[$127>>2] = 0;
 $128 = $1;
 $129 = ((($128)) + 21|0);
 $130 = (_load_3($129)|0);
 $131 = (getTempRet0() | 0);
 $132 = 2097151 & $130;
 $133 = $10;
 $134 = $133;
 HEAP32[$134>>2] = $132;
 $135 = (($133) + 4)|0;
 $136 = $135;
 HEAP32[$136>>2] = 0;
 $137 = $1;
 $138 = ((($137)) + 23|0);
 $139 = (_load_4($138)|0);
 $140 = (getTempRet0() | 0);
 $141 = (_bitshift64Lshr(($139|0),($140|0),5)|0);
 $142 = (getTempRet0() | 0);
 $143 = 2097151 & $141;
 $144 = $11;
 $145 = $144;
 HEAP32[$145>>2] = $143;
 $146 = (($144) + 4)|0;
 $147 = $146;
 HEAP32[$147>>2] = 0;
 $148 = $1;
 $149 = ((($148)) + 26|0);
 $150 = (_load_3($149)|0);
 $151 = (getTempRet0() | 0);
 $152 = (_bitshift64Lshr(($150|0),($151|0),2)|0);
 $153 = (getTempRet0() | 0);
 $154 = 2097151 & $152;
 $155 = $12;
 $156 = $155;
 HEAP32[$156>>2] = $154;
 $157 = (($155) + 4)|0;
 $158 = $157;
 HEAP32[$158>>2] = 0;
 $159 = $1;
 $160 = ((($159)) + 28|0);
 $161 = (_load_4($160)|0);
 $162 = (getTempRet0() | 0);
 $163 = (_bitshift64Lshr(($161|0),($162|0),7)|0);
 $164 = (getTempRet0() | 0);
 $165 = 2097151 & $163;
 $166 = $13;
 $167 = $166;
 HEAP32[$167>>2] = $165;
 $168 = (($166) + 4)|0;
 $169 = $168;
 HEAP32[$169>>2] = 0;
 $170 = $1;
 $171 = ((($170)) + 31|0);
 $172 = (_load_4($171)|0);
 $173 = (getTempRet0() | 0);
 $174 = (_bitshift64Lshr(($172|0),($173|0),4)|0);
 $175 = (getTempRet0() | 0);
 $176 = 2097151 & $174;
 $177 = $14;
 $178 = $177;
 HEAP32[$178>>2] = $176;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = 0;
 $181 = $1;
 $182 = ((($181)) + 34|0);
 $183 = (_load_3($182)|0);
 $184 = (getTempRet0() | 0);
 $185 = (_bitshift64Lshr(($183|0),($184|0),1)|0);
 $186 = (getTempRet0() | 0);
 $187 = 2097151 & $185;
 $188 = $15;
 $189 = $188;
 HEAP32[$189>>2] = $187;
 $190 = (($188) + 4)|0;
 $191 = $190;
 HEAP32[$191>>2] = 0;
 $192 = $1;
 $193 = ((($192)) + 36|0);
 $194 = (_load_4($193)|0);
 $195 = (getTempRet0() | 0);
 $196 = (_bitshift64Lshr(($194|0),($195|0),6)|0);
 $197 = (getTempRet0() | 0);
 $198 = 2097151 & $196;
 $199 = $16;
 $200 = $199;
 HEAP32[$200>>2] = $198;
 $201 = (($199) + 4)|0;
 $202 = $201;
 HEAP32[$202>>2] = 0;
 $203 = $1;
 $204 = ((($203)) + 39|0);
 $205 = (_load_3($204)|0);
 $206 = (getTempRet0() | 0);
 $207 = (_bitshift64Lshr(($205|0),($206|0),3)|0);
 $208 = (getTempRet0() | 0);
 $209 = 2097151 & $207;
 $210 = $17;
 $211 = $210;
 HEAP32[$211>>2] = $209;
 $212 = (($210) + 4)|0;
 $213 = $212;
 HEAP32[$213>>2] = 0;
 $214 = $1;
 $215 = ((($214)) + 42|0);
 $216 = (_load_3($215)|0);
 $217 = (getTempRet0() | 0);
 $218 = 2097151 & $216;
 $219 = $18;
 $220 = $219;
 HEAP32[$220>>2] = $218;
 $221 = (($219) + 4)|0;
 $222 = $221;
 HEAP32[$222>>2] = 0;
 $223 = $1;
 $224 = ((($223)) + 44|0);
 $225 = (_load_4($224)|0);
 $226 = (getTempRet0() | 0);
 $227 = (_bitshift64Lshr(($225|0),($226|0),5)|0);
 $228 = (getTempRet0() | 0);
 $229 = 2097151 & $227;
 $230 = $19;
 $231 = $230;
 HEAP32[$231>>2] = $229;
 $232 = (($230) + 4)|0;
 $233 = $232;
 HEAP32[$233>>2] = 0;
 $234 = $1;
 $235 = ((($234)) + 47|0);
 $236 = (_load_3($235)|0);
 $237 = (getTempRet0() | 0);
 $238 = (_bitshift64Lshr(($236|0),($237|0),2)|0);
 $239 = (getTempRet0() | 0);
 $240 = 2097151 & $238;
 $241 = $20;
 $242 = $241;
 HEAP32[$242>>2] = $240;
 $243 = (($241) + 4)|0;
 $244 = $243;
 HEAP32[$244>>2] = 0;
 $245 = $1;
 $246 = ((($245)) + 49|0);
 $247 = (_load_4($246)|0);
 $248 = (getTempRet0() | 0);
 $249 = (_bitshift64Lshr(($247|0),($248|0),7)|0);
 $250 = (getTempRet0() | 0);
 $251 = 2097151 & $249;
 $252 = $21;
 $253 = $252;
 HEAP32[$253>>2] = $251;
 $254 = (($252) + 4)|0;
 $255 = $254;
 HEAP32[$255>>2] = 0;
 $256 = $1;
 $257 = ((($256)) + 52|0);
 $258 = (_load_4($257)|0);
 $259 = (getTempRet0() | 0);
 $260 = (_bitshift64Lshr(($258|0),($259|0),4)|0);
 $261 = (getTempRet0() | 0);
 $262 = 2097151 & $260;
 $263 = $22;
 $264 = $263;
 HEAP32[$264>>2] = $262;
 $265 = (($263) + 4)|0;
 $266 = $265;
 HEAP32[$266>>2] = 0;
 $267 = $1;
 $268 = ((($267)) + 55|0);
 $269 = (_load_3($268)|0);
 $270 = (getTempRet0() | 0);
 $271 = (_bitshift64Lshr(($269|0),($270|0),1)|0);
 $272 = (getTempRet0() | 0);
 $273 = 2097151 & $271;
 $274 = $23;
 $275 = $274;
 HEAP32[$275>>2] = $273;
 $276 = (($274) + 4)|0;
 $277 = $276;
 HEAP32[$277>>2] = 0;
 $278 = $1;
 $279 = ((($278)) + 57|0);
 $280 = (_load_4($279)|0);
 $281 = (getTempRet0() | 0);
 $282 = (_bitshift64Lshr(($280|0),($281|0),6)|0);
 $283 = (getTempRet0() | 0);
 $284 = 2097151 & $282;
 $285 = $24;
 $286 = $285;
 HEAP32[$286>>2] = $284;
 $287 = (($285) + 4)|0;
 $288 = $287;
 HEAP32[$288>>2] = 0;
 $289 = $1;
 $290 = ((($289)) + 60|0);
 $291 = (_load_4($290)|0);
 $292 = (getTempRet0() | 0);
 $293 = (_bitshift64Lshr(($291|0),($292|0),3)|0);
 $294 = (getTempRet0() | 0);
 $295 = $25;
 $296 = $295;
 HEAP32[$296>>2] = $293;
 $297 = (($295) + 4)|0;
 $298 = $297;
 HEAP32[$298>>2] = $294;
 $299 = $25;
 $300 = $299;
 $301 = HEAP32[$300>>2]|0;
 $302 = (($299) + 4)|0;
 $303 = $302;
 $304 = HEAP32[$303>>2]|0;
 $305 = (___muldi3(($301|0),($304|0),666643,0)|0);
 $306 = (getTempRet0() | 0);
 $307 = $13;
 $308 = $307;
 $309 = HEAP32[$308>>2]|0;
 $310 = (($307) + 4)|0;
 $311 = $310;
 $312 = HEAP32[$311>>2]|0;
 $313 = (_i64Add(($309|0),($312|0),($305|0),($306|0))|0);
 $314 = (getTempRet0() | 0);
 $315 = $13;
 $316 = $315;
 HEAP32[$316>>2] = $313;
 $317 = (($315) + 4)|0;
 $318 = $317;
 HEAP32[$318>>2] = $314;
 $319 = $25;
 $320 = $319;
 $321 = HEAP32[$320>>2]|0;
 $322 = (($319) + 4)|0;
 $323 = $322;
 $324 = HEAP32[$323>>2]|0;
 $325 = (___muldi3(($321|0),($324|0),470296,0)|0);
 $326 = (getTempRet0() | 0);
 $327 = $14;
 $328 = $327;
 $329 = HEAP32[$328>>2]|0;
 $330 = (($327) + 4)|0;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = (_i64Add(($329|0),($332|0),($325|0),($326|0))|0);
 $334 = (getTempRet0() | 0);
 $335 = $14;
 $336 = $335;
 HEAP32[$336>>2] = $333;
 $337 = (($335) + 4)|0;
 $338 = $337;
 HEAP32[$338>>2] = $334;
 $339 = $25;
 $340 = $339;
 $341 = HEAP32[$340>>2]|0;
 $342 = (($339) + 4)|0;
 $343 = $342;
 $344 = HEAP32[$343>>2]|0;
 $345 = (___muldi3(($341|0),($344|0),654183,0)|0);
 $346 = (getTempRet0() | 0);
 $347 = $15;
 $348 = $347;
 $349 = HEAP32[$348>>2]|0;
 $350 = (($347) + 4)|0;
 $351 = $350;
 $352 = HEAP32[$351>>2]|0;
 $353 = (_i64Add(($349|0),($352|0),($345|0),($346|0))|0);
 $354 = (getTempRet0() | 0);
 $355 = $15;
 $356 = $355;
 HEAP32[$356>>2] = $353;
 $357 = (($355) + 4)|0;
 $358 = $357;
 HEAP32[$358>>2] = $354;
 $359 = $25;
 $360 = $359;
 $361 = HEAP32[$360>>2]|0;
 $362 = (($359) + 4)|0;
 $363 = $362;
 $364 = HEAP32[$363>>2]|0;
 $365 = (___muldi3(($361|0),($364|0),997805,0)|0);
 $366 = (getTempRet0() | 0);
 $367 = $16;
 $368 = $367;
 $369 = HEAP32[$368>>2]|0;
 $370 = (($367) + 4)|0;
 $371 = $370;
 $372 = HEAP32[$371>>2]|0;
 $373 = (_i64Subtract(($369|0),($372|0),($365|0),($366|0))|0);
 $374 = (getTempRet0() | 0);
 $375 = $16;
 $376 = $375;
 HEAP32[$376>>2] = $373;
 $377 = (($375) + 4)|0;
 $378 = $377;
 HEAP32[$378>>2] = $374;
 $379 = $25;
 $380 = $379;
 $381 = HEAP32[$380>>2]|0;
 $382 = (($379) + 4)|0;
 $383 = $382;
 $384 = HEAP32[$383>>2]|0;
 $385 = (___muldi3(($381|0),($384|0),136657,0)|0);
 $386 = (getTempRet0() | 0);
 $387 = $17;
 $388 = $387;
 $389 = HEAP32[$388>>2]|0;
 $390 = (($387) + 4)|0;
 $391 = $390;
 $392 = HEAP32[$391>>2]|0;
 $393 = (_i64Add(($389|0),($392|0),($385|0),($386|0))|0);
 $394 = (getTempRet0() | 0);
 $395 = $17;
 $396 = $395;
 HEAP32[$396>>2] = $393;
 $397 = (($395) + 4)|0;
 $398 = $397;
 HEAP32[$398>>2] = $394;
 $399 = $25;
 $400 = $399;
 $401 = HEAP32[$400>>2]|0;
 $402 = (($399) + 4)|0;
 $403 = $402;
 $404 = HEAP32[$403>>2]|0;
 $405 = (___muldi3(($401|0),($404|0),683901,0)|0);
 $406 = (getTempRet0() | 0);
 $407 = $18;
 $408 = $407;
 $409 = HEAP32[$408>>2]|0;
 $410 = (($407) + 4)|0;
 $411 = $410;
 $412 = HEAP32[$411>>2]|0;
 $413 = (_i64Subtract(($409|0),($412|0),($405|0),($406|0))|0);
 $414 = (getTempRet0() | 0);
 $415 = $18;
 $416 = $415;
 HEAP32[$416>>2] = $413;
 $417 = (($415) + 4)|0;
 $418 = $417;
 HEAP32[$418>>2] = $414;
 $419 = $24;
 $420 = $419;
 $421 = HEAP32[$420>>2]|0;
 $422 = (($419) + 4)|0;
 $423 = $422;
 $424 = HEAP32[$423>>2]|0;
 $425 = (___muldi3(($421|0),($424|0),666643,0)|0);
 $426 = (getTempRet0() | 0);
 $427 = $12;
 $428 = $427;
 $429 = HEAP32[$428>>2]|0;
 $430 = (($427) + 4)|0;
 $431 = $430;
 $432 = HEAP32[$431>>2]|0;
 $433 = (_i64Add(($429|0),($432|0),($425|0),($426|0))|0);
 $434 = (getTempRet0() | 0);
 $435 = $12;
 $436 = $435;
 HEAP32[$436>>2] = $433;
 $437 = (($435) + 4)|0;
 $438 = $437;
 HEAP32[$438>>2] = $434;
 $439 = $24;
 $440 = $439;
 $441 = HEAP32[$440>>2]|0;
 $442 = (($439) + 4)|0;
 $443 = $442;
 $444 = HEAP32[$443>>2]|0;
 $445 = (___muldi3(($441|0),($444|0),470296,0)|0);
 $446 = (getTempRet0() | 0);
 $447 = $13;
 $448 = $447;
 $449 = HEAP32[$448>>2]|0;
 $450 = (($447) + 4)|0;
 $451 = $450;
 $452 = HEAP32[$451>>2]|0;
 $453 = (_i64Add(($449|0),($452|0),($445|0),($446|0))|0);
 $454 = (getTempRet0() | 0);
 $455 = $13;
 $456 = $455;
 HEAP32[$456>>2] = $453;
 $457 = (($455) + 4)|0;
 $458 = $457;
 HEAP32[$458>>2] = $454;
 $459 = $24;
 $460 = $459;
 $461 = HEAP32[$460>>2]|0;
 $462 = (($459) + 4)|0;
 $463 = $462;
 $464 = HEAP32[$463>>2]|0;
 $465 = (___muldi3(($461|0),($464|0),654183,0)|0);
 $466 = (getTempRet0() | 0);
 $467 = $14;
 $468 = $467;
 $469 = HEAP32[$468>>2]|0;
 $470 = (($467) + 4)|0;
 $471 = $470;
 $472 = HEAP32[$471>>2]|0;
 $473 = (_i64Add(($469|0),($472|0),($465|0),($466|0))|0);
 $474 = (getTempRet0() | 0);
 $475 = $14;
 $476 = $475;
 HEAP32[$476>>2] = $473;
 $477 = (($475) + 4)|0;
 $478 = $477;
 HEAP32[$478>>2] = $474;
 $479 = $24;
 $480 = $479;
 $481 = HEAP32[$480>>2]|0;
 $482 = (($479) + 4)|0;
 $483 = $482;
 $484 = HEAP32[$483>>2]|0;
 $485 = (___muldi3(($481|0),($484|0),997805,0)|0);
 $486 = (getTempRet0() | 0);
 $487 = $15;
 $488 = $487;
 $489 = HEAP32[$488>>2]|0;
 $490 = (($487) + 4)|0;
 $491 = $490;
 $492 = HEAP32[$491>>2]|0;
 $493 = (_i64Subtract(($489|0),($492|0),($485|0),($486|0))|0);
 $494 = (getTempRet0() | 0);
 $495 = $15;
 $496 = $495;
 HEAP32[$496>>2] = $493;
 $497 = (($495) + 4)|0;
 $498 = $497;
 HEAP32[$498>>2] = $494;
 $499 = $24;
 $500 = $499;
 $501 = HEAP32[$500>>2]|0;
 $502 = (($499) + 4)|0;
 $503 = $502;
 $504 = HEAP32[$503>>2]|0;
 $505 = (___muldi3(($501|0),($504|0),136657,0)|0);
 $506 = (getTempRet0() | 0);
 $507 = $16;
 $508 = $507;
 $509 = HEAP32[$508>>2]|0;
 $510 = (($507) + 4)|0;
 $511 = $510;
 $512 = HEAP32[$511>>2]|0;
 $513 = (_i64Add(($509|0),($512|0),($505|0),($506|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = $16;
 $516 = $515;
 HEAP32[$516>>2] = $513;
 $517 = (($515) + 4)|0;
 $518 = $517;
 HEAP32[$518>>2] = $514;
 $519 = $24;
 $520 = $519;
 $521 = HEAP32[$520>>2]|0;
 $522 = (($519) + 4)|0;
 $523 = $522;
 $524 = HEAP32[$523>>2]|0;
 $525 = (___muldi3(($521|0),($524|0),683901,0)|0);
 $526 = (getTempRet0() | 0);
 $527 = $17;
 $528 = $527;
 $529 = HEAP32[$528>>2]|0;
 $530 = (($527) + 4)|0;
 $531 = $530;
 $532 = HEAP32[$531>>2]|0;
 $533 = (_i64Subtract(($529|0),($532|0),($525|0),($526|0))|0);
 $534 = (getTempRet0() | 0);
 $535 = $17;
 $536 = $535;
 HEAP32[$536>>2] = $533;
 $537 = (($535) + 4)|0;
 $538 = $537;
 HEAP32[$538>>2] = $534;
 $539 = $23;
 $540 = $539;
 $541 = HEAP32[$540>>2]|0;
 $542 = (($539) + 4)|0;
 $543 = $542;
 $544 = HEAP32[$543>>2]|0;
 $545 = (___muldi3(($541|0),($544|0),666643,0)|0);
 $546 = (getTempRet0() | 0);
 $547 = $11;
 $548 = $547;
 $549 = HEAP32[$548>>2]|0;
 $550 = (($547) + 4)|0;
 $551 = $550;
 $552 = HEAP32[$551>>2]|0;
 $553 = (_i64Add(($549|0),($552|0),($545|0),($546|0))|0);
 $554 = (getTempRet0() | 0);
 $555 = $11;
 $556 = $555;
 HEAP32[$556>>2] = $553;
 $557 = (($555) + 4)|0;
 $558 = $557;
 HEAP32[$558>>2] = $554;
 $559 = $23;
 $560 = $559;
 $561 = HEAP32[$560>>2]|0;
 $562 = (($559) + 4)|0;
 $563 = $562;
 $564 = HEAP32[$563>>2]|0;
 $565 = (___muldi3(($561|0),($564|0),470296,0)|0);
 $566 = (getTempRet0() | 0);
 $567 = $12;
 $568 = $567;
 $569 = HEAP32[$568>>2]|0;
 $570 = (($567) + 4)|0;
 $571 = $570;
 $572 = HEAP32[$571>>2]|0;
 $573 = (_i64Add(($569|0),($572|0),($565|0),($566|0))|0);
 $574 = (getTempRet0() | 0);
 $575 = $12;
 $576 = $575;
 HEAP32[$576>>2] = $573;
 $577 = (($575) + 4)|0;
 $578 = $577;
 HEAP32[$578>>2] = $574;
 $579 = $23;
 $580 = $579;
 $581 = HEAP32[$580>>2]|0;
 $582 = (($579) + 4)|0;
 $583 = $582;
 $584 = HEAP32[$583>>2]|0;
 $585 = (___muldi3(($581|0),($584|0),654183,0)|0);
 $586 = (getTempRet0() | 0);
 $587 = $13;
 $588 = $587;
 $589 = HEAP32[$588>>2]|0;
 $590 = (($587) + 4)|0;
 $591 = $590;
 $592 = HEAP32[$591>>2]|0;
 $593 = (_i64Add(($589|0),($592|0),($585|0),($586|0))|0);
 $594 = (getTempRet0() | 0);
 $595 = $13;
 $596 = $595;
 HEAP32[$596>>2] = $593;
 $597 = (($595) + 4)|0;
 $598 = $597;
 HEAP32[$598>>2] = $594;
 $599 = $23;
 $600 = $599;
 $601 = HEAP32[$600>>2]|0;
 $602 = (($599) + 4)|0;
 $603 = $602;
 $604 = HEAP32[$603>>2]|0;
 $605 = (___muldi3(($601|0),($604|0),997805,0)|0);
 $606 = (getTempRet0() | 0);
 $607 = $14;
 $608 = $607;
 $609 = HEAP32[$608>>2]|0;
 $610 = (($607) + 4)|0;
 $611 = $610;
 $612 = HEAP32[$611>>2]|0;
 $613 = (_i64Subtract(($609|0),($612|0),($605|0),($606|0))|0);
 $614 = (getTempRet0() | 0);
 $615 = $14;
 $616 = $615;
 HEAP32[$616>>2] = $613;
 $617 = (($615) + 4)|0;
 $618 = $617;
 HEAP32[$618>>2] = $614;
 $619 = $23;
 $620 = $619;
 $621 = HEAP32[$620>>2]|0;
 $622 = (($619) + 4)|0;
 $623 = $622;
 $624 = HEAP32[$623>>2]|0;
 $625 = (___muldi3(($621|0),($624|0),136657,0)|0);
 $626 = (getTempRet0() | 0);
 $627 = $15;
 $628 = $627;
 $629 = HEAP32[$628>>2]|0;
 $630 = (($627) + 4)|0;
 $631 = $630;
 $632 = HEAP32[$631>>2]|0;
 $633 = (_i64Add(($629|0),($632|0),($625|0),($626|0))|0);
 $634 = (getTempRet0() | 0);
 $635 = $15;
 $636 = $635;
 HEAP32[$636>>2] = $633;
 $637 = (($635) + 4)|0;
 $638 = $637;
 HEAP32[$638>>2] = $634;
 $639 = $23;
 $640 = $639;
 $641 = HEAP32[$640>>2]|0;
 $642 = (($639) + 4)|0;
 $643 = $642;
 $644 = HEAP32[$643>>2]|0;
 $645 = (___muldi3(($641|0),($644|0),683901,0)|0);
 $646 = (getTempRet0() | 0);
 $647 = $16;
 $648 = $647;
 $649 = HEAP32[$648>>2]|0;
 $650 = (($647) + 4)|0;
 $651 = $650;
 $652 = HEAP32[$651>>2]|0;
 $653 = (_i64Subtract(($649|0),($652|0),($645|0),($646|0))|0);
 $654 = (getTempRet0() | 0);
 $655 = $16;
 $656 = $655;
 HEAP32[$656>>2] = $653;
 $657 = (($655) + 4)|0;
 $658 = $657;
 HEAP32[$658>>2] = $654;
 $659 = $22;
 $660 = $659;
 $661 = HEAP32[$660>>2]|0;
 $662 = (($659) + 4)|0;
 $663 = $662;
 $664 = HEAP32[$663>>2]|0;
 $665 = (___muldi3(($661|0),($664|0),666643,0)|0);
 $666 = (getTempRet0() | 0);
 $667 = $10;
 $668 = $667;
 $669 = HEAP32[$668>>2]|0;
 $670 = (($667) + 4)|0;
 $671 = $670;
 $672 = HEAP32[$671>>2]|0;
 $673 = (_i64Add(($669|0),($672|0),($665|0),($666|0))|0);
 $674 = (getTempRet0() | 0);
 $675 = $10;
 $676 = $675;
 HEAP32[$676>>2] = $673;
 $677 = (($675) + 4)|0;
 $678 = $677;
 HEAP32[$678>>2] = $674;
 $679 = $22;
 $680 = $679;
 $681 = HEAP32[$680>>2]|0;
 $682 = (($679) + 4)|0;
 $683 = $682;
 $684 = HEAP32[$683>>2]|0;
 $685 = (___muldi3(($681|0),($684|0),470296,0)|0);
 $686 = (getTempRet0() | 0);
 $687 = $11;
 $688 = $687;
 $689 = HEAP32[$688>>2]|0;
 $690 = (($687) + 4)|0;
 $691 = $690;
 $692 = HEAP32[$691>>2]|0;
 $693 = (_i64Add(($689|0),($692|0),($685|0),($686|0))|0);
 $694 = (getTempRet0() | 0);
 $695 = $11;
 $696 = $695;
 HEAP32[$696>>2] = $693;
 $697 = (($695) + 4)|0;
 $698 = $697;
 HEAP32[$698>>2] = $694;
 $699 = $22;
 $700 = $699;
 $701 = HEAP32[$700>>2]|0;
 $702 = (($699) + 4)|0;
 $703 = $702;
 $704 = HEAP32[$703>>2]|0;
 $705 = (___muldi3(($701|0),($704|0),654183,0)|0);
 $706 = (getTempRet0() | 0);
 $707 = $12;
 $708 = $707;
 $709 = HEAP32[$708>>2]|0;
 $710 = (($707) + 4)|0;
 $711 = $710;
 $712 = HEAP32[$711>>2]|0;
 $713 = (_i64Add(($709|0),($712|0),($705|0),($706|0))|0);
 $714 = (getTempRet0() | 0);
 $715 = $12;
 $716 = $715;
 HEAP32[$716>>2] = $713;
 $717 = (($715) + 4)|0;
 $718 = $717;
 HEAP32[$718>>2] = $714;
 $719 = $22;
 $720 = $719;
 $721 = HEAP32[$720>>2]|0;
 $722 = (($719) + 4)|0;
 $723 = $722;
 $724 = HEAP32[$723>>2]|0;
 $725 = (___muldi3(($721|0),($724|0),997805,0)|0);
 $726 = (getTempRet0() | 0);
 $727 = $13;
 $728 = $727;
 $729 = HEAP32[$728>>2]|0;
 $730 = (($727) + 4)|0;
 $731 = $730;
 $732 = HEAP32[$731>>2]|0;
 $733 = (_i64Subtract(($729|0),($732|0),($725|0),($726|0))|0);
 $734 = (getTempRet0() | 0);
 $735 = $13;
 $736 = $735;
 HEAP32[$736>>2] = $733;
 $737 = (($735) + 4)|0;
 $738 = $737;
 HEAP32[$738>>2] = $734;
 $739 = $22;
 $740 = $739;
 $741 = HEAP32[$740>>2]|0;
 $742 = (($739) + 4)|0;
 $743 = $742;
 $744 = HEAP32[$743>>2]|0;
 $745 = (___muldi3(($741|0),($744|0),136657,0)|0);
 $746 = (getTempRet0() | 0);
 $747 = $14;
 $748 = $747;
 $749 = HEAP32[$748>>2]|0;
 $750 = (($747) + 4)|0;
 $751 = $750;
 $752 = HEAP32[$751>>2]|0;
 $753 = (_i64Add(($749|0),($752|0),($745|0),($746|0))|0);
 $754 = (getTempRet0() | 0);
 $755 = $14;
 $756 = $755;
 HEAP32[$756>>2] = $753;
 $757 = (($755) + 4)|0;
 $758 = $757;
 HEAP32[$758>>2] = $754;
 $759 = $22;
 $760 = $759;
 $761 = HEAP32[$760>>2]|0;
 $762 = (($759) + 4)|0;
 $763 = $762;
 $764 = HEAP32[$763>>2]|0;
 $765 = (___muldi3(($761|0),($764|0),683901,0)|0);
 $766 = (getTempRet0() | 0);
 $767 = $15;
 $768 = $767;
 $769 = HEAP32[$768>>2]|0;
 $770 = (($767) + 4)|0;
 $771 = $770;
 $772 = HEAP32[$771>>2]|0;
 $773 = (_i64Subtract(($769|0),($772|0),($765|0),($766|0))|0);
 $774 = (getTempRet0() | 0);
 $775 = $15;
 $776 = $775;
 HEAP32[$776>>2] = $773;
 $777 = (($775) + 4)|0;
 $778 = $777;
 HEAP32[$778>>2] = $774;
 $779 = $21;
 $780 = $779;
 $781 = HEAP32[$780>>2]|0;
 $782 = (($779) + 4)|0;
 $783 = $782;
 $784 = HEAP32[$783>>2]|0;
 $785 = (___muldi3(($781|0),($784|0),666643,0)|0);
 $786 = (getTempRet0() | 0);
 $787 = $9;
 $788 = $787;
 $789 = HEAP32[$788>>2]|0;
 $790 = (($787) + 4)|0;
 $791 = $790;
 $792 = HEAP32[$791>>2]|0;
 $793 = (_i64Add(($789|0),($792|0),($785|0),($786|0))|0);
 $794 = (getTempRet0() | 0);
 $795 = $9;
 $796 = $795;
 HEAP32[$796>>2] = $793;
 $797 = (($795) + 4)|0;
 $798 = $797;
 HEAP32[$798>>2] = $794;
 $799 = $21;
 $800 = $799;
 $801 = HEAP32[$800>>2]|0;
 $802 = (($799) + 4)|0;
 $803 = $802;
 $804 = HEAP32[$803>>2]|0;
 $805 = (___muldi3(($801|0),($804|0),470296,0)|0);
 $806 = (getTempRet0() | 0);
 $807 = $10;
 $808 = $807;
 $809 = HEAP32[$808>>2]|0;
 $810 = (($807) + 4)|0;
 $811 = $810;
 $812 = HEAP32[$811>>2]|0;
 $813 = (_i64Add(($809|0),($812|0),($805|0),($806|0))|0);
 $814 = (getTempRet0() | 0);
 $815 = $10;
 $816 = $815;
 HEAP32[$816>>2] = $813;
 $817 = (($815) + 4)|0;
 $818 = $817;
 HEAP32[$818>>2] = $814;
 $819 = $21;
 $820 = $819;
 $821 = HEAP32[$820>>2]|0;
 $822 = (($819) + 4)|0;
 $823 = $822;
 $824 = HEAP32[$823>>2]|0;
 $825 = (___muldi3(($821|0),($824|0),654183,0)|0);
 $826 = (getTempRet0() | 0);
 $827 = $11;
 $828 = $827;
 $829 = HEAP32[$828>>2]|0;
 $830 = (($827) + 4)|0;
 $831 = $830;
 $832 = HEAP32[$831>>2]|0;
 $833 = (_i64Add(($829|0),($832|0),($825|0),($826|0))|0);
 $834 = (getTempRet0() | 0);
 $835 = $11;
 $836 = $835;
 HEAP32[$836>>2] = $833;
 $837 = (($835) + 4)|0;
 $838 = $837;
 HEAP32[$838>>2] = $834;
 $839 = $21;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = (___muldi3(($841|0),($844|0),997805,0)|0);
 $846 = (getTempRet0() | 0);
 $847 = $12;
 $848 = $847;
 $849 = HEAP32[$848>>2]|0;
 $850 = (($847) + 4)|0;
 $851 = $850;
 $852 = HEAP32[$851>>2]|0;
 $853 = (_i64Subtract(($849|0),($852|0),($845|0),($846|0))|0);
 $854 = (getTempRet0() | 0);
 $855 = $12;
 $856 = $855;
 HEAP32[$856>>2] = $853;
 $857 = (($855) + 4)|0;
 $858 = $857;
 HEAP32[$858>>2] = $854;
 $859 = $21;
 $860 = $859;
 $861 = HEAP32[$860>>2]|0;
 $862 = (($859) + 4)|0;
 $863 = $862;
 $864 = HEAP32[$863>>2]|0;
 $865 = (___muldi3(($861|0),($864|0),136657,0)|0);
 $866 = (getTempRet0() | 0);
 $867 = $13;
 $868 = $867;
 $869 = HEAP32[$868>>2]|0;
 $870 = (($867) + 4)|0;
 $871 = $870;
 $872 = HEAP32[$871>>2]|0;
 $873 = (_i64Add(($869|0),($872|0),($865|0),($866|0))|0);
 $874 = (getTempRet0() | 0);
 $875 = $13;
 $876 = $875;
 HEAP32[$876>>2] = $873;
 $877 = (($875) + 4)|0;
 $878 = $877;
 HEAP32[$878>>2] = $874;
 $879 = $21;
 $880 = $879;
 $881 = HEAP32[$880>>2]|0;
 $882 = (($879) + 4)|0;
 $883 = $882;
 $884 = HEAP32[$883>>2]|0;
 $885 = (___muldi3(($881|0),($884|0),683901,0)|0);
 $886 = (getTempRet0() | 0);
 $887 = $14;
 $888 = $887;
 $889 = HEAP32[$888>>2]|0;
 $890 = (($887) + 4)|0;
 $891 = $890;
 $892 = HEAP32[$891>>2]|0;
 $893 = (_i64Subtract(($889|0),($892|0),($885|0),($886|0))|0);
 $894 = (getTempRet0() | 0);
 $895 = $14;
 $896 = $895;
 HEAP32[$896>>2] = $893;
 $897 = (($895) + 4)|0;
 $898 = $897;
 HEAP32[$898>>2] = $894;
 $899 = $20;
 $900 = $899;
 $901 = HEAP32[$900>>2]|0;
 $902 = (($899) + 4)|0;
 $903 = $902;
 $904 = HEAP32[$903>>2]|0;
 $905 = (___muldi3(($901|0),($904|0),666643,0)|0);
 $906 = (getTempRet0() | 0);
 $907 = $8;
 $908 = $907;
 $909 = HEAP32[$908>>2]|0;
 $910 = (($907) + 4)|0;
 $911 = $910;
 $912 = HEAP32[$911>>2]|0;
 $913 = (_i64Add(($909|0),($912|0),($905|0),($906|0))|0);
 $914 = (getTempRet0() | 0);
 $915 = $8;
 $916 = $915;
 HEAP32[$916>>2] = $913;
 $917 = (($915) + 4)|0;
 $918 = $917;
 HEAP32[$918>>2] = $914;
 $919 = $20;
 $920 = $919;
 $921 = HEAP32[$920>>2]|0;
 $922 = (($919) + 4)|0;
 $923 = $922;
 $924 = HEAP32[$923>>2]|0;
 $925 = (___muldi3(($921|0),($924|0),470296,0)|0);
 $926 = (getTempRet0() | 0);
 $927 = $9;
 $928 = $927;
 $929 = HEAP32[$928>>2]|0;
 $930 = (($927) + 4)|0;
 $931 = $930;
 $932 = HEAP32[$931>>2]|0;
 $933 = (_i64Add(($929|0),($932|0),($925|0),($926|0))|0);
 $934 = (getTempRet0() | 0);
 $935 = $9;
 $936 = $935;
 HEAP32[$936>>2] = $933;
 $937 = (($935) + 4)|0;
 $938 = $937;
 HEAP32[$938>>2] = $934;
 $939 = $20;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (___muldi3(($941|0),($944|0),654183,0)|0);
 $946 = (getTempRet0() | 0);
 $947 = $10;
 $948 = $947;
 $949 = HEAP32[$948>>2]|0;
 $950 = (($947) + 4)|0;
 $951 = $950;
 $952 = HEAP32[$951>>2]|0;
 $953 = (_i64Add(($949|0),($952|0),($945|0),($946|0))|0);
 $954 = (getTempRet0() | 0);
 $955 = $10;
 $956 = $955;
 HEAP32[$956>>2] = $953;
 $957 = (($955) + 4)|0;
 $958 = $957;
 HEAP32[$958>>2] = $954;
 $959 = $20;
 $960 = $959;
 $961 = HEAP32[$960>>2]|0;
 $962 = (($959) + 4)|0;
 $963 = $962;
 $964 = HEAP32[$963>>2]|0;
 $965 = (___muldi3(($961|0),($964|0),997805,0)|0);
 $966 = (getTempRet0() | 0);
 $967 = $11;
 $968 = $967;
 $969 = HEAP32[$968>>2]|0;
 $970 = (($967) + 4)|0;
 $971 = $970;
 $972 = HEAP32[$971>>2]|0;
 $973 = (_i64Subtract(($969|0),($972|0),($965|0),($966|0))|0);
 $974 = (getTempRet0() | 0);
 $975 = $11;
 $976 = $975;
 HEAP32[$976>>2] = $973;
 $977 = (($975) + 4)|0;
 $978 = $977;
 HEAP32[$978>>2] = $974;
 $979 = $20;
 $980 = $979;
 $981 = HEAP32[$980>>2]|0;
 $982 = (($979) + 4)|0;
 $983 = $982;
 $984 = HEAP32[$983>>2]|0;
 $985 = (___muldi3(($981|0),($984|0),136657,0)|0);
 $986 = (getTempRet0() | 0);
 $987 = $12;
 $988 = $987;
 $989 = HEAP32[$988>>2]|0;
 $990 = (($987) + 4)|0;
 $991 = $990;
 $992 = HEAP32[$991>>2]|0;
 $993 = (_i64Add(($989|0),($992|0),($985|0),($986|0))|0);
 $994 = (getTempRet0() | 0);
 $995 = $12;
 $996 = $995;
 HEAP32[$996>>2] = $993;
 $997 = (($995) + 4)|0;
 $998 = $997;
 HEAP32[$998>>2] = $994;
 $999 = $20;
 $1000 = $999;
 $1001 = HEAP32[$1000>>2]|0;
 $1002 = (($999) + 4)|0;
 $1003 = $1002;
 $1004 = HEAP32[$1003>>2]|0;
 $1005 = (___muldi3(($1001|0),($1004|0),683901,0)|0);
 $1006 = (getTempRet0() | 0);
 $1007 = $13;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1007) + 4)|0;
 $1011 = $1010;
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = (_i64Subtract(($1009|0),($1012|0),($1005|0),($1006|0))|0);
 $1014 = (getTempRet0() | 0);
 $1015 = $13;
 $1016 = $1015;
 HEAP32[$1016>>2] = $1013;
 $1017 = (($1015) + 4)|0;
 $1018 = $1017;
 HEAP32[$1018>>2] = $1014;
 $1019 = $8;
 $1020 = $1019;
 $1021 = HEAP32[$1020>>2]|0;
 $1022 = (($1019) + 4)|0;
 $1023 = $1022;
 $1024 = HEAP32[$1023>>2]|0;
 $1025 = (_i64Add(($1021|0),($1024|0),1048576,0)|0);
 $1026 = (getTempRet0() | 0);
 $1027 = (_bitshift64Ashr(($1025|0),($1026|0),21)|0);
 $1028 = (getTempRet0() | 0);
 $1029 = $32;
 $1030 = $1029;
 HEAP32[$1030>>2] = $1027;
 $1031 = (($1029) + 4)|0;
 $1032 = $1031;
 HEAP32[$1032>>2] = $1028;
 $1033 = $32;
 $1034 = $1033;
 $1035 = HEAP32[$1034>>2]|0;
 $1036 = (($1033) + 4)|0;
 $1037 = $1036;
 $1038 = HEAP32[$1037>>2]|0;
 $1039 = $9;
 $1040 = $1039;
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = (($1039) + 4)|0;
 $1043 = $1042;
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = (_i64Add(($1041|0),($1044|0),($1035|0),($1038|0))|0);
 $1046 = (getTempRet0() | 0);
 $1047 = $9;
 $1048 = $1047;
 HEAP32[$1048>>2] = $1045;
 $1049 = (($1047) + 4)|0;
 $1050 = $1049;
 HEAP32[$1050>>2] = $1046;
 $1051 = $32;
 $1052 = $1051;
 $1053 = HEAP32[$1052>>2]|0;
 $1054 = (($1051) + 4)|0;
 $1055 = $1054;
 $1056 = HEAP32[$1055>>2]|0;
 $1057 = (_bitshift64Shl(($1053|0),($1056|0),21)|0);
 $1058 = (getTempRet0() | 0);
 $1059 = $8;
 $1060 = $1059;
 $1061 = HEAP32[$1060>>2]|0;
 $1062 = (($1059) + 4)|0;
 $1063 = $1062;
 $1064 = HEAP32[$1063>>2]|0;
 $1065 = (_i64Subtract(($1061|0),($1064|0),($1057|0),($1058|0))|0);
 $1066 = (getTempRet0() | 0);
 $1067 = $8;
 $1068 = $1067;
 HEAP32[$1068>>2] = $1065;
 $1069 = (($1067) + 4)|0;
 $1070 = $1069;
 HEAP32[$1070>>2] = $1066;
 $1071 = $10;
 $1072 = $1071;
 $1073 = HEAP32[$1072>>2]|0;
 $1074 = (($1071) + 4)|0;
 $1075 = $1074;
 $1076 = HEAP32[$1075>>2]|0;
 $1077 = (_i64Add(($1073|0),($1076|0),1048576,0)|0);
 $1078 = (getTempRet0() | 0);
 $1079 = (_bitshift64Ashr(($1077|0),($1078|0),21)|0);
 $1080 = (getTempRet0() | 0);
 $1081 = $34;
 $1082 = $1081;
 HEAP32[$1082>>2] = $1079;
 $1083 = (($1081) + 4)|0;
 $1084 = $1083;
 HEAP32[$1084>>2] = $1080;
 $1085 = $34;
 $1086 = $1085;
 $1087 = HEAP32[$1086>>2]|0;
 $1088 = (($1085) + 4)|0;
 $1089 = $1088;
 $1090 = HEAP32[$1089>>2]|0;
 $1091 = $11;
 $1092 = $1091;
 $1093 = HEAP32[$1092>>2]|0;
 $1094 = (($1091) + 4)|0;
 $1095 = $1094;
 $1096 = HEAP32[$1095>>2]|0;
 $1097 = (_i64Add(($1093|0),($1096|0),($1087|0),($1090|0))|0);
 $1098 = (getTempRet0() | 0);
 $1099 = $11;
 $1100 = $1099;
 HEAP32[$1100>>2] = $1097;
 $1101 = (($1099) + 4)|0;
 $1102 = $1101;
 HEAP32[$1102>>2] = $1098;
 $1103 = $34;
 $1104 = $1103;
 $1105 = HEAP32[$1104>>2]|0;
 $1106 = (($1103) + 4)|0;
 $1107 = $1106;
 $1108 = HEAP32[$1107>>2]|0;
 $1109 = (_bitshift64Shl(($1105|0),($1108|0),21)|0);
 $1110 = (getTempRet0() | 0);
 $1111 = $10;
 $1112 = $1111;
 $1113 = HEAP32[$1112>>2]|0;
 $1114 = (($1111) + 4)|0;
 $1115 = $1114;
 $1116 = HEAP32[$1115>>2]|0;
 $1117 = (_i64Subtract(($1113|0),($1116|0),($1109|0),($1110|0))|0);
 $1118 = (getTempRet0() | 0);
 $1119 = $10;
 $1120 = $1119;
 HEAP32[$1120>>2] = $1117;
 $1121 = (($1119) + 4)|0;
 $1122 = $1121;
 HEAP32[$1122>>2] = $1118;
 $1123 = $12;
 $1124 = $1123;
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = (($1123) + 4)|0;
 $1127 = $1126;
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = (_i64Add(($1125|0),($1128|0),1048576,0)|0);
 $1130 = (getTempRet0() | 0);
 $1131 = (_bitshift64Ashr(($1129|0),($1130|0),21)|0);
 $1132 = (getTempRet0() | 0);
 $1133 = $36;
 $1134 = $1133;
 HEAP32[$1134>>2] = $1131;
 $1135 = (($1133) + 4)|0;
 $1136 = $1135;
 HEAP32[$1136>>2] = $1132;
 $1137 = $36;
 $1138 = $1137;
 $1139 = HEAP32[$1138>>2]|0;
 $1140 = (($1137) + 4)|0;
 $1141 = $1140;
 $1142 = HEAP32[$1141>>2]|0;
 $1143 = $13;
 $1144 = $1143;
 $1145 = HEAP32[$1144>>2]|0;
 $1146 = (($1143) + 4)|0;
 $1147 = $1146;
 $1148 = HEAP32[$1147>>2]|0;
 $1149 = (_i64Add(($1145|0),($1148|0),($1139|0),($1142|0))|0);
 $1150 = (getTempRet0() | 0);
 $1151 = $13;
 $1152 = $1151;
 HEAP32[$1152>>2] = $1149;
 $1153 = (($1151) + 4)|0;
 $1154 = $1153;
 HEAP32[$1154>>2] = $1150;
 $1155 = $36;
 $1156 = $1155;
 $1157 = HEAP32[$1156>>2]|0;
 $1158 = (($1155) + 4)|0;
 $1159 = $1158;
 $1160 = HEAP32[$1159>>2]|0;
 $1161 = (_bitshift64Shl(($1157|0),($1160|0),21)|0);
 $1162 = (getTempRet0() | 0);
 $1163 = $12;
 $1164 = $1163;
 $1165 = HEAP32[$1164>>2]|0;
 $1166 = (($1163) + 4)|0;
 $1167 = $1166;
 $1168 = HEAP32[$1167>>2]|0;
 $1169 = (_i64Subtract(($1165|0),($1168|0),($1161|0),($1162|0))|0);
 $1170 = (getTempRet0() | 0);
 $1171 = $12;
 $1172 = $1171;
 HEAP32[$1172>>2] = $1169;
 $1173 = (($1171) + 4)|0;
 $1174 = $1173;
 HEAP32[$1174>>2] = $1170;
 $1175 = $14;
 $1176 = $1175;
 $1177 = HEAP32[$1176>>2]|0;
 $1178 = (($1175) + 4)|0;
 $1179 = $1178;
 $1180 = HEAP32[$1179>>2]|0;
 $1181 = (_i64Add(($1177|0),($1180|0),1048576,0)|0);
 $1182 = (getTempRet0() | 0);
 $1183 = (_bitshift64Ashr(($1181|0),($1182|0),21)|0);
 $1184 = (getTempRet0() | 0);
 $1185 = $38;
 $1186 = $1185;
 HEAP32[$1186>>2] = $1183;
 $1187 = (($1185) + 4)|0;
 $1188 = $1187;
 HEAP32[$1188>>2] = $1184;
 $1189 = $38;
 $1190 = $1189;
 $1191 = HEAP32[$1190>>2]|0;
 $1192 = (($1189) + 4)|0;
 $1193 = $1192;
 $1194 = HEAP32[$1193>>2]|0;
 $1195 = $15;
 $1196 = $1195;
 $1197 = HEAP32[$1196>>2]|0;
 $1198 = (($1195) + 4)|0;
 $1199 = $1198;
 $1200 = HEAP32[$1199>>2]|0;
 $1201 = (_i64Add(($1197|0),($1200|0),($1191|0),($1194|0))|0);
 $1202 = (getTempRet0() | 0);
 $1203 = $15;
 $1204 = $1203;
 HEAP32[$1204>>2] = $1201;
 $1205 = (($1203) + 4)|0;
 $1206 = $1205;
 HEAP32[$1206>>2] = $1202;
 $1207 = $38;
 $1208 = $1207;
 $1209 = HEAP32[$1208>>2]|0;
 $1210 = (($1207) + 4)|0;
 $1211 = $1210;
 $1212 = HEAP32[$1211>>2]|0;
 $1213 = (_bitshift64Shl(($1209|0),($1212|0),21)|0);
 $1214 = (getTempRet0() | 0);
 $1215 = $14;
 $1216 = $1215;
 $1217 = HEAP32[$1216>>2]|0;
 $1218 = (($1215) + 4)|0;
 $1219 = $1218;
 $1220 = HEAP32[$1219>>2]|0;
 $1221 = (_i64Subtract(($1217|0),($1220|0),($1213|0),($1214|0))|0);
 $1222 = (getTempRet0() | 0);
 $1223 = $14;
 $1224 = $1223;
 HEAP32[$1224>>2] = $1221;
 $1225 = (($1223) + 4)|0;
 $1226 = $1225;
 HEAP32[$1226>>2] = $1222;
 $1227 = $16;
 $1228 = $1227;
 $1229 = HEAP32[$1228>>2]|0;
 $1230 = (($1227) + 4)|0;
 $1231 = $1230;
 $1232 = HEAP32[$1231>>2]|0;
 $1233 = (_i64Add(($1229|0),($1232|0),1048576,0)|0);
 $1234 = (getTempRet0() | 0);
 $1235 = (_bitshift64Ashr(($1233|0),($1234|0),21)|0);
 $1236 = (getTempRet0() | 0);
 $1237 = $40;
 $1238 = $1237;
 HEAP32[$1238>>2] = $1235;
 $1239 = (($1237) + 4)|0;
 $1240 = $1239;
 HEAP32[$1240>>2] = $1236;
 $1241 = $40;
 $1242 = $1241;
 $1243 = HEAP32[$1242>>2]|0;
 $1244 = (($1241) + 4)|0;
 $1245 = $1244;
 $1246 = HEAP32[$1245>>2]|0;
 $1247 = $17;
 $1248 = $1247;
 $1249 = HEAP32[$1248>>2]|0;
 $1250 = (($1247) + 4)|0;
 $1251 = $1250;
 $1252 = HEAP32[$1251>>2]|0;
 $1253 = (_i64Add(($1249|0),($1252|0),($1243|0),($1246|0))|0);
 $1254 = (getTempRet0() | 0);
 $1255 = $17;
 $1256 = $1255;
 HEAP32[$1256>>2] = $1253;
 $1257 = (($1255) + 4)|0;
 $1258 = $1257;
 HEAP32[$1258>>2] = $1254;
 $1259 = $40;
 $1260 = $1259;
 $1261 = HEAP32[$1260>>2]|0;
 $1262 = (($1259) + 4)|0;
 $1263 = $1262;
 $1264 = HEAP32[$1263>>2]|0;
 $1265 = (_bitshift64Shl(($1261|0),($1264|0),21)|0);
 $1266 = (getTempRet0() | 0);
 $1267 = $16;
 $1268 = $1267;
 $1269 = HEAP32[$1268>>2]|0;
 $1270 = (($1267) + 4)|0;
 $1271 = $1270;
 $1272 = HEAP32[$1271>>2]|0;
 $1273 = (_i64Subtract(($1269|0),($1272|0),($1265|0),($1266|0))|0);
 $1274 = (getTempRet0() | 0);
 $1275 = $16;
 $1276 = $1275;
 HEAP32[$1276>>2] = $1273;
 $1277 = (($1275) + 4)|0;
 $1278 = $1277;
 HEAP32[$1278>>2] = $1274;
 $1279 = $18;
 $1280 = $1279;
 $1281 = HEAP32[$1280>>2]|0;
 $1282 = (($1279) + 4)|0;
 $1283 = $1282;
 $1284 = HEAP32[$1283>>2]|0;
 $1285 = (_i64Add(($1281|0),($1284|0),1048576,0)|0);
 $1286 = (getTempRet0() | 0);
 $1287 = (_bitshift64Ashr(($1285|0),($1286|0),21)|0);
 $1288 = (getTempRet0() | 0);
 $1289 = $42;
 $1290 = $1289;
 HEAP32[$1290>>2] = $1287;
 $1291 = (($1289) + 4)|0;
 $1292 = $1291;
 HEAP32[$1292>>2] = $1288;
 $1293 = $42;
 $1294 = $1293;
 $1295 = HEAP32[$1294>>2]|0;
 $1296 = (($1293) + 4)|0;
 $1297 = $1296;
 $1298 = HEAP32[$1297>>2]|0;
 $1299 = $19;
 $1300 = $1299;
 $1301 = HEAP32[$1300>>2]|0;
 $1302 = (($1299) + 4)|0;
 $1303 = $1302;
 $1304 = HEAP32[$1303>>2]|0;
 $1305 = (_i64Add(($1301|0),($1304|0),($1295|0),($1298|0))|0);
 $1306 = (getTempRet0() | 0);
 $1307 = $19;
 $1308 = $1307;
 HEAP32[$1308>>2] = $1305;
 $1309 = (($1307) + 4)|0;
 $1310 = $1309;
 HEAP32[$1310>>2] = $1306;
 $1311 = $42;
 $1312 = $1311;
 $1313 = HEAP32[$1312>>2]|0;
 $1314 = (($1311) + 4)|0;
 $1315 = $1314;
 $1316 = HEAP32[$1315>>2]|0;
 $1317 = (_bitshift64Shl(($1313|0),($1316|0),21)|0);
 $1318 = (getTempRet0() | 0);
 $1319 = $18;
 $1320 = $1319;
 $1321 = HEAP32[$1320>>2]|0;
 $1322 = (($1319) + 4)|0;
 $1323 = $1322;
 $1324 = HEAP32[$1323>>2]|0;
 $1325 = (_i64Subtract(($1321|0),($1324|0),($1317|0),($1318|0))|0);
 $1326 = (getTempRet0() | 0);
 $1327 = $18;
 $1328 = $1327;
 HEAP32[$1328>>2] = $1325;
 $1329 = (($1327) + 4)|0;
 $1330 = $1329;
 HEAP32[$1330>>2] = $1326;
 $1331 = $9;
 $1332 = $1331;
 $1333 = HEAP32[$1332>>2]|0;
 $1334 = (($1331) + 4)|0;
 $1335 = $1334;
 $1336 = HEAP32[$1335>>2]|0;
 $1337 = (_i64Add(($1333|0),($1336|0),1048576,0)|0);
 $1338 = (getTempRet0() | 0);
 $1339 = (_bitshift64Ashr(($1337|0),($1338|0),21)|0);
 $1340 = (getTempRet0() | 0);
 $1341 = $33;
 $1342 = $1341;
 HEAP32[$1342>>2] = $1339;
 $1343 = (($1341) + 4)|0;
 $1344 = $1343;
 HEAP32[$1344>>2] = $1340;
 $1345 = $33;
 $1346 = $1345;
 $1347 = HEAP32[$1346>>2]|0;
 $1348 = (($1345) + 4)|0;
 $1349 = $1348;
 $1350 = HEAP32[$1349>>2]|0;
 $1351 = $10;
 $1352 = $1351;
 $1353 = HEAP32[$1352>>2]|0;
 $1354 = (($1351) + 4)|0;
 $1355 = $1354;
 $1356 = HEAP32[$1355>>2]|0;
 $1357 = (_i64Add(($1353|0),($1356|0),($1347|0),($1350|0))|0);
 $1358 = (getTempRet0() | 0);
 $1359 = $10;
 $1360 = $1359;
 HEAP32[$1360>>2] = $1357;
 $1361 = (($1359) + 4)|0;
 $1362 = $1361;
 HEAP32[$1362>>2] = $1358;
 $1363 = $33;
 $1364 = $1363;
 $1365 = HEAP32[$1364>>2]|0;
 $1366 = (($1363) + 4)|0;
 $1367 = $1366;
 $1368 = HEAP32[$1367>>2]|0;
 $1369 = (_bitshift64Shl(($1365|0),($1368|0),21)|0);
 $1370 = (getTempRet0() | 0);
 $1371 = $9;
 $1372 = $1371;
 $1373 = HEAP32[$1372>>2]|0;
 $1374 = (($1371) + 4)|0;
 $1375 = $1374;
 $1376 = HEAP32[$1375>>2]|0;
 $1377 = (_i64Subtract(($1373|0),($1376|0),($1369|0),($1370|0))|0);
 $1378 = (getTempRet0() | 0);
 $1379 = $9;
 $1380 = $1379;
 HEAP32[$1380>>2] = $1377;
 $1381 = (($1379) + 4)|0;
 $1382 = $1381;
 HEAP32[$1382>>2] = $1378;
 $1383 = $11;
 $1384 = $1383;
 $1385 = HEAP32[$1384>>2]|0;
 $1386 = (($1383) + 4)|0;
 $1387 = $1386;
 $1388 = HEAP32[$1387>>2]|0;
 $1389 = (_i64Add(($1385|0),($1388|0),1048576,0)|0);
 $1390 = (getTempRet0() | 0);
 $1391 = (_bitshift64Ashr(($1389|0),($1390|0),21)|0);
 $1392 = (getTempRet0() | 0);
 $1393 = $35;
 $1394 = $1393;
 HEAP32[$1394>>2] = $1391;
 $1395 = (($1393) + 4)|0;
 $1396 = $1395;
 HEAP32[$1396>>2] = $1392;
 $1397 = $35;
 $1398 = $1397;
 $1399 = HEAP32[$1398>>2]|0;
 $1400 = (($1397) + 4)|0;
 $1401 = $1400;
 $1402 = HEAP32[$1401>>2]|0;
 $1403 = $12;
 $1404 = $1403;
 $1405 = HEAP32[$1404>>2]|0;
 $1406 = (($1403) + 4)|0;
 $1407 = $1406;
 $1408 = HEAP32[$1407>>2]|0;
 $1409 = (_i64Add(($1405|0),($1408|0),($1399|0),($1402|0))|0);
 $1410 = (getTempRet0() | 0);
 $1411 = $12;
 $1412 = $1411;
 HEAP32[$1412>>2] = $1409;
 $1413 = (($1411) + 4)|0;
 $1414 = $1413;
 HEAP32[$1414>>2] = $1410;
 $1415 = $35;
 $1416 = $1415;
 $1417 = HEAP32[$1416>>2]|0;
 $1418 = (($1415) + 4)|0;
 $1419 = $1418;
 $1420 = HEAP32[$1419>>2]|0;
 $1421 = (_bitshift64Shl(($1417|0),($1420|0),21)|0);
 $1422 = (getTempRet0() | 0);
 $1423 = $11;
 $1424 = $1423;
 $1425 = HEAP32[$1424>>2]|0;
 $1426 = (($1423) + 4)|0;
 $1427 = $1426;
 $1428 = HEAP32[$1427>>2]|0;
 $1429 = (_i64Subtract(($1425|0),($1428|0),($1421|0),($1422|0))|0);
 $1430 = (getTempRet0() | 0);
 $1431 = $11;
 $1432 = $1431;
 HEAP32[$1432>>2] = $1429;
 $1433 = (($1431) + 4)|0;
 $1434 = $1433;
 HEAP32[$1434>>2] = $1430;
 $1435 = $13;
 $1436 = $1435;
 $1437 = HEAP32[$1436>>2]|0;
 $1438 = (($1435) + 4)|0;
 $1439 = $1438;
 $1440 = HEAP32[$1439>>2]|0;
 $1441 = (_i64Add(($1437|0),($1440|0),1048576,0)|0);
 $1442 = (getTempRet0() | 0);
 $1443 = (_bitshift64Ashr(($1441|0),($1442|0),21)|0);
 $1444 = (getTempRet0() | 0);
 $1445 = $37;
 $1446 = $1445;
 HEAP32[$1446>>2] = $1443;
 $1447 = (($1445) + 4)|0;
 $1448 = $1447;
 HEAP32[$1448>>2] = $1444;
 $1449 = $37;
 $1450 = $1449;
 $1451 = HEAP32[$1450>>2]|0;
 $1452 = (($1449) + 4)|0;
 $1453 = $1452;
 $1454 = HEAP32[$1453>>2]|0;
 $1455 = $14;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (($1455) + 4)|0;
 $1459 = $1458;
 $1460 = HEAP32[$1459>>2]|0;
 $1461 = (_i64Add(($1457|0),($1460|0),($1451|0),($1454|0))|0);
 $1462 = (getTempRet0() | 0);
 $1463 = $14;
 $1464 = $1463;
 HEAP32[$1464>>2] = $1461;
 $1465 = (($1463) + 4)|0;
 $1466 = $1465;
 HEAP32[$1466>>2] = $1462;
 $1467 = $37;
 $1468 = $1467;
 $1469 = HEAP32[$1468>>2]|0;
 $1470 = (($1467) + 4)|0;
 $1471 = $1470;
 $1472 = HEAP32[$1471>>2]|0;
 $1473 = (_bitshift64Shl(($1469|0),($1472|0),21)|0);
 $1474 = (getTempRet0() | 0);
 $1475 = $13;
 $1476 = $1475;
 $1477 = HEAP32[$1476>>2]|0;
 $1478 = (($1475) + 4)|0;
 $1479 = $1478;
 $1480 = HEAP32[$1479>>2]|0;
 $1481 = (_i64Subtract(($1477|0),($1480|0),($1473|0),($1474|0))|0);
 $1482 = (getTempRet0() | 0);
 $1483 = $13;
 $1484 = $1483;
 HEAP32[$1484>>2] = $1481;
 $1485 = (($1483) + 4)|0;
 $1486 = $1485;
 HEAP32[$1486>>2] = $1482;
 $1487 = $15;
 $1488 = $1487;
 $1489 = HEAP32[$1488>>2]|0;
 $1490 = (($1487) + 4)|0;
 $1491 = $1490;
 $1492 = HEAP32[$1491>>2]|0;
 $1493 = (_i64Add(($1489|0),($1492|0),1048576,0)|0);
 $1494 = (getTempRet0() | 0);
 $1495 = (_bitshift64Ashr(($1493|0),($1494|0),21)|0);
 $1496 = (getTempRet0() | 0);
 $1497 = $39;
 $1498 = $1497;
 HEAP32[$1498>>2] = $1495;
 $1499 = (($1497) + 4)|0;
 $1500 = $1499;
 HEAP32[$1500>>2] = $1496;
 $1501 = $39;
 $1502 = $1501;
 $1503 = HEAP32[$1502>>2]|0;
 $1504 = (($1501) + 4)|0;
 $1505 = $1504;
 $1506 = HEAP32[$1505>>2]|0;
 $1507 = $16;
 $1508 = $1507;
 $1509 = HEAP32[$1508>>2]|0;
 $1510 = (($1507) + 4)|0;
 $1511 = $1510;
 $1512 = HEAP32[$1511>>2]|0;
 $1513 = (_i64Add(($1509|0),($1512|0),($1503|0),($1506|0))|0);
 $1514 = (getTempRet0() | 0);
 $1515 = $16;
 $1516 = $1515;
 HEAP32[$1516>>2] = $1513;
 $1517 = (($1515) + 4)|0;
 $1518 = $1517;
 HEAP32[$1518>>2] = $1514;
 $1519 = $39;
 $1520 = $1519;
 $1521 = HEAP32[$1520>>2]|0;
 $1522 = (($1519) + 4)|0;
 $1523 = $1522;
 $1524 = HEAP32[$1523>>2]|0;
 $1525 = (_bitshift64Shl(($1521|0),($1524|0),21)|0);
 $1526 = (getTempRet0() | 0);
 $1527 = $15;
 $1528 = $1527;
 $1529 = HEAP32[$1528>>2]|0;
 $1530 = (($1527) + 4)|0;
 $1531 = $1530;
 $1532 = HEAP32[$1531>>2]|0;
 $1533 = (_i64Subtract(($1529|0),($1532|0),($1525|0),($1526|0))|0);
 $1534 = (getTempRet0() | 0);
 $1535 = $15;
 $1536 = $1535;
 HEAP32[$1536>>2] = $1533;
 $1537 = (($1535) + 4)|0;
 $1538 = $1537;
 HEAP32[$1538>>2] = $1534;
 $1539 = $17;
 $1540 = $1539;
 $1541 = HEAP32[$1540>>2]|0;
 $1542 = (($1539) + 4)|0;
 $1543 = $1542;
 $1544 = HEAP32[$1543>>2]|0;
 $1545 = (_i64Add(($1541|0),($1544|0),1048576,0)|0);
 $1546 = (getTempRet0() | 0);
 $1547 = (_bitshift64Ashr(($1545|0),($1546|0),21)|0);
 $1548 = (getTempRet0() | 0);
 $1549 = $41;
 $1550 = $1549;
 HEAP32[$1550>>2] = $1547;
 $1551 = (($1549) + 4)|0;
 $1552 = $1551;
 HEAP32[$1552>>2] = $1548;
 $1553 = $41;
 $1554 = $1553;
 $1555 = HEAP32[$1554>>2]|0;
 $1556 = (($1553) + 4)|0;
 $1557 = $1556;
 $1558 = HEAP32[$1557>>2]|0;
 $1559 = $18;
 $1560 = $1559;
 $1561 = HEAP32[$1560>>2]|0;
 $1562 = (($1559) + 4)|0;
 $1563 = $1562;
 $1564 = HEAP32[$1563>>2]|0;
 $1565 = (_i64Add(($1561|0),($1564|0),($1555|0),($1558|0))|0);
 $1566 = (getTempRet0() | 0);
 $1567 = $18;
 $1568 = $1567;
 HEAP32[$1568>>2] = $1565;
 $1569 = (($1567) + 4)|0;
 $1570 = $1569;
 HEAP32[$1570>>2] = $1566;
 $1571 = $41;
 $1572 = $1571;
 $1573 = HEAP32[$1572>>2]|0;
 $1574 = (($1571) + 4)|0;
 $1575 = $1574;
 $1576 = HEAP32[$1575>>2]|0;
 $1577 = (_bitshift64Shl(($1573|0),($1576|0),21)|0);
 $1578 = (getTempRet0() | 0);
 $1579 = $17;
 $1580 = $1579;
 $1581 = HEAP32[$1580>>2]|0;
 $1582 = (($1579) + 4)|0;
 $1583 = $1582;
 $1584 = HEAP32[$1583>>2]|0;
 $1585 = (_i64Subtract(($1581|0),($1584|0),($1577|0),($1578|0))|0);
 $1586 = (getTempRet0() | 0);
 $1587 = $17;
 $1588 = $1587;
 HEAP32[$1588>>2] = $1585;
 $1589 = (($1587) + 4)|0;
 $1590 = $1589;
 HEAP32[$1590>>2] = $1586;
 $1591 = $19;
 $1592 = $1591;
 $1593 = HEAP32[$1592>>2]|0;
 $1594 = (($1591) + 4)|0;
 $1595 = $1594;
 $1596 = HEAP32[$1595>>2]|0;
 $1597 = (___muldi3(($1593|0),($1596|0),666643,0)|0);
 $1598 = (getTempRet0() | 0);
 $1599 = $7;
 $1600 = $1599;
 $1601 = HEAP32[$1600>>2]|0;
 $1602 = (($1599) + 4)|0;
 $1603 = $1602;
 $1604 = HEAP32[$1603>>2]|0;
 $1605 = (_i64Add(($1601|0),($1604|0),($1597|0),($1598|0))|0);
 $1606 = (getTempRet0() | 0);
 $1607 = $7;
 $1608 = $1607;
 HEAP32[$1608>>2] = $1605;
 $1609 = (($1607) + 4)|0;
 $1610 = $1609;
 HEAP32[$1610>>2] = $1606;
 $1611 = $19;
 $1612 = $1611;
 $1613 = HEAP32[$1612>>2]|0;
 $1614 = (($1611) + 4)|0;
 $1615 = $1614;
 $1616 = HEAP32[$1615>>2]|0;
 $1617 = (___muldi3(($1613|0),($1616|0),470296,0)|0);
 $1618 = (getTempRet0() | 0);
 $1619 = $8;
 $1620 = $1619;
 $1621 = HEAP32[$1620>>2]|0;
 $1622 = (($1619) + 4)|0;
 $1623 = $1622;
 $1624 = HEAP32[$1623>>2]|0;
 $1625 = (_i64Add(($1621|0),($1624|0),($1617|0),($1618|0))|0);
 $1626 = (getTempRet0() | 0);
 $1627 = $8;
 $1628 = $1627;
 HEAP32[$1628>>2] = $1625;
 $1629 = (($1627) + 4)|0;
 $1630 = $1629;
 HEAP32[$1630>>2] = $1626;
 $1631 = $19;
 $1632 = $1631;
 $1633 = HEAP32[$1632>>2]|0;
 $1634 = (($1631) + 4)|0;
 $1635 = $1634;
 $1636 = HEAP32[$1635>>2]|0;
 $1637 = (___muldi3(($1633|0),($1636|0),654183,0)|0);
 $1638 = (getTempRet0() | 0);
 $1639 = $9;
 $1640 = $1639;
 $1641 = HEAP32[$1640>>2]|0;
 $1642 = (($1639) + 4)|0;
 $1643 = $1642;
 $1644 = HEAP32[$1643>>2]|0;
 $1645 = (_i64Add(($1641|0),($1644|0),($1637|0),($1638|0))|0);
 $1646 = (getTempRet0() | 0);
 $1647 = $9;
 $1648 = $1647;
 HEAP32[$1648>>2] = $1645;
 $1649 = (($1647) + 4)|0;
 $1650 = $1649;
 HEAP32[$1650>>2] = $1646;
 $1651 = $19;
 $1652 = $1651;
 $1653 = HEAP32[$1652>>2]|0;
 $1654 = (($1651) + 4)|0;
 $1655 = $1654;
 $1656 = HEAP32[$1655>>2]|0;
 $1657 = (___muldi3(($1653|0),($1656|0),997805,0)|0);
 $1658 = (getTempRet0() | 0);
 $1659 = $10;
 $1660 = $1659;
 $1661 = HEAP32[$1660>>2]|0;
 $1662 = (($1659) + 4)|0;
 $1663 = $1662;
 $1664 = HEAP32[$1663>>2]|0;
 $1665 = (_i64Subtract(($1661|0),($1664|0),($1657|0),($1658|0))|0);
 $1666 = (getTempRet0() | 0);
 $1667 = $10;
 $1668 = $1667;
 HEAP32[$1668>>2] = $1665;
 $1669 = (($1667) + 4)|0;
 $1670 = $1669;
 HEAP32[$1670>>2] = $1666;
 $1671 = $19;
 $1672 = $1671;
 $1673 = HEAP32[$1672>>2]|0;
 $1674 = (($1671) + 4)|0;
 $1675 = $1674;
 $1676 = HEAP32[$1675>>2]|0;
 $1677 = (___muldi3(($1673|0),($1676|0),136657,0)|0);
 $1678 = (getTempRet0() | 0);
 $1679 = $11;
 $1680 = $1679;
 $1681 = HEAP32[$1680>>2]|0;
 $1682 = (($1679) + 4)|0;
 $1683 = $1682;
 $1684 = HEAP32[$1683>>2]|0;
 $1685 = (_i64Add(($1681|0),($1684|0),($1677|0),($1678|0))|0);
 $1686 = (getTempRet0() | 0);
 $1687 = $11;
 $1688 = $1687;
 HEAP32[$1688>>2] = $1685;
 $1689 = (($1687) + 4)|0;
 $1690 = $1689;
 HEAP32[$1690>>2] = $1686;
 $1691 = $19;
 $1692 = $1691;
 $1693 = HEAP32[$1692>>2]|0;
 $1694 = (($1691) + 4)|0;
 $1695 = $1694;
 $1696 = HEAP32[$1695>>2]|0;
 $1697 = (___muldi3(($1693|0),($1696|0),683901,0)|0);
 $1698 = (getTempRet0() | 0);
 $1699 = $12;
 $1700 = $1699;
 $1701 = HEAP32[$1700>>2]|0;
 $1702 = (($1699) + 4)|0;
 $1703 = $1702;
 $1704 = HEAP32[$1703>>2]|0;
 $1705 = (_i64Subtract(($1701|0),($1704|0),($1697|0),($1698|0))|0);
 $1706 = (getTempRet0() | 0);
 $1707 = $12;
 $1708 = $1707;
 HEAP32[$1708>>2] = $1705;
 $1709 = (($1707) + 4)|0;
 $1710 = $1709;
 HEAP32[$1710>>2] = $1706;
 $1711 = $18;
 $1712 = $1711;
 $1713 = HEAP32[$1712>>2]|0;
 $1714 = (($1711) + 4)|0;
 $1715 = $1714;
 $1716 = HEAP32[$1715>>2]|0;
 $1717 = (___muldi3(($1713|0),($1716|0),666643,0)|0);
 $1718 = (getTempRet0() | 0);
 $1719 = $6;
 $1720 = $1719;
 $1721 = HEAP32[$1720>>2]|0;
 $1722 = (($1719) + 4)|0;
 $1723 = $1722;
 $1724 = HEAP32[$1723>>2]|0;
 $1725 = (_i64Add(($1721|0),($1724|0),($1717|0),($1718|0))|0);
 $1726 = (getTempRet0() | 0);
 $1727 = $6;
 $1728 = $1727;
 HEAP32[$1728>>2] = $1725;
 $1729 = (($1727) + 4)|0;
 $1730 = $1729;
 HEAP32[$1730>>2] = $1726;
 $1731 = $18;
 $1732 = $1731;
 $1733 = HEAP32[$1732>>2]|0;
 $1734 = (($1731) + 4)|0;
 $1735 = $1734;
 $1736 = HEAP32[$1735>>2]|0;
 $1737 = (___muldi3(($1733|0),($1736|0),470296,0)|0);
 $1738 = (getTempRet0() | 0);
 $1739 = $7;
 $1740 = $1739;
 $1741 = HEAP32[$1740>>2]|0;
 $1742 = (($1739) + 4)|0;
 $1743 = $1742;
 $1744 = HEAP32[$1743>>2]|0;
 $1745 = (_i64Add(($1741|0),($1744|0),($1737|0),($1738|0))|0);
 $1746 = (getTempRet0() | 0);
 $1747 = $7;
 $1748 = $1747;
 HEAP32[$1748>>2] = $1745;
 $1749 = (($1747) + 4)|0;
 $1750 = $1749;
 HEAP32[$1750>>2] = $1746;
 $1751 = $18;
 $1752 = $1751;
 $1753 = HEAP32[$1752>>2]|0;
 $1754 = (($1751) + 4)|0;
 $1755 = $1754;
 $1756 = HEAP32[$1755>>2]|0;
 $1757 = (___muldi3(($1753|0),($1756|0),654183,0)|0);
 $1758 = (getTempRet0() | 0);
 $1759 = $8;
 $1760 = $1759;
 $1761 = HEAP32[$1760>>2]|0;
 $1762 = (($1759) + 4)|0;
 $1763 = $1762;
 $1764 = HEAP32[$1763>>2]|0;
 $1765 = (_i64Add(($1761|0),($1764|0),($1757|0),($1758|0))|0);
 $1766 = (getTempRet0() | 0);
 $1767 = $8;
 $1768 = $1767;
 HEAP32[$1768>>2] = $1765;
 $1769 = (($1767) + 4)|0;
 $1770 = $1769;
 HEAP32[$1770>>2] = $1766;
 $1771 = $18;
 $1772 = $1771;
 $1773 = HEAP32[$1772>>2]|0;
 $1774 = (($1771) + 4)|0;
 $1775 = $1774;
 $1776 = HEAP32[$1775>>2]|0;
 $1777 = (___muldi3(($1773|0),($1776|0),997805,0)|0);
 $1778 = (getTempRet0() | 0);
 $1779 = $9;
 $1780 = $1779;
 $1781 = HEAP32[$1780>>2]|0;
 $1782 = (($1779) + 4)|0;
 $1783 = $1782;
 $1784 = HEAP32[$1783>>2]|0;
 $1785 = (_i64Subtract(($1781|0),($1784|0),($1777|0),($1778|0))|0);
 $1786 = (getTempRet0() | 0);
 $1787 = $9;
 $1788 = $1787;
 HEAP32[$1788>>2] = $1785;
 $1789 = (($1787) + 4)|0;
 $1790 = $1789;
 HEAP32[$1790>>2] = $1786;
 $1791 = $18;
 $1792 = $1791;
 $1793 = HEAP32[$1792>>2]|0;
 $1794 = (($1791) + 4)|0;
 $1795 = $1794;
 $1796 = HEAP32[$1795>>2]|0;
 $1797 = (___muldi3(($1793|0),($1796|0),136657,0)|0);
 $1798 = (getTempRet0() | 0);
 $1799 = $10;
 $1800 = $1799;
 $1801 = HEAP32[$1800>>2]|0;
 $1802 = (($1799) + 4)|0;
 $1803 = $1802;
 $1804 = HEAP32[$1803>>2]|0;
 $1805 = (_i64Add(($1801|0),($1804|0),($1797|0),($1798|0))|0);
 $1806 = (getTempRet0() | 0);
 $1807 = $10;
 $1808 = $1807;
 HEAP32[$1808>>2] = $1805;
 $1809 = (($1807) + 4)|0;
 $1810 = $1809;
 HEAP32[$1810>>2] = $1806;
 $1811 = $18;
 $1812 = $1811;
 $1813 = HEAP32[$1812>>2]|0;
 $1814 = (($1811) + 4)|0;
 $1815 = $1814;
 $1816 = HEAP32[$1815>>2]|0;
 $1817 = (___muldi3(($1813|0),($1816|0),683901,0)|0);
 $1818 = (getTempRet0() | 0);
 $1819 = $11;
 $1820 = $1819;
 $1821 = HEAP32[$1820>>2]|0;
 $1822 = (($1819) + 4)|0;
 $1823 = $1822;
 $1824 = HEAP32[$1823>>2]|0;
 $1825 = (_i64Subtract(($1821|0),($1824|0),($1817|0),($1818|0))|0);
 $1826 = (getTempRet0() | 0);
 $1827 = $11;
 $1828 = $1827;
 HEAP32[$1828>>2] = $1825;
 $1829 = (($1827) + 4)|0;
 $1830 = $1829;
 HEAP32[$1830>>2] = $1826;
 $1831 = $17;
 $1832 = $1831;
 $1833 = HEAP32[$1832>>2]|0;
 $1834 = (($1831) + 4)|0;
 $1835 = $1834;
 $1836 = HEAP32[$1835>>2]|0;
 $1837 = (___muldi3(($1833|0),($1836|0),666643,0)|0);
 $1838 = (getTempRet0() | 0);
 $1839 = $5;
 $1840 = $1839;
 $1841 = HEAP32[$1840>>2]|0;
 $1842 = (($1839) + 4)|0;
 $1843 = $1842;
 $1844 = HEAP32[$1843>>2]|0;
 $1845 = (_i64Add(($1841|0),($1844|0),($1837|0),($1838|0))|0);
 $1846 = (getTempRet0() | 0);
 $1847 = $5;
 $1848 = $1847;
 HEAP32[$1848>>2] = $1845;
 $1849 = (($1847) + 4)|0;
 $1850 = $1849;
 HEAP32[$1850>>2] = $1846;
 $1851 = $17;
 $1852 = $1851;
 $1853 = HEAP32[$1852>>2]|0;
 $1854 = (($1851) + 4)|0;
 $1855 = $1854;
 $1856 = HEAP32[$1855>>2]|0;
 $1857 = (___muldi3(($1853|0),($1856|0),470296,0)|0);
 $1858 = (getTempRet0() | 0);
 $1859 = $6;
 $1860 = $1859;
 $1861 = HEAP32[$1860>>2]|0;
 $1862 = (($1859) + 4)|0;
 $1863 = $1862;
 $1864 = HEAP32[$1863>>2]|0;
 $1865 = (_i64Add(($1861|0),($1864|0),($1857|0),($1858|0))|0);
 $1866 = (getTempRet0() | 0);
 $1867 = $6;
 $1868 = $1867;
 HEAP32[$1868>>2] = $1865;
 $1869 = (($1867) + 4)|0;
 $1870 = $1869;
 HEAP32[$1870>>2] = $1866;
 $1871 = $17;
 $1872 = $1871;
 $1873 = HEAP32[$1872>>2]|0;
 $1874 = (($1871) + 4)|0;
 $1875 = $1874;
 $1876 = HEAP32[$1875>>2]|0;
 $1877 = (___muldi3(($1873|0),($1876|0),654183,0)|0);
 $1878 = (getTempRet0() | 0);
 $1879 = $7;
 $1880 = $1879;
 $1881 = HEAP32[$1880>>2]|0;
 $1882 = (($1879) + 4)|0;
 $1883 = $1882;
 $1884 = HEAP32[$1883>>2]|0;
 $1885 = (_i64Add(($1881|0),($1884|0),($1877|0),($1878|0))|0);
 $1886 = (getTempRet0() | 0);
 $1887 = $7;
 $1888 = $1887;
 HEAP32[$1888>>2] = $1885;
 $1889 = (($1887) + 4)|0;
 $1890 = $1889;
 HEAP32[$1890>>2] = $1886;
 $1891 = $17;
 $1892 = $1891;
 $1893 = HEAP32[$1892>>2]|0;
 $1894 = (($1891) + 4)|0;
 $1895 = $1894;
 $1896 = HEAP32[$1895>>2]|0;
 $1897 = (___muldi3(($1893|0),($1896|0),997805,0)|0);
 $1898 = (getTempRet0() | 0);
 $1899 = $8;
 $1900 = $1899;
 $1901 = HEAP32[$1900>>2]|0;
 $1902 = (($1899) + 4)|0;
 $1903 = $1902;
 $1904 = HEAP32[$1903>>2]|0;
 $1905 = (_i64Subtract(($1901|0),($1904|0),($1897|0),($1898|0))|0);
 $1906 = (getTempRet0() | 0);
 $1907 = $8;
 $1908 = $1907;
 HEAP32[$1908>>2] = $1905;
 $1909 = (($1907) + 4)|0;
 $1910 = $1909;
 HEAP32[$1910>>2] = $1906;
 $1911 = $17;
 $1912 = $1911;
 $1913 = HEAP32[$1912>>2]|0;
 $1914 = (($1911) + 4)|0;
 $1915 = $1914;
 $1916 = HEAP32[$1915>>2]|0;
 $1917 = (___muldi3(($1913|0),($1916|0),136657,0)|0);
 $1918 = (getTempRet0() | 0);
 $1919 = $9;
 $1920 = $1919;
 $1921 = HEAP32[$1920>>2]|0;
 $1922 = (($1919) + 4)|0;
 $1923 = $1922;
 $1924 = HEAP32[$1923>>2]|0;
 $1925 = (_i64Add(($1921|0),($1924|0),($1917|0),($1918|0))|0);
 $1926 = (getTempRet0() | 0);
 $1927 = $9;
 $1928 = $1927;
 HEAP32[$1928>>2] = $1925;
 $1929 = (($1927) + 4)|0;
 $1930 = $1929;
 HEAP32[$1930>>2] = $1926;
 $1931 = $17;
 $1932 = $1931;
 $1933 = HEAP32[$1932>>2]|0;
 $1934 = (($1931) + 4)|0;
 $1935 = $1934;
 $1936 = HEAP32[$1935>>2]|0;
 $1937 = (___muldi3(($1933|0),($1936|0),683901,0)|0);
 $1938 = (getTempRet0() | 0);
 $1939 = $10;
 $1940 = $1939;
 $1941 = HEAP32[$1940>>2]|0;
 $1942 = (($1939) + 4)|0;
 $1943 = $1942;
 $1944 = HEAP32[$1943>>2]|0;
 $1945 = (_i64Subtract(($1941|0),($1944|0),($1937|0),($1938|0))|0);
 $1946 = (getTempRet0() | 0);
 $1947 = $10;
 $1948 = $1947;
 HEAP32[$1948>>2] = $1945;
 $1949 = (($1947) + 4)|0;
 $1950 = $1949;
 HEAP32[$1950>>2] = $1946;
 $1951 = $16;
 $1952 = $1951;
 $1953 = HEAP32[$1952>>2]|0;
 $1954 = (($1951) + 4)|0;
 $1955 = $1954;
 $1956 = HEAP32[$1955>>2]|0;
 $1957 = (___muldi3(($1953|0),($1956|0),666643,0)|0);
 $1958 = (getTempRet0() | 0);
 $1959 = $4;
 $1960 = $1959;
 $1961 = HEAP32[$1960>>2]|0;
 $1962 = (($1959) + 4)|0;
 $1963 = $1962;
 $1964 = HEAP32[$1963>>2]|0;
 $1965 = (_i64Add(($1961|0),($1964|0),($1957|0),($1958|0))|0);
 $1966 = (getTempRet0() | 0);
 $1967 = $4;
 $1968 = $1967;
 HEAP32[$1968>>2] = $1965;
 $1969 = (($1967) + 4)|0;
 $1970 = $1969;
 HEAP32[$1970>>2] = $1966;
 $1971 = $16;
 $1972 = $1971;
 $1973 = HEAP32[$1972>>2]|0;
 $1974 = (($1971) + 4)|0;
 $1975 = $1974;
 $1976 = HEAP32[$1975>>2]|0;
 $1977 = (___muldi3(($1973|0),($1976|0),470296,0)|0);
 $1978 = (getTempRet0() | 0);
 $1979 = $5;
 $1980 = $1979;
 $1981 = HEAP32[$1980>>2]|0;
 $1982 = (($1979) + 4)|0;
 $1983 = $1982;
 $1984 = HEAP32[$1983>>2]|0;
 $1985 = (_i64Add(($1981|0),($1984|0),($1977|0),($1978|0))|0);
 $1986 = (getTempRet0() | 0);
 $1987 = $5;
 $1988 = $1987;
 HEAP32[$1988>>2] = $1985;
 $1989 = (($1987) + 4)|0;
 $1990 = $1989;
 HEAP32[$1990>>2] = $1986;
 $1991 = $16;
 $1992 = $1991;
 $1993 = HEAP32[$1992>>2]|0;
 $1994 = (($1991) + 4)|0;
 $1995 = $1994;
 $1996 = HEAP32[$1995>>2]|0;
 $1997 = (___muldi3(($1993|0),($1996|0),654183,0)|0);
 $1998 = (getTempRet0() | 0);
 $1999 = $6;
 $2000 = $1999;
 $2001 = HEAP32[$2000>>2]|0;
 $2002 = (($1999) + 4)|0;
 $2003 = $2002;
 $2004 = HEAP32[$2003>>2]|0;
 $2005 = (_i64Add(($2001|0),($2004|0),($1997|0),($1998|0))|0);
 $2006 = (getTempRet0() | 0);
 $2007 = $6;
 $2008 = $2007;
 HEAP32[$2008>>2] = $2005;
 $2009 = (($2007) + 4)|0;
 $2010 = $2009;
 HEAP32[$2010>>2] = $2006;
 $2011 = $16;
 $2012 = $2011;
 $2013 = HEAP32[$2012>>2]|0;
 $2014 = (($2011) + 4)|0;
 $2015 = $2014;
 $2016 = HEAP32[$2015>>2]|0;
 $2017 = (___muldi3(($2013|0),($2016|0),997805,0)|0);
 $2018 = (getTempRet0() | 0);
 $2019 = $7;
 $2020 = $2019;
 $2021 = HEAP32[$2020>>2]|0;
 $2022 = (($2019) + 4)|0;
 $2023 = $2022;
 $2024 = HEAP32[$2023>>2]|0;
 $2025 = (_i64Subtract(($2021|0),($2024|0),($2017|0),($2018|0))|0);
 $2026 = (getTempRet0() | 0);
 $2027 = $7;
 $2028 = $2027;
 HEAP32[$2028>>2] = $2025;
 $2029 = (($2027) + 4)|0;
 $2030 = $2029;
 HEAP32[$2030>>2] = $2026;
 $2031 = $16;
 $2032 = $2031;
 $2033 = HEAP32[$2032>>2]|0;
 $2034 = (($2031) + 4)|0;
 $2035 = $2034;
 $2036 = HEAP32[$2035>>2]|0;
 $2037 = (___muldi3(($2033|0),($2036|0),136657,0)|0);
 $2038 = (getTempRet0() | 0);
 $2039 = $8;
 $2040 = $2039;
 $2041 = HEAP32[$2040>>2]|0;
 $2042 = (($2039) + 4)|0;
 $2043 = $2042;
 $2044 = HEAP32[$2043>>2]|0;
 $2045 = (_i64Add(($2041|0),($2044|0),($2037|0),($2038|0))|0);
 $2046 = (getTempRet0() | 0);
 $2047 = $8;
 $2048 = $2047;
 HEAP32[$2048>>2] = $2045;
 $2049 = (($2047) + 4)|0;
 $2050 = $2049;
 HEAP32[$2050>>2] = $2046;
 $2051 = $16;
 $2052 = $2051;
 $2053 = HEAP32[$2052>>2]|0;
 $2054 = (($2051) + 4)|0;
 $2055 = $2054;
 $2056 = HEAP32[$2055>>2]|0;
 $2057 = (___muldi3(($2053|0),($2056|0),683901,0)|0);
 $2058 = (getTempRet0() | 0);
 $2059 = $9;
 $2060 = $2059;
 $2061 = HEAP32[$2060>>2]|0;
 $2062 = (($2059) + 4)|0;
 $2063 = $2062;
 $2064 = HEAP32[$2063>>2]|0;
 $2065 = (_i64Subtract(($2061|0),($2064|0),($2057|0),($2058|0))|0);
 $2066 = (getTempRet0() | 0);
 $2067 = $9;
 $2068 = $2067;
 HEAP32[$2068>>2] = $2065;
 $2069 = (($2067) + 4)|0;
 $2070 = $2069;
 HEAP32[$2070>>2] = $2066;
 $2071 = $15;
 $2072 = $2071;
 $2073 = HEAP32[$2072>>2]|0;
 $2074 = (($2071) + 4)|0;
 $2075 = $2074;
 $2076 = HEAP32[$2075>>2]|0;
 $2077 = (___muldi3(($2073|0),($2076|0),666643,0)|0);
 $2078 = (getTempRet0() | 0);
 $2079 = $3;
 $2080 = $2079;
 $2081 = HEAP32[$2080>>2]|0;
 $2082 = (($2079) + 4)|0;
 $2083 = $2082;
 $2084 = HEAP32[$2083>>2]|0;
 $2085 = (_i64Add(($2081|0),($2084|0),($2077|0),($2078|0))|0);
 $2086 = (getTempRet0() | 0);
 $2087 = $3;
 $2088 = $2087;
 HEAP32[$2088>>2] = $2085;
 $2089 = (($2087) + 4)|0;
 $2090 = $2089;
 HEAP32[$2090>>2] = $2086;
 $2091 = $15;
 $2092 = $2091;
 $2093 = HEAP32[$2092>>2]|0;
 $2094 = (($2091) + 4)|0;
 $2095 = $2094;
 $2096 = HEAP32[$2095>>2]|0;
 $2097 = (___muldi3(($2093|0),($2096|0),470296,0)|0);
 $2098 = (getTempRet0() | 0);
 $2099 = $4;
 $2100 = $2099;
 $2101 = HEAP32[$2100>>2]|0;
 $2102 = (($2099) + 4)|0;
 $2103 = $2102;
 $2104 = HEAP32[$2103>>2]|0;
 $2105 = (_i64Add(($2101|0),($2104|0),($2097|0),($2098|0))|0);
 $2106 = (getTempRet0() | 0);
 $2107 = $4;
 $2108 = $2107;
 HEAP32[$2108>>2] = $2105;
 $2109 = (($2107) + 4)|0;
 $2110 = $2109;
 HEAP32[$2110>>2] = $2106;
 $2111 = $15;
 $2112 = $2111;
 $2113 = HEAP32[$2112>>2]|0;
 $2114 = (($2111) + 4)|0;
 $2115 = $2114;
 $2116 = HEAP32[$2115>>2]|0;
 $2117 = (___muldi3(($2113|0),($2116|0),654183,0)|0);
 $2118 = (getTempRet0() | 0);
 $2119 = $5;
 $2120 = $2119;
 $2121 = HEAP32[$2120>>2]|0;
 $2122 = (($2119) + 4)|0;
 $2123 = $2122;
 $2124 = HEAP32[$2123>>2]|0;
 $2125 = (_i64Add(($2121|0),($2124|0),($2117|0),($2118|0))|0);
 $2126 = (getTempRet0() | 0);
 $2127 = $5;
 $2128 = $2127;
 HEAP32[$2128>>2] = $2125;
 $2129 = (($2127) + 4)|0;
 $2130 = $2129;
 HEAP32[$2130>>2] = $2126;
 $2131 = $15;
 $2132 = $2131;
 $2133 = HEAP32[$2132>>2]|0;
 $2134 = (($2131) + 4)|0;
 $2135 = $2134;
 $2136 = HEAP32[$2135>>2]|0;
 $2137 = (___muldi3(($2133|0),($2136|0),997805,0)|0);
 $2138 = (getTempRet0() | 0);
 $2139 = $6;
 $2140 = $2139;
 $2141 = HEAP32[$2140>>2]|0;
 $2142 = (($2139) + 4)|0;
 $2143 = $2142;
 $2144 = HEAP32[$2143>>2]|0;
 $2145 = (_i64Subtract(($2141|0),($2144|0),($2137|0),($2138|0))|0);
 $2146 = (getTempRet0() | 0);
 $2147 = $6;
 $2148 = $2147;
 HEAP32[$2148>>2] = $2145;
 $2149 = (($2147) + 4)|0;
 $2150 = $2149;
 HEAP32[$2150>>2] = $2146;
 $2151 = $15;
 $2152 = $2151;
 $2153 = HEAP32[$2152>>2]|0;
 $2154 = (($2151) + 4)|0;
 $2155 = $2154;
 $2156 = HEAP32[$2155>>2]|0;
 $2157 = (___muldi3(($2153|0),($2156|0),136657,0)|0);
 $2158 = (getTempRet0() | 0);
 $2159 = $7;
 $2160 = $2159;
 $2161 = HEAP32[$2160>>2]|0;
 $2162 = (($2159) + 4)|0;
 $2163 = $2162;
 $2164 = HEAP32[$2163>>2]|0;
 $2165 = (_i64Add(($2161|0),($2164|0),($2157|0),($2158|0))|0);
 $2166 = (getTempRet0() | 0);
 $2167 = $7;
 $2168 = $2167;
 HEAP32[$2168>>2] = $2165;
 $2169 = (($2167) + 4)|0;
 $2170 = $2169;
 HEAP32[$2170>>2] = $2166;
 $2171 = $15;
 $2172 = $2171;
 $2173 = HEAP32[$2172>>2]|0;
 $2174 = (($2171) + 4)|0;
 $2175 = $2174;
 $2176 = HEAP32[$2175>>2]|0;
 $2177 = (___muldi3(($2173|0),($2176|0),683901,0)|0);
 $2178 = (getTempRet0() | 0);
 $2179 = $8;
 $2180 = $2179;
 $2181 = HEAP32[$2180>>2]|0;
 $2182 = (($2179) + 4)|0;
 $2183 = $2182;
 $2184 = HEAP32[$2183>>2]|0;
 $2185 = (_i64Subtract(($2181|0),($2184|0),($2177|0),($2178|0))|0);
 $2186 = (getTempRet0() | 0);
 $2187 = $8;
 $2188 = $2187;
 HEAP32[$2188>>2] = $2185;
 $2189 = (($2187) + 4)|0;
 $2190 = $2189;
 HEAP32[$2190>>2] = $2186;
 $2191 = $14;
 $2192 = $2191;
 $2193 = HEAP32[$2192>>2]|0;
 $2194 = (($2191) + 4)|0;
 $2195 = $2194;
 $2196 = HEAP32[$2195>>2]|0;
 $2197 = (___muldi3(($2193|0),($2196|0),666643,0)|0);
 $2198 = (getTempRet0() | 0);
 $2199 = $2;
 $2200 = $2199;
 $2201 = HEAP32[$2200>>2]|0;
 $2202 = (($2199) + 4)|0;
 $2203 = $2202;
 $2204 = HEAP32[$2203>>2]|0;
 $2205 = (_i64Add(($2201|0),($2204|0),($2197|0),($2198|0))|0);
 $2206 = (getTempRet0() | 0);
 $2207 = $2;
 $2208 = $2207;
 HEAP32[$2208>>2] = $2205;
 $2209 = (($2207) + 4)|0;
 $2210 = $2209;
 HEAP32[$2210>>2] = $2206;
 $2211 = $14;
 $2212 = $2211;
 $2213 = HEAP32[$2212>>2]|0;
 $2214 = (($2211) + 4)|0;
 $2215 = $2214;
 $2216 = HEAP32[$2215>>2]|0;
 $2217 = (___muldi3(($2213|0),($2216|0),470296,0)|0);
 $2218 = (getTempRet0() | 0);
 $2219 = $3;
 $2220 = $2219;
 $2221 = HEAP32[$2220>>2]|0;
 $2222 = (($2219) + 4)|0;
 $2223 = $2222;
 $2224 = HEAP32[$2223>>2]|0;
 $2225 = (_i64Add(($2221|0),($2224|0),($2217|0),($2218|0))|0);
 $2226 = (getTempRet0() | 0);
 $2227 = $3;
 $2228 = $2227;
 HEAP32[$2228>>2] = $2225;
 $2229 = (($2227) + 4)|0;
 $2230 = $2229;
 HEAP32[$2230>>2] = $2226;
 $2231 = $14;
 $2232 = $2231;
 $2233 = HEAP32[$2232>>2]|0;
 $2234 = (($2231) + 4)|0;
 $2235 = $2234;
 $2236 = HEAP32[$2235>>2]|0;
 $2237 = (___muldi3(($2233|0),($2236|0),654183,0)|0);
 $2238 = (getTempRet0() | 0);
 $2239 = $4;
 $2240 = $2239;
 $2241 = HEAP32[$2240>>2]|0;
 $2242 = (($2239) + 4)|0;
 $2243 = $2242;
 $2244 = HEAP32[$2243>>2]|0;
 $2245 = (_i64Add(($2241|0),($2244|0),($2237|0),($2238|0))|0);
 $2246 = (getTempRet0() | 0);
 $2247 = $4;
 $2248 = $2247;
 HEAP32[$2248>>2] = $2245;
 $2249 = (($2247) + 4)|0;
 $2250 = $2249;
 HEAP32[$2250>>2] = $2246;
 $2251 = $14;
 $2252 = $2251;
 $2253 = HEAP32[$2252>>2]|0;
 $2254 = (($2251) + 4)|0;
 $2255 = $2254;
 $2256 = HEAP32[$2255>>2]|0;
 $2257 = (___muldi3(($2253|0),($2256|0),997805,0)|0);
 $2258 = (getTempRet0() | 0);
 $2259 = $5;
 $2260 = $2259;
 $2261 = HEAP32[$2260>>2]|0;
 $2262 = (($2259) + 4)|0;
 $2263 = $2262;
 $2264 = HEAP32[$2263>>2]|0;
 $2265 = (_i64Subtract(($2261|0),($2264|0),($2257|0),($2258|0))|0);
 $2266 = (getTempRet0() | 0);
 $2267 = $5;
 $2268 = $2267;
 HEAP32[$2268>>2] = $2265;
 $2269 = (($2267) + 4)|0;
 $2270 = $2269;
 HEAP32[$2270>>2] = $2266;
 $2271 = $14;
 $2272 = $2271;
 $2273 = HEAP32[$2272>>2]|0;
 $2274 = (($2271) + 4)|0;
 $2275 = $2274;
 $2276 = HEAP32[$2275>>2]|0;
 $2277 = (___muldi3(($2273|0),($2276|0),136657,0)|0);
 $2278 = (getTempRet0() | 0);
 $2279 = $6;
 $2280 = $2279;
 $2281 = HEAP32[$2280>>2]|0;
 $2282 = (($2279) + 4)|0;
 $2283 = $2282;
 $2284 = HEAP32[$2283>>2]|0;
 $2285 = (_i64Add(($2281|0),($2284|0),($2277|0),($2278|0))|0);
 $2286 = (getTempRet0() | 0);
 $2287 = $6;
 $2288 = $2287;
 HEAP32[$2288>>2] = $2285;
 $2289 = (($2287) + 4)|0;
 $2290 = $2289;
 HEAP32[$2290>>2] = $2286;
 $2291 = $14;
 $2292 = $2291;
 $2293 = HEAP32[$2292>>2]|0;
 $2294 = (($2291) + 4)|0;
 $2295 = $2294;
 $2296 = HEAP32[$2295>>2]|0;
 $2297 = (___muldi3(($2293|0),($2296|0),683901,0)|0);
 $2298 = (getTempRet0() | 0);
 $2299 = $7;
 $2300 = $2299;
 $2301 = HEAP32[$2300>>2]|0;
 $2302 = (($2299) + 4)|0;
 $2303 = $2302;
 $2304 = HEAP32[$2303>>2]|0;
 $2305 = (_i64Subtract(($2301|0),($2304|0),($2297|0),($2298|0))|0);
 $2306 = (getTempRet0() | 0);
 $2307 = $7;
 $2308 = $2307;
 HEAP32[$2308>>2] = $2305;
 $2309 = (($2307) + 4)|0;
 $2310 = $2309;
 HEAP32[$2310>>2] = $2306;
 $2311 = $14;
 $2312 = $2311;
 HEAP32[$2312>>2] = 0;
 $2313 = (($2311) + 4)|0;
 $2314 = $2313;
 HEAP32[$2314>>2] = 0;
 $2315 = $2;
 $2316 = $2315;
 $2317 = HEAP32[$2316>>2]|0;
 $2318 = (($2315) + 4)|0;
 $2319 = $2318;
 $2320 = HEAP32[$2319>>2]|0;
 $2321 = (_i64Add(($2317|0),($2320|0),1048576,0)|0);
 $2322 = (getTempRet0() | 0);
 $2323 = (_bitshift64Ashr(($2321|0),($2322|0),21)|0);
 $2324 = (getTempRet0() | 0);
 $2325 = $26;
 $2326 = $2325;
 HEAP32[$2326>>2] = $2323;
 $2327 = (($2325) + 4)|0;
 $2328 = $2327;
 HEAP32[$2328>>2] = $2324;
 $2329 = $26;
 $2330 = $2329;
 $2331 = HEAP32[$2330>>2]|0;
 $2332 = (($2329) + 4)|0;
 $2333 = $2332;
 $2334 = HEAP32[$2333>>2]|0;
 $2335 = $3;
 $2336 = $2335;
 $2337 = HEAP32[$2336>>2]|0;
 $2338 = (($2335) + 4)|0;
 $2339 = $2338;
 $2340 = HEAP32[$2339>>2]|0;
 $2341 = (_i64Add(($2337|0),($2340|0),($2331|0),($2334|0))|0);
 $2342 = (getTempRet0() | 0);
 $2343 = $3;
 $2344 = $2343;
 HEAP32[$2344>>2] = $2341;
 $2345 = (($2343) + 4)|0;
 $2346 = $2345;
 HEAP32[$2346>>2] = $2342;
 $2347 = $26;
 $2348 = $2347;
 $2349 = HEAP32[$2348>>2]|0;
 $2350 = (($2347) + 4)|0;
 $2351 = $2350;
 $2352 = HEAP32[$2351>>2]|0;
 $2353 = (_bitshift64Shl(($2349|0),($2352|0),21)|0);
 $2354 = (getTempRet0() | 0);
 $2355 = $2;
 $2356 = $2355;
 $2357 = HEAP32[$2356>>2]|0;
 $2358 = (($2355) + 4)|0;
 $2359 = $2358;
 $2360 = HEAP32[$2359>>2]|0;
 $2361 = (_i64Subtract(($2357|0),($2360|0),($2353|0),($2354|0))|0);
 $2362 = (getTempRet0() | 0);
 $2363 = $2;
 $2364 = $2363;
 HEAP32[$2364>>2] = $2361;
 $2365 = (($2363) + 4)|0;
 $2366 = $2365;
 HEAP32[$2366>>2] = $2362;
 $2367 = $4;
 $2368 = $2367;
 $2369 = HEAP32[$2368>>2]|0;
 $2370 = (($2367) + 4)|0;
 $2371 = $2370;
 $2372 = HEAP32[$2371>>2]|0;
 $2373 = (_i64Add(($2369|0),($2372|0),1048576,0)|0);
 $2374 = (getTempRet0() | 0);
 $2375 = (_bitshift64Ashr(($2373|0),($2374|0),21)|0);
 $2376 = (getTempRet0() | 0);
 $2377 = $28;
 $2378 = $2377;
 HEAP32[$2378>>2] = $2375;
 $2379 = (($2377) + 4)|0;
 $2380 = $2379;
 HEAP32[$2380>>2] = $2376;
 $2381 = $28;
 $2382 = $2381;
 $2383 = HEAP32[$2382>>2]|0;
 $2384 = (($2381) + 4)|0;
 $2385 = $2384;
 $2386 = HEAP32[$2385>>2]|0;
 $2387 = $5;
 $2388 = $2387;
 $2389 = HEAP32[$2388>>2]|0;
 $2390 = (($2387) + 4)|0;
 $2391 = $2390;
 $2392 = HEAP32[$2391>>2]|0;
 $2393 = (_i64Add(($2389|0),($2392|0),($2383|0),($2386|0))|0);
 $2394 = (getTempRet0() | 0);
 $2395 = $5;
 $2396 = $2395;
 HEAP32[$2396>>2] = $2393;
 $2397 = (($2395) + 4)|0;
 $2398 = $2397;
 HEAP32[$2398>>2] = $2394;
 $2399 = $28;
 $2400 = $2399;
 $2401 = HEAP32[$2400>>2]|0;
 $2402 = (($2399) + 4)|0;
 $2403 = $2402;
 $2404 = HEAP32[$2403>>2]|0;
 $2405 = (_bitshift64Shl(($2401|0),($2404|0),21)|0);
 $2406 = (getTempRet0() | 0);
 $2407 = $4;
 $2408 = $2407;
 $2409 = HEAP32[$2408>>2]|0;
 $2410 = (($2407) + 4)|0;
 $2411 = $2410;
 $2412 = HEAP32[$2411>>2]|0;
 $2413 = (_i64Subtract(($2409|0),($2412|0),($2405|0),($2406|0))|0);
 $2414 = (getTempRet0() | 0);
 $2415 = $4;
 $2416 = $2415;
 HEAP32[$2416>>2] = $2413;
 $2417 = (($2415) + 4)|0;
 $2418 = $2417;
 HEAP32[$2418>>2] = $2414;
 $2419 = $6;
 $2420 = $2419;
 $2421 = HEAP32[$2420>>2]|0;
 $2422 = (($2419) + 4)|0;
 $2423 = $2422;
 $2424 = HEAP32[$2423>>2]|0;
 $2425 = (_i64Add(($2421|0),($2424|0),1048576,0)|0);
 $2426 = (getTempRet0() | 0);
 $2427 = (_bitshift64Ashr(($2425|0),($2426|0),21)|0);
 $2428 = (getTempRet0() | 0);
 $2429 = $30;
 $2430 = $2429;
 HEAP32[$2430>>2] = $2427;
 $2431 = (($2429) + 4)|0;
 $2432 = $2431;
 HEAP32[$2432>>2] = $2428;
 $2433 = $30;
 $2434 = $2433;
 $2435 = HEAP32[$2434>>2]|0;
 $2436 = (($2433) + 4)|0;
 $2437 = $2436;
 $2438 = HEAP32[$2437>>2]|0;
 $2439 = $7;
 $2440 = $2439;
 $2441 = HEAP32[$2440>>2]|0;
 $2442 = (($2439) + 4)|0;
 $2443 = $2442;
 $2444 = HEAP32[$2443>>2]|0;
 $2445 = (_i64Add(($2441|0),($2444|0),($2435|0),($2438|0))|0);
 $2446 = (getTempRet0() | 0);
 $2447 = $7;
 $2448 = $2447;
 HEAP32[$2448>>2] = $2445;
 $2449 = (($2447) + 4)|0;
 $2450 = $2449;
 HEAP32[$2450>>2] = $2446;
 $2451 = $30;
 $2452 = $2451;
 $2453 = HEAP32[$2452>>2]|0;
 $2454 = (($2451) + 4)|0;
 $2455 = $2454;
 $2456 = HEAP32[$2455>>2]|0;
 $2457 = (_bitshift64Shl(($2453|0),($2456|0),21)|0);
 $2458 = (getTempRet0() | 0);
 $2459 = $6;
 $2460 = $2459;
 $2461 = HEAP32[$2460>>2]|0;
 $2462 = (($2459) + 4)|0;
 $2463 = $2462;
 $2464 = HEAP32[$2463>>2]|0;
 $2465 = (_i64Subtract(($2461|0),($2464|0),($2457|0),($2458|0))|0);
 $2466 = (getTempRet0() | 0);
 $2467 = $6;
 $2468 = $2467;
 HEAP32[$2468>>2] = $2465;
 $2469 = (($2467) + 4)|0;
 $2470 = $2469;
 HEAP32[$2470>>2] = $2466;
 $2471 = $8;
 $2472 = $2471;
 $2473 = HEAP32[$2472>>2]|0;
 $2474 = (($2471) + 4)|0;
 $2475 = $2474;
 $2476 = HEAP32[$2475>>2]|0;
 $2477 = (_i64Add(($2473|0),($2476|0),1048576,0)|0);
 $2478 = (getTempRet0() | 0);
 $2479 = (_bitshift64Ashr(($2477|0),($2478|0),21)|0);
 $2480 = (getTempRet0() | 0);
 $2481 = $32;
 $2482 = $2481;
 HEAP32[$2482>>2] = $2479;
 $2483 = (($2481) + 4)|0;
 $2484 = $2483;
 HEAP32[$2484>>2] = $2480;
 $2485 = $32;
 $2486 = $2485;
 $2487 = HEAP32[$2486>>2]|0;
 $2488 = (($2485) + 4)|0;
 $2489 = $2488;
 $2490 = HEAP32[$2489>>2]|0;
 $2491 = $9;
 $2492 = $2491;
 $2493 = HEAP32[$2492>>2]|0;
 $2494 = (($2491) + 4)|0;
 $2495 = $2494;
 $2496 = HEAP32[$2495>>2]|0;
 $2497 = (_i64Add(($2493|0),($2496|0),($2487|0),($2490|0))|0);
 $2498 = (getTempRet0() | 0);
 $2499 = $9;
 $2500 = $2499;
 HEAP32[$2500>>2] = $2497;
 $2501 = (($2499) + 4)|0;
 $2502 = $2501;
 HEAP32[$2502>>2] = $2498;
 $2503 = $32;
 $2504 = $2503;
 $2505 = HEAP32[$2504>>2]|0;
 $2506 = (($2503) + 4)|0;
 $2507 = $2506;
 $2508 = HEAP32[$2507>>2]|0;
 $2509 = (_bitshift64Shl(($2505|0),($2508|0),21)|0);
 $2510 = (getTempRet0() | 0);
 $2511 = $8;
 $2512 = $2511;
 $2513 = HEAP32[$2512>>2]|0;
 $2514 = (($2511) + 4)|0;
 $2515 = $2514;
 $2516 = HEAP32[$2515>>2]|0;
 $2517 = (_i64Subtract(($2513|0),($2516|0),($2509|0),($2510|0))|0);
 $2518 = (getTempRet0() | 0);
 $2519 = $8;
 $2520 = $2519;
 HEAP32[$2520>>2] = $2517;
 $2521 = (($2519) + 4)|0;
 $2522 = $2521;
 HEAP32[$2522>>2] = $2518;
 $2523 = $10;
 $2524 = $2523;
 $2525 = HEAP32[$2524>>2]|0;
 $2526 = (($2523) + 4)|0;
 $2527 = $2526;
 $2528 = HEAP32[$2527>>2]|0;
 $2529 = (_i64Add(($2525|0),($2528|0),1048576,0)|0);
 $2530 = (getTempRet0() | 0);
 $2531 = (_bitshift64Ashr(($2529|0),($2530|0),21)|0);
 $2532 = (getTempRet0() | 0);
 $2533 = $34;
 $2534 = $2533;
 HEAP32[$2534>>2] = $2531;
 $2535 = (($2533) + 4)|0;
 $2536 = $2535;
 HEAP32[$2536>>2] = $2532;
 $2537 = $34;
 $2538 = $2537;
 $2539 = HEAP32[$2538>>2]|0;
 $2540 = (($2537) + 4)|0;
 $2541 = $2540;
 $2542 = HEAP32[$2541>>2]|0;
 $2543 = $11;
 $2544 = $2543;
 $2545 = HEAP32[$2544>>2]|0;
 $2546 = (($2543) + 4)|0;
 $2547 = $2546;
 $2548 = HEAP32[$2547>>2]|0;
 $2549 = (_i64Add(($2545|0),($2548|0),($2539|0),($2542|0))|0);
 $2550 = (getTempRet0() | 0);
 $2551 = $11;
 $2552 = $2551;
 HEAP32[$2552>>2] = $2549;
 $2553 = (($2551) + 4)|0;
 $2554 = $2553;
 HEAP32[$2554>>2] = $2550;
 $2555 = $34;
 $2556 = $2555;
 $2557 = HEAP32[$2556>>2]|0;
 $2558 = (($2555) + 4)|0;
 $2559 = $2558;
 $2560 = HEAP32[$2559>>2]|0;
 $2561 = (_bitshift64Shl(($2557|0),($2560|0),21)|0);
 $2562 = (getTempRet0() | 0);
 $2563 = $10;
 $2564 = $2563;
 $2565 = HEAP32[$2564>>2]|0;
 $2566 = (($2563) + 4)|0;
 $2567 = $2566;
 $2568 = HEAP32[$2567>>2]|0;
 $2569 = (_i64Subtract(($2565|0),($2568|0),($2561|0),($2562|0))|0);
 $2570 = (getTempRet0() | 0);
 $2571 = $10;
 $2572 = $2571;
 HEAP32[$2572>>2] = $2569;
 $2573 = (($2571) + 4)|0;
 $2574 = $2573;
 HEAP32[$2574>>2] = $2570;
 $2575 = $12;
 $2576 = $2575;
 $2577 = HEAP32[$2576>>2]|0;
 $2578 = (($2575) + 4)|0;
 $2579 = $2578;
 $2580 = HEAP32[$2579>>2]|0;
 $2581 = (_i64Add(($2577|0),($2580|0),1048576,0)|0);
 $2582 = (getTempRet0() | 0);
 $2583 = (_bitshift64Ashr(($2581|0),($2582|0),21)|0);
 $2584 = (getTempRet0() | 0);
 $2585 = $36;
 $2586 = $2585;
 HEAP32[$2586>>2] = $2583;
 $2587 = (($2585) + 4)|0;
 $2588 = $2587;
 HEAP32[$2588>>2] = $2584;
 $2589 = $36;
 $2590 = $2589;
 $2591 = HEAP32[$2590>>2]|0;
 $2592 = (($2589) + 4)|0;
 $2593 = $2592;
 $2594 = HEAP32[$2593>>2]|0;
 $2595 = $13;
 $2596 = $2595;
 $2597 = HEAP32[$2596>>2]|0;
 $2598 = (($2595) + 4)|0;
 $2599 = $2598;
 $2600 = HEAP32[$2599>>2]|0;
 $2601 = (_i64Add(($2597|0),($2600|0),($2591|0),($2594|0))|0);
 $2602 = (getTempRet0() | 0);
 $2603 = $13;
 $2604 = $2603;
 HEAP32[$2604>>2] = $2601;
 $2605 = (($2603) + 4)|0;
 $2606 = $2605;
 HEAP32[$2606>>2] = $2602;
 $2607 = $36;
 $2608 = $2607;
 $2609 = HEAP32[$2608>>2]|0;
 $2610 = (($2607) + 4)|0;
 $2611 = $2610;
 $2612 = HEAP32[$2611>>2]|0;
 $2613 = (_bitshift64Shl(($2609|0),($2612|0),21)|0);
 $2614 = (getTempRet0() | 0);
 $2615 = $12;
 $2616 = $2615;
 $2617 = HEAP32[$2616>>2]|0;
 $2618 = (($2615) + 4)|0;
 $2619 = $2618;
 $2620 = HEAP32[$2619>>2]|0;
 $2621 = (_i64Subtract(($2617|0),($2620|0),($2613|0),($2614|0))|0);
 $2622 = (getTempRet0() | 0);
 $2623 = $12;
 $2624 = $2623;
 HEAP32[$2624>>2] = $2621;
 $2625 = (($2623) + 4)|0;
 $2626 = $2625;
 HEAP32[$2626>>2] = $2622;
 $2627 = $3;
 $2628 = $2627;
 $2629 = HEAP32[$2628>>2]|0;
 $2630 = (($2627) + 4)|0;
 $2631 = $2630;
 $2632 = HEAP32[$2631>>2]|0;
 $2633 = (_i64Add(($2629|0),($2632|0),1048576,0)|0);
 $2634 = (getTempRet0() | 0);
 $2635 = (_bitshift64Ashr(($2633|0),($2634|0),21)|0);
 $2636 = (getTempRet0() | 0);
 $2637 = $27;
 $2638 = $2637;
 HEAP32[$2638>>2] = $2635;
 $2639 = (($2637) + 4)|0;
 $2640 = $2639;
 HEAP32[$2640>>2] = $2636;
 $2641 = $27;
 $2642 = $2641;
 $2643 = HEAP32[$2642>>2]|0;
 $2644 = (($2641) + 4)|0;
 $2645 = $2644;
 $2646 = HEAP32[$2645>>2]|0;
 $2647 = $4;
 $2648 = $2647;
 $2649 = HEAP32[$2648>>2]|0;
 $2650 = (($2647) + 4)|0;
 $2651 = $2650;
 $2652 = HEAP32[$2651>>2]|0;
 $2653 = (_i64Add(($2649|0),($2652|0),($2643|0),($2646|0))|0);
 $2654 = (getTempRet0() | 0);
 $2655 = $4;
 $2656 = $2655;
 HEAP32[$2656>>2] = $2653;
 $2657 = (($2655) + 4)|0;
 $2658 = $2657;
 HEAP32[$2658>>2] = $2654;
 $2659 = $27;
 $2660 = $2659;
 $2661 = HEAP32[$2660>>2]|0;
 $2662 = (($2659) + 4)|0;
 $2663 = $2662;
 $2664 = HEAP32[$2663>>2]|0;
 $2665 = (_bitshift64Shl(($2661|0),($2664|0),21)|0);
 $2666 = (getTempRet0() | 0);
 $2667 = $3;
 $2668 = $2667;
 $2669 = HEAP32[$2668>>2]|0;
 $2670 = (($2667) + 4)|0;
 $2671 = $2670;
 $2672 = HEAP32[$2671>>2]|0;
 $2673 = (_i64Subtract(($2669|0),($2672|0),($2665|0),($2666|0))|0);
 $2674 = (getTempRet0() | 0);
 $2675 = $3;
 $2676 = $2675;
 HEAP32[$2676>>2] = $2673;
 $2677 = (($2675) + 4)|0;
 $2678 = $2677;
 HEAP32[$2678>>2] = $2674;
 $2679 = $5;
 $2680 = $2679;
 $2681 = HEAP32[$2680>>2]|0;
 $2682 = (($2679) + 4)|0;
 $2683 = $2682;
 $2684 = HEAP32[$2683>>2]|0;
 $2685 = (_i64Add(($2681|0),($2684|0),1048576,0)|0);
 $2686 = (getTempRet0() | 0);
 $2687 = (_bitshift64Ashr(($2685|0),($2686|0),21)|0);
 $2688 = (getTempRet0() | 0);
 $2689 = $29;
 $2690 = $2689;
 HEAP32[$2690>>2] = $2687;
 $2691 = (($2689) + 4)|0;
 $2692 = $2691;
 HEAP32[$2692>>2] = $2688;
 $2693 = $29;
 $2694 = $2693;
 $2695 = HEAP32[$2694>>2]|0;
 $2696 = (($2693) + 4)|0;
 $2697 = $2696;
 $2698 = HEAP32[$2697>>2]|0;
 $2699 = $6;
 $2700 = $2699;
 $2701 = HEAP32[$2700>>2]|0;
 $2702 = (($2699) + 4)|0;
 $2703 = $2702;
 $2704 = HEAP32[$2703>>2]|0;
 $2705 = (_i64Add(($2701|0),($2704|0),($2695|0),($2698|0))|0);
 $2706 = (getTempRet0() | 0);
 $2707 = $6;
 $2708 = $2707;
 HEAP32[$2708>>2] = $2705;
 $2709 = (($2707) + 4)|0;
 $2710 = $2709;
 HEAP32[$2710>>2] = $2706;
 $2711 = $29;
 $2712 = $2711;
 $2713 = HEAP32[$2712>>2]|0;
 $2714 = (($2711) + 4)|0;
 $2715 = $2714;
 $2716 = HEAP32[$2715>>2]|0;
 $2717 = (_bitshift64Shl(($2713|0),($2716|0),21)|0);
 $2718 = (getTempRet0() | 0);
 $2719 = $5;
 $2720 = $2719;
 $2721 = HEAP32[$2720>>2]|0;
 $2722 = (($2719) + 4)|0;
 $2723 = $2722;
 $2724 = HEAP32[$2723>>2]|0;
 $2725 = (_i64Subtract(($2721|0),($2724|0),($2717|0),($2718|0))|0);
 $2726 = (getTempRet0() | 0);
 $2727 = $5;
 $2728 = $2727;
 HEAP32[$2728>>2] = $2725;
 $2729 = (($2727) + 4)|0;
 $2730 = $2729;
 HEAP32[$2730>>2] = $2726;
 $2731 = $7;
 $2732 = $2731;
 $2733 = HEAP32[$2732>>2]|0;
 $2734 = (($2731) + 4)|0;
 $2735 = $2734;
 $2736 = HEAP32[$2735>>2]|0;
 $2737 = (_i64Add(($2733|0),($2736|0),1048576,0)|0);
 $2738 = (getTempRet0() | 0);
 $2739 = (_bitshift64Ashr(($2737|0),($2738|0),21)|0);
 $2740 = (getTempRet0() | 0);
 $2741 = $31;
 $2742 = $2741;
 HEAP32[$2742>>2] = $2739;
 $2743 = (($2741) + 4)|0;
 $2744 = $2743;
 HEAP32[$2744>>2] = $2740;
 $2745 = $31;
 $2746 = $2745;
 $2747 = HEAP32[$2746>>2]|0;
 $2748 = (($2745) + 4)|0;
 $2749 = $2748;
 $2750 = HEAP32[$2749>>2]|0;
 $2751 = $8;
 $2752 = $2751;
 $2753 = HEAP32[$2752>>2]|0;
 $2754 = (($2751) + 4)|0;
 $2755 = $2754;
 $2756 = HEAP32[$2755>>2]|0;
 $2757 = (_i64Add(($2753|0),($2756|0),($2747|0),($2750|0))|0);
 $2758 = (getTempRet0() | 0);
 $2759 = $8;
 $2760 = $2759;
 HEAP32[$2760>>2] = $2757;
 $2761 = (($2759) + 4)|0;
 $2762 = $2761;
 HEAP32[$2762>>2] = $2758;
 $2763 = $31;
 $2764 = $2763;
 $2765 = HEAP32[$2764>>2]|0;
 $2766 = (($2763) + 4)|0;
 $2767 = $2766;
 $2768 = HEAP32[$2767>>2]|0;
 $2769 = (_bitshift64Shl(($2765|0),($2768|0),21)|0);
 $2770 = (getTempRet0() | 0);
 $2771 = $7;
 $2772 = $2771;
 $2773 = HEAP32[$2772>>2]|0;
 $2774 = (($2771) + 4)|0;
 $2775 = $2774;
 $2776 = HEAP32[$2775>>2]|0;
 $2777 = (_i64Subtract(($2773|0),($2776|0),($2769|0),($2770|0))|0);
 $2778 = (getTempRet0() | 0);
 $2779 = $7;
 $2780 = $2779;
 HEAP32[$2780>>2] = $2777;
 $2781 = (($2779) + 4)|0;
 $2782 = $2781;
 HEAP32[$2782>>2] = $2778;
 $2783 = $9;
 $2784 = $2783;
 $2785 = HEAP32[$2784>>2]|0;
 $2786 = (($2783) + 4)|0;
 $2787 = $2786;
 $2788 = HEAP32[$2787>>2]|0;
 $2789 = (_i64Add(($2785|0),($2788|0),1048576,0)|0);
 $2790 = (getTempRet0() | 0);
 $2791 = (_bitshift64Ashr(($2789|0),($2790|0),21)|0);
 $2792 = (getTempRet0() | 0);
 $2793 = $33;
 $2794 = $2793;
 HEAP32[$2794>>2] = $2791;
 $2795 = (($2793) + 4)|0;
 $2796 = $2795;
 HEAP32[$2796>>2] = $2792;
 $2797 = $33;
 $2798 = $2797;
 $2799 = HEAP32[$2798>>2]|0;
 $2800 = (($2797) + 4)|0;
 $2801 = $2800;
 $2802 = HEAP32[$2801>>2]|0;
 $2803 = $10;
 $2804 = $2803;
 $2805 = HEAP32[$2804>>2]|0;
 $2806 = (($2803) + 4)|0;
 $2807 = $2806;
 $2808 = HEAP32[$2807>>2]|0;
 $2809 = (_i64Add(($2805|0),($2808|0),($2799|0),($2802|0))|0);
 $2810 = (getTempRet0() | 0);
 $2811 = $10;
 $2812 = $2811;
 HEAP32[$2812>>2] = $2809;
 $2813 = (($2811) + 4)|0;
 $2814 = $2813;
 HEAP32[$2814>>2] = $2810;
 $2815 = $33;
 $2816 = $2815;
 $2817 = HEAP32[$2816>>2]|0;
 $2818 = (($2815) + 4)|0;
 $2819 = $2818;
 $2820 = HEAP32[$2819>>2]|0;
 $2821 = (_bitshift64Shl(($2817|0),($2820|0),21)|0);
 $2822 = (getTempRet0() | 0);
 $2823 = $9;
 $2824 = $2823;
 $2825 = HEAP32[$2824>>2]|0;
 $2826 = (($2823) + 4)|0;
 $2827 = $2826;
 $2828 = HEAP32[$2827>>2]|0;
 $2829 = (_i64Subtract(($2825|0),($2828|0),($2821|0),($2822|0))|0);
 $2830 = (getTempRet0() | 0);
 $2831 = $9;
 $2832 = $2831;
 HEAP32[$2832>>2] = $2829;
 $2833 = (($2831) + 4)|0;
 $2834 = $2833;
 HEAP32[$2834>>2] = $2830;
 $2835 = $11;
 $2836 = $2835;
 $2837 = HEAP32[$2836>>2]|0;
 $2838 = (($2835) + 4)|0;
 $2839 = $2838;
 $2840 = HEAP32[$2839>>2]|0;
 $2841 = (_i64Add(($2837|0),($2840|0),1048576,0)|0);
 $2842 = (getTempRet0() | 0);
 $2843 = (_bitshift64Ashr(($2841|0),($2842|0),21)|0);
 $2844 = (getTempRet0() | 0);
 $2845 = $35;
 $2846 = $2845;
 HEAP32[$2846>>2] = $2843;
 $2847 = (($2845) + 4)|0;
 $2848 = $2847;
 HEAP32[$2848>>2] = $2844;
 $2849 = $35;
 $2850 = $2849;
 $2851 = HEAP32[$2850>>2]|0;
 $2852 = (($2849) + 4)|0;
 $2853 = $2852;
 $2854 = HEAP32[$2853>>2]|0;
 $2855 = $12;
 $2856 = $2855;
 $2857 = HEAP32[$2856>>2]|0;
 $2858 = (($2855) + 4)|0;
 $2859 = $2858;
 $2860 = HEAP32[$2859>>2]|0;
 $2861 = (_i64Add(($2857|0),($2860|0),($2851|0),($2854|0))|0);
 $2862 = (getTempRet0() | 0);
 $2863 = $12;
 $2864 = $2863;
 HEAP32[$2864>>2] = $2861;
 $2865 = (($2863) + 4)|0;
 $2866 = $2865;
 HEAP32[$2866>>2] = $2862;
 $2867 = $35;
 $2868 = $2867;
 $2869 = HEAP32[$2868>>2]|0;
 $2870 = (($2867) + 4)|0;
 $2871 = $2870;
 $2872 = HEAP32[$2871>>2]|0;
 $2873 = (_bitshift64Shl(($2869|0),($2872|0),21)|0);
 $2874 = (getTempRet0() | 0);
 $2875 = $11;
 $2876 = $2875;
 $2877 = HEAP32[$2876>>2]|0;
 $2878 = (($2875) + 4)|0;
 $2879 = $2878;
 $2880 = HEAP32[$2879>>2]|0;
 $2881 = (_i64Subtract(($2877|0),($2880|0),($2873|0),($2874|0))|0);
 $2882 = (getTempRet0() | 0);
 $2883 = $11;
 $2884 = $2883;
 HEAP32[$2884>>2] = $2881;
 $2885 = (($2883) + 4)|0;
 $2886 = $2885;
 HEAP32[$2886>>2] = $2882;
 $2887 = $13;
 $2888 = $2887;
 $2889 = HEAP32[$2888>>2]|0;
 $2890 = (($2887) + 4)|0;
 $2891 = $2890;
 $2892 = HEAP32[$2891>>2]|0;
 $2893 = (_i64Add(($2889|0),($2892|0),1048576,0)|0);
 $2894 = (getTempRet0() | 0);
 $2895 = (_bitshift64Ashr(($2893|0),($2894|0),21)|0);
 $2896 = (getTempRet0() | 0);
 $2897 = $37;
 $2898 = $2897;
 HEAP32[$2898>>2] = $2895;
 $2899 = (($2897) + 4)|0;
 $2900 = $2899;
 HEAP32[$2900>>2] = $2896;
 $2901 = $37;
 $2902 = $2901;
 $2903 = HEAP32[$2902>>2]|0;
 $2904 = (($2901) + 4)|0;
 $2905 = $2904;
 $2906 = HEAP32[$2905>>2]|0;
 $2907 = $14;
 $2908 = $2907;
 $2909 = HEAP32[$2908>>2]|0;
 $2910 = (($2907) + 4)|0;
 $2911 = $2910;
 $2912 = HEAP32[$2911>>2]|0;
 $2913 = (_i64Add(($2909|0),($2912|0),($2903|0),($2906|0))|0);
 $2914 = (getTempRet0() | 0);
 $2915 = $14;
 $2916 = $2915;
 HEAP32[$2916>>2] = $2913;
 $2917 = (($2915) + 4)|0;
 $2918 = $2917;
 HEAP32[$2918>>2] = $2914;
 $2919 = $37;
 $2920 = $2919;
 $2921 = HEAP32[$2920>>2]|0;
 $2922 = (($2919) + 4)|0;
 $2923 = $2922;
 $2924 = HEAP32[$2923>>2]|0;
 $2925 = (_bitshift64Shl(($2921|0),($2924|0),21)|0);
 $2926 = (getTempRet0() | 0);
 $2927 = $13;
 $2928 = $2927;
 $2929 = HEAP32[$2928>>2]|0;
 $2930 = (($2927) + 4)|0;
 $2931 = $2930;
 $2932 = HEAP32[$2931>>2]|0;
 $2933 = (_i64Subtract(($2929|0),($2932|0),($2925|0),($2926|0))|0);
 $2934 = (getTempRet0() | 0);
 $2935 = $13;
 $2936 = $2935;
 HEAP32[$2936>>2] = $2933;
 $2937 = (($2935) + 4)|0;
 $2938 = $2937;
 HEAP32[$2938>>2] = $2934;
 $2939 = $14;
 $2940 = $2939;
 $2941 = HEAP32[$2940>>2]|0;
 $2942 = (($2939) + 4)|0;
 $2943 = $2942;
 $2944 = HEAP32[$2943>>2]|0;
 $2945 = (___muldi3(($2941|0),($2944|0),666643,0)|0);
 $2946 = (getTempRet0() | 0);
 $2947 = $2;
 $2948 = $2947;
 $2949 = HEAP32[$2948>>2]|0;
 $2950 = (($2947) + 4)|0;
 $2951 = $2950;
 $2952 = HEAP32[$2951>>2]|0;
 $2953 = (_i64Add(($2949|0),($2952|0),($2945|0),($2946|0))|0);
 $2954 = (getTempRet0() | 0);
 $2955 = $2;
 $2956 = $2955;
 HEAP32[$2956>>2] = $2953;
 $2957 = (($2955) + 4)|0;
 $2958 = $2957;
 HEAP32[$2958>>2] = $2954;
 $2959 = $14;
 $2960 = $2959;
 $2961 = HEAP32[$2960>>2]|0;
 $2962 = (($2959) + 4)|0;
 $2963 = $2962;
 $2964 = HEAP32[$2963>>2]|0;
 $2965 = (___muldi3(($2961|0),($2964|0),470296,0)|0);
 $2966 = (getTempRet0() | 0);
 $2967 = $3;
 $2968 = $2967;
 $2969 = HEAP32[$2968>>2]|0;
 $2970 = (($2967) + 4)|0;
 $2971 = $2970;
 $2972 = HEAP32[$2971>>2]|0;
 $2973 = (_i64Add(($2969|0),($2972|0),($2965|0),($2966|0))|0);
 $2974 = (getTempRet0() | 0);
 $2975 = $3;
 $2976 = $2975;
 HEAP32[$2976>>2] = $2973;
 $2977 = (($2975) + 4)|0;
 $2978 = $2977;
 HEAP32[$2978>>2] = $2974;
 $2979 = $14;
 $2980 = $2979;
 $2981 = HEAP32[$2980>>2]|0;
 $2982 = (($2979) + 4)|0;
 $2983 = $2982;
 $2984 = HEAP32[$2983>>2]|0;
 $2985 = (___muldi3(($2981|0),($2984|0),654183,0)|0);
 $2986 = (getTempRet0() | 0);
 $2987 = $4;
 $2988 = $2987;
 $2989 = HEAP32[$2988>>2]|0;
 $2990 = (($2987) + 4)|0;
 $2991 = $2990;
 $2992 = HEAP32[$2991>>2]|0;
 $2993 = (_i64Add(($2989|0),($2992|0),($2985|0),($2986|0))|0);
 $2994 = (getTempRet0() | 0);
 $2995 = $4;
 $2996 = $2995;
 HEAP32[$2996>>2] = $2993;
 $2997 = (($2995) + 4)|0;
 $2998 = $2997;
 HEAP32[$2998>>2] = $2994;
 $2999 = $14;
 $3000 = $2999;
 $3001 = HEAP32[$3000>>2]|0;
 $3002 = (($2999) + 4)|0;
 $3003 = $3002;
 $3004 = HEAP32[$3003>>2]|0;
 $3005 = (___muldi3(($3001|0),($3004|0),997805,0)|0);
 $3006 = (getTempRet0() | 0);
 $3007 = $5;
 $3008 = $3007;
 $3009 = HEAP32[$3008>>2]|0;
 $3010 = (($3007) + 4)|0;
 $3011 = $3010;
 $3012 = HEAP32[$3011>>2]|0;
 $3013 = (_i64Subtract(($3009|0),($3012|0),($3005|0),($3006|0))|0);
 $3014 = (getTempRet0() | 0);
 $3015 = $5;
 $3016 = $3015;
 HEAP32[$3016>>2] = $3013;
 $3017 = (($3015) + 4)|0;
 $3018 = $3017;
 HEAP32[$3018>>2] = $3014;
 $3019 = $14;
 $3020 = $3019;
 $3021 = HEAP32[$3020>>2]|0;
 $3022 = (($3019) + 4)|0;
 $3023 = $3022;
 $3024 = HEAP32[$3023>>2]|0;
 $3025 = (___muldi3(($3021|0),($3024|0),136657,0)|0);
 $3026 = (getTempRet0() | 0);
 $3027 = $6;
 $3028 = $3027;
 $3029 = HEAP32[$3028>>2]|0;
 $3030 = (($3027) + 4)|0;
 $3031 = $3030;
 $3032 = HEAP32[$3031>>2]|0;
 $3033 = (_i64Add(($3029|0),($3032|0),($3025|0),($3026|0))|0);
 $3034 = (getTempRet0() | 0);
 $3035 = $6;
 $3036 = $3035;
 HEAP32[$3036>>2] = $3033;
 $3037 = (($3035) + 4)|0;
 $3038 = $3037;
 HEAP32[$3038>>2] = $3034;
 $3039 = $14;
 $3040 = $3039;
 $3041 = HEAP32[$3040>>2]|0;
 $3042 = (($3039) + 4)|0;
 $3043 = $3042;
 $3044 = HEAP32[$3043>>2]|0;
 $3045 = (___muldi3(($3041|0),($3044|0),683901,0)|0);
 $3046 = (getTempRet0() | 0);
 $3047 = $7;
 $3048 = $3047;
 $3049 = HEAP32[$3048>>2]|0;
 $3050 = (($3047) + 4)|0;
 $3051 = $3050;
 $3052 = HEAP32[$3051>>2]|0;
 $3053 = (_i64Subtract(($3049|0),($3052|0),($3045|0),($3046|0))|0);
 $3054 = (getTempRet0() | 0);
 $3055 = $7;
 $3056 = $3055;
 HEAP32[$3056>>2] = $3053;
 $3057 = (($3055) + 4)|0;
 $3058 = $3057;
 HEAP32[$3058>>2] = $3054;
 $3059 = $14;
 $3060 = $3059;
 HEAP32[$3060>>2] = 0;
 $3061 = (($3059) + 4)|0;
 $3062 = $3061;
 HEAP32[$3062>>2] = 0;
 $3063 = $2;
 $3064 = $3063;
 $3065 = HEAP32[$3064>>2]|0;
 $3066 = (($3063) + 4)|0;
 $3067 = $3066;
 $3068 = HEAP32[$3067>>2]|0;
 $3069 = (_bitshift64Ashr(($3065|0),($3068|0),21)|0);
 $3070 = (getTempRet0() | 0);
 $3071 = $26;
 $3072 = $3071;
 HEAP32[$3072>>2] = $3069;
 $3073 = (($3071) + 4)|0;
 $3074 = $3073;
 HEAP32[$3074>>2] = $3070;
 $3075 = $26;
 $3076 = $3075;
 $3077 = HEAP32[$3076>>2]|0;
 $3078 = (($3075) + 4)|0;
 $3079 = $3078;
 $3080 = HEAP32[$3079>>2]|0;
 $3081 = $3;
 $3082 = $3081;
 $3083 = HEAP32[$3082>>2]|0;
 $3084 = (($3081) + 4)|0;
 $3085 = $3084;
 $3086 = HEAP32[$3085>>2]|0;
 $3087 = (_i64Add(($3083|0),($3086|0),($3077|0),($3080|0))|0);
 $3088 = (getTempRet0() | 0);
 $3089 = $3;
 $3090 = $3089;
 HEAP32[$3090>>2] = $3087;
 $3091 = (($3089) + 4)|0;
 $3092 = $3091;
 HEAP32[$3092>>2] = $3088;
 $3093 = $26;
 $3094 = $3093;
 $3095 = HEAP32[$3094>>2]|0;
 $3096 = (($3093) + 4)|0;
 $3097 = $3096;
 $3098 = HEAP32[$3097>>2]|0;
 $3099 = (_bitshift64Shl(($3095|0),($3098|0),21)|0);
 $3100 = (getTempRet0() | 0);
 $3101 = $2;
 $3102 = $3101;
 $3103 = HEAP32[$3102>>2]|0;
 $3104 = (($3101) + 4)|0;
 $3105 = $3104;
 $3106 = HEAP32[$3105>>2]|0;
 $3107 = (_i64Subtract(($3103|0),($3106|0),($3099|0),($3100|0))|0);
 $3108 = (getTempRet0() | 0);
 $3109 = $2;
 $3110 = $3109;
 HEAP32[$3110>>2] = $3107;
 $3111 = (($3109) + 4)|0;
 $3112 = $3111;
 HEAP32[$3112>>2] = $3108;
 $3113 = $3;
 $3114 = $3113;
 $3115 = HEAP32[$3114>>2]|0;
 $3116 = (($3113) + 4)|0;
 $3117 = $3116;
 $3118 = HEAP32[$3117>>2]|0;
 $3119 = (_bitshift64Ashr(($3115|0),($3118|0),21)|0);
 $3120 = (getTempRet0() | 0);
 $3121 = $27;
 $3122 = $3121;
 HEAP32[$3122>>2] = $3119;
 $3123 = (($3121) + 4)|0;
 $3124 = $3123;
 HEAP32[$3124>>2] = $3120;
 $3125 = $27;
 $3126 = $3125;
 $3127 = HEAP32[$3126>>2]|0;
 $3128 = (($3125) + 4)|0;
 $3129 = $3128;
 $3130 = HEAP32[$3129>>2]|0;
 $3131 = $4;
 $3132 = $3131;
 $3133 = HEAP32[$3132>>2]|0;
 $3134 = (($3131) + 4)|0;
 $3135 = $3134;
 $3136 = HEAP32[$3135>>2]|0;
 $3137 = (_i64Add(($3133|0),($3136|0),($3127|0),($3130|0))|0);
 $3138 = (getTempRet0() | 0);
 $3139 = $4;
 $3140 = $3139;
 HEAP32[$3140>>2] = $3137;
 $3141 = (($3139) + 4)|0;
 $3142 = $3141;
 HEAP32[$3142>>2] = $3138;
 $3143 = $27;
 $3144 = $3143;
 $3145 = HEAP32[$3144>>2]|0;
 $3146 = (($3143) + 4)|0;
 $3147 = $3146;
 $3148 = HEAP32[$3147>>2]|0;
 $3149 = (_bitshift64Shl(($3145|0),($3148|0),21)|0);
 $3150 = (getTempRet0() | 0);
 $3151 = $3;
 $3152 = $3151;
 $3153 = HEAP32[$3152>>2]|0;
 $3154 = (($3151) + 4)|0;
 $3155 = $3154;
 $3156 = HEAP32[$3155>>2]|0;
 $3157 = (_i64Subtract(($3153|0),($3156|0),($3149|0),($3150|0))|0);
 $3158 = (getTempRet0() | 0);
 $3159 = $3;
 $3160 = $3159;
 HEAP32[$3160>>2] = $3157;
 $3161 = (($3159) + 4)|0;
 $3162 = $3161;
 HEAP32[$3162>>2] = $3158;
 $3163 = $4;
 $3164 = $3163;
 $3165 = HEAP32[$3164>>2]|0;
 $3166 = (($3163) + 4)|0;
 $3167 = $3166;
 $3168 = HEAP32[$3167>>2]|0;
 $3169 = (_bitshift64Ashr(($3165|0),($3168|0),21)|0);
 $3170 = (getTempRet0() | 0);
 $3171 = $28;
 $3172 = $3171;
 HEAP32[$3172>>2] = $3169;
 $3173 = (($3171) + 4)|0;
 $3174 = $3173;
 HEAP32[$3174>>2] = $3170;
 $3175 = $28;
 $3176 = $3175;
 $3177 = HEAP32[$3176>>2]|0;
 $3178 = (($3175) + 4)|0;
 $3179 = $3178;
 $3180 = HEAP32[$3179>>2]|0;
 $3181 = $5;
 $3182 = $3181;
 $3183 = HEAP32[$3182>>2]|0;
 $3184 = (($3181) + 4)|0;
 $3185 = $3184;
 $3186 = HEAP32[$3185>>2]|0;
 $3187 = (_i64Add(($3183|0),($3186|0),($3177|0),($3180|0))|0);
 $3188 = (getTempRet0() | 0);
 $3189 = $5;
 $3190 = $3189;
 HEAP32[$3190>>2] = $3187;
 $3191 = (($3189) + 4)|0;
 $3192 = $3191;
 HEAP32[$3192>>2] = $3188;
 $3193 = $28;
 $3194 = $3193;
 $3195 = HEAP32[$3194>>2]|0;
 $3196 = (($3193) + 4)|0;
 $3197 = $3196;
 $3198 = HEAP32[$3197>>2]|0;
 $3199 = (_bitshift64Shl(($3195|0),($3198|0),21)|0);
 $3200 = (getTempRet0() | 0);
 $3201 = $4;
 $3202 = $3201;
 $3203 = HEAP32[$3202>>2]|0;
 $3204 = (($3201) + 4)|0;
 $3205 = $3204;
 $3206 = HEAP32[$3205>>2]|0;
 $3207 = (_i64Subtract(($3203|0),($3206|0),($3199|0),($3200|0))|0);
 $3208 = (getTempRet0() | 0);
 $3209 = $4;
 $3210 = $3209;
 HEAP32[$3210>>2] = $3207;
 $3211 = (($3209) + 4)|0;
 $3212 = $3211;
 HEAP32[$3212>>2] = $3208;
 $3213 = $5;
 $3214 = $3213;
 $3215 = HEAP32[$3214>>2]|0;
 $3216 = (($3213) + 4)|0;
 $3217 = $3216;
 $3218 = HEAP32[$3217>>2]|0;
 $3219 = (_bitshift64Ashr(($3215|0),($3218|0),21)|0);
 $3220 = (getTempRet0() | 0);
 $3221 = $29;
 $3222 = $3221;
 HEAP32[$3222>>2] = $3219;
 $3223 = (($3221) + 4)|0;
 $3224 = $3223;
 HEAP32[$3224>>2] = $3220;
 $3225 = $29;
 $3226 = $3225;
 $3227 = HEAP32[$3226>>2]|0;
 $3228 = (($3225) + 4)|0;
 $3229 = $3228;
 $3230 = HEAP32[$3229>>2]|0;
 $3231 = $6;
 $3232 = $3231;
 $3233 = HEAP32[$3232>>2]|0;
 $3234 = (($3231) + 4)|0;
 $3235 = $3234;
 $3236 = HEAP32[$3235>>2]|0;
 $3237 = (_i64Add(($3233|0),($3236|0),($3227|0),($3230|0))|0);
 $3238 = (getTempRet0() | 0);
 $3239 = $6;
 $3240 = $3239;
 HEAP32[$3240>>2] = $3237;
 $3241 = (($3239) + 4)|0;
 $3242 = $3241;
 HEAP32[$3242>>2] = $3238;
 $3243 = $29;
 $3244 = $3243;
 $3245 = HEAP32[$3244>>2]|0;
 $3246 = (($3243) + 4)|0;
 $3247 = $3246;
 $3248 = HEAP32[$3247>>2]|0;
 $3249 = (_bitshift64Shl(($3245|0),($3248|0),21)|0);
 $3250 = (getTempRet0() | 0);
 $3251 = $5;
 $3252 = $3251;
 $3253 = HEAP32[$3252>>2]|0;
 $3254 = (($3251) + 4)|0;
 $3255 = $3254;
 $3256 = HEAP32[$3255>>2]|0;
 $3257 = (_i64Subtract(($3253|0),($3256|0),($3249|0),($3250|0))|0);
 $3258 = (getTempRet0() | 0);
 $3259 = $5;
 $3260 = $3259;
 HEAP32[$3260>>2] = $3257;
 $3261 = (($3259) + 4)|0;
 $3262 = $3261;
 HEAP32[$3262>>2] = $3258;
 $3263 = $6;
 $3264 = $3263;
 $3265 = HEAP32[$3264>>2]|0;
 $3266 = (($3263) + 4)|0;
 $3267 = $3266;
 $3268 = HEAP32[$3267>>2]|0;
 $3269 = (_bitshift64Ashr(($3265|0),($3268|0),21)|0);
 $3270 = (getTempRet0() | 0);
 $3271 = $30;
 $3272 = $3271;
 HEAP32[$3272>>2] = $3269;
 $3273 = (($3271) + 4)|0;
 $3274 = $3273;
 HEAP32[$3274>>2] = $3270;
 $3275 = $30;
 $3276 = $3275;
 $3277 = HEAP32[$3276>>2]|0;
 $3278 = (($3275) + 4)|0;
 $3279 = $3278;
 $3280 = HEAP32[$3279>>2]|0;
 $3281 = $7;
 $3282 = $3281;
 $3283 = HEAP32[$3282>>2]|0;
 $3284 = (($3281) + 4)|0;
 $3285 = $3284;
 $3286 = HEAP32[$3285>>2]|0;
 $3287 = (_i64Add(($3283|0),($3286|0),($3277|0),($3280|0))|0);
 $3288 = (getTempRet0() | 0);
 $3289 = $7;
 $3290 = $3289;
 HEAP32[$3290>>2] = $3287;
 $3291 = (($3289) + 4)|0;
 $3292 = $3291;
 HEAP32[$3292>>2] = $3288;
 $3293 = $30;
 $3294 = $3293;
 $3295 = HEAP32[$3294>>2]|0;
 $3296 = (($3293) + 4)|0;
 $3297 = $3296;
 $3298 = HEAP32[$3297>>2]|0;
 $3299 = (_bitshift64Shl(($3295|0),($3298|0),21)|0);
 $3300 = (getTempRet0() | 0);
 $3301 = $6;
 $3302 = $3301;
 $3303 = HEAP32[$3302>>2]|0;
 $3304 = (($3301) + 4)|0;
 $3305 = $3304;
 $3306 = HEAP32[$3305>>2]|0;
 $3307 = (_i64Subtract(($3303|0),($3306|0),($3299|0),($3300|0))|0);
 $3308 = (getTempRet0() | 0);
 $3309 = $6;
 $3310 = $3309;
 HEAP32[$3310>>2] = $3307;
 $3311 = (($3309) + 4)|0;
 $3312 = $3311;
 HEAP32[$3312>>2] = $3308;
 $3313 = $7;
 $3314 = $3313;
 $3315 = HEAP32[$3314>>2]|0;
 $3316 = (($3313) + 4)|0;
 $3317 = $3316;
 $3318 = HEAP32[$3317>>2]|0;
 $3319 = (_bitshift64Ashr(($3315|0),($3318|0),21)|0);
 $3320 = (getTempRet0() | 0);
 $3321 = $31;
 $3322 = $3321;
 HEAP32[$3322>>2] = $3319;
 $3323 = (($3321) + 4)|0;
 $3324 = $3323;
 HEAP32[$3324>>2] = $3320;
 $3325 = $31;
 $3326 = $3325;
 $3327 = HEAP32[$3326>>2]|0;
 $3328 = (($3325) + 4)|0;
 $3329 = $3328;
 $3330 = HEAP32[$3329>>2]|0;
 $3331 = $8;
 $3332 = $3331;
 $3333 = HEAP32[$3332>>2]|0;
 $3334 = (($3331) + 4)|0;
 $3335 = $3334;
 $3336 = HEAP32[$3335>>2]|0;
 $3337 = (_i64Add(($3333|0),($3336|0),($3327|0),($3330|0))|0);
 $3338 = (getTempRet0() | 0);
 $3339 = $8;
 $3340 = $3339;
 HEAP32[$3340>>2] = $3337;
 $3341 = (($3339) + 4)|0;
 $3342 = $3341;
 HEAP32[$3342>>2] = $3338;
 $3343 = $31;
 $3344 = $3343;
 $3345 = HEAP32[$3344>>2]|0;
 $3346 = (($3343) + 4)|0;
 $3347 = $3346;
 $3348 = HEAP32[$3347>>2]|0;
 $3349 = (_bitshift64Shl(($3345|0),($3348|0),21)|0);
 $3350 = (getTempRet0() | 0);
 $3351 = $7;
 $3352 = $3351;
 $3353 = HEAP32[$3352>>2]|0;
 $3354 = (($3351) + 4)|0;
 $3355 = $3354;
 $3356 = HEAP32[$3355>>2]|0;
 $3357 = (_i64Subtract(($3353|0),($3356|0),($3349|0),($3350|0))|0);
 $3358 = (getTempRet0() | 0);
 $3359 = $7;
 $3360 = $3359;
 HEAP32[$3360>>2] = $3357;
 $3361 = (($3359) + 4)|0;
 $3362 = $3361;
 HEAP32[$3362>>2] = $3358;
 $3363 = $8;
 $3364 = $3363;
 $3365 = HEAP32[$3364>>2]|0;
 $3366 = (($3363) + 4)|0;
 $3367 = $3366;
 $3368 = HEAP32[$3367>>2]|0;
 $3369 = (_bitshift64Ashr(($3365|0),($3368|0),21)|0);
 $3370 = (getTempRet0() | 0);
 $3371 = $32;
 $3372 = $3371;
 HEAP32[$3372>>2] = $3369;
 $3373 = (($3371) + 4)|0;
 $3374 = $3373;
 HEAP32[$3374>>2] = $3370;
 $3375 = $32;
 $3376 = $3375;
 $3377 = HEAP32[$3376>>2]|0;
 $3378 = (($3375) + 4)|0;
 $3379 = $3378;
 $3380 = HEAP32[$3379>>2]|0;
 $3381 = $9;
 $3382 = $3381;
 $3383 = HEAP32[$3382>>2]|0;
 $3384 = (($3381) + 4)|0;
 $3385 = $3384;
 $3386 = HEAP32[$3385>>2]|0;
 $3387 = (_i64Add(($3383|0),($3386|0),($3377|0),($3380|0))|0);
 $3388 = (getTempRet0() | 0);
 $3389 = $9;
 $3390 = $3389;
 HEAP32[$3390>>2] = $3387;
 $3391 = (($3389) + 4)|0;
 $3392 = $3391;
 HEAP32[$3392>>2] = $3388;
 $3393 = $32;
 $3394 = $3393;
 $3395 = HEAP32[$3394>>2]|0;
 $3396 = (($3393) + 4)|0;
 $3397 = $3396;
 $3398 = HEAP32[$3397>>2]|0;
 $3399 = (_bitshift64Shl(($3395|0),($3398|0),21)|0);
 $3400 = (getTempRet0() | 0);
 $3401 = $8;
 $3402 = $3401;
 $3403 = HEAP32[$3402>>2]|0;
 $3404 = (($3401) + 4)|0;
 $3405 = $3404;
 $3406 = HEAP32[$3405>>2]|0;
 $3407 = (_i64Subtract(($3403|0),($3406|0),($3399|0),($3400|0))|0);
 $3408 = (getTempRet0() | 0);
 $3409 = $8;
 $3410 = $3409;
 HEAP32[$3410>>2] = $3407;
 $3411 = (($3409) + 4)|0;
 $3412 = $3411;
 HEAP32[$3412>>2] = $3408;
 $3413 = $9;
 $3414 = $3413;
 $3415 = HEAP32[$3414>>2]|0;
 $3416 = (($3413) + 4)|0;
 $3417 = $3416;
 $3418 = HEAP32[$3417>>2]|0;
 $3419 = (_bitshift64Ashr(($3415|0),($3418|0),21)|0);
 $3420 = (getTempRet0() | 0);
 $3421 = $33;
 $3422 = $3421;
 HEAP32[$3422>>2] = $3419;
 $3423 = (($3421) + 4)|0;
 $3424 = $3423;
 HEAP32[$3424>>2] = $3420;
 $3425 = $33;
 $3426 = $3425;
 $3427 = HEAP32[$3426>>2]|0;
 $3428 = (($3425) + 4)|0;
 $3429 = $3428;
 $3430 = HEAP32[$3429>>2]|0;
 $3431 = $10;
 $3432 = $3431;
 $3433 = HEAP32[$3432>>2]|0;
 $3434 = (($3431) + 4)|0;
 $3435 = $3434;
 $3436 = HEAP32[$3435>>2]|0;
 $3437 = (_i64Add(($3433|0),($3436|0),($3427|0),($3430|0))|0);
 $3438 = (getTempRet0() | 0);
 $3439 = $10;
 $3440 = $3439;
 HEAP32[$3440>>2] = $3437;
 $3441 = (($3439) + 4)|0;
 $3442 = $3441;
 HEAP32[$3442>>2] = $3438;
 $3443 = $33;
 $3444 = $3443;
 $3445 = HEAP32[$3444>>2]|0;
 $3446 = (($3443) + 4)|0;
 $3447 = $3446;
 $3448 = HEAP32[$3447>>2]|0;
 $3449 = (_bitshift64Shl(($3445|0),($3448|0),21)|0);
 $3450 = (getTempRet0() | 0);
 $3451 = $9;
 $3452 = $3451;
 $3453 = HEAP32[$3452>>2]|0;
 $3454 = (($3451) + 4)|0;
 $3455 = $3454;
 $3456 = HEAP32[$3455>>2]|0;
 $3457 = (_i64Subtract(($3453|0),($3456|0),($3449|0),($3450|0))|0);
 $3458 = (getTempRet0() | 0);
 $3459 = $9;
 $3460 = $3459;
 HEAP32[$3460>>2] = $3457;
 $3461 = (($3459) + 4)|0;
 $3462 = $3461;
 HEAP32[$3462>>2] = $3458;
 $3463 = $10;
 $3464 = $3463;
 $3465 = HEAP32[$3464>>2]|0;
 $3466 = (($3463) + 4)|0;
 $3467 = $3466;
 $3468 = HEAP32[$3467>>2]|0;
 $3469 = (_bitshift64Ashr(($3465|0),($3468|0),21)|0);
 $3470 = (getTempRet0() | 0);
 $3471 = $34;
 $3472 = $3471;
 HEAP32[$3472>>2] = $3469;
 $3473 = (($3471) + 4)|0;
 $3474 = $3473;
 HEAP32[$3474>>2] = $3470;
 $3475 = $34;
 $3476 = $3475;
 $3477 = HEAP32[$3476>>2]|0;
 $3478 = (($3475) + 4)|0;
 $3479 = $3478;
 $3480 = HEAP32[$3479>>2]|0;
 $3481 = $11;
 $3482 = $3481;
 $3483 = HEAP32[$3482>>2]|0;
 $3484 = (($3481) + 4)|0;
 $3485 = $3484;
 $3486 = HEAP32[$3485>>2]|0;
 $3487 = (_i64Add(($3483|0),($3486|0),($3477|0),($3480|0))|0);
 $3488 = (getTempRet0() | 0);
 $3489 = $11;
 $3490 = $3489;
 HEAP32[$3490>>2] = $3487;
 $3491 = (($3489) + 4)|0;
 $3492 = $3491;
 HEAP32[$3492>>2] = $3488;
 $3493 = $34;
 $3494 = $3493;
 $3495 = HEAP32[$3494>>2]|0;
 $3496 = (($3493) + 4)|0;
 $3497 = $3496;
 $3498 = HEAP32[$3497>>2]|0;
 $3499 = (_bitshift64Shl(($3495|0),($3498|0),21)|0);
 $3500 = (getTempRet0() | 0);
 $3501 = $10;
 $3502 = $3501;
 $3503 = HEAP32[$3502>>2]|0;
 $3504 = (($3501) + 4)|0;
 $3505 = $3504;
 $3506 = HEAP32[$3505>>2]|0;
 $3507 = (_i64Subtract(($3503|0),($3506|0),($3499|0),($3500|0))|0);
 $3508 = (getTempRet0() | 0);
 $3509 = $10;
 $3510 = $3509;
 HEAP32[$3510>>2] = $3507;
 $3511 = (($3509) + 4)|0;
 $3512 = $3511;
 HEAP32[$3512>>2] = $3508;
 $3513 = $11;
 $3514 = $3513;
 $3515 = HEAP32[$3514>>2]|0;
 $3516 = (($3513) + 4)|0;
 $3517 = $3516;
 $3518 = HEAP32[$3517>>2]|0;
 $3519 = (_bitshift64Ashr(($3515|0),($3518|0),21)|0);
 $3520 = (getTempRet0() | 0);
 $3521 = $35;
 $3522 = $3521;
 HEAP32[$3522>>2] = $3519;
 $3523 = (($3521) + 4)|0;
 $3524 = $3523;
 HEAP32[$3524>>2] = $3520;
 $3525 = $35;
 $3526 = $3525;
 $3527 = HEAP32[$3526>>2]|0;
 $3528 = (($3525) + 4)|0;
 $3529 = $3528;
 $3530 = HEAP32[$3529>>2]|0;
 $3531 = $12;
 $3532 = $3531;
 $3533 = HEAP32[$3532>>2]|0;
 $3534 = (($3531) + 4)|0;
 $3535 = $3534;
 $3536 = HEAP32[$3535>>2]|0;
 $3537 = (_i64Add(($3533|0),($3536|0),($3527|0),($3530|0))|0);
 $3538 = (getTempRet0() | 0);
 $3539 = $12;
 $3540 = $3539;
 HEAP32[$3540>>2] = $3537;
 $3541 = (($3539) + 4)|0;
 $3542 = $3541;
 HEAP32[$3542>>2] = $3538;
 $3543 = $35;
 $3544 = $3543;
 $3545 = HEAP32[$3544>>2]|0;
 $3546 = (($3543) + 4)|0;
 $3547 = $3546;
 $3548 = HEAP32[$3547>>2]|0;
 $3549 = (_bitshift64Shl(($3545|0),($3548|0),21)|0);
 $3550 = (getTempRet0() | 0);
 $3551 = $11;
 $3552 = $3551;
 $3553 = HEAP32[$3552>>2]|0;
 $3554 = (($3551) + 4)|0;
 $3555 = $3554;
 $3556 = HEAP32[$3555>>2]|0;
 $3557 = (_i64Subtract(($3553|0),($3556|0),($3549|0),($3550|0))|0);
 $3558 = (getTempRet0() | 0);
 $3559 = $11;
 $3560 = $3559;
 HEAP32[$3560>>2] = $3557;
 $3561 = (($3559) + 4)|0;
 $3562 = $3561;
 HEAP32[$3562>>2] = $3558;
 $3563 = $12;
 $3564 = $3563;
 $3565 = HEAP32[$3564>>2]|0;
 $3566 = (($3563) + 4)|0;
 $3567 = $3566;
 $3568 = HEAP32[$3567>>2]|0;
 $3569 = (_bitshift64Ashr(($3565|0),($3568|0),21)|0);
 $3570 = (getTempRet0() | 0);
 $3571 = $36;
 $3572 = $3571;
 HEAP32[$3572>>2] = $3569;
 $3573 = (($3571) + 4)|0;
 $3574 = $3573;
 HEAP32[$3574>>2] = $3570;
 $3575 = $36;
 $3576 = $3575;
 $3577 = HEAP32[$3576>>2]|0;
 $3578 = (($3575) + 4)|0;
 $3579 = $3578;
 $3580 = HEAP32[$3579>>2]|0;
 $3581 = $13;
 $3582 = $3581;
 $3583 = HEAP32[$3582>>2]|0;
 $3584 = (($3581) + 4)|0;
 $3585 = $3584;
 $3586 = HEAP32[$3585>>2]|0;
 $3587 = (_i64Add(($3583|0),($3586|0),($3577|0),($3580|0))|0);
 $3588 = (getTempRet0() | 0);
 $3589 = $13;
 $3590 = $3589;
 HEAP32[$3590>>2] = $3587;
 $3591 = (($3589) + 4)|0;
 $3592 = $3591;
 HEAP32[$3592>>2] = $3588;
 $3593 = $36;
 $3594 = $3593;
 $3595 = HEAP32[$3594>>2]|0;
 $3596 = (($3593) + 4)|0;
 $3597 = $3596;
 $3598 = HEAP32[$3597>>2]|0;
 $3599 = (_bitshift64Shl(($3595|0),($3598|0),21)|0);
 $3600 = (getTempRet0() | 0);
 $3601 = $12;
 $3602 = $3601;
 $3603 = HEAP32[$3602>>2]|0;
 $3604 = (($3601) + 4)|0;
 $3605 = $3604;
 $3606 = HEAP32[$3605>>2]|0;
 $3607 = (_i64Subtract(($3603|0),($3606|0),($3599|0),($3600|0))|0);
 $3608 = (getTempRet0() | 0);
 $3609 = $12;
 $3610 = $3609;
 HEAP32[$3610>>2] = $3607;
 $3611 = (($3609) + 4)|0;
 $3612 = $3611;
 HEAP32[$3612>>2] = $3608;
 $3613 = $13;
 $3614 = $3613;
 $3615 = HEAP32[$3614>>2]|0;
 $3616 = (($3613) + 4)|0;
 $3617 = $3616;
 $3618 = HEAP32[$3617>>2]|0;
 $3619 = (_bitshift64Ashr(($3615|0),($3618|0),21)|0);
 $3620 = (getTempRet0() | 0);
 $3621 = $37;
 $3622 = $3621;
 HEAP32[$3622>>2] = $3619;
 $3623 = (($3621) + 4)|0;
 $3624 = $3623;
 HEAP32[$3624>>2] = $3620;
 $3625 = $37;
 $3626 = $3625;
 $3627 = HEAP32[$3626>>2]|0;
 $3628 = (($3625) + 4)|0;
 $3629 = $3628;
 $3630 = HEAP32[$3629>>2]|0;
 $3631 = $14;
 $3632 = $3631;
 $3633 = HEAP32[$3632>>2]|0;
 $3634 = (($3631) + 4)|0;
 $3635 = $3634;
 $3636 = HEAP32[$3635>>2]|0;
 $3637 = (_i64Add(($3633|0),($3636|0),($3627|0),($3630|0))|0);
 $3638 = (getTempRet0() | 0);
 $3639 = $14;
 $3640 = $3639;
 HEAP32[$3640>>2] = $3637;
 $3641 = (($3639) + 4)|0;
 $3642 = $3641;
 HEAP32[$3642>>2] = $3638;
 $3643 = $37;
 $3644 = $3643;
 $3645 = HEAP32[$3644>>2]|0;
 $3646 = (($3643) + 4)|0;
 $3647 = $3646;
 $3648 = HEAP32[$3647>>2]|0;
 $3649 = (_bitshift64Shl(($3645|0),($3648|0),21)|0);
 $3650 = (getTempRet0() | 0);
 $3651 = $13;
 $3652 = $3651;
 $3653 = HEAP32[$3652>>2]|0;
 $3654 = (($3651) + 4)|0;
 $3655 = $3654;
 $3656 = HEAP32[$3655>>2]|0;
 $3657 = (_i64Subtract(($3653|0),($3656|0),($3649|0),($3650|0))|0);
 $3658 = (getTempRet0() | 0);
 $3659 = $13;
 $3660 = $3659;
 HEAP32[$3660>>2] = $3657;
 $3661 = (($3659) + 4)|0;
 $3662 = $3661;
 HEAP32[$3662>>2] = $3658;
 $3663 = $14;
 $3664 = $3663;
 $3665 = HEAP32[$3664>>2]|0;
 $3666 = (($3663) + 4)|0;
 $3667 = $3666;
 $3668 = HEAP32[$3667>>2]|0;
 $3669 = (___muldi3(($3665|0),($3668|0),666643,0)|0);
 $3670 = (getTempRet0() | 0);
 $3671 = $2;
 $3672 = $3671;
 $3673 = HEAP32[$3672>>2]|0;
 $3674 = (($3671) + 4)|0;
 $3675 = $3674;
 $3676 = HEAP32[$3675>>2]|0;
 $3677 = (_i64Add(($3673|0),($3676|0),($3669|0),($3670|0))|0);
 $3678 = (getTempRet0() | 0);
 $3679 = $2;
 $3680 = $3679;
 HEAP32[$3680>>2] = $3677;
 $3681 = (($3679) + 4)|0;
 $3682 = $3681;
 HEAP32[$3682>>2] = $3678;
 $3683 = $14;
 $3684 = $3683;
 $3685 = HEAP32[$3684>>2]|0;
 $3686 = (($3683) + 4)|0;
 $3687 = $3686;
 $3688 = HEAP32[$3687>>2]|0;
 $3689 = (___muldi3(($3685|0),($3688|0),470296,0)|0);
 $3690 = (getTempRet0() | 0);
 $3691 = $3;
 $3692 = $3691;
 $3693 = HEAP32[$3692>>2]|0;
 $3694 = (($3691) + 4)|0;
 $3695 = $3694;
 $3696 = HEAP32[$3695>>2]|0;
 $3697 = (_i64Add(($3693|0),($3696|0),($3689|0),($3690|0))|0);
 $3698 = (getTempRet0() | 0);
 $3699 = $3;
 $3700 = $3699;
 HEAP32[$3700>>2] = $3697;
 $3701 = (($3699) + 4)|0;
 $3702 = $3701;
 HEAP32[$3702>>2] = $3698;
 $3703 = $14;
 $3704 = $3703;
 $3705 = HEAP32[$3704>>2]|0;
 $3706 = (($3703) + 4)|0;
 $3707 = $3706;
 $3708 = HEAP32[$3707>>2]|0;
 $3709 = (___muldi3(($3705|0),($3708|0),654183,0)|0);
 $3710 = (getTempRet0() | 0);
 $3711 = $4;
 $3712 = $3711;
 $3713 = HEAP32[$3712>>2]|0;
 $3714 = (($3711) + 4)|0;
 $3715 = $3714;
 $3716 = HEAP32[$3715>>2]|0;
 $3717 = (_i64Add(($3713|0),($3716|0),($3709|0),($3710|0))|0);
 $3718 = (getTempRet0() | 0);
 $3719 = $4;
 $3720 = $3719;
 HEAP32[$3720>>2] = $3717;
 $3721 = (($3719) + 4)|0;
 $3722 = $3721;
 HEAP32[$3722>>2] = $3718;
 $3723 = $14;
 $3724 = $3723;
 $3725 = HEAP32[$3724>>2]|0;
 $3726 = (($3723) + 4)|0;
 $3727 = $3726;
 $3728 = HEAP32[$3727>>2]|0;
 $3729 = (___muldi3(($3725|0),($3728|0),997805,0)|0);
 $3730 = (getTempRet0() | 0);
 $3731 = $5;
 $3732 = $3731;
 $3733 = HEAP32[$3732>>2]|0;
 $3734 = (($3731) + 4)|0;
 $3735 = $3734;
 $3736 = HEAP32[$3735>>2]|0;
 $3737 = (_i64Subtract(($3733|0),($3736|0),($3729|0),($3730|0))|0);
 $3738 = (getTempRet0() | 0);
 $3739 = $5;
 $3740 = $3739;
 HEAP32[$3740>>2] = $3737;
 $3741 = (($3739) + 4)|0;
 $3742 = $3741;
 HEAP32[$3742>>2] = $3738;
 $3743 = $14;
 $3744 = $3743;
 $3745 = HEAP32[$3744>>2]|0;
 $3746 = (($3743) + 4)|0;
 $3747 = $3746;
 $3748 = HEAP32[$3747>>2]|0;
 $3749 = (___muldi3(($3745|0),($3748|0),136657,0)|0);
 $3750 = (getTempRet0() | 0);
 $3751 = $6;
 $3752 = $3751;
 $3753 = HEAP32[$3752>>2]|0;
 $3754 = (($3751) + 4)|0;
 $3755 = $3754;
 $3756 = HEAP32[$3755>>2]|0;
 $3757 = (_i64Add(($3753|0),($3756|0),($3749|0),($3750|0))|0);
 $3758 = (getTempRet0() | 0);
 $3759 = $6;
 $3760 = $3759;
 HEAP32[$3760>>2] = $3757;
 $3761 = (($3759) + 4)|0;
 $3762 = $3761;
 HEAP32[$3762>>2] = $3758;
 $3763 = $14;
 $3764 = $3763;
 $3765 = HEAP32[$3764>>2]|0;
 $3766 = (($3763) + 4)|0;
 $3767 = $3766;
 $3768 = HEAP32[$3767>>2]|0;
 $3769 = (___muldi3(($3765|0),($3768|0),683901,0)|0);
 $3770 = (getTempRet0() | 0);
 $3771 = $7;
 $3772 = $3771;
 $3773 = HEAP32[$3772>>2]|0;
 $3774 = (($3771) + 4)|0;
 $3775 = $3774;
 $3776 = HEAP32[$3775>>2]|0;
 $3777 = (_i64Subtract(($3773|0),($3776|0),($3769|0),($3770|0))|0);
 $3778 = (getTempRet0() | 0);
 $3779 = $7;
 $3780 = $3779;
 HEAP32[$3780>>2] = $3777;
 $3781 = (($3779) + 4)|0;
 $3782 = $3781;
 HEAP32[$3782>>2] = $3778;
 $3783 = $2;
 $3784 = $3783;
 $3785 = HEAP32[$3784>>2]|0;
 $3786 = (($3783) + 4)|0;
 $3787 = $3786;
 $3788 = HEAP32[$3787>>2]|0;
 $3789 = (_bitshift64Ashr(($3785|0),($3788|0),21)|0);
 $3790 = (getTempRet0() | 0);
 $3791 = $26;
 $3792 = $3791;
 HEAP32[$3792>>2] = $3789;
 $3793 = (($3791) + 4)|0;
 $3794 = $3793;
 HEAP32[$3794>>2] = $3790;
 $3795 = $26;
 $3796 = $3795;
 $3797 = HEAP32[$3796>>2]|0;
 $3798 = (($3795) + 4)|0;
 $3799 = $3798;
 $3800 = HEAP32[$3799>>2]|0;
 $3801 = $3;
 $3802 = $3801;
 $3803 = HEAP32[$3802>>2]|0;
 $3804 = (($3801) + 4)|0;
 $3805 = $3804;
 $3806 = HEAP32[$3805>>2]|0;
 $3807 = (_i64Add(($3803|0),($3806|0),($3797|0),($3800|0))|0);
 $3808 = (getTempRet0() | 0);
 $3809 = $3;
 $3810 = $3809;
 HEAP32[$3810>>2] = $3807;
 $3811 = (($3809) + 4)|0;
 $3812 = $3811;
 HEAP32[$3812>>2] = $3808;
 $3813 = $26;
 $3814 = $3813;
 $3815 = HEAP32[$3814>>2]|0;
 $3816 = (($3813) + 4)|0;
 $3817 = $3816;
 $3818 = HEAP32[$3817>>2]|0;
 $3819 = (_bitshift64Shl(($3815|0),($3818|0),21)|0);
 $3820 = (getTempRet0() | 0);
 $3821 = $2;
 $3822 = $3821;
 $3823 = HEAP32[$3822>>2]|0;
 $3824 = (($3821) + 4)|0;
 $3825 = $3824;
 $3826 = HEAP32[$3825>>2]|0;
 $3827 = (_i64Subtract(($3823|0),($3826|0),($3819|0),($3820|0))|0);
 $3828 = (getTempRet0() | 0);
 $3829 = $2;
 $3830 = $3829;
 HEAP32[$3830>>2] = $3827;
 $3831 = (($3829) + 4)|0;
 $3832 = $3831;
 HEAP32[$3832>>2] = $3828;
 $3833 = $3;
 $3834 = $3833;
 $3835 = HEAP32[$3834>>2]|0;
 $3836 = (($3833) + 4)|0;
 $3837 = $3836;
 $3838 = HEAP32[$3837>>2]|0;
 $3839 = (_bitshift64Ashr(($3835|0),($3838|0),21)|0);
 $3840 = (getTempRet0() | 0);
 $3841 = $27;
 $3842 = $3841;
 HEAP32[$3842>>2] = $3839;
 $3843 = (($3841) + 4)|0;
 $3844 = $3843;
 HEAP32[$3844>>2] = $3840;
 $3845 = $27;
 $3846 = $3845;
 $3847 = HEAP32[$3846>>2]|0;
 $3848 = (($3845) + 4)|0;
 $3849 = $3848;
 $3850 = HEAP32[$3849>>2]|0;
 $3851 = $4;
 $3852 = $3851;
 $3853 = HEAP32[$3852>>2]|0;
 $3854 = (($3851) + 4)|0;
 $3855 = $3854;
 $3856 = HEAP32[$3855>>2]|0;
 $3857 = (_i64Add(($3853|0),($3856|0),($3847|0),($3850|0))|0);
 $3858 = (getTempRet0() | 0);
 $3859 = $4;
 $3860 = $3859;
 HEAP32[$3860>>2] = $3857;
 $3861 = (($3859) + 4)|0;
 $3862 = $3861;
 HEAP32[$3862>>2] = $3858;
 $3863 = $27;
 $3864 = $3863;
 $3865 = HEAP32[$3864>>2]|0;
 $3866 = (($3863) + 4)|0;
 $3867 = $3866;
 $3868 = HEAP32[$3867>>2]|0;
 $3869 = (_bitshift64Shl(($3865|0),($3868|0),21)|0);
 $3870 = (getTempRet0() | 0);
 $3871 = $3;
 $3872 = $3871;
 $3873 = HEAP32[$3872>>2]|0;
 $3874 = (($3871) + 4)|0;
 $3875 = $3874;
 $3876 = HEAP32[$3875>>2]|0;
 $3877 = (_i64Subtract(($3873|0),($3876|0),($3869|0),($3870|0))|0);
 $3878 = (getTempRet0() | 0);
 $3879 = $3;
 $3880 = $3879;
 HEAP32[$3880>>2] = $3877;
 $3881 = (($3879) + 4)|0;
 $3882 = $3881;
 HEAP32[$3882>>2] = $3878;
 $3883 = $4;
 $3884 = $3883;
 $3885 = HEAP32[$3884>>2]|0;
 $3886 = (($3883) + 4)|0;
 $3887 = $3886;
 $3888 = HEAP32[$3887>>2]|0;
 $3889 = (_bitshift64Ashr(($3885|0),($3888|0),21)|0);
 $3890 = (getTempRet0() | 0);
 $3891 = $28;
 $3892 = $3891;
 HEAP32[$3892>>2] = $3889;
 $3893 = (($3891) + 4)|0;
 $3894 = $3893;
 HEAP32[$3894>>2] = $3890;
 $3895 = $28;
 $3896 = $3895;
 $3897 = HEAP32[$3896>>2]|0;
 $3898 = (($3895) + 4)|0;
 $3899 = $3898;
 $3900 = HEAP32[$3899>>2]|0;
 $3901 = $5;
 $3902 = $3901;
 $3903 = HEAP32[$3902>>2]|0;
 $3904 = (($3901) + 4)|0;
 $3905 = $3904;
 $3906 = HEAP32[$3905>>2]|0;
 $3907 = (_i64Add(($3903|0),($3906|0),($3897|0),($3900|0))|0);
 $3908 = (getTempRet0() | 0);
 $3909 = $5;
 $3910 = $3909;
 HEAP32[$3910>>2] = $3907;
 $3911 = (($3909) + 4)|0;
 $3912 = $3911;
 HEAP32[$3912>>2] = $3908;
 $3913 = $28;
 $3914 = $3913;
 $3915 = HEAP32[$3914>>2]|0;
 $3916 = (($3913) + 4)|0;
 $3917 = $3916;
 $3918 = HEAP32[$3917>>2]|0;
 $3919 = (_bitshift64Shl(($3915|0),($3918|0),21)|0);
 $3920 = (getTempRet0() | 0);
 $3921 = $4;
 $3922 = $3921;
 $3923 = HEAP32[$3922>>2]|0;
 $3924 = (($3921) + 4)|0;
 $3925 = $3924;
 $3926 = HEAP32[$3925>>2]|0;
 $3927 = (_i64Subtract(($3923|0),($3926|0),($3919|0),($3920|0))|0);
 $3928 = (getTempRet0() | 0);
 $3929 = $4;
 $3930 = $3929;
 HEAP32[$3930>>2] = $3927;
 $3931 = (($3929) + 4)|0;
 $3932 = $3931;
 HEAP32[$3932>>2] = $3928;
 $3933 = $5;
 $3934 = $3933;
 $3935 = HEAP32[$3934>>2]|0;
 $3936 = (($3933) + 4)|0;
 $3937 = $3936;
 $3938 = HEAP32[$3937>>2]|0;
 $3939 = (_bitshift64Ashr(($3935|0),($3938|0),21)|0);
 $3940 = (getTempRet0() | 0);
 $3941 = $29;
 $3942 = $3941;
 HEAP32[$3942>>2] = $3939;
 $3943 = (($3941) + 4)|0;
 $3944 = $3943;
 HEAP32[$3944>>2] = $3940;
 $3945 = $29;
 $3946 = $3945;
 $3947 = HEAP32[$3946>>2]|0;
 $3948 = (($3945) + 4)|0;
 $3949 = $3948;
 $3950 = HEAP32[$3949>>2]|0;
 $3951 = $6;
 $3952 = $3951;
 $3953 = HEAP32[$3952>>2]|0;
 $3954 = (($3951) + 4)|0;
 $3955 = $3954;
 $3956 = HEAP32[$3955>>2]|0;
 $3957 = (_i64Add(($3953|0),($3956|0),($3947|0),($3950|0))|0);
 $3958 = (getTempRet0() | 0);
 $3959 = $6;
 $3960 = $3959;
 HEAP32[$3960>>2] = $3957;
 $3961 = (($3959) + 4)|0;
 $3962 = $3961;
 HEAP32[$3962>>2] = $3958;
 $3963 = $29;
 $3964 = $3963;
 $3965 = HEAP32[$3964>>2]|0;
 $3966 = (($3963) + 4)|0;
 $3967 = $3966;
 $3968 = HEAP32[$3967>>2]|0;
 $3969 = (_bitshift64Shl(($3965|0),($3968|0),21)|0);
 $3970 = (getTempRet0() | 0);
 $3971 = $5;
 $3972 = $3971;
 $3973 = HEAP32[$3972>>2]|0;
 $3974 = (($3971) + 4)|0;
 $3975 = $3974;
 $3976 = HEAP32[$3975>>2]|0;
 $3977 = (_i64Subtract(($3973|0),($3976|0),($3969|0),($3970|0))|0);
 $3978 = (getTempRet0() | 0);
 $3979 = $5;
 $3980 = $3979;
 HEAP32[$3980>>2] = $3977;
 $3981 = (($3979) + 4)|0;
 $3982 = $3981;
 HEAP32[$3982>>2] = $3978;
 $3983 = $6;
 $3984 = $3983;
 $3985 = HEAP32[$3984>>2]|0;
 $3986 = (($3983) + 4)|0;
 $3987 = $3986;
 $3988 = HEAP32[$3987>>2]|0;
 $3989 = (_bitshift64Ashr(($3985|0),($3988|0),21)|0);
 $3990 = (getTempRet0() | 0);
 $3991 = $30;
 $3992 = $3991;
 HEAP32[$3992>>2] = $3989;
 $3993 = (($3991) + 4)|0;
 $3994 = $3993;
 HEAP32[$3994>>2] = $3990;
 $3995 = $30;
 $3996 = $3995;
 $3997 = HEAP32[$3996>>2]|0;
 $3998 = (($3995) + 4)|0;
 $3999 = $3998;
 $4000 = HEAP32[$3999>>2]|0;
 $4001 = $7;
 $4002 = $4001;
 $4003 = HEAP32[$4002>>2]|0;
 $4004 = (($4001) + 4)|0;
 $4005 = $4004;
 $4006 = HEAP32[$4005>>2]|0;
 $4007 = (_i64Add(($4003|0),($4006|0),($3997|0),($4000|0))|0);
 $4008 = (getTempRet0() | 0);
 $4009 = $7;
 $4010 = $4009;
 HEAP32[$4010>>2] = $4007;
 $4011 = (($4009) + 4)|0;
 $4012 = $4011;
 HEAP32[$4012>>2] = $4008;
 $4013 = $30;
 $4014 = $4013;
 $4015 = HEAP32[$4014>>2]|0;
 $4016 = (($4013) + 4)|0;
 $4017 = $4016;
 $4018 = HEAP32[$4017>>2]|0;
 $4019 = (_bitshift64Shl(($4015|0),($4018|0),21)|0);
 $4020 = (getTempRet0() | 0);
 $4021 = $6;
 $4022 = $4021;
 $4023 = HEAP32[$4022>>2]|0;
 $4024 = (($4021) + 4)|0;
 $4025 = $4024;
 $4026 = HEAP32[$4025>>2]|0;
 $4027 = (_i64Subtract(($4023|0),($4026|0),($4019|0),($4020|0))|0);
 $4028 = (getTempRet0() | 0);
 $4029 = $6;
 $4030 = $4029;
 HEAP32[$4030>>2] = $4027;
 $4031 = (($4029) + 4)|0;
 $4032 = $4031;
 HEAP32[$4032>>2] = $4028;
 $4033 = $7;
 $4034 = $4033;
 $4035 = HEAP32[$4034>>2]|0;
 $4036 = (($4033) + 4)|0;
 $4037 = $4036;
 $4038 = HEAP32[$4037>>2]|0;
 $4039 = (_bitshift64Ashr(($4035|0),($4038|0),21)|0);
 $4040 = (getTempRet0() | 0);
 $4041 = $31;
 $4042 = $4041;
 HEAP32[$4042>>2] = $4039;
 $4043 = (($4041) + 4)|0;
 $4044 = $4043;
 HEAP32[$4044>>2] = $4040;
 $4045 = $31;
 $4046 = $4045;
 $4047 = HEAP32[$4046>>2]|0;
 $4048 = (($4045) + 4)|0;
 $4049 = $4048;
 $4050 = HEAP32[$4049>>2]|0;
 $4051 = $8;
 $4052 = $4051;
 $4053 = HEAP32[$4052>>2]|0;
 $4054 = (($4051) + 4)|0;
 $4055 = $4054;
 $4056 = HEAP32[$4055>>2]|0;
 $4057 = (_i64Add(($4053|0),($4056|0),($4047|0),($4050|0))|0);
 $4058 = (getTempRet0() | 0);
 $4059 = $8;
 $4060 = $4059;
 HEAP32[$4060>>2] = $4057;
 $4061 = (($4059) + 4)|0;
 $4062 = $4061;
 HEAP32[$4062>>2] = $4058;
 $4063 = $31;
 $4064 = $4063;
 $4065 = HEAP32[$4064>>2]|0;
 $4066 = (($4063) + 4)|0;
 $4067 = $4066;
 $4068 = HEAP32[$4067>>2]|0;
 $4069 = (_bitshift64Shl(($4065|0),($4068|0),21)|0);
 $4070 = (getTempRet0() | 0);
 $4071 = $7;
 $4072 = $4071;
 $4073 = HEAP32[$4072>>2]|0;
 $4074 = (($4071) + 4)|0;
 $4075 = $4074;
 $4076 = HEAP32[$4075>>2]|0;
 $4077 = (_i64Subtract(($4073|0),($4076|0),($4069|0),($4070|0))|0);
 $4078 = (getTempRet0() | 0);
 $4079 = $7;
 $4080 = $4079;
 HEAP32[$4080>>2] = $4077;
 $4081 = (($4079) + 4)|0;
 $4082 = $4081;
 HEAP32[$4082>>2] = $4078;
 $4083 = $8;
 $4084 = $4083;
 $4085 = HEAP32[$4084>>2]|0;
 $4086 = (($4083) + 4)|0;
 $4087 = $4086;
 $4088 = HEAP32[$4087>>2]|0;
 $4089 = (_bitshift64Ashr(($4085|0),($4088|0),21)|0);
 $4090 = (getTempRet0() | 0);
 $4091 = $32;
 $4092 = $4091;
 HEAP32[$4092>>2] = $4089;
 $4093 = (($4091) + 4)|0;
 $4094 = $4093;
 HEAP32[$4094>>2] = $4090;
 $4095 = $32;
 $4096 = $4095;
 $4097 = HEAP32[$4096>>2]|0;
 $4098 = (($4095) + 4)|0;
 $4099 = $4098;
 $4100 = HEAP32[$4099>>2]|0;
 $4101 = $9;
 $4102 = $4101;
 $4103 = HEAP32[$4102>>2]|0;
 $4104 = (($4101) + 4)|0;
 $4105 = $4104;
 $4106 = HEAP32[$4105>>2]|0;
 $4107 = (_i64Add(($4103|0),($4106|0),($4097|0),($4100|0))|0);
 $4108 = (getTempRet0() | 0);
 $4109 = $9;
 $4110 = $4109;
 HEAP32[$4110>>2] = $4107;
 $4111 = (($4109) + 4)|0;
 $4112 = $4111;
 HEAP32[$4112>>2] = $4108;
 $4113 = $32;
 $4114 = $4113;
 $4115 = HEAP32[$4114>>2]|0;
 $4116 = (($4113) + 4)|0;
 $4117 = $4116;
 $4118 = HEAP32[$4117>>2]|0;
 $4119 = (_bitshift64Shl(($4115|0),($4118|0),21)|0);
 $4120 = (getTempRet0() | 0);
 $4121 = $8;
 $4122 = $4121;
 $4123 = HEAP32[$4122>>2]|0;
 $4124 = (($4121) + 4)|0;
 $4125 = $4124;
 $4126 = HEAP32[$4125>>2]|0;
 $4127 = (_i64Subtract(($4123|0),($4126|0),($4119|0),($4120|0))|0);
 $4128 = (getTempRet0() | 0);
 $4129 = $8;
 $4130 = $4129;
 HEAP32[$4130>>2] = $4127;
 $4131 = (($4129) + 4)|0;
 $4132 = $4131;
 HEAP32[$4132>>2] = $4128;
 $4133 = $9;
 $4134 = $4133;
 $4135 = HEAP32[$4134>>2]|0;
 $4136 = (($4133) + 4)|0;
 $4137 = $4136;
 $4138 = HEAP32[$4137>>2]|0;
 $4139 = (_bitshift64Ashr(($4135|0),($4138|0),21)|0);
 $4140 = (getTempRet0() | 0);
 $4141 = $33;
 $4142 = $4141;
 HEAP32[$4142>>2] = $4139;
 $4143 = (($4141) + 4)|0;
 $4144 = $4143;
 HEAP32[$4144>>2] = $4140;
 $4145 = $33;
 $4146 = $4145;
 $4147 = HEAP32[$4146>>2]|0;
 $4148 = (($4145) + 4)|0;
 $4149 = $4148;
 $4150 = HEAP32[$4149>>2]|0;
 $4151 = $10;
 $4152 = $4151;
 $4153 = HEAP32[$4152>>2]|0;
 $4154 = (($4151) + 4)|0;
 $4155 = $4154;
 $4156 = HEAP32[$4155>>2]|0;
 $4157 = (_i64Add(($4153|0),($4156|0),($4147|0),($4150|0))|0);
 $4158 = (getTempRet0() | 0);
 $4159 = $10;
 $4160 = $4159;
 HEAP32[$4160>>2] = $4157;
 $4161 = (($4159) + 4)|0;
 $4162 = $4161;
 HEAP32[$4162>>2] = $4158;
 $4163 = $33;
 $4164 = $4163;
 $4165 = HEAP32[$4164>>2]|0;
 $4166 = (($4163) + 4)|0;
 $4167 = $4166;
 $4168 = HEAP32[$4167>>2]|0;
 $4169 = (_bitshift64Shl(($4165|0),($4168|0),21)|0);
 $4170 = (getTempRet0() | 0);
 $4171 = $9;
 $4172 = $4171;
 $4173 = HEAP32[$4172>>2]|0;
 $4174 = (($4171) + 4)|0;
 $4175 = $4174;
 $4176 = HEAP32[$4175>>2]|0;
 $4177 = (_i64Subtract(($4173|0),($4176|0),($4169|0),($4170|0))|0);
 $4178 = (getTempRet0() | 0);
 $4179 = $9;
 $4180 = $4179;
 HEAP32[$4180>>2] = $4177;
 $4181 = (($4179) + 4)|0;
 $4182 = $4181;
 HEAP32[$4182>>2] = $4178;
 $4183 = $10;
 $4184 = $4183;
 $4185 = HEAP32[$4184>>2]|0;
 $4186 = (($4183) + 4)|0;
 $4187 = $4186;
 $4188 = HEAP32[$4187>>2]|0;
 $4189 = (_bitshift64Ashr(($4185|0),($4188|0),21)|0);
 $4190 = (getTempRet0() | 0);
 $4191 = $34;
 $4192 = $4191;
 HEAP32[$4192>>2] = $4189;
 $4193 = (($4191) + 4)|0;
 $4194 = $4193;
 HEAP32[$4194>>2] = $4190;
 $4195 = $34;
 $4196 = $4195;
 $4197 = HEAP32[$4196>>2]|0;
 $4198 = (($4195) + 4)|0;
 $4199 = $4198;
 $4200 = HEAP32[$4199>>2]|0;
 $4201 = $11;
 $4202 = $4201;
 $4203 = HEAP32[$4202>>2]|0;
 $4204 = (($4201) + 4)|0;
 $4205 = $4204;
 $4206 = HEAP32[$4205>>2]|0;
 $4207 = (_i64Add(($4203|0),($4206|0),($4197|0),($4200|0))|0);
 $4208 = (getTempRet0() | 0);
 $4209 = $11;
 $4210 = $4209;
 HEAP32[$4210>>2] = $4207;
 $4211 = (($4209) + 4)|0;
 $4212 = $4211;
 HEAP32[$4212>>2] = $4208;
 $4213 = $34;
 $4214 = $4213;
 $4215 = HEAP32[$4214>>2]|0;
 $4216 = (($4213) + 4)|0;
 $4217 = $4216;
 $4218 = HEAP32[$4217>>2]|0;
 $4219 = (_bitshift64Shl(($4215|0),($4218|0),21)|0);
 $4220 = (getTempRet0() | 0);
 $4221 = $10;
 $4222 = $4221;
 $4223 = HEAP32[$4222>>2]|0;
 $4224 = (($4221) + 4)|0;
 $4225 = $4224;
 $4226 = HEAP32[$4225>>2]|0;
 $4227 = (_i64Subtract(($4223|0),($4226|0),($4219|0),($4220|0))|0);
 $4228 = (getTempRet0() | 0);
 $4229 = $10;
 $4230 = $4229;
 HEAP32[$4230>>2] = $4227;
 $4231 = (($4229) + 4)|0;
 $4232 = $4231;
 HEAP32[$4232>>2] = $4228;
 $4233 = $11;
 $4234 = $4233;
 $4235 = HEAP32[$4234>>2]|0;
 $4236 = (($4233) + 4)|0;
 $4237 = $4236;
 $4238 = HEAP32[$4237>>2]|0;
 $4239 = (_bitshift64Ashr(($4235|0),($4238|0),21)|0);
 $4240 = (getTempRet0() | 0);
 $4241 = $35;
 $4242 = $4241;
 HEAP32[$4242>>2] = $4239;
 $4243 = (($4241) + 4)|0;
 $4244 = $4243;
 HEAP32[$4244>>2] = $4240;
 $4245 = $35;
 $4246 = $4245;
 $4247 = HEAP32[$4246>>2]|0;
 $4248 = (($4245) + 4)|0;
 $4249 = $4248;
 $4250 = HEAP32[$4249>>2]|0;
 $4251 = $12;
 $4252 = $4251;
 $4253 = HEAP32[$4252>>2]|0;
 $4254 = (($4251) + 4)|0;
 $4255 = $4254;
 $4256 = HEAP32[$4255>>2]|0;
 $4257 = (_i64Add(($4253|0),($4256|0),($4247|0),($4250|0))|0);
 $4258 = (getTempRet0() | 0);
 $4259 = $12;
 $4260 = $4259;
 HEAP32[$4260>>2] = $4257;
 $4261 = (($4259) + 4)|0;
 $4262 = $4261;
 HEAP32[$4262>>2] = $4258;
 $4263 = $35;
 $4264 = $4263;
 $4265 = HEAP32[$4264>>2]|0;
 $4266 = (($4263) + 4)|0;
 $4267 = $4266;
 $4268 = HEAP32[$4267>>2]|0;
 $4269 = (_bitshift64Shl(($4265|0),($4268|0),21)|0);
 $4270 = (getTempRet0() | 0);
 $4271 = $11;
 $4272 = $4271;
 $4273 = HEAP32[$4272>>2]|0;
 $4274 = (($4271) + 4)|0;
 $4275 = $4274;
 $4276 = HEAP32[$4275>>2]|0;
 $4277 = (_i64Subtract(($4273|0),($4276|0),($4269|0),($4270|0))|0);
 $4278 = (getTempRet0() | 0);
 $4279 = $11;
 $4280 = $4279;
 HEAP32[$4280>>2] = $4277;
 $4281 = (($4279) + 4)|0;
 $4282 = $4281;
 HEAP32[$4282>>2] = $4278;
 $4283 = $12;
 $4284 = $4283;
 $4285 = HEAP32[$4284>>2]|0;
 $4286 = (($4283) + 4)|0;
 $4287 = $4286;
 $4288 = HEAP32[$4287>>2]|0;
 $4289 = (_bitshift64Ashr(($4285|0),($4288|0),21)|0);
 $4290 = (getTempRet0() | 0);
 $4291 = $36;
 $4292 = $4291;
 HEAP32[$4292>>2] = $4289;
 $4293 = (($4291) + 4)|0;
 $4294 = $4293;
 HEAP32[$4294>>2] = $4290;
 $4295 = $36;
 $4296 = $4295;
 $4297 = HEAP32[$4296>>2]|0;
 $4298 = (($4295) + 4)|0;
 $4299 = $4298;
 $4300 = HEAP32[$4299>>2]|0;
 $4301 = $13;
 $4302 = $4301;
 $4303 = HEAP32[$4302>>2]|0;
 $4304 = (($4301) + 4)|0;
 $4305 = $4304;
 $4306 = HEAP32[$4305>>2]|0;
 $4307 = (_i64Add(($4303|0),($4306|0),($4297|0),($4300|0))|0);
 $4308 = (getTempRet0() | 0);
 $4309 = $13;
 $4310 = $4309;
 HEAP32[$4310>>2] = $4307;
 $4311 = (($4309) + 4)|0;
 $4312 = $4311;
 HEAP32[$4312>>2] = $4308;
 $4313 = $36;
 $4314 = $4313;
 $4315 = HEAP32[$4314>>2]|0;
 $4316 = (($4313) + 4)|0;
 $4317 = $4316;
 $4318 = HEAP32[$4317>>2]|0;
 $4319 = (_bitshift64Shl(($4315|0),($4318|0),21)|0);
 $4320 = (getTempRet0() | 0);
 $4321 = $12;
 $4322 = $4321;
 $4323 = HEAP32[$4322>>2]|0;
 $4324 = (($4321) + 4)|0;
 $4325 = $4324;
 $4326 = HEAP32[$4325>>2]|0;
 $4327 = (_i64Subtract(($4323|0),($4326|0),($4319|0),($4320|0))|0);
 $4328 = (getTempRet0() | 0);
 $4329 = $12;
 $4330 = $4329;
 HEAP32[$4330>>2] = $4327;
 $4331 = (($4329) + 4)|0;
 $4332 = $4331;
 HEAP32[$4332>>2] = $4328;
 $4333 = $2;
 $4334 = $4333;
 $4335 = HEAP32[$4334>>2]|0;
 $4336 = (($4333) + 4)|0;
 $4337 = $4336;
 $4338 = HEAP32[$4337>>2]|0;
 $4339 = (_bitshift64Ashr(($4335|0),($4338|0),0)|0);
 $4340 = (getTempRet0() | 0);
 $4341 = $4339&255;
 $4342 = $1;
 HEAP8[$4342>>0] = $4341;
 $4343 = $2;
 $4344 = $4343;
 $4345 = HEAP32[$4344>>2]|0;
 $4346 = (($4343) + 4)|0;
 $4347 = $4346;
 $4348 = HEAP32[$4347>>2]|0;
 $4349 = (_bitshift64Ashr(($4345|0),($4348|0),8)|0);
 $4350 = (getTempRet0() | 0);
 $4351 = $4349&255;
 $4352 = $1;
 $4353 = ((($4352)) + 1|0);
 HEAP8[$4353>>0] = $4351;
 $4354 = $2;
 $4355 = $4354;
 $4356 = HEAP32[$4355>>2]|0;
 $4357 = (($4354) + 4)|0;
 $4358 = $4357;
 $4359 = HEAP32[$4358>>2]|0;
 $4360 = (_bitshift64Ashr(($4356|0),($4359|0),16)|0);
 $4361 = (getTempRet0() | 0);
 $4362 = $3;
 $4363 = $4362;
 $4364 = HEAP32[$4363>>2]|0;
 $4365 = (($4362) + 4)|0;
 $4366 = $4365;
 $4367 = HEAP32[$4366>>2]|0;
 $4368 = (_bitshift64Shl(($4364|0),($4367|0),5)|0);
 $4369 = (getTempRet0() | 0);
 $4370 = $4360 | $4368;
 $4361 | $4369;
 $4371 = $4370&255;
 $4372 = $1;
 $4373 = ((($4372)) + 2|0);
 HEAP8[$4373>>0] = $4371;
 $4374 = $3;
 $4375 = $4374;
 $4376 = HEAP32[$4375>>2]|0;
 $4377 = (($4374) + 4)|0;
 $4378 = $4377;
 $4379 = HEAP32[$4378>>2]|0;
 $4380 = (_bitshift64Ashr(($4376|0),($4379|0),3)|0);
 $4381 = (getTempRet0() | 0);
 $4382 = $4380&255;
 $4383 = $1;
 $4384 = ((($4383)) + 3|0);
 HEAP8[$4384>>0] = $4382;
 $4385 = $3;
 $4386 = $4385;
 $4387 = HEAP32[$4386>>2]|0;
 $4388 = (($4385) + 4)|0;
 $4389 = $4388;
 $4390 = HEAP32[$4389>>2]|0;
 $4391 = (_bitshift64Ashr(($4387|0),($4390|0),11)|0);
 $4392 = (getTempRet0() | 0);
 $4393 = $4391&255;
 $4394 = $1;
 $4395 = ((($4394)) + 4|0);
 HEAP8[$4395>>0] = $4393;
 $4396 = $3;
 $4397 = $4396;
 $4398 = HEAP32[$4397>>2]|0;
 $4399 = (($4396) + 4)|0;
 $4400 = $4399;
 $4401 = HEAP32[$4400>>2]|0;
 $4402 = (_bitshift64Ashr(($4398|0),($4401|0),19)|0);
 $4403 = (getTempRet0() | 0);
 $4404 = $4;
 $4405 = $4404;
 $4406 = HEAP32[$4405>>2]|0;
 $4407 = (($4404) + 4)|0;
 $4408 = $4407;
 $4409 = HEAP32[$4408>>2]|0;
 $4410 = (_bitshift64Shl(($4406|0),($4409|0),2)|0);
 $4411 = (getTempRet0() | 0);
 $4412 = $4402 | $4410;
 $4403 | $4411;
 $4413 = $4412&255;
 $4414 = $1;
 $4415 = ((($4414)) + 5|0);
 HEAP8[$4415>>0] = $4413;
 $4416 = $4;
 $4417 = $4416;
 $4418 = HEAP32[$4417>>2]|0;
 $4419 = (($4416) + 4)|0;
 $4420 = $4419;
 $4421 = HEAP32[$4420>>2]|0;
 $4422 = (_bitshift64Ashr(($4418|0),($4421|0),6)|0);
 $4423 = (getTempRet0() | 0);
 $4424 = $4422&255;
 $4425 = $1;
 $4426 = ((($4425)) + 6|0);
 HEAP8[$4426>>0] = $4424;
 $4427 = $4;
 $4428 = $4427;
 $4429 = HEAP32[$4428>>2]|0;
 $4430 = (($4427) + 4)|0;
 $4431 = $4430;
 $4432 = HEAP32[$4431>>2]|0;
 $4433 = (_bitshift64Ashr(($4429|0),($4432|0),14)|0);
 $4434 = (getTempRet0() | 0);
 $4435 = $5;
 $4436 = $4435;
 $4437 = HEAP32[$4436>>2]|0;
 $4438 = (($4435) + 4)|0;
 $4439 = $4438;
 $4440 = HEAP32[$4439>>2]|0;
 $4441 = (_bitshift64Shl(($4437|0),($4440|0),7)|0);
 $4442 = (getTempRet0() | 0);
 $4443 = $4433 | $4441;
 $4434 | $4442;
 $4444 = $4443&255;
 $4445 = $1;
 $4446 = ((($4445)) + 7|0);
 HEAP8[$4446>>0] = $4444;
 $4447 = $5;
 $4448 = $4447;
 $4449 = HEAP32[$4448>>2]|0;
 $4450 = (($4447) + 4)|0;
 $4451 = $4450;
 $4452 = HEAP32[$4451>>2]|0;
 $4453 = (_bitshift64Ashr(($4449|0),($4452|0),1)|0);
 $4454 = (getTempRet0() | 0);
 $4455 = $4453&255;
 $4456 = $1;
 $4457 = ((($4456)) + 8|0);
 HEAP8[$4457>>0] = $4455;
 $4458 = $5;
 $4459 = $4458;
 $4460 = HEAP32[$4459>>2]|0;
 $4461 = (($4458) + 4)|0;
 $4462 = $4461;
 $4463 = HEAP32[$4462>>2]|0;
 $4464 = (_bitshift64Ashr(($4460|0),($4463|0),9)|0);
 $4465 = (getTempRet0() | 0);
 $4466 = $4464&255;
 $4467 = $1;
 $4468 = ((($4467)) + 9|0);
 HEAP8[$4468>>0] = $4466;
 $4469 = $5;
 $4470 = $4469;
 $4471 = HEAP32[$4470>>2]|0;
 $4472 = (($4469) + 4)|0;
 $4473 = $4472;
 $4474 = HEAP32[$4473>>2]|0;
 $4475 = (_bitshift64Ashr(($4471|0),($4474|0),17)|0);
 $4476 = (getTempRet0() | 0);
 $4477 = $6;
 $4478 = $4477;
 $4479 = HEAP32[$4478>>2]|0;
 $4480 = (($4477) + 4)|0;
 $4481 = $4480;
 $4482 = HEAP32[$4481>>2]|0;
 $4483 = (_bitshift64Shl(($4479|0),($4482|0),4)|0);
 $4484 = (getTempRet0() | 0);
 $4485 = $4475 | $4483;
 $4476 | $4484;
 $4486 = $4485&255;
 $4487 = $1;
 $4488 = ((($4487)) + 10|0);
 HEAP8[$4488>>0] = $4486;
 $4489 = $6;
 $4490 = $4489;
 $4491 = HEAP32[$4490>>2]|0;
 $4492 = (($4489) + 4)|0;
 $4493 = $4492;
 $4494 = HEAP32[$4493>>2]|0;
 $4495 = (_bitshift64Ashr(($4491|0),($4494|0),4)|0);
 $4496 = (getTempRet0() | 0);
 $4497 = $4495&255;
 $4498 = $1;
 $4499 = ((($4498)) + 11|0);
 HEAP8[$4499>>0] = $4497;
 $4500 = $6;
 $4501 = $4500;
 $4502 = HEAP32[$4501>>2]|0;
 $4503 = (($4500) + 4)|0;
 $4504 = $4503;
 $4505 = HEAP32[$4504>>2]|0;
 $4506 = (_bitshift64Ashr(($4502|0),($4505|0),12)|0);
 $4507 = (getTempRet0() | 0);
 $4508 = $4506&255;
 $4509 = $1;
 $4510 = ((($4509)) + 12|0);
 HEAP8[$4510>>0] = $4508;
 $4511 = $6;
 $4512 = $4511;
 $4513 = HEAP32[$4512>>2]|0;
 $4514 = (($4511) + 4)|0;
 $4515 = $4514;
 $4516 = HEAP32[$4515>>2]|0;
 $4517 = (_bitshift64Ashr(($4513|0),($4516|0),20)|0);
 $4518 = (getTempRet0() | 0);
 $4519 = $7;
 $4520 = $4519;
 $4521 = HEAP32[$4520>>2]|0;
 $4522 = (($4519) + 4)|0;
 $4523 = $4522;
 $4524 = HEAP32[$4523>>2]|0;
 $4525 = (_bitshift64Shl(($4521|0),($4524|0),1)|0);
 $4526 = (getTempRet0() | 0);
 $4527 = $4517 | $4525;
 $4518 | $4526;
 $4528 = $4527&255;
 $4529 = $1;
 $4530 = ((($4529)) + 13|0);
 HEAP8[$4530>>0] = $4528;
 $4531 = $7;
 $4532 = $4531;
 $4533 = HEAP32[$4532>>2]|0;
 $4534 = (($4531) + 4)|0;
 $4535 = $4534;
 $4536 = HEAP32[$4535>>2]|0;
 $4537 = (_bitshift64Ashr(($4533|0),($4536|0),7)|0);
 $4538 = (getTempRet0() | 0);
 $4539 = $4537&255;
 $4540 = $1;
 $4541 = ((($4540)) + 14|0);
 HEAP8[$4541>>0] = $4539;
 $4542 = $7;
 $4543 = $4542;
 $4544 = HEAP32[$4543>>2]|0;
 $4545 = (($4542) + 4)|0;
 $4546 = $4545;
 $4547 = HEAP32[$4546>>2]|0;
 $4548 = (_bitshift64Ashr(($4544|0),($4547|0),15)|0);
 $4549 = (getTempRet0() | 0);
 $4550 = $8;
 $4551 = $4550;
 $4552 = HEAP32[$4551>>2]|0;
 $4553 = (($4550) + 4)|0;
 $4554 = $4553;
 $4555 = HEAP32[$4554>>2]|0;
 $4556 = (_bitshift64Shl(($4552|0),($4555|0),6)|0);
 $4557 = (getTempRet0() | 0);
 $4558 = $4548 | $4556;
 $4549 | $4557;
 $4559 = $4558&255;
 $4560 = $1;
 $4561 = ((($4560)) + 15|0);
 HEAP8[$4561>>0] = $4559;
 $4562 = $8;
 $4563 = $4562;
 $4564 = HEAP32[$4563>>2]|0;
 $4565 = (($4562) + 4)|0;
 $4566 = $4565;
 $4567 = HEAP32[$4566>>2]|0;
 $4568 = (_bitshift64Ashr(($4564|0),($4567|0),2)|0);
 $4569 = (getTempRet0() | 0);
 $4570 = $4568&255;
 $4571 = $1;
 $4572 = ((($4571)) + 16|0);
 HEAP8[$4572>>0] = $4570;
 $4573 = $8;
 $4574 = $4573;
 $4575 = HEAP32[$4574>>2]|0;
 $4576 = (($4573) + 4)|0;
 $4577 = $4576;
 $4578 = HEAP32[$4577>>2]|0;
 $4579 = (_bitshift64Ashr(($4575|0),($4578|0),10)|0);
 $4580 = (getTempRet0() | 0);
 $4581 = $4579&255;
 $4582 = $1;
 $4583 = ((($4582)) + 17|0);
 HEAP8[$4583>>0] = $4581;
 $4584 = $8;
 $4585 = $4584;
 $4586 = HEAP32[$4585>>2]|0;
 $4587 = (($4584) + 4)|0;
 $4588 = $4587;
 $4589 = HEAP32[$4588>>2]|0;
 $4590 = (_bitshift64Ashr(($4586|0),($4589|0),18)|0);
 $4591 = (getTempRet0() | 0);
 $4592 = $9;
 $4593 = $4592;
 $4594 = HEAP32[$4593>>2]|0;
 $4595 = (($4592) + 4)|0;
 $4596 = $4595;
 $4597 = HEAP32[$4596>>2]|0;
 $4598 = (_bitshift64Shl(($4594|0),($4597|0),3)|0);
 $4599 = (getTempRet0() | 0);
 $4600 = $4590 | $4598;
 $4591 | $4599;
 $4601 = $4600&255;
 $4602 = $1;
 $4603 = ((($4602)) + 18|0);
 HEAP8[$4603>>0] = $4601;
 $4604 = $9;
 $4605 = $4604;
 $4606 = HEAP32[$4605>>2]|0;
 $4607 = (($4604) + 4)|0;
 $4608 = $4607;
 $4609 = HEAP32[$4608>>2]|0;
 $4610 = (_bitshift64Ashr(($4606|0),($4609|0),5)|0);
 $4611 = (getTempRet0() | 0);
 $4612 = $4610&255;
 $4613 = $1;
 $4614 = ((($4613)) + 19|0);
 HEAP8[$4614>>0] = $4612;
 $4615 = $9;
 $4616 = $4615;
 $4617 = HEAP32[$4616>>2]|0;
 $4618 = (($4615) + 4)|0;
 $4619 = $4618;
 $4620 = HEAP32[$4619>>2]|0;
 $4621 = (_bitshift64Ashr(($4617|0),($4620|0),13)|0);
 $4622 = (getTempRet0() | 0);
 $4623 = $4621&255;
 $4624 = $1;
 $4625 = ((($4624)) + 20|0);
 HEAP8[$4625>>0] = $4623;
 $4626 = $10;
 $4627 = $4626;
 $4628 = HEAP32[$4627>>2]|0;
 $4629 = (($4626) + 4)|0;
 $4630 = $4629;
 $4631 = HEAP32[$4630>>2]|0;
 $4632 = (_bitshift64Ashr(($4628|0),($4631|0),0)|0);
 $4633 = (getTempRet0() | 0);
 $4634 = $4632&255;
 $4635 = $1;
 $4636 = ((($4635)) + 21|0);
 HEAP8[$4636>>0] = $4634;
 $4637 = $10;
 $4638 = $4637;
 $4639 = HEAP32[$4638>>2]|0;
 $4640 = (($4637) + 4)|0;
 $4641 = $4640;
 $4642 = HEAP32[$4641>>2]|0;
 $4643 = (_bitshift64Ashr(($4639|0),($4642|0),8)|0);
 $4644 = (getTempRet0() | 0);
 $4645 = $4643&255;
 $4646 = $1;
 $4647 = ((($4646)) + 22|0);
 HEAP8[$4647>>0] = $4645;
 $4648 = $10;
 $4649 = $4648;
 $4650 = HEAP32[$4649>>2]|0;
 $4651 = (($4648) + 4)|0;
 $4652 = $4651;
 $4653 = HEAP32[$4652>>2]|0;
 $4654 = (_bitshift64Ashr(($4650|0),($4653|0),16)|0);
 $4655 = (getTempRet0() | 0);
 $4656 = $11;
 $4657 = $4656;
 $4658 = HEAP32[$4657>>2]|0;
 $4659 = (($4656) + 4)|0;
 $4660 = $4659;
 $4661 = HEAP32[$4660>>2]|0;
 $4662 = (_bitshift64Shl(($4658|0),($4661|0),5)|0);
 $4663 = (getTempRet0() | 0);
 $4664 = $4654 | $4662;
 $4655 | $4663;
 $4665 = $4664&255;
 $4666 = $1;
 $4667 = ((($4666)) + 23|0);
 HEAP8[$4667>>0] = $4665;
 $4668 = $11;
 $4669 = $4668;
 $4670 = HEAP32[$4669>>2]|0;
 $4671 = (($4668) + 4)|0;
 $4672 = $4671;
 $4673 = HEAP32[$4672>>2]|0;
 $4674 = (_bitshift64Ashr(($4670|0),($4673|0),3)|0);
 $4675 = (getTempRet0() | 0);
 $4676 = $4674&255;
 $4677 = $1;
 $4678 = ((($4677)) + 24|0);
 HEAP8[$4678>>0] = $4676;
 $4679 = $11;
 $4680 = $4679;
 $4681 = HEAP32[$4680>>2]|0;
 $4682 = (($4679) + 4)|0;
 $4683 = $4682;
 $4684 = HEAP32[$4683>>2]|0;
 $4685 = (_bitshift64Ashr(($4681|0),($4684|0),11)|0);
 $4686 = (getTempRet0() | 0);
 $4687 = $4685&255;
 $4688 = $1;
 $4689 = ((($4688)) + 25|0);
 HEAP8[$4689>>0] = $4687;
 $4690 = $11;
 $4691 = $4690;
 $4692 = HEAP32[$4691>>2]|0;
 $4693 = (($4690) + 4)|0;
 $4694 = $4693;
 $4695 = HEAP32[$4694>>2]|0;
 $4696 = (_bitshift64Ashr(($4692|0),($4695|0),19)|0);
 $4697 = (getTempRet0() | 0);
 $4698 = $12;
 $4699 = $4698;
 $4700 = HEAP32[$4699>>2]|0;
 $4701 = (($4698) + 4)|0;
 $4702 = $4701;
 $4703 = HEAP32[$4702>>2]|0;
 $4704 = (_bitshift64Shl(($4700|0),($4703|0),2)|0);
 $4705 = (getTempRet0() | 0);
 $4706 = $4696 | $4704;
 $4697 | $4705;
 $4707 = $4706&255;
 $4708 = $1;
 $4709 = ((($4708)) + 26|0);
 HEAP8[$4709>>0] = $4707;
 $4710 = $12;
 $4711 = $4710;
 $4712 = HEAP32[$4711>>2]|0;
 $4713 = (($4710) + 4)|0;
 $4714 = $4713;
 $4715 = HEAP32[$4714>>2]|0;
 $4716 = (_bitshift64Ashr(($4712|0),($4715|0),6)|0);
 $4717 = (getTempRet0() | 0);
 $4718 = $4716&255;
 $4719 = $1;
 $4720 = ((($4719)) + 27|0);
 HEAP8[$4720>>0] = $4718;
 $4721 = $12;
 $4722 = $4721;
 $4723 = HEAP32[$4722>>2]|0;
 $4724 = (($4721) + 4)|0;
 $4725 = $4724;
 $4726 = HEAP32[$4725>>2]|0;
 $4727 = (_bitshift64Ashr(($4723|0),($4726|0),14)|0);
 $4728 = (getTempRet0() | 0);
 $4729 = $13;
 $4730 = $4729;
 $4731 = HEAP32[$4730>>2]|0;
 $4732 = (($4729) + 4)|0;
 $4733 = $4732;
 $4734 = HEAP32[$4733>>2]|0;
 $4735 = (_bitshift64Shl(($4731|0),($4734|0),7)|0);
 $4736 = (getTempRet0() | 0);
 $4737 = $4727 | $4735;
 $4728 | $4736;
 $4738 = $4737&255;
 $4739 = $1;
 $4740 = ((($4739)) + 28|0);
 HEAP8[$4740>>0] = $4738;
 $4741 = $13;
 $4742 = $4741;
 $4743 = HEAP32[$4742>>2]|0;
 $4744 = (($4741) + 4)|0;
 $4745 = $4744;
 $4746 = HEAP32[$4745>>2]|0;
 $4747 = (_bitshift64Ashr(($4743|0),($4746|0),1)|0);
 $4748 = (getTempRet0() | 0);
 $4749 = $4747&255;
 $4750 = $1;
 $4751 = ((($4750)) + 29|0);
 HEAP8[$4751>>0] = $4749;
 $4752 = $13;
 $4753 = $4752;
 $4754 = HEAP32[$4753>>2]|0;
 $4755 = (($4752) + 4)|0;
 $4756 = $4755;
 $4757 = HEAP32[$4756>>2]|0;
 $4758 = (_bitshift64Ashr(($4754|0),($4757|0),9)|0);
 $4759 = (getTempRet0() | 0);
 $4760 = $4758&255;
 $4761 = $1;
 $4762 = ((($4761)) + 30|0);
 HEAP8[$4762>>0] = $4760;
 $4763 = $13;
 $4764 = $4763;
 $4765 = HEAP32[$4764>>2]|0;
 $4766 = (($4763) + 4)|0;
 $4767 = $4766;
 $4768 = HEAP32[$4767>>2]|0;
 $4769 = (_bitshift64Ashr(($4765|0),($4768|0),17)|0);
 $4770 = (getTempRet0() | 0);
 $4771 = $4769&255;
 $4772 = $1;
 $4773 = ((($4772)) + 31|0);
 HEAP8[$4773>>0] = $4771;
 STACKTOP = sp;return;
}
function _ge_scalarmult($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2016|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2016|0);
 $6 = sp + 1280|0;
 $10 = sp;
 $11 = sp + 1824|0;
 $12 = sp + 1664|0;
 $16 = sp + 1504|0;
 $17 = sp + 1344|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $9 = 0;
 while(1) {
  $18 = $9;
  $19 = ($18|0)<(31);
  $20 = $4;
  if (!($19)) {
   break;
  }
  $21 = $9;
  $22 = (($20) + ($21)|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $7;
  $26 = (($25) + ($24))|0;
  $7 = $26;
  $27 = $7;
  $28 = (($27) + 8)|0;
  $29 = $28 >> 4;
  $8 = $29;
  $30 = $7;
  $31 = $8;
  $32 = $31 << 4;
  $33 = (($30) - ($32))|0;
  $34 = $33&255;
  $35 = $9;
  $36 = $35<<1;
  $37 = (($6) + ($36)|0);
  HEAP8[$37>>0] = $34;
  $38 = $8;
  $39 = (($38) + 8)|0;
  $40 = $39 >> 4;
  $7 = $40;
  $41 = $8;
  $42 = $7;
  $43 = $42 << 4;
  $44 = (($41) - ($43))|0;
  $45 = $44&255;
  $46 = $9;
  $47 = $46<<1;
  $48 = (($47) + 1)|0;
  $49 = (($6) + ($48)|0);
  HEAP8[$49>>0] = $45;
  $50 = $9;
  $51 = (($50) + 1)|0;
  $9 = $51;
 }
 $52 = ((($20)) + 31|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = $53&255;
 $55 = $7;
 $56 = (($55) + ($54))|0;
 $7 = $56;
 $57 = $7;
 $58 = (($57) + 8)|0;
 $59 = $58 >> 4;
 $8 = $59;
 $60 = $7;
 $61 = $8;
 $62 = $61 << 4;
 $63 = (($60) - ($62))|0;
 $64 = $63&255;
 $65 = ((($6)) + 62|0);
 HEAP8[$65>>0] = $64;
 $66 = $8;
 $67 = $66&255;
 $68 = ((($6)) + 63|0);
 HEAP8[$68>>0] = $67;
 $69 = $5;
 _ge_p3_to_cached($10,$69);
 $9 = 0;
 while(1) {
  $70 = $9;
  $71 = ($70|0)<(7);
  if (!($71)) {
   break;
  }
  $72 = $5;
  $73 = $9;
  $74 = (($10) + (($73*160)|0)|0);
  _ge_add($11,$72,$74);
  _ge_p1p1_to_p3($12,$11);
  $75 = $9;
  $76 = (($75) + 1)|0;
  $77 = (($10) + (($76*160)|0)|0);
  _ge_p3_to_cached($77,$12);
  $78 = $9;
  $79 = (($78) + 1)|0;
  $9 = $79;
 }
 $80 = $3;
 _ge_p2_0($80);
 $9 = 63;
 while(1) {
  $81 = $9;
  $82 = ($81|0)>=(0);
  if (!($82)) {
   break;
  }
  $83 = $9;
  $84 = (($6) + ($83)|0);
  $85 = HEAP8[$84>>0]|0;
  $13 = $85;
  $86 = $13;
  $87 = (_negative($86)|0);
  $14 = $87;
  $88 = $13;
  $89 = $88 << 24 >> 24;
  $90 = $14;
  $91 = $90&255;
  $92 = (0 - ($91))|0;
  $93 = $13;
  $94 = $93 << 24 >> 24;
  $95 = $92 & $94;
  $96 = $95 << 1;
  $97 = (($89) - ($96))|0;
  $98 = $97&255;
  $15 = $98;
  $99 = $3;
  _ge_p2_dbl($11,$99);
  $100 = $3;
  _ge_p1p1_to_p2($100,$11);
  $101 = $3;
  _ge_p2_dbl($11,$101);
  $102 = $3;
  _ge_p1p1_to_p2($102,$11);
  $103 = $3;
  _ge_p2_dbl($11,$103);
  $104 = $3;
  _ge_p1p1_to_p2($104,$11);
  $105 = $3;
  _ge_p2_dbl($11,$105);
  _ge_p1p1_to_p3($12,$11);
  _ge_cached_0($16);
  $106 = $15;
  $107 = (_equal($106,1)|0);
  _ge_cached_cmov($16,$10,$107);
  $108 = ((($10)) + 160|0);
  $109 = $15;
  $110 = (_equal($109,2)|0);
  _ge_cached_cmov($16,$108,$110);
  $111 = ((($10)) + 320|0);
  $112 = $15;
  $113 = (_equal($112,3)|0);
  _ge_cached_cmov($16,$111,$113);
  $114 = ((($10)) + 480|0);
  $115 = $15;
  $116 = (_equal($115,4)|0);
  _ge_cached_cmov($16,$114,$116);
  $117 = ((($10)) + 640|0);
  $118 = $15;
  $119 = (_equal($118,5)|0);
  _ge_cached_cmov($16,$117,$119);
  $120 = ((($10)) + 800|0);
  $121 = $15;
  $122 = (_equal($121,6)|0);
  _ge_cached_cmov($16,$120,$122);
  $123 = ((($10)) + 960|0);
  $124 = $15;
  $125 = (_equal($124,7)|0);
  _ge_cached_cmov($16,$123,$125);
  $126 = ((($10)) + 1120|0);
  $127 = $15;
  $128 = (_equal($127,8)|0);
  _ge_cached_cmov($16,$126,$128);
  $129 = ((($16)) + 40|0);
  _fe_copy($17,$129);
  $130 = ((($17)) + 40|0);
  _fe_copy($130,$16);
  $131 = ((($17)) + 80|0);
  $132 = ((($16)) + 80|0);
  _fe_copy($131,$132);
  $133 = ((($17)) + 120|0);
  $134 = ((($16)) + 120|0);
  _fe_neg($133,$134);
  $135 = $14;
  _ge_cached_cmov($16,$17,$135);
  _ge_add($11,$12,$16);
  $136 = $3;
  _ge_p1p1_to_p2($136,$11);
  $137 = $9;
  $138 = (($137) + -1)|0;
  $9 = $138;
 }
 STACKTOP = sp;return;
}
function _ge_cached_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _fe_1($2);
 $3 = $1;
 $4 = ((($3)) + 40|0);
 _fe_1($4);
 $5 = $1;
 $6 = ((($5)) + 80|0);
 _fe_1($6);
 $7 = $1;
 $8 = ((($7)) + 120|0);
 _fe_0($8);
 STACKTOP = sp;return;
}
function _ge_cached_cmov($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 $9 = $8&255;
 _fe_cmov($6,$7,$9);
 $10 = $3;
 $11 = ((($10)) + 40|0);
 $12 = $4;
 $13 = ((($12)) + 40|0);
 $14 = $5;
 $15 = $14&255;
 _fe_cmov($11,$13,$15);
 $16 = $3;
 $17 = ((($16)) + 80|0);
 $18 = $4;
 $19 = ((($18)) + 80|0);
 $20 = $5;
 $21 = $20&255;
 _fe_cmov($17,$19,$21);
 $22 = $3;
 $23 = ((($22)) + 120|0);
 $24 = $4;
 $25 = ((($24)) + 120|0);
 $26 = $5;
 $27 = $26&255;
 _fe_cmov($23,$25,$27);
 STACKTOP = sp;return;
}
function _ge_double_scalarmult_precomp_vartime($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2144|0);
 $10 = sp + 1536|0;
 $11 = sp + 1280|0;
 $12 = sp;
 $13 = sp + 1960|0;
 $14 = sp + 1800|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $16 = $6;
 _slide($10,$16);
 $17 = $8;
 _slide($11,$17);
 $18 = $7;
 _ge_dsm_precomp($12,$18);
 $19 = $5;
 _ge_p2_0($19);
 $15 = 255;
 while(1) {
  $20 = $15;
  $21 = ($20|0)>=(0);
  if (!($21)) {
   break;
  }
  $22 = $15;
  $23 = (($10) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(0);
  if ($26) {
   break;
  }
  $27 = $15;
  $28 = (($11) + ($27)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)!=(0);
  if ($31) {
   break;
  }
  $32 = $15;
  $33 = (($32) + -1)|0;
  $15 = $33;
 }
 while(1) {
  $34 = $15;
  $35 = ($34|0)>=(0);
  if (!($35)) {
   break;
  }
  $36 = $5;
  _ge_p2_dbl($13,$36);
  $37 = $15;
  $38 = (($10) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)>(0);
  if ($41) {
   _ge_p1p1_to_p3($14,$13);
   $42 = $15;
   $43 = (($10) + ($42)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 << 24 >> 24;
   $46 = (($45|0) / 2)&-1;
   $47 = (($12) + (($46*160)|0)|0);
   _ge_add($13,$14,$47);
  } else {
   $48 = $15;
   $49 = (($10) + ($48)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50 << 24 >> 24;
   $52 = ($51|0)<(0);
   if ($52) {
    _ge_p1p1_to_p3($14,$13);
    $53 = $15;
    $54 = (($10) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55 << 24 >> 24;
    $57 = (0 - ($56))|0;
    $58 = (($57|0) / 2)&-1;
    $59 = (($12) + (($58*160)|0)|0);
    _ge_sub($13,$14,$59);
   }
  }
  $60 = $15;
  $61 = (($11) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)>(0);
  if ($64) {
   _ge_p1p1_to_p3($14,$13);
   $65 = $9;
   $66 = $15;
   $67 = (($11) + ($66)|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = (($69|0) / 2)&-1;
   $71 = (($65) + (($70*160)|0)|0);
   _ge_add($13,$14,$71);
  } else {
   $72 = $15;
   $73 = (($11) + ($72)|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74 << 24 >> 24;
   $76 = ($75|0)<(0);
   if ($76) {
    _ge_p1p1_to_p3($14,$13);
    $77 = $9;
    $78 = $15;
    $79 = (($11) + ($78)|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80 << 24 >> 24;
    $82 = (0 - ($81))|0;
    $83 = (($82|0) / 2)&-1;
    $84 = (($77) + (($83*160)|0)|0);
    _ge_sub($13,$14,$84);
   }
  }
  $85 = $5;
  _ge_p1p1_to_p2($85,$13);
  $86 = $15;
  $87 = (($86) + -1)|0;
  $15 = $87;
 }
 STACKTOP = sp;return;
}
function _ge_mul8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 _ge_p2_dbl($5,$6);
 $7 = $2;
 _ge_p1p1_to_p2($4,$7);
 $8 = $2;
 _ge_p2_dbl($8,$4);
 $9 = $2;
 _ge_p1p1_to_p2($4,$9);
 $10 = $2;
 _ge_p2_dbl($10,$4);
 STACKTOP = sp;return;
}
function _ge_fromfe_frombytes_vartime($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $4 = sp + 432|0;
 $5 = sp + 384|0;
 $6 = sp + 336|0;
 $7 = sp + 288|0;
 $8 = sp + 240|0;
 $9 = sp + 192|0;
 $11 = sp + 624|0;
 $12 = sp + 616|0;
 $13 = sp + 608|0;
 $14 = sp + 600|0;
 $15 = sp + 592|0;
 $16 = sp + 584|0;
 $17 = sp + 576|0;
 $18 = sp + 568|0;
 $19 = sp + 560|0;
 $20 = sp + 552|0;
 $21 = sp + 544|0;
 $22 = sp + 536|0;
 $23 = sp + 528|0;
 $24 = sp + 520|0;
 $25 = sp + 512|0;
 $26 = sp + 504|0;
 $27 = sp + 496|0;
 $28 = sp + 488|0;
 $29 = sp + 480|0;
 $30 = sp + 472|0;
 $31 = sp + 144|0;
 $32 = sp + 96|0;
 $33 = sp + 48|0;
 $34 = sp;
 $2 = $0;
 $3 = $1;
 $35 = $3;
 $36 = (_load_4($35)|0);
 $37 = (getTempRet0() | 0);
 $38 = $11;
 $39 = $38;
 HEAP32[$39>>2] = $36;
 $40 = (($38) + 4)|0;
 $41 = $40;
 HEAP32[$41>>2] = $37;
 $42 = $3;
 $43 = ((($42)) + 4|0);
 $44 = (_load_3($43)|0);
 $45 = (getTempRet0() | 0);
 $46 = (_bitshift64Shl(($44|0),($45|0),6)|0);
 $47 = (getTempRet0() | 0);
 $48 = $12;
 $49 = $48;
 HEAP32[$49>>2] = $46;
 $50 = (($48) + 4)|0;
 $51 = $50;
 HEAP32[$51>>2] = $47;
 $52 = $3;
 $53 = ((($52)) + 7|0);
 $54 = (_load_3($53)|0);
 $55 = (getTempRet0() | 0);
 $56 = (_bitshift64Shl(($54|0),($55|0),5)|0);
 $57 = (getTempRet0() | 0);
 $58 = $13;
 $59 = $58;
 HEAP32[$59>>2] = $56;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $62 = $3;
 $63 = ((($62)) + 10|0);
 $64 = (_load_3($63)|0);
 $65 = (getTempRet0() | 0);
 $66 = (_bitshift64Shl(($64|0),($65|0),3)|0);
 $67 = (getTempRet0() | 0);
 $68 = $14;
 $69 = $68;
 HEAP32[$69>>2] = $66;
 $70 = (($68) + 4)|0;
 $71 = $70;
 HEAP32[$71>>2] = $67;
 $72 = $3;
 $73 = ((($72)) + 13|0);
 $74 = (_load_3($73)|0);
 $75 = (getTempRet0() | 0);
 $76 = (_bitshift64Shl(($74|0),($75|0),2)|0);
 $77 = (getTempRet0() | 0);
 $78 = $15;
 $79 = $78;
 HEAP32[$79>>2] = $76;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = $77;
 $82 = $3;
 $83 = ((($82)) + 16|0);
 $84 = (_load_4($83)|0);
 $85 = (getTempRet0() | 0);
 $86 = $16;
 $87 = $86;
 HEAP32[$87>>2] = $84;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = $85;
 $90 = $3;
 $91 = ((($90)) + 20|0);
 $92 = (_load_3($91)|0);
 $93 = (getTempRet0() | 0);
 $94 = (_bitshift64Shl(($92|0),($93|0),7)|0);
 $95 = (getTempRet0() | 0);
 $96 = $17;
 $97 = $96;
 HEAP32[$97>>2] = $94;
 $98 = (($96) + 4)|0;
 $99 = $98;
 HEAP32[$99>>2] = $95;
 $100 = $3;
 $101 = ((($100)) + 23|0);
 $102 = (_load_3($101)|0);
 $103 = (getTempRet0() | 0);
 $104 = (_bitshift64Shl(($102|0),($103|0),5)|0);
 $105 = (getTempRet0() | 0);
 $106 = $18;
 $107 = $106;
 HEAP32[$107>>2] = $104;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = $105;
 $110 = $3;
 $111 = ((($110)) + 26|0);
 $112 = (_load_3($111)|0);
 $113 = (getTempRet0() | 0);
 $114 = (_bitshift64Shl(($112|0),($113|0),4)|0);
 $115 = (getTempRet0() | 0);
 $116 = $19;
 $117 = $116;
 HEAP32[$117>>2] = $114;
 $118 = (($116) + 4)|0;
 $119 = $118;
 HEAP32[$119>>2] = $115;
 $120 = $3;
 $121 = ((($120)) + 29|0);
 $122 = (_load_3($121)|0);
 $123 = (getTempRet0() | 0);
 $124 = (_bitshift64Shl(($122|0),($123|0),2)|0);
 $125 = (getTempRet0() | 0);
 $126 = $20;
 $127 = $126;
 HEAP32[$127>>2] = $124;
 $128 = (($126) + 4)|0;
 $129 = $128;
 HEAP32[$129>>2] = $125;
 $130 = $20;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = (_i64Add(($132|0),($135|0),16777216,0)|0);
 $137 = (getTempRet0() | 0);
 $138 = (_bitshift64Ashr(($136|0),($137|0),25)|0);
 $139 = (getTempRet0() | 0);
 $140 = $30;
 $141 = $140;
 HEAP32[$141>>2] = $138;
 $142 = (($140) + 4)|0;
 $143 = $142;
 HEAP32[$143>>2] = $139;
 $144 = $30;
 $145 = $144;
 $146 = HEAP32[$145>>2]|0;
 $147 = (($144) + 4)|0;
 $148 = $147;
 $149 = HEAP32[$148>>2]|0;
 $150 = (___muldi3(($146|0),($149|0),19,0)|0);
 $151 = (getTempRet0() | 0);
 $152 = $11;
 $153 = $152;
 $154 = HEAP32[$153>>2]|0;
 $155 = (($152) + 4)|0;
 $156 = $155;
 $157 = HEAP32[$156>>2]|0;
 $158 = (_i64Add(($154|0),($157|0),($150|0),($151|0))|0);
 $159 = (getTempRet0() | 0);
 $160 = $11;
 $161 = $160;
 HEAP32[$161>>2] = $158;
 $162 = (($160) + 4)|0;
 $163 = $162;
 HEAP32[$163>>2] = $159;
 $164 = $30;
 $165 = $164;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($164) + 4)|0;
 $168 = $167;
 $169 = HEAP32[$168>>2]|0;
 $170 = (_bitshift64Shl(($166|0),($169|0),25)|0);
 $171 = (getTempRet0() | 0);
 $172 = $20;
 $173 = $172;
 $174 = HEAP32[$173>>2]|0;
 $175 = (($172) + 4)|0;
 $176 = $175;
 $177 = HEAP32[$176>>2]|0;
 $178 = (_i64Subtract(($174|0),($177|0),($170|0),($171|0))|0);
 $179 = (getTempRet0() | 0);
 $180 = $20;
 $181 = $180;
 HEAP32[$181>>2] = $178;
 $182 = (($180) + 4)|0;
 $183 = $182;
 HEAP32[$183>>2] = $179;
 $184 = $12;
 $185 = $184;
 $186 = HEAP32[$185>>2]|0;
 $187 = (($184) + 4)|0;
 $188 = $187;
 $189 = HEAP32[$188>>2]|0;
 $190 = (_i64Add(($186|0),($189|0),16777216,0)|0);
 $191 = (getTempRet0() | 0);
 $192 = (_bitshift64Ashr(($190|0),($191|0),25)|0);
 $193 = (getTempRet0() | 0);
 $194 = $22;
 $195 = $194;
 HEAP32[$195>>2] = $192;
 $196 = (($194) + 4)|0;
 $197 = $196;
 HEAP32[$197>>2] = $193;
 $198 = $22;
 $199 = $198;
 $200 = HEAP32[$199>>2]|0;
 $201 = (($198) + 4)|0;
 $202 = $201;
 $203 = HEAP32[$202>>2]|0;
 $204 = $13;
 $205 = $204;
 $206 = HEAP32[$205>>2]|0;
 $207 = (($204) + 4)|0;
 $208 = $207;
 $209 = HEAP32[$208>>2]|0;
 $210 = (_i64Add(($206|0),($209|0),($200|0),($203|0))|0);
 $211 = (getTempRet0() | 0);
 $212 = $13;
 $213 = $212;
 HEAP32[$213>>2] = $210;
 $214 = (($212) + 4)|0;
 $215 = $214;
 HEAP32[$215>>2] = $211;
 $216 = $22;
 $217 = $216;
 $218 = HEAP32[$217>>2]|0;
 $219 = (($216) + 4)|0;
 $220 = $219;
 $221 = HEAP32[$220>>2]|0;
 $222 = (_bitshift64Shl(($218|0),($221|0),25)|0);
 $223 = (getTempRet0() | 0);
 $224 = $12;
 $225 = $224;
 $226 = HEAP32[$225>>2]|0;
 $227 = (($224) + 4)|0;
 $228 = $227;
 $229 = HEAP32[$228>>2]|0;
 $230 = (_i64Subtract(($226|0),($229|0),($222|0),($223|0))|0);
 $231 = (getTempRet0() | 0);
 $232 = $12;
 $233 = $232;
 HEAP32[$233>>2] = $230;
 $234 = (($232) + 4)|0;
 $235 = $234;
 HEAP32[$235>>2] = $231;
 $236 = $14;
 $237 = $236;
 $238 = HEAP32[$237>>2]|0;
 $239 = (($236) + 4)|0;
 $240 = $239;
 $241 = HEAP32[$240>>2]|0;
 $242 = (_i64Add(($238|0),($241|0),16777216,0)|0);
 $243 = (getTempRet0() | 0);
 $244 = (_bitshift64Ashr(($242|0),($243|0),25)|0);
 $245 = (getTempRet0() | 0);
 $246 = $24;
 $247 = $246;
 HEAP32[$247>>2] = $244;
 $248 = (($246) + 4)|0;
 $249 = $248;
 HEAP32[$249>>2] = $245;
 $250 = $24;
 $251 = $250;
 $252 = HEAP32[$251>>2]|0;
 $253 = (($250) + 4)|0;
 $254 = $253;
 $255 = HEAP32[$254>>2]|0;
 $256 = $15;
 $257 = $256;
 $258 = HEAP32[$257>>2]|0;
 $259 = (($256) + 4)|0;
 $260 = $259;
 $261 = HEAP32[$260>>2]|0;
 $262 = (_i64Add(($258|0),($261|0),($252|0),($255|0))|0);
 $263 = (getTempRet0() | 0);
 $264 = $15;
 $265 = $264;
 HEAP32[$265>>2] = $262;
 $266 = (($264) + 4)|0;
 $267 = $266;
 HEAP32[$267>>2] = $263;
 $268 = $24;
 $269 = $268;
 $270 = HEAP32[$269>>2]|0;
 $271 = (($268) + 4)|0;
 $272 = $271;
 $273 = HEAP32[$272>>2]|0;
 $274 = (_bitshift64Shl(($270|0),($273|0),25)|0);
 $275 = (getTempRet0() | 0);
 $276 = $14;
 $277 = $276;
 $278 = HEAP32[$277>>2]|0;
 $279 = (($276) + 4)|0;
 $280 = $279;
 $281 = HEAP32[$280>>2]|0;
 $282 = (_i64Subtract(($278|0),($281|0),($274|0),($275|0))|0);
 $283 = (getTempRet0() | 0);
 $284 = $14;
 $285 = $284;
 HEAP32[$285>>2] = $282;
 $286 = (($284) + 4)|0;
 $287 = $286;
 HEAP32[$287>>2] = $283;
 $288 = $16;
 $289 = $288;
 $290 = HEAP32[$289>>2]|0;
 $291 = (($288) + 4)|0;
 $292 = $291;
 $293 = HEAP32[$292>>2]|0;
 $294 = (_i64Add(($290|0),($293|0),16777216,0)|0);
 $295 = (getTempRet0() | 0);
 $296 = (_bitshift64Ashr(($294|0),($295|0),25)|0);
 $297 = (getTempRet0() | 0);
 $298 = $26;
 $299 = $298;
 HEAP32[$299>>2] = $296;
 $300 = (($298) + 4)|0;
 $301 = $300;
 HEAP32[$301>>2] = $297;
 $302 = $26;
 $303 = $302;
 $304 = HEAP32[$303>>2]|0;
 $305 = (($302) + 4)|0;
 $306 = $305;
 $307 = HEAP32[$306>>2]|0;
 $308 = $17;
 $309 = $308;
 $310 = HEAP32[$309>>2]|0;
 $311 = (($308) + 4)|0;
 $312 = $311;
 $313 = HEAP32[$312>>2]|0;
 $314 = (_i64Add(($310|0),($313|0),($304|0),($307|0))|0);
 $315 = (getTempRet0() | 0);
 $316 = $17;
 $317 = $316;
 HEAP32[$317>>2] = $314;
 $318 = (($316) + 4)|0;
 $319 = $318;
 HEAP32[$319>>2] = $315;
 $320 = $26;
 $321 = $320;
 $322 = HEAP32[$321>>2]|0;
 $323 = (($320) + 4)|0;
 $324 = $323;
 $325 = HEAP32[$324>>2]|0;
 $326 = (_bitshift64Shl(($322|0),($325|0),25)|0);
 $327 = (getTempRet0() | 0);
 $328 = $16;
 $329 = $328;
 $330 = HEAP32[$329>>2]|0;
 $331 = (($328) + 4)|0;
 $332 = $331;
 $333 = HEAP32[$332>>2]|0;
 $334 = (_i64Subtract(($330|0),($333|0),($326|0),($327|0))|0);
 $335 = (getTempRet0() | 0);
 $336 = $16;
 $337 = $336;
 HEAP32[$337>>2] = $334;
 $338 = (($336) + 4)|0;
 $339 = $338;
 HEAP32[$339>>2] = $335;
 $340 = $18;
 $341 = $340;
 $342 = HEAP32[$341>>2]|0;
 $343 = (($340) + 4)|0;
 $344 = $343;
 $345 = HEAP32[$344>>2]|0;
 $346 = (_i64Add(($342|0),($345|0),16777216,0)|0);
 $347 = (getTempRet0() | 0);
 $348 = (_bitshift64Ashr(($346|0),($347|0),25)|0);
 $349 = (getTempRet0() | 0);
 $350 = $28;
 $351 = $350;
 HEAP32[$351>>2] = $348;
 $352 = (($350) + 4)|0;
 $353 = $352;
 HEAP32[$353>>2] = $349;
 $354 = $28;
 $355 = $354;
 $356 = HEAP32[$355>>2]|0;
 $357 = (($354) + 4)|0;
 $358 = $357;
 $359 = HEAP32[$358>>2]|0;
 $360 = $19;
 $361 = $360;
 $362 = HEAP32[$361>>2]|0;
 $363 = (($360) + 4)|0;
 $364 = $363;
 $365 = HEAP32[$364>>2]|0;
 $366 = (_i64Add(($362|0),($365|0),($356|0),($359|0))|0);
 $367 = (getTempRet0() | 0);
 $368 = $19;
 $369 = $368;
 HEAP32[$369>>2] = $366;
 $370 = (($368) + 4)|0;
 $371 = $370;
 HEAP32[$371>>2] = $367;
 $372 = $28;
 $373 = $372;
 $374 = HEAP32[$373>>2]|0;
 $375 = (($372) + 4)|0;
 $376 = $375;
 $377 = HEAP32[$376>>2]|0;
 $378 = (_bitshift64Shl(($374|0),($377|0),25)|0);
 $379 = (getTempRet0() | 0);
 $380 = $18;
 $381 = $380;
 $382 = HEAP32[$381>>2]|0;
 $383 = (($380) + 4)|0;
 $384 = $383;
 $385 = HEAP32[$384>>2]|0;
 $386 = (_i64Subtract(($382|0),($385|0),($378|0),($379|0))|0);
 $387 = (getTempRet0() | 0);
 $388 = $18;
 $389 = $388;
 HEAP32[$389>>2] = $386;
 $390 = (($388) + 4)|0;
 $391 = $390;
 HEAP32[$391>>2] = $387;
 $392 = $11;
 $393 = $392;
 $394 = HEAP32[$393>>2]|0;
 $395 = (($392) + 4)|0;
 $396 = $395;
 $397 = HEAP32[$396>>2]|0;
 $398 = (_i64Add(($394|0),($397|0),33554432,0)|0);
 $399 = (getTempRet0() | 0);
 $400 = (_bitshift64Ashr(($398|0),($399|0),26)|0);
 $401 = (getTempRet0() | 0);
 $402 = $21;
 $403 = $402;
 HEAP32[$403>>2] = $400;
 $404 = (($402) + 4)|0;
 $405 = $404;
 HEAP32[$405>>2] = $401;
 $406 = $21;
 $407 = $406;
 $408 = HEAP32[$407>>2]|0;
 $409 = (($406) + 4)|0;
 $410 = $409;
 $411 = HEAP32[$410>>2]|0;
 $412 = $12;
 $413 = $412;
 $414 = HEAP32[$413>>2]|0;
 $415 = (($412) + 4)|0;
 $416 = $415;
 $417 = HEAP32[$416>>2]|0;
 $418 = (_i64Add(($414|0),($417|0),($408|0),($411|0))|0);
 $419 = (getTempRet0() | 0);
 $420 = $12;
 $421 = $420;
 HEAP32[$421>>2] = $418;
 $422 = (($420) + 4)|0;
 $423 = $422;
 HEAP32[$423>>2] = $419;
 $424 = $21;
 $425 = $424;
 $426 = HEAP32[$425>>2]|0;
 $427 = (($424) + 4)|0;
 $428 = $427;
 $429 = HEAP32[$428>>2]|0;
 $430 = (_bitshift64Shl(($426|0),($429|0),26)|0);
 $431 = (getTempRet0() | 0);
 $432 = $11;
 $433 = $432;
 $434 = HEAP32[$433>>2]|0;
 $435 = (($432) + 4)|0;
 $436 = $435;
 $437 = HEAP32[$436>>2]|0;
 $438 = (_i64Subtract(($434|0),($437|0),($430|0),($431|0))|0);
 $439 = (getTempRet0() | 0);
 $440 = $11;
 $441 = $440;
 HEAP32[$441>>2] = $438;
 $442 = (($440) + 4)|0;
 $443 = $442;
 HEAP32[$443>>2] = $439;
 $444 = $13;
 $445 = $444;
 $446 = HEAP32[$445>>2]|0;
 $447 = (($444) + 4)|0;
 $448 = $447;
 $449 = HEAP32[$448>>2]|0;
 $450 = (_i64Add(($446|0),($449|0),33554432,0)|0);
 $451 = (getTempRet0() | 0);
 $452 = (_bitshift64Ashr(($450|0),($451|0),26)|0);
 $453 = (getTempRet0() | 0);
 $454 = $23;
 $455 = $454;
 HEAP32[$455>>2] = $452;
 $456 = (($454) + 4)|0;
 $457 = $456;
 HEAP32[$457>>2] = $453;
 $458 = $23;
 $459 = $458;
 $460 = HEAP32[$459>>2]|0;
 $461 = (($458) + 4)|0;
 $462 = $461;
 $463 = HEAP32[$462>>2]|0;
 $464 = $14;
 $465 = $464;
 $466 = HEAP32[$465>>2]|0;
 $467 = (($464) + 4)|0;
 $468 = $467;
 $469 = HEAP32[$468>>2]|0;
 $470 = (_i64Add(($466|0),($469|0),($460|0),($463|0))|0);
 $471 = (getTempRet0() | 0);
 $472 = $14;
 $473 = $472;
 HEAP32[$473>>2] = $470;
 $474 = (($472) + 4)|0;
 $475 = $474;
 HEAP32[$475>>2] = $471;
 $476 = $23;
 $477 = $476;
 $478 = HEAP32[$477>>2]|0;
 $479 = (($476) + 4)|0;
 $480 = $479;
 $481 = HEAP32[$480>>2]|0;
 $482 = (_bitshift64Shl(($478|0),($481|0),26)|0);
 $483 = (getTempRet0() | 0);
 $484 = $13;
 $485 = $484;
 $486 = HEAP32[$485>>2]|0;
 $487 = (($484) + 4)|0;
 $488 = $487;
 $489 = HEAP32[$488>>2]|0;
 $490 = (_i64Subtract(($486|0),($489|0),($482|0),($483|0))|0);
 $491 = (getTempRet0() | 0);
 $492 = $13;
 $493 = $492;
 HEAP32[$493>>2] = $490;
 $494 = (($492) + 4)|0;
 $495 = $494;
 HEAP32[$495>>2] = $491;
 $496 = $15;
 $497 = $496;
 $498 = HEAP32[$497>>2]|0;
 $499 = (($496) + 4)|0;
 $500 = $499;
 $501 = HEAP32[$500>>2]|0;
 $502 = (_i64Add(($498|0),($501|0),33554432,0)|0);
 $503 = (getTempRet0() | 0);
 $504 = (_bitshift64Ashr(($502|0),($503|0),26)|0);
 $505 = (getTempRet0() | 0);
 $506 = $25;
 $507 = $506;
 HEAP32[$507>>2] = $504;
 $508 = (($506) + 4)|0;
 $509 = $508;
 HEAP32[$509>>2] = $505;
 $510 = $25;
 $511 = $510;
 $512 = HEAP32[$511>>2]|0;
 $513 = (($510) + 4)|0;
 $514 = $513;
 $515 = HEAP32[$514>>2]|0;
 $516 = $16;
 $517 = $516;
 $518 = HEAP32[$517>>2]|0;
 $519 = (($516) + 4)|0;
 $520 = $519;
 $521 = HEAP32[$520>>2]|0;
 $522 = (_i64Add(($518|0),($521|0),($512|0),($515|0))|0);
 $523 = (getTempRet0() | 0);
 $524 = $16;
 $525 = $524;
 HEAP32[$525>>2] = $522;
 $526 = (($524) + 4)|0;
 $527 = $526;
 HEAP32[$527>>2] = $523;
 $528 = $25;
 $529 = $528;
 $530 = HEAP32[$529>>2]|0;
 $531 = (($528) + 4)|0;
 $532 = $531;
 $533 = HEAP32[$532>>2]|0;
 $534 = (_bitshift64Shl(($530|0),($533|0),26)|0);
 $535 = (getTempRet0() | 0);
 $536 = $15;
 $537 = $536;
 $538 = HEAP32[$537>>2]|0;
 $539 = (($536) + 4)|0;
 $540 = $539;
 $541 = HEAP32[$540>>2]|0;
 $542 = (_i64Subtract(($538|0),($541|0),($534|0),($535|0))|0);
 $543 = (getTempRet0() | 0);
 $544 = $15;
 $545 = $544;
 HEAP32[$545>>2] = $542;
 $546 = (($544) + 4)|0;
 $547 = $546;
 HEAP32[$547>>2] = $543;
 $548 = $17;
 $549 = $548;
 $550 = HEAP32[$549>>2]|0;
 $551 = (($548) + 4)|0;
 $552 = $551;
 $553 = HEAP32[$552>>2]|0;
 $554 = (_i64Add(($550|0),($553|0),33554432,0)|0);
 $555 = (getTempRet0() | 0);
 $556 = (_bitshift64Ashr(($554|0),($555|0),26)|0);
 $557 = (getTempRet0() | 0);
 $558 = $27;
 $559 = $558;
 HEAP32[$559>>2] = $556;
 $560 = (($558) + 4)|0;
 $561 = $560;
 HEAP32[$561>>2] = $557;
 $562 = $27;
 $563 = $562;
 $564 = HEAP32[$563>>2]|0;
 $565 = (($562) + 4)|0;
 $566 = $565;
 $567 = HEAP32[$566>>2]|0;
 $568 = $18;
 $569 = $568;
 $570 = HEAP32[$569>>2]|0;
 $571 = (($568) + 4)|0;
 $572 = $571;
 $573 = HEAP32[$572>>2]|0;
 $574 = (_i64Add(($570|0),($573|0),($564|0),($567|0))|0);
 $575 = (getTempRet0() | 0);
 $576 = $18;
 $577 = $576;
 HEAP32[$577>>2] = $574;
 $578 = (($576) + 4)|0;
 $579 = $578;
 HEAP32[$579>>2] = $575;
 $580 = $27;
 $581 = $580;
 $582 = HEAP32[$581>>2]|0;
 $583 = (($580) + 4)|0;
 $584 = $583;
 $585 = HEAP32[$584>>2]|0;
 $586 = (_bitshift64Shl(($582|0),($585|0),26)|0);
 $587 = (getTempRet0() | 0);
 $588 = $17;
 $589 = $588;
 $590 = HEAP32[$589>>2]|0;
 $591 = (($588) + 4)|0;
 $592 = $591;
 $593 = HEAP32[$592>>2]|0;
 $594 = (_i64Subtract(($590|0),($593|0),($586|0),($587|0))|0);
 $595 = (getTempRet0() | 0);
 $596 = $17;
 $597 = $596;
 HEAP32[$597>>2] = $594;
 $598 = (($596) + 4)|0;
 $599 = $598;
 HEAP32[$599>>2] = $595;
 $600 = $19;
 $601 = $600;
 $602 = HEAP32[$601>>2]|0;
 $603 = (($600) + 4)|0;
 $604 = $603;
 $605 = HEAP32[$604>>2]|0;
 $606 = (_i64Add(($602|0),($605|0),33554432,0)|0);
 $607 = (getTempRet0() | 0);
 $608 = (_bitshift64Ashr(($606|0),($607|0),26)|0);
 $609 = (getTempRet0() | 0);
 $610 = $29;
 $611 = $610;
 HEAP32[$611>>2] = $608;
 $612 = (($610) + 4)|0;
 $613 = $612;
 HEAP32[$613>>2] = $609;
 $614 = $29;
 $615 = $614;
 $616 = HEAP32[$615>>2]|0;
 $617 = (($614) + 4)|0;
 $618 = $617;
 $619 = HEAP32[$618>>2]|0;
 $620 = $20;
 $621 = $620;
 $622 = HEAP32[$621>>2]|0;
 $623 = (($620) + 4)|0;
 $624 = $623;
 $625 = HEAP32[$624>>2]|0;
 $626 = (_i64Add(($622|0),($625|0),($616|0),($619|0))|0);
 $627 = (getTempRet0() | 0);
 $628 = $20;
 $629 = $628;
 HEAP32[$629>>2] = $626;
 $630 = (($628) + 4)|0;
 $631 = $630;
 HEAP32[$631>>2] = $627;
 $632 = $29;
 $633 = $632;
 $634 = HEAP32[$633>>2]|0;
 $635 = (($632) + 4)|0;
 $636 = $635;
 $637 = HEAP32[$636>>2]|0;
 $638 = (_bitshift64Shl(($634|0),($637|0),26)|0);
 $639 = (getTempRet0() | 0);
 $640 = $19;
 $641 = $640;
 $642 = HEAP32[$641>>2]|0;
 $643 = (($640) + 4)|0;
 $644 = $643;
 $645 = HEAP32[$644>>2]|0;
 $646 = (_i64Subtract(($642|0),($645|0),($638|0),($639|0))|0);
 $647 = (getTempRet0() | 0);
 $648 = $19;
 $649 = $648;
 HEAP32[$649>>2] = $646;
 $650 = (($648) + 4)|0;
 $651 = $650;
 HEAP32[$651>>2] = $647;
 $652 = $11;
 $653 = $652;
 $654 = HEAP32[$653>>2]|0;
 $655 = (($652) + 4)|0;
 $656 = $655;
 $657 = HEAP32[$656>>2]|0;
 HEAP32[$4>>2] = $654;
 $658 = $12;
 $659 = $658;
 $660 = HEAP32[$659>>2]|0;
 $661 = (($658) + 4)|0;
 $662 = $661;
 $663 = HEAP32[$662>>2]|0;
 $664 = ((($4)) + 4|0);
 HEAP32[$664>>2] = $660;
 $665 = $13;
 $666 = $665;
 $667 = HEAP32[$666>>2]|0;
 $668 = (($665) + 4)|0;
 $669 = $668;
 $670 = HEAP32[$669>>2]|0;
 $671 = ((($4)) + 8|0);
 HEAP32[$671>>2] = $667;
 $672 = $14;
 $673 = $672;
 $674 = HEAP32[$673>>2]|0;
 $675 = (($672) + 4)|0;
 $676 = $675;
 $677 = HEAP32[$676>>2]|0;
 $678 = ((($4)) + 12|0);
 HEAP32[$678>>2] = $674;
 $679 = $15;
 $680 = $679;
 $681 = HEAP32[$680>>2]|0;
 $682 = (($679) + 4)|0;
 $683 = $682;
 $684 = HEAP32[$683>>2]|0;
 $685 = ((($4)) + 16|0);
 HEAP32[$685>>2] = $681;
 $686 = $16;
 $687 = $686;
 $688 = HEAP32[$687>>2]|0;
 $689 = (($686) + 4)|0;
 $690 = $689;
 $691 = HEAP32[$690>>2]|0;
 $692 = ((($4)) + 20|0);
 HEAP32[$692>>2] = $688;
 $693 = $17;
 $694 = $693;
 $695 = HEAP32[$694>>2]|0;
 $696 = (($693) + 4)|0;
 $697 = $696;
 $698 = HEAP32[$697>>2]|0;
 $699 = ((($4)) + 24|0);
 HEAP32[$699>>2] = $695;
 $700 = $18;
 $701 = $700;
 $702 = HEAP32[$701>>2]|0;
 $703 = (($700) + 4)|0;
 $704 = $703;
 $705 = HEAP32[$704>>2]|0;
 $706 = ((($4)) + 28|0);
 HEAP32[$706>>2] = $702;
 $707 = $19;
 $708 = $707;
 $709 = HEAP32[$708>>2]|0;
 $710 = (($707) + 4)|0;
 $711 = $710;
 $712 = HEAP32[$711>>2]|0;
 $713 = ((($4)) + 32|0);
 HEAP32[$713>>2] = $709;
 $714 = $20;
 $715 = $714;
 $716 = HEAP32[$715>>2]|0;
 $717 = (($714) + 4)|0;
 $718 = $717;
 $719 = HEAP32[$718>>2]|0;
 $720 = ((($4)) + 36|0);
 HEAP32[$720>>2] = $716;
 _fe_sq2($5,$4);
 _fe_1($6);
 _fe_add($6,$5,$6);
 _fe_sq($7,$6);
 _fe_mul($8,31840,$5);
 _fe_add($7,$7,$8);
 $721 = $2;
 _fe_divpowm1($721,$6,$7);
 $722 = $2;
 _fe_sq($8,$722);
 _fe_mul($7,$8,$7);
 _fe_sub($8,$6,$7);
 _fe_copy($9,31888);
 $723 = (_fe_isnonzero($8)|0);
 $724 = ($723|0)!=(0);
 do {
  if ($724) {
   _fe_add($8,$6,$7);
   $725 = (_fe_isnonzero($8)|0);
   $726 = ($725|0)!=(0);
   if (!($726)) {
    $727 = $2;
    $728 = $2;
    _fe_mul($727,$728,31936);
    label = 5;
    break;
   }
   _fe_mul($7,$7,64);
   _fe_sub($8,$6,$7);
   $733 = (_fe_isnonzero($8)|0);
   $734 = ($733|0)!=(0);
   do {
    if ($734) {
     _fe_add($8,$6,$7);
     $735 = (_fe_isnonzero($8)|0);
     $736 = ($735|0)!=(0);
     $737 = $736 ^ 1;
     if ($737) {
      $738 = $2;
      $739 = $2;
      _fe_mul($738,$739,32032);
      break;
     } else {
      ___assert_fail((36689|0),(36661|0),2659,(36725|0));
      // unreachable;
     }
    } else {
     $740 = $2;
     $741 = $2;
     _fe_mul($740,$741,32080);
    }
   } while(0);
   $10 = 1;
  } else {
   $729 = $2;
   $730 = $2;
   _fe_mul($729,$730,31984);
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  $731 = $2;
  $732 = $2;
  _fe_mul($731,$732,$4);
  _fe_mul($9,$9,$5);
  $10 = 0;
 }
 $742 = $2;
 $743 = (_fe_isnegative($742)|0);
 $744 = $10;
 $745 = $744&255;
 $746 = ($743|0)!=($745|0);
 do {
  if ($746) {
   $747 = $2;
   $748 = (_fe_isnonzero($747)|0);
   $749 = ($748|0)!=(0);
   if ($749) {
    $750 = $2;
    $751 = $2;
    _fe_neg($750,$751);
    break;
   } else {
    ___assert_fail((36753|0),(36661|0),2669,(36725|0));
    // unreachable;
   }
  }
 } while(0);
 $752 = $2;
 $753 = ((($752)) + 80|0);
 _fe_add($753,$9,$6);
 $754 = $2;
 $755 = ((($754)) + 40|0);
 _fe_sub($755,$9,$6);
 $756 = $2;
 $757 = $2;
 $758 = $2;
 $759 = ((($758)) + 80|0);
 _fe_mul($756,$757,$759);
 $760 = $2;
 $761 = ((($760)) + 80|0);
 _fe_invert($33,$761);
 $762 = $2;
 _fe_mul($31,$762,$33);
 $763 = $2;
 $764 = ((($763)) + 40|0);
 _fe_mul($32,$764,$33);
 _fe_sq($31,$31);
 _fe_sq($32,$32);
 _fe_mul($34,$31,$32);
 _fe_mul($34,16,$34);
 _fe_add($34,$34,$31);
 _fe_sub($34,$34,$32);
 _fe_1($31);
 _fe_add($34,$34,$31);
 $765 = (_fe_isnonzero($34)|0);
 $766 = ($765|0)!=(0);
 if ($766) {
  ___assert_fail((36772|0),(36661|0),2689,(36725|0));
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _sc_0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $3 = $2;
  $4 = ($3|0)<(32);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = $2;
  $7 = (($5) + ($6)|0);
  HEAP8[$7>>0] = 0;
  $8 = $2;
  $9 = (($8) + 1)|0;
  $2 = $9;
 }
 STACKTOP = sp;return;
}
function _sc_reduce32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0;
 var $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0;
 var $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0;
 var $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0;
 var $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0;
 var $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0;
 var $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0;
 var $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0;
 var $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0;
 var $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0;
 var $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0;
 var $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0;
 var $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0;
 var $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0;
 var $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0;
 var $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0;
 var $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0;
 var $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0;
 var $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0;
 var $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0;
 var $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0;
 var $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0;
 var $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0;
 var $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0;
 var $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0;
 var $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0;
 var $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0;
 var $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0;
 var $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0;
 var $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0;
 var $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0;
 var $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0;
 var $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0;
 var $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0;
 var $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0;
 var $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0;
 var $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0;
 var $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0;
 var $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0;
 var $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0;
 var $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0;
 var $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0;
 var $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0;
 var $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0;
 var $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0;
 var $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0;
 var $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0;
 var $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0;
 var $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0;
 var $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0;
 var $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0;
 var $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0;
 var $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0;
 var $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0;
 var $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0;
 var $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0;
 var $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0;
 var $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0;
 var $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0;
 var $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0;
 var $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0;
 var $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0;
 var $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0;
 var $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0;
 var $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0;
 var $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0;
 var $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0;
 var $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0;
 var $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0;
 var $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0;
 var $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0;
 var $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0;
 var $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0;
 var $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0;
 var $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0;
 var $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $2 = sp + 192|0;
 $3 = sp + 184|0;
 $4 = sp + 176|0;
 $5 = sp + 168|0;
 $6 = sp + 160|0;
 $7 = sp + 152|0;
 $8 = sp + 144|0;
 $9 = sp + 136|0;
 $10 = sp + 128|0;
 $11 = sp + 120|0;
 $12 = sp + 112|0;
 $13 = sp + 104|0;
 $14 = sp + 96|0;
 $15 = sp + 88|0;
 $16 = sp + 80|0;
 $17 = sp + 72|0;
 $18 = sp + 64|0;
 $19 = sp + 56|0;
 $20 = sp + 48|0;
 $21 = sp + 40|0;
 $22 = sp + 32|0;
 $23 = sp + 24|0;
 $24 = sp + 16|0;
 $25 = sp + 8|0;
 $26 = sp;
 $1 = $0;
 $27 = $1;
 $28 = (_load_3($27)|0);
 $29 = (getTempRet0() | 0);
 $30 = 2097151 & $28;
 $31 = $2;
 $32 = $31;
 HEAP32[$32>>2] = $30;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = 0;
 $35 = $1;
 $36 = ((($35)) + 2|0);
 $37 = (_load_4($36)|0);
 $38 = (getTempRet0() | 0);
 $39 = (_bitshift64Lshr(($37|0),($38|0),5)|0);
 $40 = (getTempRet0() | 0);
 $41 = 2097151 & $39;
 $42 = $3;
 $43 = $42;
 HEAP32[$43>>2] = $41;
 $44 = (($42) + 4)|0;
 $45 = $44;
 HEAP32[$45>>2] = 0;
 $46 = $1;
 $47 = ((($46)) + 5|0);
 $48 = (_load_3($47)|0);
 $49 = (getTempRet0() | 0);
 $50 = (_bitshift64Lshr(($48|0),($49|0),2)|0);
 $51 = (getTempRet0() | 0);
 $52 = 2097151 & $50;
 $53 = $4;
 $54 = $53;
 HEAP32[$54>>2] = $52;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = 0;
 $57 = $1;
 $58 = ((($57)) + 7|0);
 $59 = (_load_4($58)|0);
 $60 = (getTempRet0() | 0);
 $61 = (_bitshift64Lshr(($59|0),($60|0),7)|0);
 $62 = (getTempRet0() | 0);
 $63 = 2097151 & $61;
 $64 = $5;
 $65 = $64;
 HEAP32[$65>>2] = $63;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = 0;
 $68 = $1;
 $69 = ((($68)) + 10|0);
 $70 = (_load_4($69)|0);
 $71 = (getTempRet0() | 0);
 $72 = (_bitshift64Lshr(($70|0),($71|0),4)|0);
 $73 = (getTempRet0() | 0);
 $74 = 2097151 & $72;
 $75 = $6;
 $76 = $75;
 HEAP32[$76>>2] = $74;
 $77 = (($75) + 4)|0;
 $78 = $77;
 HEAP32[$78>>2] = 0;
 $79 = $1;
 $80 = ((($79)) + 13|0);
 $81 = (_load_3($80)|0);
 $82 = (getTempRet0() | 0);
 $83 = (_bitshift64Lshr(($81|0),($82|0),1)|0);
 $84 = (getTempRet0() | 0);
 $85 = 2097151 & $83;
 $86 = $7;
 $87 = $86;
 HEAP32[$87>>2] = $85;
 $88 = (($86) + 4)|0;
 $89 = $88;
 HEAP32[$89>>2] = 0;
 $90 = $1;
 $91 = ((($90)) + 15|0);
 $92 = (_load_4($91)|0);
 $93 = (getTempRet0() | 0);
 $94 = (_bitshift64Lshr(($92|0),($93|0),6)|0);
 $95 = (getTempRet0() | 0);
 $96 = 2097151 & $94;
 $97 = $8;
 $98 = $97;
 HEAP32[$98>>2] = $96;
 $99 = (($97) + 4)|0;
 $100 = $99;
 HEAP32[$100>>2] = 0;
 $101 = $1;
 $102 = ((($101)) + 18|0);
 $103 = (_load_3($102)|0);
 $104 = (getTempRet0() | 0);
 $105 = (_bitshift64Lshr(($103|0),($104|0),3)|0);
 $106 = (getTempRet0() | 0);
 $107 = 2097151 & $105;
 $108 = $9;
 $109 = $108;
 HEAP32[$109>>2] = $107;
 $110 = (($108) + 4)|0;
 $111 = $110;
 HEAP32[$111>>2] = 0;
 $112 = $1;
 $113 = ((($112)) + 21|0);
 $114 = (_load_3($113)|0);
 $115 = (getTempRet0() | 0);
 $116 = 2097151 & $114;
 $117 = $10;
 $118 = $117;
 HEAP32[$118>>2] = $116;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = 0;
 $121 = $1;
 $122 = ((($121)) + 23|0);
 $123 = (_load_4($122)|0);
 $124 = (getTempRet0() | 0);
 $125 = (_bitshift64Lshr(($123|0),($124|0),5)|0);
 $126 = (getTempRet0() | 0);
 $127 = 2097151 & $125;
 $128 = $11;
 $129 = $128;
 HEAP32[$129>>2] = $127;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = 0;
 $132 = $1;
 $133 = ((($132)) + 26|0);
 $134 = (_load_3($133)|0);
 $135 = (getTempRet0() | 0);
 $136 = (_bitshift64Lshr(($134|0),($135|0),2)|0);
 $137 = (getTempRet0() | 0);
 $138 = 2097151 & $136;
 $139 = $12;
 $140 = $139;
 HEAP32[$140>>2] = $138;
 $141 = (($139) + 4)|0;
 $142 = $141;
 HEAP32[$142>>2] = 0;
 $143 = $1;
 $144 = ((($143)) + 28|0);
 $145 = (_load_4($144)|0);
 $146 = (getTempRet0() | 0);
 $147 = (_bitshift64Lshr(($145|0),($146|0),7)|0);
 $148 = (getTempRet0() | 0);
 $149 = $13;
 $150 = $149;
 HEAP32[$150>>2] = $147;
 $151 = (($149) + 4)|0;
 $152 = $151;
 HEAP32[$152>>2] = $148;
 $153 = $14;
 $154 = $153;
 HEAP32[$154>>2] = 0;
 $155 = (($153) + 4)|0;
 $156 = $155;
 HEAP32[$156>>2] = 0;
 $157 = $2;
 $158 = $157;
 $159 = HEAP32[$158>>2]|0;
 $160 = (($157) + 4)|0;
 $161 = $160;
 $162 = HEAP32[$161>>2]|0;
 $163 = (_i64Add(($159|0),($162|0),1048576,0)|0);
 $164 = (getTempRet0() | 0);
 $165 = (_bitshift64Ashr(($163|0),($164|0),21)|0);
 $166 = (getTempRet0() | 0);
 $167 = $15;
 $168 = $167;
 HEAP32[$168>>2] = $165;
 $169 = (($167) + 4)|0;
 $170 = $169;
 HEAP32[$170>>2] = $166;
 $171 = $15;
 $172 = $171;
 $173 = HEAP32[$172>>2]|0;
 $174 = (($171) + 4)|0;
 $175 = $174;
 $176 = HEAP32[$175>>2]|0;
 $177 = $3;
 $178 = $177;
 $179 = HEAP32[$178>>2]|0;
 $180 = (($177) + 4)|0;
 $181 = $180;
 $182 = HEAP32[$181>>2]|0;
 $183 = (_i64Add(($179|0),($182|0),($173|0),($176|0))|0);
 $184 = (getTempRet0() | 0);
 $185 = $3;
 $186 = $185;
 HEAP32[$186>>2] = $183;
 $187 = (($185) + 4)|0;
 $188 = $187;
 HEAP32[$188>>2] = $184;
 $189 = $15;
 $190 = $189;
 $191 = HEAP32[$190>>2]|0;
 $192 = (($189) + 4)|0;
 $193 = $192;
 $194 = HEAP32[$193>>2]|0;
 $195 = (_bitshift64Shl(($191|0),($194|0),21)|0);
 $196 = (getTempRet0() | 0);
 $197 = $2;
 $198 = $197;
 $199 = HEAP32[$198>>2]|0;
 $200 = (($197) + 4)|0;
 $201 = $200;
 $202 = HEAP32[$201>>2]|0;
 $203 = (_i64Subtract(($199|0),($202|0),($195|0),($196|0))|0);
 $204 = (getTempRet0() | 0);
 $205 = $2;
 $206 = $205;
 HEAP32[$206>>2] = $203;
 $207 = (($205) + 4)|0;
 $208 = $207;
 HEAP32[$208>>2] = $204;
 $209 = $4;
 $210 = $209;
 $211 = HEAP32[$210>>2]|0;
 $212 = (($209) + 4)|0;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (_i64Add(($211|0),($214|0),1048576,0)|0);
 $216 = (getTempRet0() | 0);
 $217 = (_bitshift64Ashr(($215|0),($216|0),21)|0);
 $218 = (getTempRet0() | 0);
 $219 = $17;
 $220 = $219;
 HEAP32[$220>>2] = $217;
 $221 = (($219) + 4)|0;
 $222 = $221;
 HEAP32[$222>>2] = $218;
 $223 = $17;
 $224 = $223;
 $225 = HEAP32[$224>>2]|0;
 $226 = (($223) + 4)|0;
 $227 = $226;
 $228 = HEAP32[$227>>2]|0;
 $229 = $5;
 $230 = $229;
 $231 = HEAP32[$230>>2]|0;
 $232 = (($229) + 4)|0;
 $233 = $232;
 $234 = HEAP32[$233>>2]|0;
 $235 = (_i64Add(($231|0),($234|0),($225|0),($228|0))|0);
 $236 = (getTempRet0() | 0);
 $237 = $5;
 $238 = $237;
 HEAP32[$238>>2] = $235;
 $239 = (($237) + 4)|0;
 $240 = $239;
 HEAP32[$240>>2] = $236;
 $241 = $17;
 $242 = $241;
 $243 = HEAP32[$242>>2]|0;
 $244 = (($241) + 4)|0;
 $245 = $244;
 $246 = HEAP32[$245>>2]|0;
 $247 = (_bitshift64Shl(($243|0),($246|0),21)|0);
 $248 = (getTempRet0() | 0);
 $249 = $4;
 $250 = $249;
 $251 = HEAP32[$250>>2]|0;
 $252 = (($249) + 4)|0;
 $253 = $252;
 $254 = HEAP32[$253>>2]|0;
 $255 = (_i64Subtract(($251|0),($254|0),($247|0),($248|0))|0);
 $256 = (getTempRet0() | 0);
 $257 = $4;
 $258 = $257;
 HEAP32[$258>>2] = $255;
 $259 = (($257) + 4)|0;
 $260 = $259;
 HEAP32[$260>>2] = $256;
 $261 = $6;
 $262 = $261;
 $263 = HEAP32[$262>>2]|0;
 $264 = (($261) + 4)|0;
 $265 = $264;
 $266 = HEAP32[$265>>2]|0;
 $267 = (_i64Add(($263|0),($266|0),1048576,0)|0);
 $268 = (getTempRet0() | 0);
 $269 = (_bitshift64Ashr(($267|0),($268|0),21)|0);
 $270 = (getTempRet0() | 0);
 $271 = $19;
 $272 = $271;
 HEAP32[$272>>2] = $269;
 $273 = (($271) + 4)|0;
 $274 = $273;
 HEAP32[$274>>2] = $270;
 $275 = $19;
 $276 = $275;
 $277 = HEAP32[$276>>2]|0;
 $278 = (($275) + 4)|0;
 $279 = $278;
 $280 = HEAP32[$279>>2]|0;
 $281 = $7;
 $282 = $281;
 $283 = HEAP32[$282>>2]|0;
 $284 = (($281) + 4)|0;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = (_i64Add(($283|0),($286|0),($277|0),($280|0))|0);
 $288 = (getTempRet0() | 0);
 $289 = $7;
 $290 = $289;
 HEAP32[$290>>2] = $287;
 $291 = (($289) + 4)|0;
 $292 = $291;
 HEAP32[$292>>2] = $288;
 $293 = $19;
 $294 = $293;
 $295 = HEAP32[$294>>2]|0;
 $296 = (($293) + 4)|0;
 $297 = $296;
 $298 = HEAP32[$297>>2]|0;
 $299 = (_bitshift64Shl(($295|0),($298|0),21)|0);
 $300 = (getTempRet0() | 0);
 $301 = $6;
 $302 = $301;
 $303 = HEAP32[$302>>2]|0;
 $304 = (($301) + 4)|0;
 $305 = $304;
 $306 = HEAP32[$305>>2]|0;
 $307 = (_i64Subtract(($303|0),($306|0),($299|0),($300|0))|0);
 $308 = (getTempRet0() | 0);
 $309 = $6;
 $310 = $309;
 HEAP32[$310>>2] = $307;
 $311 = (($309) + 4)|0;
 $312 = $311;
 HEAP32[$312>>2] = $308;
 $313 = $8;
 $314 = $313;
 $315 = HEAP32[$314>>2]|0;
 $316 = (($313) + 4)|0;
 $317 = $316;
 $318 = HEAP32[$317>>2]|0;
 $319 = (_i64Add(($315|0),($318|0),1048576,0)|0);
 $320 = (getTempRet0() | 0);
 $321 = (_bitshift64Ashr(($319|0),($320|0),21)|0);
 $322 = (getTempRet0() | 0);
 $323 = $21;
 $324 = $323;
 HEAP32[$324>>2] = $321;
 $325 = (($323) + 4)|0;
 $326 = $325;
 HEAP32[$326>>2] = $322;
 $327 = $21;
 $328 = $327;
 $329 = HEAP32[$328>>2]|0;
 $330 = (($327) + 4)|0;
 $331 = $330;
 $332 = HEAP32[$331>>2]|0;
 $333 = $9;
 $334 = $333;
 $335 = HEAP32[$334>>2]|0;
 $336 = (($333) + 4)|0;
 $337 = $336;
 $338 = HEAP32[$337>>2]|0;
 $339 = (_i64Add(($335|0),($338|0),($329|0),($332|0))|0);
 $340 = (getTempRet0() | 0);
 $341 = $9;
 $342 = $341;
 HEAP32[$342>>2] = $339;
 $343 = (($341) + 4)|0;
 $344 = $343;
 HEAP32[$344>>2] = $340;
 $345 = $21;
 $346 = $345;
 $347 = HEAP32[$346>>2]|0;
 $348 = (($345) + 4)|0;
 $349 = $348;
 $350 = HEAP32[$349>>2]|0;
 $351 = (_bitshift64Shl(($347|0),($350|0),21)|0);
 $352 = (getTempRet0() | 0);
 $353 = $8;
 $354 = $353;
 $355 = HEAP32[$354>>2]|0;
 $356 = (($353) + 4)|0;
 $357 = $356;
 $358 = HEAP32[$357>>2]|0;
 $359 = (_i64Subtract(($355|0),($358|0),($351|0),($352|0))|0);
 $360 = (getTempRet0() | 0);
 $361 = $8;
 $362 = $361;
 HEAP32[$362>>2] = $359;
 $363 = (($361) + 4)|0;
 $364 = $363;
 HEAP32[$364>>2] = $360;
 $365 = $10;
 $366 = $365;
 $367 = HEAP32[$366>>2]|0;
 $368 = (($365) + 4)|0;
 $369 = $368;
 $370 = HEAP32[$369>>2]|0;
 $371 = (_i64Add(($367|0),($370|0),1048576,0)|0);
 $372 = (getTempRet0() | 0);
 $373 = (_bitshift64Ashr(($371|0),($372|0),21)|0);
 $374 = (getTempRet0() | 0);
 $375 = $23;
 $376 = $375;
 HEAP32[$376>>2] = $373;
 $377 = (($375) + 4)|0;
 $378 = $377;
 HEAP32[$378>>2] = $374;
 $379 = $23;
 $380 = $379;
 $381 = HEAP32[$380>>2]|0;
 $382 = (($379) + 4)|0;
 $383 = $382;
 $384 = HEAP32[$383>>2]|0;
 $385 = $11;
 $386 = $385;
 $387 = HEAP32[$386>>2]|0;
 $388 = (($385) + 4)|0;
 $389 = $388;
 $390 = HEAP32[$389>>2]|0;
 $391 = (_i64Add(($387|0),($390|0),($381|0),($384|0))|0);
 $392 = (getTempRet0() | 0);
 $393 = $11;
 $394 = $393;
 HEAP32[$394>>2] = $391;
 $395 = (($393) + 4)|0;
 $396 = $395;
 HEAP32[$396>>2] = $392;
 $397 = $23;
 $398 = $397;
 $399 = HEAP32[$398>>2]|0;
 $400 = (($397) + 4)|0;
 $401 = $400;
 $402 = HEAP32[$401>>2]|0;
 $403 = (_bitshift64Shl(($399|0),($402|0),21)|0);
 $404 = (getTempRet0() | 0);
 $405 = $10;
 $406 = $405;
 $407 = HEAP32[$406>>2]|0;
 $408 = (($405) + 4)|0;
 $409 = $408;
 $410 = HEAP32[$409>>2]|0;
 $411 = (_i64Subtract(($407|0),($410|0),($403|0),($404|0))|0);
 $412 = (getTempRet0() | 0);
 $413 = $10;
 $414 = $413;
 HEAP32[$414>>2] = $411;
 $415 = (($413) + 4)|0;
 $416 = $415;
 HEAP32[$416>>2] = $412;
 $417 = $12;
 $418 = $417;
 $419 = HEAP32[$418>>2]|0;
 $420 = (($417) + 4)|0;
 $421 = $420;
 $422 = HEAP32[$421>>2]|0;
 $423 = (_i64Add(($419|0),($422|0),1048576,0)|0);
 $424 = (getTempRet0() | 0);
 $425 = (_bitshift64Ashr(($423|0),($424|0),21)|0);
 $426 = (getTempRet0() | 0);
 $427 = $25;
 $428 = $427;
 HEAP32[$428>>2] = $425;
 $429 = (($427) + 4)|0;
 $430 = $429;
 HEAP32[$430>>2] = $426;
 $431 = $25;
 $432 = $431;
 $433 = HEAP32[$432>>2]|0;
 $434 = (($431) + 4)|0;
 $435 = $434;
 $436 = HEAP32[$435>>2]|0;
 $437 = $13;
 $438 = $437;
 $439 = HEAP32[$438>>2]|0;
 $440 = (($437) + 4)|0;
 $441 = $440;
 $442 = HEAP32[$441>>2]|0;
 $443 = (_i64Add(($439|0),($442|0),($433|0),($436|0))|0);
 $444 = (getTempRet0() | 0);
 $445 = $13;
 $446 = $445;
 HEAP32[$446>>2] = $443;
 $447 = (($445) + 4)|0;
 $448 = $447;
 HEAP32[$448>>2] = $444;
 $449 = $25;
 $450 = $449;
 $451 = HEAP32[$450>>2]|0;
 $452 = (($449) + 4)|0;
 $453 = $452;
 $454 = HEAP32[$453>>2]|0;
 $455 = (_bitshift64Shl(($451|0),($454|0),21)|0);
 $456 = (getTempRet0() | 0);
 $457 = $12;
 $458 = $457;
 $459 = HEAP32[$458>>2]|0;
 $460 = (($457) + 4)|0;
 $461 = $460;
 $462 = HEAP32[$461>>2]|0;
 $463 = (_i64Subtract(($459|0),($462|0),($455|0),($456|0))|0);
 $464 = (getTempRet0() | 0);
 $465 = $12;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $3;
 $470 = $469;
 $471 = HEAP32[$470>>2]|0;
 $472 = (($469) + 4)|0;
 $473 = $472;
 $474 = HEAP32[$473>>2]|0;
 $475 = (_i64Add(($471|0),($474|0),1048576,0)|0);
 $476 = (getTempRet0() | 0);
 $477 = (_bitshift64Ashr(($475|0),($476|0),21)|0);
 $478 = (getTempRet0() | 0);
 $479 = $16;
 $480 = $479;
 HEAP32[$480>>2] = $477;
 $481 = (($479) + 4)|0;
 $482 = $481;
 HEAP32[$482>>2] = $478;
 $483 = $16;
 $484 = $483;
 $485 = HEAP32[$484>>2]|0;
 $486 = (($483) + 4)|0;
 $487 = $486;
 $488 = HEAP32[$487>>2]|0;
 $489 = $4;
 $490 = $489;
 $491 = HEAP32[$490>>2]|0;
 $492 = (($489) + 4)|0;
 $493 = $492;
 $494 = HEAP32[$493>>2]|0;
 $495 = (_i64Add(($491|0),($494|0),($485|0),($488|0))|0);
 $496 = (getTempRet0() | 0);
 $497 = $4;
 $498 = $497;
 HEAP32[$498>>2] = $495;
 $499 = (($497) + 4)|0;
 $500 = $499;
 HEAP32[$500>>2] = $496;
 $501 = $16;
 $502 = $501;
 $503 = HEAP32[$502>>2]|0;
 $504 = (($501) + 4)|0;
 $505 = $504;
 $506 = HEAP32[$505>>2]|0;
 $507 = (_bitshift64Shl(($503|0),($506|0),21)|0);
 $508 = (getTempRet0() | 0);
 $509 = $3;
 $510 = $509;
 $511 = HEAP32[$510>>2]|0;
 $512 = (($509) + 4)|0;
 $513 = $512;
 $514 = HEAP32[$513>>2]|0;
 $515 = (_i64Subtract(($511|0),($514|0),($507|0),($508|0))|0);
 $516 = (getTempRet0() | 0);
 $517 = $3;
 $518 = $517;
 HEAP32[$518>>2] = $515;
 $519 = (($517) + 4)|0;
 $520 = $519;
 HEAP32[$520>>2] = $516;
 $521 = $5;
 $522 = $521;
 $523 = HEAP32[$522>>2]|0;
 $524 = (($521) + 4)|0;
 $525 = $524;
 $526 = HEAP32[$525>>2]|0;
 $527 = (_i64Add(($523|0),($526|0),1048576,0)|0);
 $528 = (getTempRet0() | 0);
 $529 = (_bitshift64Ashr(($527|0),($528|0),21)|0);
 $530 = (getTempRet0() | 0);
 $531 = $18;
 $532 = $531;
 HEAP32[$532>>2] = $529;
 $533 = (($531) + 4)|0;
 $534 = $533;
 HEAP32[$534>>2] = $530;
 $535 = $18;
 $536 = $535;
 $537 = HEAP32[$536>>2]|0;
 $538 = (($535) + 4)|0;
 $539 = $538;
 $540 = HEAP32[$539>>2]|0;
 $541 = $6;
 $542 = $541;
 $543 = HEAP32[$542>>2]|0;
 $544 = (($541) + 4)|0;
 $545 = $544;
 $546 = HEAP32[$545>>2]|0;
 $547 = (_i64Add(($543|0),($546|0),($537|0),($540|0))|0);
 $548 = (getTempRet0() | 0);
 $549 = $6;
 $550 = $549;
 HEAP32[$550>>2] = $547;
 $551 = (($549) + 4)|0;
 $552 = $551;
 HEAP32[$552>>2] = $548;
 $553 = $18;
 $554 = $553;
 $555 = HEAP32[$554>>2]|0;
 $556 = (($553) + 4)|0;
 $557 = $556;
 $558 = HEAP32[$557>>2]|0;
 $559 = (_bitshift64Shl(($555|0),($558|0),21)|0);
 $560 = (getTempRet0() | 0);
 $561 = $5;
 $562 = $561;
 $563 = HEAP32[$562>>2]|0;
 $564 = (($561) + 4)|0;
 $565 = $564;
 $566 = HEAP32[$565>>2]|0;
 $567 = (_i64Subtract(($563|0),($566|0),($559|0),($560|0))|0);
 $568 = (getTempRet0() | 0);
 $569 = $5;
 $570 = $569;
 HEAP32[$570>>2] = $567;
 $571 = (($569) + 4)|0;
 $572 = $571;
 HEAP32[$572>>2] = $568;
 $573 = $7;
 $574 = $573;
 $575 = HEAP32[$574>>2]|0;
 $576 = (($573) + 4)|0;
 $577 = $576;
 $578 = HEAP32[$577>>2]|0;
 $579 = (_i64Add(($575|0),($578|0),1048576,0)|0);
 $580 = (getTempRet0() | 0);
 $581 = (_bitshift64Ashr(($579|0),($580|0),21)|0);
 $582 = (getTempRet0() | 0);
 $583 = $20;
 $584 = $583;
 HEAP32[$584>>2] = $581;
 $585 = (($583) + 4)|0;
 $586 = $585;
 HEAP32[$586>>2] = $582;
 $587 = $20;
 $588 = $587;
 $589 = HEAP32[$588>>2]|0;
 $590 = (($587) + 4)|0;
 $591 = $590;
 $592 = HEAP32[$591>>2]|0;
 $593 = $8;
 $594 = $593;
 $595 = HEAP32[$594>>2]|0;
 $596 = (($593) + 4)|0;
 $597 = $596;
 $598 = HEAP32[$597>>2]|0;
 $599 = (_i64Add(($595|0),($598|0),($589|0),($592|0))|0);
 $600 = (getTempRet0() | 0);
 $601 = $8;
 $602 = $601;
 HEAP32[$602>>2] = $599;
 $603 = (($601) + 4)|0;
 $604 = $603;
 HEAP32[$604>>2] = $600;
 $605 = $20;
 $606 = $605;
 $607 = HEAP32[$606>>2]|0;
 $608 = (($605) + 4)|0;
 $609 = $608;
 $610 = HEAP32[$609>>2]|0;
 $611 = (_bitshift64Shl(($607|0),($610|0),21)|0);
 $612 = (getTempRet0() | 0);
 $613 = $7;
 $614 = $613;
 $615 = HEAP32[$614>>2]|0;
 $616 = (($613) + 4)|0;
 $617 = $616;
 $618 = HEAP32[$617>>2]|0;
 $619 = (_i64Subtract(($615|0),($618|0),($611|0),($612|0))|0);
 $620 = (getTempRet0() | 0);
 $621 = $7;
 $622 = $621;
 HEAP32[$622>>2] = $619;
 $623 = (($621) + 4)|0;
 $624 = $623;
 HEAP32[$624>>2] = $620;
 $625 = $9;
 $626 = $625;
 $627 = HEAP32[$626>>2]|0;
 $628 = (($625) + 4)|0;
 $629 = $628;
 $630 = HEAP32[$629>>2]|0;
 $631 = (_i64Add(($627|0),($630|0),1048576,0)|0);
 $632 = (getTempRet0() | 0);
 $633 = (_bitshift64Ashr(($631|0),($632|0),21)|0);
 $634 = (getTempRet0() | 0);
 $635 = $22;
 $636 = $635;
 HEAP32[$636>>2] = $633;
 $637 = (($635) + 4)|0;
 $638 = $637;
 HEAP32[$638>>2] = $634;
 $639 = $22;
 $640 = $639;
 $641 = HEAP32[$640>>2]|0;
 $642 = (($639) + 4)|0;
 $643 = $642;
 $644 = HEAP32[$643>>2]|0;
 $645 = $10;
 $646 = $645;
 $647 = HEAP32[$646>>2]|0;
 $648 = (($645) + 4)|0;
 $649 = $648;
 $650 = HEAP32[$649>>2]|0;
 $651 = (_i64Add(($647|0),($650|0),($641|0),($644|0))|0);
 $652 = (getTempRet0() | 0);
 $653 = $10;
 $654 = $653;
 HEAP32[$654>>2] = $651;
 $655 = (($653) + 4)|0;
 $656 = $655;
 HEAP32[$656>>2] = $652;
 $657 = $22;
 $658 = $657;
 $659 = HEAP32[$658>>2]|0;
 $660 = (($657) + 4)|0;
 $661 = $660;
 $662 = HEAP32[$661>>2]|0;
 $663 = (_bitshift64Shl(($659|0),($662|0),21)|0);
 $664 = (getTempRet0() | 0);
 $665 = $9;
 $666 = $665;
 $667 = HEAP32[$666>>2]|0;
 $668 = (($665) + 4)|0;
 $669 = $668;
 $670 = HEAP32[$669>>2]|0;
 $671 = (_i64Subtract(($667|0),($670|0),($663|0),($664|0))|0);
 $672 = (getTempRet0() | 0);
 $673 = $9;
 $674 = $673;
 HEAP32[$674>>2] = $671;
 $675 = (($673) + 4)|0;
 $676 = $675;
 HEAP32[$676>>2] = $672;
 $677 = $11;
 $678 = $677;
 $679 = HEAP32[$678>>2]|0;
 $680 = (($677) + 4)|0;
 $681 = $680;
 $682 = HEAP32[$681>>2]|0;
 $683 = (_i64Add(($679|0),($682|0),1048576,0)|0);
 $684 = (getTempRet0() | 0);
 $685 = (_bitshift64Ashr(($683|0),($684|0),21)|0);
 $686 = (getTempRet0() | 0);
 $687 = $24;
 $688 = $687;
 HEAP32[$688>>2] = $685;
 $689 = (($687) + 4)|0;
 $690 = $689;
 HEAP32[$690>>2] = $686;
 $691 = $24;
 $692 = $691;
 $693 = HEAP32[$692>>2]|0;
 $694 = (($691) + 4)|0;
 $695 = $694;
 $696 = HEAP32[$695>>2]|0;
 $697 = $12;
 $698 = $697;
 $699 = HEAP32[$698>>2]|0;
 $700 = (($697) + 4)|0;
 $701 = $700;
 $702 = HEAP32[$701>>2]|0;
 $703 = (_i64Add(($699|0),($702|0),($693|0),($696|0))|0);
 $704 = (getTempRet0() | 0);
 $705 = $12;
 $706 = $705;
 HEAP32[$706>>2] = $703;
 $707 = (($705) + 4)|0;
 $708 = $707;
 HEAP32[$708>>2] = $704;
 $709 = $24;
 $710 = $709;
 $711 = HEAP32[$710>>2]|0;
 $712 = (($709) + 4)|0;
 $713 = $712;
 $714 = HEAP32[$713>>2]|0;
 $715 = (_bitshift64Shl(($711|0),($714|0),21)|0);
 $716 = (getTempRet0() | 0);
 $717 = $11;
 $718 = $717;
 $719 = HEAP32[$718>>2]|0;
 $720 = (($717) + 4)|0;
 $721 = $720;
 $722 = HEAP32[$721>>2]|0;
 $723 = (_i64Subtract(($719|0),($722|0),($715|0),($716|0))|0);
 $724 = (getTempRet0() | 0);
 $725 = $11;
 $726 = $725;
 HEAP32[$726>>2] = $723;
 $727 = (($725) + 4)|0;
 $728 = $727;
 HEAP32[$728>>2] = $724;
 $729 = $13;
 $730 = $729;
 $731 = HEAP32[$730>>2]|0;
 $732 = (($729) + 4)|0;
 $733 = $732;
 $734 = HEAP32[$733>>2]|0;
 $735 = (_i64Add(($731|0),($734|0),1048576,0)|0);
 $736 = (getTempRet0() | 0);
 $737 = (_bitshift64Ashr(($735|0),($736|0),21)|0);
 $738 = (getTempRet0() | 0);
 $739 = $26;
 $740 = $739;
 HEAP32[$740>>2] = $737;
 $741 = (($739) + 4)|0;
 $742 = $741;
 HEAP32[$742>>2] = $738;
 $743 = $26;
 $744 = $743;
 $745 = HEAP32[$744>>2]|0;
 $746 = (($743) + 4)|0;
 $747 = $746;
 $748 = HEAP32[$747>>2]|0;
 $749 = $14;
 $750 = $749;
 $751 = HEAP32[$750>>2]|0;
 $752 = (($749) + 4)|0;
 $753 = $752;
 $754 = HEAP32[$753>>2]|0;
 $755 = (_i64Add(($751|0),($754|0),($745|0),($748|0))|0);
 $756 = (getTempRet0() | 0);
 $757 = $14;
 $758 = $757;
 HEAP32[$758>>2] = $755;
 $759 = (($757) + 4)|0;
 $760 = $759;
 HEAP32[$760>>2] = $756;
 $761 = $26;
 $762 = $761;
 $763 = HEAP32[$762>>2]|0;
 $764 = (($761) + 4)|0;
 $765 = $764;
 $766 = HEAP32[$765>>2]|0;
 $767 = (_bitshift64Shl(($763|0),($766|0),21)|0);
 $768 = (getTempRet0() | 0);
 $769 = $13;
 $770 = $769;
 $771 = HEAP32[$770>>2]|0;
 $772 = (($769) + 4)|0;
 $773 = $772;
 $774 = HEAP32[$773>>2]|0;
 $775 = (_i64Subtract(($771|0),($774|0),($767|0),($768|0))|0);
 $776 = (getTempRet0() | 0);
 $777 = $13;
 $778 = $777;
 HEAP32[$778>>2] = $775;
 $779 = (($777) + 4)|0;
 $780 = $779;
 HEAP32[$780>>2] = $776;
 $781 = $14;
 $782 = $781;
 $783 = HEAP32[$782>>2]|0;
 $784 = (($781) + 4)|0;
 $785 = $784;
 $786 = HEAP32[$785>>2]|0;
 $787 = (___muldi3(($783|0),($786|0),666643,0)|0);
 $788 = (getTempRet0() | 0);
 $789 = $2;
 $790 = $789;
 $791 = HEAP32[$790>>2]|0;
 $792 = (($789) + 4)|0;
 $793 = $792;
 $794 = HEAP32[$793>>2]|0;
 $795 = (_i64Add(($791|0),($794|0),($787|0),($788|0))|0);
 $796 = (getTempRet0() | 0);
 $797 = $2;
 $798 = $797;
 HEAP32[$798>>2] = $795;
 $799 = (($797) + 4)|0;
 $800 = $799;
 HEAP32[$800>>2] = $796;
 $801 = $14;
 $802 = $801;
 $803 = HEAP32[$802>>2]|0;
 $804 = (($801) + 4)|0;
 $805 = $804;
 $806 = HEAP32[$805>>2]|0;
 $807 = (___muldi3(($803|0),($806|0),470296,0)|0);
 $808 = (getTempRet0() | 0);
 $809 = $3;
 $810 = $809;
 $811 = HEAP32[$810>>2]|0;
 $812 = (($809) + 4)|0;
 $813 = $812;
 $814 = HEAP32[$813>>2]|0;
 $815 = (_i64Add(($811|0),($814|0),($807|0),($808|0))|0);
 $816 = (getTempRet0() | 0);
 $817 = $3;
 $818 = $817;
 HEAP32[$818>>2] = $815;
 $819 = (($817) + 4)|0;
 $820 = $819;
 HEAP32[$820>>2] = $816;
 $821 = $14;
 $822 = $821;
 $823 = HEAP32[$822>>2]|0;
 $824 = (($821) + 4)|0;
 $825 = $824;
 $826 = HEAP32[$825>>2]|0;
 $827 = (___muldi3(($823|0),($826|0),654183,0)|0);
 $828 = (getTempRet0() | 0);
 $829 = $4;
 $830 = $829;
 $831 = HEAP32[$830>>2]|0;
 $832 = (($829) + 4)|0;
 $833 = $832;
 $834 = HEAP32[$833>>2]|0;
 $835 = (_i64Add(($831|0),($834|0),($827|0),($828|0))|0);
 $836 = (getTempRet0() | 0);
 $837 = $4;
 $838 = $837;
 HEAP32[$838>>2] = $835;
 $839 = (($837) + 4)|0;
 $840 = $839;
 HEAP32[$840>>2] = $836;
 $841 = $14;
 $842 = $841;
 $843 = HEAP32[$842>>2]|0;
 $844 = (($841) + 4)|0;
 $845 = $844;
 $846 = HEAP32[$845>>2]|0;
 $847 = (___muldi3(($843|0),($846|0),997805,0)|0);
 $848 = (getTempRet0() | 0);
 $849 = $5;
 $850 = $849;
 $851 = HEAP32[$850>>2]|0;
 $852 = (($849) + 4)|0;
 $853 = $852;
 $854 = HEAP32[$853>>2]|0;
 $855 = (_i64Subtract(($851|0),($854|0),($847|0),($848|0))|0);
 $856 = (getTempRet0() | 0);
 $857 = $5;
 $858 = $857;
 HEAP32[$858>>2] = $855;
 $859 = (($857) + 4)|0;
 $860 = $859;
 HEAP32[$860>>2] = $856;
 $861 = $14;
 $862 = $861;
 $863 = HEAP32[$862>>2]|0;
 $864 = (($861) + 4)|0;
 $865 = $864;
 $866 = HEAP32[$865>>2]|0;
 $867 = (___muldi3(($863|0),($866|0),136657,0)|0);
 $868 = (getTempRet0() | 0);
 $869 = $6;
 $870 = $869;
 $871 = HEAP32[$870>>2]|0;
 $872 = (($869) + 4)|0;
 $873 = $872;
 $874 = HEAP32[$873>>2]|0;
 $875 = (_i64Add(($871|0),($874|0),($867|0),($868|0))|0);
 $876 = (getTempRet0() | 0);
 $877 = $6;
 $878 = $877;
 HEAP32[$878>>2] = $875;
 $879 = (($877) + 4)|0;
 $880 = $879;
 HEAP32[$880>>2] = $876;
 $881 = $14;
 $882 = $881;
 $883 = HEAP32[$882>>2]|0;
 $884 = (($881) + 4)|0;
 $885 = $884;
 $886 = HEAP32[$885>>2]|0;
 $887 = (___muldi3(($883|0),($886|0),683901,0)|0);
 $888 = (getTempRet0() | 0);
 $889 = $7;
 $890 = $889;
 $891 = HEAP32[$890>>2]|0;
 $892 = (($889) + 4)|0;
 $893 = $892;
 $894 = HEAP32[$893>>2]|0;
 $895 = (_i64Subtract(($891|0),($894|0),($887|0),($888|0))|0);
 $896 = (getTempRet0() | 0);
 $897 = $7;
 $898 = $897;
 HEAP32[$898>>2] = $895;
 $899 = (($897) + 4)|0;
 $900 = $899;
 HEAP32[$900>>2] = $896;
 $901 = $14;
 $902 = $901;
 HEAP32[$902>>2] = 0;
 $903 = (($901) + 4)|0;
 $904 = $903;
 HEAP32[$904>>2] = 0;
 $905 = $2;
 $906 = $905;
 $907 = HEAP32[$906>>2]|0;
 $908 = (($905) + 4)|0;
 $909 = $908;
 $910 = HEAP32[$909>>2]|0;
 $911 = (_bitshift64Ashr(($907|0),($910|0),21)|0);
 $912 = (getTempRet0() | 0);
 $913 = $15;
 $914 = $913;
 HEAP32[$914>>2] = $911;
 $915 = (($913) + 4)|0;
 $916 = $915;
 HEAP32[$916>>2] = $912;
 $917 = $15;
 $918 = $917;
 $919 = HEAP32[$918>>2]|0;
 $920 = (($917) + 4)|0;
 $921 = $920;
 $922 = HEAP32[$921>>2]|0;
 $923 = $3;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (_i64Add(($925|0),($928|0),($919|0),($922|0))|0);
 $930 = (getTempRet0() | 0);
 $931 = $3;
 $932 = $931;
 HEAP32[$932>>2] = $929;
 $933 = (($931) + 4)|0;
 $934 = $933;
 HEAP32[$934>>2] = $930;
 $935 = $15;
 $936 = $935;
 $937 = HEAP32[$936>>2]|0;
 $938 = (($935) + 4)|0;
 $939 = $938;
 $940 = HEAP32[$939>>2]|0;
 $941 = (_bitshift64Shl(($937|0),($940|0),21)|0);
 $942 = (getTempRet0() | 0);
 $943 = $2;
 $944 = $943;
 $945 = HEAP32[$944>>2]|0;
 $946 = (($943) + 4)|0;
 $947 = $946;
 $948 = HEAP32[$947>>2]|0;
 $949 = (_i64Subtract(($945|0),($948|0),($941|0),($942|0))|0);
 $950 = (getTempRet0() | 0);
 $951 = $2;
 $952 = $951;
 HEAP32[$952>>2] = $949;
 $953 = (($951) + 4)|0;
 $954 = $953;
 HEAP32[$954>>2] = $950;
 $955 = $3;
 $956 = $955;
 $957 = HEAP32[$956>>2]|0;
 $958 = (($955) + 4)|0;
 $959 = $958;
 $960 = HEAP32[$959>>2]|0;
 $961 = (_bitshift64Ashr(($957|0),($960|0),21)|0);
 $962 = (getTempRet0() | 0);
 $963 = $16;
 $964 = $963;
 HEAP32[$964>>2] = $961;
 $965 = (($963) + 4)|0;
 $966 = $965;
 HEAP32[$966>>2] = $962;
 $967 = $16;
 $968 = $967;
 $969 = HEAP32[$968>>2]|0;
 $970 = (($967) + 4)|0;
 $971 = $970;
 $972 = HEAP32[$971>>2]|0;
 $973 = $4;
 $974 = $973;
 $975 = HEAP32[$974>>2]|0;
 $976 = (($973) + 4)|0;
 $977 = $976;
 $978 = HEAP32[$977>>2]|0;
 $979 = (_i64Add(($975|0),($978|0),($969|0),($972|0))|0);
 $980 = (getTempRet0() | 0);
 $981 = $4;
 $982 = $981;
 HEAP32[$982>>2] = $979;
 $983 = (($981) + 4)|0;
 $984 = $983;
 HEAP32[$984>>2] = $980;
 $985 = $16;
 $986 = $985;
 $987 = HEAP32[$986>>2]|0;
 $988 = (($985) + 4)|0;
 $989 = $988;
 $990 = HEAP32[$989>>2]|0;
 $991 = (_bitshift64Shl(($987|0),($990|0),21)|0);
 $992 = (getTempRet0() | 0);
 $993 = $3;
 $994 = $993;
 $995 = HEAP32[$994>>2]|0;
 $996 = (($993) + 4)|0;
 $997 = $996;
 $998 = HEAP32[$997>>2]|0;
 $999 = (_i64Subtract(($995|0),($998|0),($991|0),($992|0))|0);
 $1000 = (getTempRet0() | 0);
 $1001 = $3;
 $1002 = $1001;
 HEAP32[$1002>>2] = $999;
 $1003 = (($1001) + 4)|0;
 $1004 = $1003;
 HEAP32[$1004>>2] = $1000;
 $1005 = $4;
 $1006 = $1005;
 $1007 = HEAP32[$1006>>2]|0;
 $1008 = (($1005) + 4)|0;
 $1009 = $1008;
 $1010 = HEAP32[$1009>>2]|0;
 $1011 = (_bitshift64Ashr(($1007|0),($1010|0),21)|0);
 $1012 = (getTempRet0() | 0);
 $1013 = $17;
 $1014 = $1013;
 HEAP32[$1014>>2] = $1011;
 $1015 = (($1013) + 4)|0;
 $1016 = $1015;
 HEAP32[$1016>>2] = $1012;
 $1017 = $17;
 $1018 = $1017;
 $1019 = HEAP32[$1018>>2]|0;
 $1020 = (($1017) + 4)|0;
 $1021 = $1020;
 $1022 = HEAP32[$1021>>2]|0;
 $1023 = $5;
 $1024 = $1023;
 $1025 = HEAP32[$1024>>2]|0;
 $1026 = (($1023) + 4)|0;
 $1027 = $1026;
 $1028 = HEAP32[$1027>>2]|0;
 $1029 = (_i64Add(($1025|0),($1028|0),($1019|0),($1022|0))|0);
 $1030 = (getTempRet0() | 0);
 $1031 = $5;
 $1032 = $1031;
 HEAP32[$1032>>2] = $1029;
 $1033 = (($1031) + 4)|0;
 $1034 = $1033;
 HEAP32[$1034>>2] = $1030;
 $1035 = $17;
 $1036 = $1035;
 $1037 = HEAP32[$1036>>2]|0;
 $1038 = (($1035) + 4)|0;
 $1039 = $1038;
 $1040 = HEAP32[$1039>>2]|0;
 $1041 = (_bitshift64Shl(($1037|0),($1040|0),21)|0);
 $1042 = (getTempRet0() | 0);
 $1043 = $4;
 $1044 = $1043;
 $1045 = HEAP32[$1044>>2]|0;
 $1046 = (($1043) + 4)|0;
 $1047 = $1046;
 $1048 = HEAP32[$1047>>2]|0;
 $1049 = (_i64Subtract(($1045|0),($1048|0),($1041|0),($1042|0))|0);
 $1050 = (getTempRet0() | 0);
 $1051 = $4;
 $1052 = $1051;
 HEAP32[$1052>>2] = $1049;
 $1053 = (($1051) + 4)|0;
 $1054 = $1053;
 HEAP32[$1054>>2] = $1050;
 $1055 = $5;
 $1056 = $1055;
 $1057 = HEAP32[$1056>>2]|0;
 $1058 = (($1055) + 4)|0;
 $1059 = $1058;
 $1060 = HEAP32[$1059>>2]|0;
 $1061 = (_bitshift64Ashr(($1057|0),($1060|0),21)|0);
 $1062 = (getTempRet0() | 0);
 $1063 = $18;
 $1064 = $1063;
 HEAP32[$1064>>2] = $1061;
 $1065 = (($1063) + 4)|0;
 $1066 = $1065;
 HEAP32[$1066>>2] = $1062;
 $1067 = $18;
 $1068 = $1067;
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($1067) + 4)|0;
 $1071 = $1070;
 $1072 = HEAP32[$1071>>2]|0;
 $1073 = $6;
 $1074 = $1073;
 $1075 = HEAP32[$1074>>2]|0;
 $1076 = (($1073) + 4)|0;
 $1077 = $1076;
 $1078 = HEAP32[$1077>>2]|0;
 $1079 = (_i64Add(($1075|0),($1078|0),($1069|0),($1072|0))|0);
 $1080 = (getTempRet0() | 0);
 $1081 = $6;
 $1082 = $1081;
 HEAP32[$1082>>2] = $1079;
 $1083 = (($1081) + 4)|0;
 $1084 = $1083;
 HEAP32[$1084>>2] = $1080;
 $1085 = $18;
 $1086 = $1085;
 $1087 = HEAP32[$1086>>2]|0;
 $1088 = (($1085) + 4)|0;
 $1089 = $1088;
 $1090 = HEAP32[$1089>>2]|0;
 $1091 = (_bitshift64Shl(($1087|0),($1090|0),21)|0);
 $1092 = (getTempRet0() | 0);
 $1093 = $5;
 $1094 = $1093;
 $1095 = HEAP32[$1094>>2]|0;
 $1096 = (($1093) + 4)|0;
 $1097 = $1096;
 $1098 = HEAP32[$1097>>2]|0;
 $1099 = (_i64Subtract(($1095|0),($1098|0),($1091|0),($1092|0))|0);
 $1100 = (getTempRet0() | 0);
 $1101 = $5;
 $1102 = $1101;
 HEAP32[$1102>>2] = $1099;
 $1103 = (($1101) + 4)|0;
 $1104 = $1103;
 HEAP32[$1104>>2] = $1100;
 $1105 = $6;
 $1106 = $1105;
 $1107 = HEAP32[$1106>>2]|0;
 $1108 = (($1105) + 4)|0;
 $1109 = $1108;
 $1110 = HEAP32[$1109>>2]|0;
 $1111 = (_bitshift64Ashr(($1107|0),($1110|0),21)|0);
 $1112 = (getTempRet0() | 0);
 $1113 = $19;
 $1114 = $1113;
 HEAP32[$1114>>2] = $1111;
 $1115 = (($1113) + 4)|0;
 $1116 = $1115;
 HEAP32[$1116>>2] = $1112;
 $1117 = $19;
 $1118 = $1117;
 $1119 = HEAP32[$1118>>2]|0;
 $1120 = (($1117) + 4)|0;
 $1121 = $1120;
 $1122 = HEAP32[$1121>>2]|0;
 $1123 = $7;
 $1124 = $1123;
 $1125 = HEAP32[$1124>>2]|0;
 $1126 = (($1123) + 4)|0;
 $1127 = $1126;
 $1128 = HEAP32[$1127>>2]|0;
 $1129 = (_i64Add(($1125|0),($1128|0),($1119|0),($1122|0))|0);
 $1130 = (getTempRet0() | 0);
 $1131 = $7;
 $1132 = $1131;
 HEAP32[$1132>>2] = $1129;
 $1133 = (($1131) + 4)|0;
 $1134 = $1133;
 HEAP32[$1134>>2] = $1130;
 $1135 = $19;
 $1136 = $1135;
 $1137 = HEAP32[$1136>>2]|0;
 $1138 = (($1135) + 4)|0;
 $1139 = $1138;
 $1140 = HEAP32[$1139>>2]|0;
 $1141 = (_bitshift64Shl(($1137|0),($1140|0),21)|0);
 $1142 = (getTempRet0() | 0);
 $1143 = $6;
 $1144 = $1143;
 $1145 = HEAP32[$1144>>2]|0;
 $1146 = (($1143) + 4)|0;
 $1147 = $1146;
 $1148 = HEAP32[$1147>>2]|0;
 $1149 = (_i64Subtract(($1145|0),($1148|0),($1141|0),($1142|0))|0);
 $1150 = (getTempRet0() | 0);
 $1151 = $6;
 $1152 = $1151;
 HEAP32[$1152>>2] = $1149;
 $1153 = (($1151) + 4)|0;
 $1154 = $1153;
 HEAP32[$1154>>2] = $1150;
 $1155 = $7;
 $1156 = $1155;
 $1157 = HEAP32[$1156>>2]|0;
 $1158 = (($1155) + 4)|0;
 $1159 = $1158;
 $1160 = HEAP32[$1159>>2]|0;
 $1161 = (_bitshift64Ashr(($1157|0),($1160|0),21)|0);
 $1162 = (getTempRet0() | 0);
 $1163 = $20;
 $1164 = $1163;
 HEAP32[$1164>>2] = $1161;
 $1165 = (($1163) + 4)|0;
 $1166 = $1165;
 HEAP32[$1166>>2] = $1162;
 $1167 = $20;
 $1168 = $1167;
 $1169 = HEAP32[$1168>>2]|0;
 $1170 = (($1167) + 4)|0;
 $1171 = $1170;
 $1172 = HEAP32[$1171>>2]|0;
 $1173 = $8;
 $1174 = $1173;
 $1175 = HEAP32[$1174>>2]|0;
 $1176 = (($1173) + 4)|0;
 $1177 = $1176;
 $1178 = HEAP32[$1177>>2]|0;
 $1179 = (_i64Add(($1175|0),($1178|0),($1169|0),($1172|0))|0);
 $1180 = (getTempRet0() | 0);
 $1181 = $8;
 $1182 = $1181;
 HEAP32[$1182>>2] = $1179;
 $1183 = (($1181) + 4)|0;
 $1184 = $1183;
 HEAP32[$1184>>2] = $1180;
 $1185 = $20;
 $1186 = $1185;
 $1187 = HEAP32[$1186>>2]|0;
 $1188 = (($1185) + 4)|0;
 $1189 = $1188;
 $1190 = HEAP32[$1189>>2]|0;
 $1191 = (_bitshift64Shl(($1187|0),($1190|0),21)|0);
 $1192 = (getTempRet0() | 0);
 $1193 = $7;
 $1194 = $1193;
 $1195 = HEAP32[$1194>>2]|0;
 $1196 = (($1193) + 4)|0;
 $1197 = $1196;
 $1198 = HEAP32[$1197>>2]|0;
 $1199 = (_i64Subtract(($1195|0),($1198|0),($1191|0),($1192|0))|0);
 $1200 = (getTempRet0() | 0);
 $1201 = $7;
 $1202 = $1201;
 HEAP32[$1202>>2] = $1199;
 $1203 = (($1201) + 4)|0;
 $1204 = $1203;
 HEAP32[$1204>>2] = $1200;
 $1205 = $8;
 $1206 = $1205;
 $1207 = HEAP32[$1206>>2]|0;
 $1208 = (($1205) + 4)|0;
 $1209 = $1208;
 $1210 = HEAP32[$1209>>2]|0;
 $1211 = (_bitshift64Ashr(($1207|0),($1210|0),21)|0);
 $1212 = (getTempRet0() | 0);
 $1213 = $21;
 $1214 = $1213;
 HEAP32[$1214>>2] = $1211;
 $1215 = (($1213) + 4)|0;
 $1216 = $1215;
 HEAP32[$1216>>2] = $1212;
 $1217 = $21;
 $1218 = $1217;
 $1219 = HEAP32[$1218>>2]|0;
 $1220 = (($1217) + 4)|0;
 $1221 = $1220;
 $1222 = HEAP32[$1221>>2]|0;
 $1223 = $9;
 $1224 = $1223;
 $1225 = HEAP32[$1224>>2]|0;
 $1226 = (($1223) + 4)|0;
 $1227 = $1226;
 $1228 = HEAP32[$1227>>2]|0;
 $1229 = (_i64Add(($1225|0),($1228|0),($1219|0),($1222|0))|0);
 $1230 = (getTempRet0() | 0);
 $1231 = $9;
 $1232 = $1231;
 HEAP32[$1232>>2] = $1229;
 $1233 = (($1231) + 4)|0;
 $1234 = $1233;
 HEAP32[$1234>>2] = $1230;
 $1235 = $21;
 $1236 = $1235;
 $1237 = HEAP32[$1236>>2]|0;
 $1238 = (($1235) + 4)|0;
 $1239 = $1238;
 $1240 = HEAP32[$1239>>2]|0;
 $1241 = (_bitshift64Shl(($1237|0),($1240|0),21)|0);
 $1242 = (getTempRet0() | 0);
 $1243 = $8;
 $1244 = $1243;
 $1245 = HEAP32[$1244>>2]|0;
 $1246 = (($1243) + 4)|0;
 $1247 = $1246;
 $1248 = HEAP32[$1247>>2]|0;
 $1249 = (_i64Subtract(($1245|0),($1248|0),($1241|0),($1242|0))|0);
 $1250 = (getTempRet0() | 0);
 $1251 = $8;
 $1252 = $1251;
 HEAP32[$1252>>2] = $1249;
 $1253 = (($1251) + 4)|0;
 $1254 = $1253;
 HEAP32[$1254>>2] = $1250;
 $1255 = $9;
 $1256 = $1255;
 $1257 = HEAP32[$1256>>2]|0;
 $1258 = (($1255) + 4)|0;
 $1259 = $1258;
 $1260 = HEAP32[$1259>>2]|0;
 $1261 = (_bitshift64Ashr(($1257|0),($1260|0),21)|0);
 $1262 = (getTempRet0() | 0);
 $1263 = $22;
 $1264 = $1263;
 HEAP32[$1264>>2] = $1261;
 $1265 = (($1263) + 4)|0;
 $1266 = $1265;
 HEAP32[$1266>>2] = $1262;
 $1267 = $22;
 $1268 = $1267;
 $1269 = HEAP32[$1268>>2]|0;
 $1270 = (($1267) + 4)|0;
 $1271 = $1270;
 $1272 = HEAP32[$1271>>2]|0;
 $1273 = $10;
 $1274 = $1273;
 $1275 = HEAP32[$1274>>2]|0;
 $1276 = (($1273) + 4)|0;
 $1277 = $1276;
 $1278 = HEAP32[$1277>>2]|0;
 $1279 = (_i64Add(($1275|0),($1278|0),($1269|0),($1272|0))|0);
 $1280 = (getTempRet0() | 0);
 $1281 = $10;
 $1282 = $1281;
 HEAP32[$1282>>2] = $1279;
 $1283 = (($1281) + 4)|0;
 $1284 = $1283;
 HEAP32[$1284>>2] = $1280;
 $1285 = $22;
 $1286 = $1285;
 $1287 = HEAP32[$1286>>2]|0;
 $1288 = (($1285) + 4)|0;
 $1289 = $1288;
 $1290 = HEAP32[$1289>>2]|0;
 $1291 = (_bitshift64Shl(($1287|0),($1290|0),21)|0);
 $1292 = (getTempRet0() | 0);
 $1293 = $9;
 $1294 = $1293;
 $1295 = HEAP32[$1294>>2]|0;
 $1296 = (($1293) + 4)|0;
 $1297 = $1296;
 $1298 = HEAP32[$1297>>2]|0;
 $1299 = (_i64Subtract(($1295|0),($1298|0),($1291|0),($1292|0))|0);
 $1300 = (getTempRet0() | 0);
 $1301 = $9;
 $1302 = $1301;
 HEAP32[$1302>>2] = $1299;
 $1303 = (($1301) + 4)|0;
 $1304 = $1303;
 HEAP32[$1304>>2] = $1300;
 $1305 = $10;
 $1306 = $1305;
 $1307 = HEAP32[$1306>>2]|0;
 $1308 = (($1305) + 4)|0;
 $1309 = $1308;
 $1310 = HEAP32[$1309>>2]|0;
 $1311 = (_bitshift64Ashr(($1307|0),($1310|0),21)|0);
 $1312 = (getTempRet0() | 0);
 $1313 = $23;
 $1314 = $1313;
 HEAP32[$1314>>2] = $1311;
 $1315 = (($1313) + 4)|0;
 $1316 = $1315;
 HEAP32[$1316>>2] = $1312;
 $1317 = $23;
 $1318 = $1317;
 $1319 = HEAP32[$1318>>2]|0;
 $1320 = (($1317) + 4)|0;
 $1321 = $1320;
 $1322 = HEAP32[$1321>>2]|0;
 $1323 = $11;
 $1324 = $1323;
 $1325 = HEAP32[$1324>>2]|0;
 $1326 = (($1323) + 4)|0;
 $1327 = $1326;
 $1328 = HEAP32[$1327>>2]|0;
 $1329 = (_i64Add(($1325|0),($1328|0),($1319|0),($1322|0))|0);
 $1330 = (getTempRet0() | 0);
 $1331 = $11;
 $1332 = $1331;
 HEAP32[$1332>>2] = $1329;
 $1333 = (($1331) + 4)|0;
 $1334 = $1333;
 HEAP32[$1334>>2] = $1330;
 $1335 = $23;
 $1336 = $1335;
 $1337 = HEAP32[$1336>>2]|0;
 $1338 = (($1335) + 4)|0;
 $1339 = $1338;
 $1340 = HEAP32[$1339>>2]|0;
 $1341 = (_bitshift64Shl(($1337|0),($1340|0),21)|0);
 $1342 = (getTempRet0() | 0);
 $1343 = $10;
 $1344 = $1343;
 $1345 = HEAP32[$1344>>2]|0;
 $1346 = (($1343) + 4)|0;
 $1347 = $1346;
 $1348 = HEAP32[$1347>>2]|0;
 $1349 = (_i64Subtract(($1345|0),($1348|0),($1341|0),($1342|0))|0);
 $1350 = (getTempRet0() | 0);
 $1351 = $10;
 $1352 = $1351;
 HEAP32[$1352>>2] = $1349;
 $1353 = (($1351) + 4)|0;
 $1354 = $1353;
 HEAP32[$1354>>2] = $1350;
 $1355 = $11;
 $1356 = $1355;
 $1357 = HEAP32[$1356>>2]|0;
 $1358 = (($1355) + 4)|0;
 $1359 = $1358;
 $1360 = HEAP32[$1359>>2]|0;
 $1361 = (_bitshift64Ashr(($1357|0),($1360|0),21)|0);
 $1362 = (getTempRet0() | 0);
 $1363 = $24;
 $1364 = $1363;
 HEAP32[$1364>>2] = $1361;
 $1365 = (($1363) + 4)|0;
 $1366 = $1365;
 HEAP32[$1366>>2] = $1362;
 $1367 = $24;
 $1368 = $1367;
 $1369 = HEAP32[$1368>>2]|0;
 $1370 = (($1367) + 4)|0;
 $1371 = $1370;
 $1372 = HEAP32[$1371>>2]|0;
 $1373 = $12;
 $1374 = $1373;
 $1375 = HEAP32[$1374>>2]|0;
 $1376 = (($1373) + 4)|0;
 $1377 = $1376;
 $1378 = HEAP32[$1377>>2]|0;
 $1379 = (_i64Add(($1375|0),($1378|0),($1369|0),($1372|0))|0);
 $1380 = (getTempRet0() | 0);
 $1381 = $12;
 $1382 = $1381;
 HEAP32[$1382>>2] = $1379;
 $1383 = (($1381) + 4)|0;
 $1384 = $1383;
 HEAP32[$1384>>2] = $1380;
 $1385 = $24;
 $1386 = $1385;
 $1387 = HEAP32[$1386>>2]|0;
 $1388 = (($1385) + 4)|0;
 $1389 = $1388;
 $1390 = HEAP32[$1389>>2]|0;
 $1391 = (_bitshift64Shl(($1387|0),($1390|0),21)|0);
 $1392 = (getTempRet0() | 0);
 $1393 = $11;
 $1394 = $1393;
 $1395 = HEAP32[$1394>>2]|0;
 $1396 = (($1393) + 4)|0;
 $1397 = $1396;
 $1398 = HEAP32[$1397>>2]|0;
 $1399 = (_i64Subtract(($1395|0),($1398|0),($1391|0),($1392|0))|0);
 $1400 = (getTempRet0() | 0);
 $1401 = $11;
 $1402 = $1401;
 HEAP32[$1402>>2] = $1399;
 $1403 = (($1401) + 4)|0;
 $1404 = $1403;
 HEAP32[$1404>>2] = $1400;
 $1405 = $12;
 $1406 = $1405;
 $1407 = HEAP32[$1406>>2]|0;
 $1408 = (($1405) + 4)|0;
 $1409 = $1408;
 $1410 = HEAP32[$1409>>2]|0;
 $1411 = (_bitshift64Ashr(($1407|0),($1410|0),21)|0);
 $1412 = (getTempRet0() | 0);
 $1413 = $25;
 $1414 = $1413;
 HEAP32[$1414>>2] = $1411;
 $1415 = (($1413) + 4)|0;
 $1416 = $1415;
 HEAP32[$1416>>2] = $1412;
 $1417 = $25;
 $1418 = $1417;
 $1419 = HEAP32[$1418>>2]|0;
 $1420 = (($1417) + 4)|0;
 $1421 = $1420;
 $1422 = HEAP32[$1421>>2]|0;
 $1423 = $13;
 $1424 = $1423;
 $1425 = HEAP32[$1424>>2]|0;
 $1426 = (($1423) + 4)|0;
 $1427 = $1426;
 $1428 = HEAP32[$1427>>2]|0;
 $1429 = (_i64Add(($1425|0),($1428|0),($1419|0),($1422|0))|0);
 $1430 = (getTempRet0() | 0);
 $1431 = $13;
 $1432 = $1431;
 HEAP32[$1432>>2] = $1429;
 $1433 = (($1431) + 4)|0;
 $1434 = $1433;
 HEAP32[$1434>>2] = $1430;
 $1435 = $25;
 $1436 = $1435;
 $1437 = HEAP32[$1436>>2]|0;
 $1438 = (($1435) + 4)|0;
 $1439 = $1438;
 $1440 = HEAP32[$1439>>2]|0;
 $1441 = (_bitshift64Shl(($1437|0),($1440|0),21)|0);
 $1442 = (getTempRet0() | 0);
 $1443 = $12;
 $1444 = $1443;
 $1445 = HEAP32[$1444>>2]|0;
 $1446 = (($1443) + 4)|0;
 $1447 = $1446;
 $1448 = HEAP32[$1447>>2]|0;
 $1449 = (_i64Subtract(($1445|0),($1448|0),($1441|0),($1442|0))|0);
 $1450 = (getTempRet0() | 0);
 $1451 = $12;
 $1452 = $1451;
 HEAP32[$1452>>2] = $1449;
 $1453 = (($1451) + 4)|0;
 $1454 = $1453;
 HEAP32[$1454>>2] = $1450;
 $1455 = $13;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (($1455) + 4)|0;
 $1459 = $1458;
 $1460 = HEAP32[$1459>>2]|0;
 $1461 = (_bitshift64Ashr(($1457|0),($1460|0),21)|0);
 $1462 = (getTempRet0() | 0);
 $1463 = $26;
 $1464 = $1463;
 HEAP32[$1464>>2] = $1461;
 $1465 = (($1463) + 4)|0;
 $1466 = $1465;
 HEAP32[$1466>>2] = $1462;
 $1467 = $26;
 $1468 = $1467;
 $1469 = HEAP32[$1468>>2]|0;
 $1470 = (($1467) + 4)|0;
 $1471 = $1470;
 $1472 = HEAP32[$1471>>2]|0;
 $1473 = $14;
 $1474 = $1473;
 $1475 = HEAP32[$1474>>2]|0;
 $1476 = (($1473) + 4)|0;
 $1477 = $1476;
 $1478 = HEAP32[$1477>>2]|0;
 $1479 = (_i64Add(($1475|0),($1478|0),($1469|0),($1472|0))|0);
 $1480 = (getTempRet0() | 0);
 $1481 = $14;
 $1482 = $1481;
 HEAP32[$1482>>2] = $1479;
 $1483 = (($1481) + 4)|0;
 $1484 = $1483;
 HEAP32[$1484>>2] = $1480;
 $1485 = $26;
 $1486 = $1485;
 $1487 = HEAP32[$1486>>2]|0;
 $1488 = (($1485) + 4)|0;
 $1489 = $1488;
 $1490 = HEAP32[$1489>>2]|0;
 $1491 = (_bitshift64Shl(($1487|0),($1490|0),21)|0);
 $1492 = (getTempRet0() | 0);
 $1493 = $13;
 $1494 = $1493;
 $1495 = HEAP32[$1494>>2]|0;
 $1496 = (($1493) + 4)|0;
 $1497 = $1496;
 $1498 = HEAP32[$1497>>2]|0;
 $1499 = (_i64Subtract(($1495|0),($1498|0),($1491|0),($1492|0))|0);
 $1500 = (getTempRet0() | 0);
 $1501 = $13;
 $1502 = $1501;
 HEAP32[$1502>>2] = $1499;
 $1503 = (($1501) + 4)|0;
 $1504 = $1503;
 HEAP32[$1504>>2] = $1500;
 $1505 = $14;
 $1506 = $1505;
 $1507 = HEAP32[$1506>>2]|0;
 $1508 = (($1505) + 4)|0;
 $1509 = $1508;
 $1510 = HEAP32[$1509>>2]|0;
 $1511 = (___muldi3(($1507|0),($1510|0),666643,0)|0);
 $1512 = (getTempRet0() | 0);
 $1513 = $2;
 $1514 = $1513;
 $1515 = HEAP32[$1514>>2]|0;
 $1516 = (($1513) + 4)|0;
 $1517 = $1516;
 $1518 = HEAP32[$1517>>2]|0;
 $1519 = (_i64Add(($1515|0),($1518|0),($1511|0),($1512|0))|0);
 $1520 = (getTempRet0() | 0);
 $1521 = $2;
 $1522 = $1521;
 HEAP32[$1522>>2] = $1519;
 $1523 = (($1521) + 4)|0;
 $1524 = $1523;
 HEAP32[$1524>>2] = $1520;
 $1525 = $14;
 $1526 = $1525;
 $1527 = HEAP32[$1526>>2]|0;
 $1528 = (($1525) + 4)|0;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (___muldi3(($1527|0),($1530|0),470296,0)|0);
 $1532 = (getTempRet0() | 0);
 $1533 = $3;
 $1534 = $1533;
 $1535 = HEAP32[$1534>>2]|0;
 $1536 = (($1533) + 4)|0;
 $1537 = $1536;
 $1538 = HEAP32[$1537>>2]|0;
 $1539 = (_i64Add(($1535|0),($1538|0),($1531|0),($1532|0))|0);
 $1540 = (getTempRet0() | 0);
 $1541 = $3;
 $1542 = $1541;
 HEAP32[$1542>>2] = $1539;
 $1543 = (($1541) + 4)|0;
 $1544 = $1543;
 HEAP32[$1544>>2] = $1540;
 $1545 = $14;
 $1546 = $1545;
 $1547 = HEAP32[$1546>>2]|0;
 $1548 = (($1545) + 4)|0;
 $1549 = $1548;
 $1550 = HEAP32[$1549>>2]|0;
 $1551 = (___muldi3(($1547|0),($1550|0),654183,0)|0);
 $1552 = (getTempRet0() | 0);
 $1553 = $4;
 $1554 = $1553;
 $1555 = HEAP32[$1554>>2]|0;
 $1556 = (($1553) + 4)|0;
 $1557 = $1556;
 $1558 = HEAP32[$1557>>2]|0;
 $1559 = (_i64Add(($1555|0),($1558|0),($1551|0),($1552|0))|0);
 $1560 = (getTempRet0() | 0);
 $1561 = $4;
 $1562 = $1561;
 HEAP32[$1562>>2] = $1559;
 $1563 = (($1561) + 4)|0;
 $1564 = $1563;
 HEAP32[$1564>>2] = $1560;
 $1565 = $14;
 $1566 = $1565;
 $1567 = HEAP32[$1566>>2]|0;
 $1568 = (($1565) + 4)|0;
 $1569 = $1568;
 $1570 = HEAP32[$1569>>2]|0;
 $1571 = (___muldi3(($1567|0),($1570|0),997805,0)|0);
 $1572 = (getTempRet0() | 0);
 $1573 = $5;
 $1574 = $1573;
 $1575 = HEAP32[$1574>>2]|0;
 $1576 = (($1573) + 4)|0;
 $1577 = $1576;
 $1578 = HEAP32[$1577>>2]|0;
 $1579 = (_i64Subtract(($1575|0),($1578|0),($1571|0),($1572|0))|0);
 $1580 = (getTempRet0() | 0);
 $1581 = $5;
 $1582 = $1581;
 HEAP32[$1582>>2] = $1579;
 $1583 = (($1581) + 4)|0;
 $1584 = $1583;
 HEAP32[$1584>>2] = $1580;
 $1585 = $14;
 $1586 = $1585;
 $1587 = HEAP32[$1586>>2]|0;
 $1588 = (($1585) + 4)|0;
 $1589 = $1588;
 $1590 = HEAP32[$1589>>2]|0;
 $1591 = (___muldi3(($1587|0),($1590|0),136657,0)|0);
 $1592 = (getTempRet0() | 0);
 $1593 = $6;
 $1594 = $1593;
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = (($1593) + 4)|0;
 $1597 = $1596;
 $1598 = HEAP32[$1597>>2]|0;
 $1599 = (_i64Add(($1595|0),($1598|0),($1591|0),($1592|0))|0);
 $1600 = (getTempRet0() | 0);
 $1601 = $6;
 $1602 = $1601;
 HEAP32[$1602>>2] = $1599;
 $1603 = (($1601) + 4)|0;
 $1604 = $1603;
 HEAP32[$1604>>2] = $1600;
 $1605 = $14;
 $1606 = $1605;
 $1607 = HEAP32[$1606>>2]|0;
 $1608 = (($1605) + 4)|0;
 $1609 = $1608;
 $1610 = HEAP32[$1609>>2]|0;
 $1611 = (___muldi3(($1607|0),($1610|0),683901,0)|0);
 $1612 = (getTempRet0() | 0);
 $1613 = $7;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = (($1613) + 4)|0;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (_i64Subtract(($1615|0),($1618|0),($1611|0),($1612|0))|0);
 $1620 = (getTempRet0() | 0);
 $1621 = $7;
 $1622 = $1621;
 HEAP32[$1622>>2] = $1619;
 $1623 = (($1621) + 4)|0;
 $1624 = $1623;
 HEAP32[$1624>>2] = $1620;
 $1625 = $2;
 $1626 = $1625;
 $1627 = HEAP32[$1626>>2]|0;
 $1628 = (($1625) + 4)|0;
 $1629 = $1628;
 $1630 = HEAP32[$1629>>2]|0;
 $1631 = (_bitshift64Ashr(($1627|0),($1630|0),21)|0);
 $1632 = (getTempRet0() | 0);
 $1633 = $15;
 $1634 = $1633;
 HEAP32[$1634>>2] = $1631;
 $1635 = (($1633) + 4)|0;
 $1636 = $1635;
 HEAP32[$1636>>2] = $1632;
 $1637 = $15;
 $1638 = $1637;
 $1639 = HEAP32[$1638>>2]|0;
 $1640 = (($1637) + 4)|0;
 $1641 = $1640;
 $1642 = HEAP32[$1641>>2]|0;
 $1643 = $3;
 $1644 = $1643;
 $1645 = HEAP32[$1644>>2]|0;
 $1646 = (($1643) + 4)|0;
 $1647 = $1646;
 $1648 = HEAP32[$1647>>2]|0;
 $1649 = (_i64Add(($1645|0),($1648|0),($1639|0),($1642|0))|0);
 $1650 = (getTempRet0() | 0);
 $1651 = $3;
 $1652 = $1651;
 HEAP32[$1652>>2] = $1649;
 $1653 = (($1651) + 4)|0;
 $1654 = $1653;
 HEAP32[$1654>>2] = $1650;
 $1655 = $15;
 $1656 = $1655;
 $1657 = HEAP32[$1656>>2]|0;
 $1658 = (($1655) + 4)|0;
 $1659 = $1658;
 $1660 = HEAP32[$1659>>2]|0;
 $1661 = (_bitshift64Shl(($1657|0),($1660|0),21)|0);
 $1662 = (getTempRet0() | 0);
 $1663 = $2;
 $1664 = $1663;
 $1665 = HEAP32[$1664>>2]|0;
 $1666 = (($1663) + 4)|0;
 $1667 = $1666;
 $1668 = HEAP32[$1667>>2]|0;
 $1669 = (_i64Subtract(($1665|0),($1668|0),($1661|0),($1662|0))|0);
 $1670 = (getTempRet0() | 0);
 $1671 = $2;
 $1672 = $1671;
 HEAP32[$1672>>2] = $1669;
 $1673 = (($1671) + 4)|0;
 $1674 = $1673;
 HEAP32[$1674>>2] = $1670;
 $1675 = $3;
 $1676 = $1675;
 $1677 = HEAP32[$1676>>2]|0;
 $1678 = (($1675) + 4)|0;
 $1679 = $1678;
 $1680 = HEAP32[$1679>>2]|0;
 $1681 = (_bitshift64Ashr(($1677|0),($1680|0),21)|0);
 $1682 = (getTempRet0() | 0);
 $1683 = $16;
 $1684 = $1683;
 HEAP32[$1684>>2] = $1681;
 $1685 = (($1683) + 4)|0;
 $1686 = $1685;
 HEAP32[$1686>>2] = $1682;
 $1687 = $16;
 $1688 = $1687;
 $1689 = HEAP32[$1688>>2]|0;
 $1690 = (($1687) + 4)|0;
 $1691 = $1690;
 $1692 = HEAP32[$1691>>2]|0;
 $1693 = $4;
 $1694 = $1693;
 $1695 = HEAP32[$1694>>2]|0;
 $1696 = (($1693) + 4)|0;
 $1697 = $1696;
 $1698 = HEAP32[$1697>>2]|0;
 $1699 = (_i64Add(($1695|0),($1698|0),($1689|0),($1692|0))|0);
 $1700 = (getTempRet0() | 0);
 $1701 = $4;
 $1702 = $1701;
 HEAP32[$1702>>2] = $1699;
 $1703 = (($1701) + 4)|0;
 $1704 = $1703;
 HEAP32[$1704>>2] = $1700;
 $1705 = $16;
 $1706 = $1705;
 $1707 = HEAP32[$1706>>2]|0;
 $1708 = (($1705) + 4)|0;
 $1709 = $1708;
 $1710 = HEAP32[$1709>>2]|0;
 $1711 = (_bitshift64Shl(($1707|0),($1710|0),21)|0);
 $1712 = (getTempRet0() | 0);
 $1713 = $3;
 $1714 = $1713;
 $1715 = HEAP32[$1714>>2]|0;
 $1716 = (($1713) + 4)|0;
 $1717 = $1716;
 $1718 = HEAP32[$1717>>2]|0;
 $1719 = (_i64Subtract(($1715|0),($1718|0),($1711|0),($1712|0))|0);
 $1720 = (getTempRet0() | 0);
 $1721 = $3;
 $1722 = $1721;
 HEAP32[$1722>>2] = $1719;
 $1723 = (($1721) + 4)|0;
 $1724 = $1723;
 HEAP32[$1724>>2] = $1720;
 $1725 = $4;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (($1725) + 4)|0;
 $1729 = $1728;
 $1730 = HEAP32[$1729>>2]|0;
 $1731 = (_bitshift64Ashr(($1727|0),($1730|0),21)|0);
 $1732 = (getTempRet0() | 0);
 $1733 = $17;
 $1734 = $1733;
 HEAP32[$1734>>2] = $1731;
 $1735 = (($1733) + 4)|0;
 $1736 = $1735;
 HEAP32[$1736>>2] = $1732;
 $1737 = $17;
 $1738 = $1737;
 $1739 = HEAP32[$1738>>2]|0;
 $1740 = (($1737) + 4)|0;
 $1741 = $1740;
 $1742 = HEAP32[$1741>>2]|0;
 $1743 = $5;
 $1744 = $1743;
 $1745 = HEAP32[$1744>>2]|0;
 $1746 = (($1743) + 4)|0;
 $1747 = $1746;
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = (_i64Add(($1745|0),($1748|0),($1739|0),($1742|0))|0);
 $1750 = (getTempRet0() | 0);
 $1751 = $5;
 $1752 = $1751;
 HEAP32[$1752>>2] = $1749;
 $1753 = (($1751) + 4)|0;
 $1754 = $1753;
 HEAP32[$1754>>2] = $1750;
 $1755 = $17;
 $1756 = $1755;
 $1757 = HEAP32[$1756>>2]|0;
 $1758 = (($1755) + 4)|0;
 $1759 = $1758;
 $1760 = HEAP32[$1759>>2]|0;
 $1761 = (_bitshift64Shl(($1757|0),($1760|0),21)|0);
 $1762 = (getTempRet0() | 0);
 $1763 = $4;
 $1764 = $1763;
 $1765 = HEAP32[$1764>>2]|0;
 $1766 = (($1763) + 4)|0;
 $1767 = $1766;
 $1768 = HEAP32[$1767>>2]|0;
 $1769 = (_i64Subtract(($1765|0),($1768|0),($1761|0),($1762|0))|0);
 $1770 = (getTempRet0() | 0);
 $1771 = $4;
 $1772 = $1771;
 HEAP32[$1772>>2] = $1769;
 $1773 = (($1771) + 4)|0;
 $1774 = $1773;
 HEAP32[$1774>>2] = $1770;
 $1775 = $5;
 $1776 = $1775;
 $1777 = HEAP32[$1776>>2]|0;
 $1778 = (($1775) + 4)|0;
 $1779 = $1778;
 $1780 = HEAP32[$1779>>2]|0;
 $1781 = (_bitshift64Ashr(($1777|0),($1780|0),21)|0);
 $1782 = (getTempRet0() | 0);
 $1783 = $18;
 $1784 = $1783;
 HEAP32[$1784>>2] = $1781;
 $1785 = (($1783) + 4)|0;
 $1786 = $1785;
 HEAP32[$1786>>2] = $1782;
 $1787 = $18;
 $1788 = $1787;
 $1789 = HEAP32[$1788>>2]|0;
 $1790 = (($1787) + 4)|0;
 $1791 = $1790;
 $1792 = HEAP32[$1791>>2]|0;
 $1793 = $6;
 $1794 = $1793;
 $1795 = HEAP32[$1794>>2]|0;
 $1796 = (($1793) + 4)|0;
 $1797 = $1796;
 $1798 = HEAP32[$1797>>2]|0;
 $1799 = (_i64Add(($1795|0),($1798|0),($1789|0),($1792|0))|0);
 $1800 = (getTempRet0() | 0);
 $1801 = $6;
 $1802 = $1801;
 HEAP32[$1802>>2] = $1799;
 $1803 = (($1801) + 4)|0;
 $1804 = $1803;
 HEAP32[$1804>>2] = $1800;
 $1805 = $18;
 $1806 = $1805;
 $1807 = HEAP32[$1806>>2]|0;
 $1808 = (($1805) + 4)|0;
 $1809 = $1808;
 $1810 = HEAP32[$1809>>2]|0;
 $1811 = (_bitshift64Shl(($1807|0),($1810|0),21)|0);
 $1812 = (getTempRet0() | 0);
 $1813 = $5;
 $1814 = $1813;
 $1815 = HEAP32[$1814>>2]|0;
 $1816 = (($1813) + 4)|0;
 $1817 = $1816;
 $1818 = HEAP32[$1817>>2]|0;
 $1819 = (_i64Subtract(($1815|0),($1818|0),($1811|0),($1812|0))|0);
 $1820 = (getTempRet0() | 0);
 $1821 = $5;
 $1822 = $1821;
 HEAP32[$1822>>2] = $1819;
 $1823 = (($1821) + 4)|0;
 $1824 = $1823;
 HEAP32[$1824>>2] = $1820;
 $1825 = $6;
 $1826 = $1825;
 $1827 = HEAP32[$1826>>2]|0;
 $1828 = (($1825) + 4)|0;
 $1829 = $1828;
 $1830 = HEAP32[$1829>>2]|0;
 $1831 = (_bitshift64Ashr(($1827|0),($1830|0),21)|0);
 $1832 = (getTempRet0() | 0);
 $1833 = $19;
 $1834 = $1833;
 HEAP32[$1834>>2] = $1831;
 $1835 = (($1833) + 4)|0;
 $1836 = $1835;
 HEAP32[$1836>>2] = $1832;
 $1837 = $19;
 $1838 = $1837;
 $1839 = HEAP32[$1838>>2]|0;
 $1840 = (($1837) + 4)|0;
 $1841 = $1840;
 $1842 = HEAP32[$1841>>2]|0;
 $1843 = $7;
 $1844 = $1843;
 $1845 = HEAP32[$1844>>2]|0;
 $1846 = (($1843) + 4)|0;
 $1847 = $1846;
 $1848 = HEAP32[$1847>>2]|0;
 $1849 = (_i64Add(($1845|0),($1848|0),($1839|0),($1842|0))|0);
 $1850 = (getTempRet0() | 0);
 $1851 = $7;
 $1852 = $1851;
 HEAP32[$1852>>2] = $1849;
 $1853 = (($1851) + 4)|0;
 $1854 = $1853;
 HEAP32[$1854>>2] = $1850;
 $1855 = $19;
 $1856 = $1855;
 $1857 = HEAP32[$1856>>2]|0;
 $1858 = (($1855) + 4)|0;
 $1859 = $1858;
 $1860 = HEAP32[$1859>>2]|0;
 $1861 = (_bitshift64Shl(($1857|0),($1860|0),21)|0);
 $1862 = (getTempRet0() | 0);
 $1863 = $6;
 $1864 = $1863;
 $1865 = HEAP32[$1864>>2]|0;
 $1866 = (($1863) + 4)|0;
 $1867 = $1866;
 $1868 = HEAP32[$1867>>2]|0;
 $1869 = (_i64Subtract(($1865|0),($1868|0),($1861|0),($1862|0))|0);
 $1870 = (getTempRet0() | 0);
 $1871 = $6;
 $1872 = $1871;
 HEAP32[$1872>>2] = $1869;
 $1873 = (($1871) + 4)|0;
 $1874 = $1873;
 HEAP32[$1874>>2] = $1870;
 $1875 = $7;
 $1876 = $1875;
 $1877 = HEAP32[$1876>>2]|0;
 $1878 = (($1875) + 4)|0;
 $1879 = $1878;
 $1880 = HEAP32[$1879>>2]|0;
 $1881 = (_bitshift64Ashr(($1877|0),($1880|0),21)|0);
 $1882 = (getTempRet0() | 0);
 $1883 = $20;
 $1884 = $1883;
 HEAP32[$1884>>2] = $1881;
 $1885 = (($1883) + 4)|0;
 $1886 = $1885;
 HEAP32[$1886>>2] = $1882;
 $1887 = $20;
 $1888 = $1887;
 $1889 = HEAP32[$1888>>2]|0;
 $1890 = (($1887) + 4)|0;
 $1891 = $1890;
 $1892 = HEAP32[$1891>>2]|0;
 $1893 = $8;
 $1894 = $1893;
 $1895 = HEAP32[$1894>>2]|0;
 $1896 = (($1893) + 4)|0;
 $1897 = $1896;
 $1898 = HEAP32[$1897>>2]|0;
 $1899 = (_i64Add(($1895|0),($1898|0),($1889|0),($1892|0))|0);
 $1900 = (getTempRet0() | 0);
 $1901 = $8;
 $1902 = $1901;
 HEAP32[$1902>>2] = $1899;
 $1903 = (($1901) + 4)|0;
 $1904 = $1903;
 HEAP32[$1904>>2] = $1900;
 $1905 = $20;
 $1906 = $1905;
 $1907 = HEAP32[$1906>>2]|0;
 $1908 = (($1905) + 4)|0;
 $1909 = $1908;
 $1910 = HEAP32[$1909>>2]|0;
 $1911 = (_bitshift64Shl(($1907|0),($1910|0),21)|0);
 $1912 = (getTempRet0() | 0);
 $1913 = $7;
 $1914 = $1913;
 $1915 = HEAP32[$1914>>2]|0;
 $1916 = (($1913) + 4)|0;
 $1917 = $1916;
 $1918 = HEAP32[$1917>>2]|0;
 $1919 = (_i64Subtract(($1915|0),($1918|0),($1911|0),($1912|0))|0);
 $1920 = (getTempRet0() | 0);
 $1921 = $7;
 $1922 = $1921;
 HEAP32[$1922>>2] = $1919;
 $1923 = (($1921) + 4)|0;
 $1924 = $1923;
 HEAP32[$1924>>2] = $1920;
 $1925 = $8;
 $1926 = $1925;
 $1927 = HEAP32[$1926>>2]|0;
 $1928 = (($1925) + 4)|0;
 $1929 = $1928;
 $1930 = HEAP32[$1929>>2]|0;
 $1931 = (_bitshift64Ashr(($1927|0),($1930|0),21)|0);
 $1932 = (getTempRet0() | 0);
 $1933 = $21;
 $1934 = $1933;
 HEAP32[$1934>>2] = $1931;
 $1935 = (($1933) + 4)|0;
 $1936 = $1935;
 HEAP32[$1936>>2] = $1932;
 $1937 = $21;
 $1938 = $1937;
 $1939 = HEAP32[$1938>>2]|0;
 $1940 = (($1937) + 4)|0;
 $1941 = $1940;
 $1942 = HEAP32[$1941>>2]|0;
 $1943 = $9;
 $1944 = $1943;
 $1945 = HEAP32[$1944>>2]|0;
 $1946 = (($1943) + 4)|0;
 $1947 = $1946;
 $1948 = HEAP32[$1947>>2]|0;
 $1949 = (_i64Add(($1945|0),($1948|0),($1939|0),($1942|0))|0);
 $1950 = (getTempRet0() | 0);
 $1951 = $9;
 $1952 = $1951;
 HEAP32[$1952>>2] = $1949;
 $1953 = (($1951) + 4)|0;
 $1954 = $1953;
 HEAP32[$1954>>2] = $1950;
 $1955 = $21;
 $1956 = $1955;
 $1957 = HEAP32[$1956>>2]|0;
 $1958 = (($1955) + 4)|0;
 $1959 = $1958;
 $1960 = HEAP32[$1959>>2]|0;
 $1961 = (_bitshift64Shl(($1957|0),($1960|0),21)|0);
 $1962 = (getTempRet0() | 0);
 $1963 = $8;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (($1963) + 4)|0;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = (_i64Subtract(($1965|0),($1968|0),($1961|0),($1962|0))|0);
 $1970 = (getTempRet0() | 0);
 $1971 = $8;
 $1972 = $1971;
 HEAP32[$1972>>2] = $1969;
 $1973 = (($1971) + 4)|0;
 $1974 = $1973;
 HEAP32[$1974>>2] = $1970;
 $1975 = $9;
 $1976 = $1975;
 $1977 = HEAP32[$1976>>2]|0;
 $1978 = (($1975) + 4)|0;
 $1979 = $1978;
 $1980 = HEAP32[$1979>>2]|0;
 $1981 = (_bitshift64Ashr(($1977|0),($1980|0),21)|0);
 $1982 = (getTempRet0() | 0);
 $1983 = $22;
 $1984 = $1983;
 HEAP32[$1984>>2] = $1981;
 $1985 = (($1983) + 4)|0;
 $1986 = $1985;
 HEAP32[$1986>>2] = $1982;
 $1987 = $22;
 $1988 = $1987;
 $1989 = HEAP32[$1988>>2]|0;
 $1990 = (($1987) + 4)|0;
 $1991 = $1990;
 $1992 = HEAP32[$1991>>2]|0;
 $1993 = $10;
 $1994 = $1993;
 $1995 = HEAP32[$1994>>2]|0;
 $1996 = (($1993) + 4)|0;
 $1997 = $1996;
 $1998 = HEAP32[$1997>>2]|0;
 $1999 = (_i64Add(($1995|0),($1998|0),($1989|0),($1992|0))|0);
 $2000 = (getTempRet0() | 0);
 $2001 = $10;
 $2002 = $2001;
 HEAP32[$2002>>2] = $1999;
 $2003 = (($2001) + 4)|0;
 $2004 = $2003;
 HEAP32[$2004>>2] = $2000;
 $2005 = $22;
 $2006 = $2005;
 $2007 = HEAP32[$2006>>2]|0;
 $2008 = (($2005) + 4)|0;
 $2009 = $2008;
 $2010 = HEAP32[$2009>>2]|0;
 $2011 = (_bitshift64Shl(($2007|0),($2010|0),21)|0);
 $2012 = (getTempRet0() | 0);
 $2013 = $9;
 $2014 = $2013;
 $2015 = HEAP32[$2014>>2]|0;
 $2016 = (($2013) + 4)|0;
 $2017 = $2016;
 $2018 = HEAP32[$2017>>2]|0;
 $2019 = (_i64Subtract(($2015|0),($2018|0),($2011|0),($2012|0))|0);
 $2020 = (getTempRet0() | 0);
 $2021 = $9;
 $2022 = $2021;
 HEAP32[$2022>>2] = $2019;
 $2023 = (($2021) + 4)|0;
 $2024 = $2023;
 HEAP32[$2024>>2] = $2020;
 $2025 = $10;
 $2026 = $2025;
 $2027 = HEAP32[$2026>>2]|0;
 $2028 = (($2025) + 4)|0;
 $2029 = $2028;
 $2030 = HEAP32[$2029>>2]|0;
 $2031 = (_bitshift64Ashr(($2027|0),($2030|0),21)|0);
 $2032 = (getTempRet0() | 0);
 $2033 = $23;
 $2034 = $2033;
 HEAP32[$2034>>2] = $2031;
 $2035 = (($2033) + 4)|0;
 $2036 = $2035;
 HEAP32[$2036>>2] = $2032;
 $2037 = $23;
 $2038 = $2037;
 $2039 = HEAP32[$2038>>2]|0;
 $2040 = (($2037) + 4)|0;
 $2041 = $2040;
 $2042 = HEAP32[$2041>>2]|0;
 $2043 = $11;
 $2044 = $2043;
 $2045 = HEAP32[$2044>>2]|0;
 $2046 = (($2043) + 4)|0;
 $2047 = $2046;
 $2048 = HEAP32[$2047>>2]|0;
 $2049 = (_i64Add(($2045|0),($2048|0),($2039|0),($2042|0))|0);
 $2050 = (getTempRet0() | 0);
 $2051 = $11;
 $2052 = $2051;
 HEAP32[$2052>>2] = $2049;
 $2053 = (($2051) + 4)|0;
 $2054 = $2053;
 HEAP32[$2054>>2] = $2050;
 $2055 = $23;
 $2056 = $2055;
 $2057 = HEAP32[$2056>>2]|0;
 $2058 = (($2055) + 4)|0;
 $2059 = $2058;
 $2060 = HEAP32[$2059>>2]|0;
 $2061 = (_bitshift64Shl(($2057|0),($2060|0),21)|0);
 $2062 = (getTempRet0() | 0);
 $2063 = $10;
 $2064 = $2063;
 $2065 = HEAP32[$2064>>2]|0;
 $2066 = (($2063) + 4)|0;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (_i64Subtract(($2065|0),($2068|0),($2061|0),($2062|0))|0);
 $2070 = (getTempRet0() | 0);
 $2071 = $10;
 $2072 = $2071;
 HEAP32[$2072>>2] = $2069;
 $2073 = (($2071) + 4)|0;
 $2074 = $2073;
 HEAP32[$2074>>2] = $2070;
 $2075 = $11;
 $2076 = $2075;
 $2077 = HEAP32[$2076>>2]|0;
 $2078 = (($2075) + 4)|0;
 $2079 = $2078;
 $2080 = HEAP32[$2079>>2]|0;
 $2081 = (_bitshift64Ashr(($2077|0),($2080|0),21)|0);
 $2082 = (getTempRet0() | 0);
 $2083 = $24;
 $2084 = $2083;
 HEAP32[$2084>>2] = $2081;
 $2085 = (($2083) + 4)|0;
 $2086 = $2085;
 HEAP32[$2086>>2] = $2082;
 $2087 = $24;
 $2088 = $2087;
 $2089 = HEAP32[$2088>>2]|0;
 $2090 = (($2087) + 4)|0;
 $2091 = $2090;
 $2092 = HEAP32[$2091>>2]|0;
 $2093 = $12;
 $2094 = $2093;
 $2095 = HEAP32[$2094>>2]|0;
 $2096 = (($2093) + 4)|0;
 $2097 = $2096;
 $2098 = HEAP32[$2097>>2]|0;
 $2099 = (_i64Add(($2095|0),($2098|0),($2089|0),($2092|0))|0);
 $2100 = (getTempRet0() | 0);
 $2101 = $12;
 $2102 = $2101;
 HEAP32[$2102>>2] = $2099;
 $2103 = (($2101) + 4)|0;
 $2104 = $2103;
 HEAP32[$2104>>2] = $2100;
 $2105 = $24;
 $2106 = $2105;
 $2107 = HEAP32[$2106>>2]|0;
 $2108 = (($2105) + 4)|0;
 $2109 = $2108;
 $2110 = HEAP32[$2109>>2]|0;
 $2111 = (_bitshift64Shl(($2107|0),($2110|0),21)|0);
 $2112 = (getTempRet0() | 0);
 $2113 = $11;
 $2114 = $2113;
 $2115 = HEAP32[$2114>>2]|0;
 $2116 = (($2113) + 4)|0;
 $2117 = $2116;
 $2118 = HEAP32[$2117>>2]|0;
 $2119 = (_i64Subtract(($2115|0),($2118|0),($2111|0),($2112|0))|0);
 $2120 = (getTempRet0() | 0);
 $2121 = $11;
 $2122 = $2121;
 HEAP32[$2122>>2] = $2119;
 $2123 = (($2121) + 4)|0;
 $2124 = $2123;
 HEAP32[$2124>>2] = $2120;
 $2125 = $12;
 $2126 = $2125;
 $2127 = HEAP32[$2126>>2]|0;
 $2128 = (($2125) + 4)|0;
 $2129 = $2128;
 $2130 = HEAP32[$2129>>2]|0;
 $2131 = (_bitshift64Ashr(($2127|0),($2130|0),21)|0);
 $2132 = (getTempRet0() | 0);
 $2133 = $25;
 $2134 = $2133;
 HEAP32[$2134>>2] = $2131;
 $2135 = (($2133) + 4)|0;
 $2136 = $2135;
 HEAP32[$2136>>2] = $2132;
 $2137 = $25;
 $2138 = $2137;
 $2139 = HEAP32[$2138>>2]|0;
 $2140 = (($2137) + 4)|0;
 $2141 = $2140;
 $2142 = HEAP32[$2141>>2]|0;
 $2143 = $13;
 $2144 = $2143;
 $2145 = HEAP32[$2144>>2]|0;
 $2146 = (($2143) + 4)|0;
 $2147 = $2146;
 $2148 = HEAP32[$2147>>2]|0;
 $2149 = (_i64Add(($2145|0),($2148|0),($2139|0),($2142|0))|0);
 $2150 = (getTempRet0() | 0);
 $2151 = $13;
 $2152 = $2151;
 HEAP32[$2152>>2] = $2149;
 $2153 = (($2151) + 4)|0;
 $2154 = $2153;
 HEAP32[$2154>>2] = $2150;
 $2155 = $25;
 $2156 = $2155;
 $2157 = HEAP32[$2156>>2]|0;
 $2158 = (($2155) + 4)|0;
 $2159 = $2158;
 $2160 = HEAP32[$2159>>2]|0;
 $2161 = (_bitshift64Shl(($2157|0),($2160|0),21)|0);
 $2162 = (getTempRet0() | 0);
 $2163 = $12;
 $2164 = $2163;
 $2165 = HEAP32[$2164>>2]|0;
 $2166 = (($2163) + 4)|0;
 $2167 = $2166;
 $2168 = HEAP32[$2167>>2]|0;
 $2169 = (_i64Subtract(($2165|0),($2168|0),($2161|0),($2162|0))|0);
 $2170 = (getTempRet0() | 0);
 $2171 = $12;
 $2172 = $2171;
 HEAP32[$2172>>2] = $2169;
 $2173 = (($2171) + 4)|0;
 $2174 = $2173;
 HEAP32[$2174>>2] = $2170;
 $2175 = $2;
 $2176 = $2175;
 $2177 = HEAP32[$2176>>2]|0;
 $2178 = (($2175) + 4)|0;
 $2179 = $2178;
 $2180 = HEAP32[$2179>>2]|0;
 $2181 = (_bitshift64Ashr(($2177|0),($2180|0),0)|0);
 $2182 = (getTempRet0() | 0);
 $2183 = $2181&255;
 $2184 = $1;
 HEAP8[$2184>>0] = $2183;
 $2185 = $2;
 $2186 = $2185;
 $2187 = HEAP32[$2186>>2]|0;
 $2188 = (($2185) + 4)|0;
 $2189 = $2188;
 $2190 = HEAP32[$2189>>2]|0;
 $2191 = (_bitshift64Ashr(($2187|0),($2190|0),8)|0);
 $2192 = (getTempRet0() | 0);
 $2193 = $2191&255;
 $2194 = $1;
 $2195 = ((($2194)) + 1|0);
 HEAP8[$2195>>0] = $2193;
 $2196 = $2;
 $2197 = $2196;
 $2198 = HEAP32[$2197>>2]|0;
 $2199 = (($2196) + 4)|0;
 $2200 = $2199;
 $2201 = HEAP32[$2200>>2]|0;
 $2202 = (_bitshift64Ashr(($2198|0),($2201|0),16)|0);
 $2203 = (getTempRet0() | 0);
 $2204 = $3;
 $2205 = $2204;
 $2206 = HEAP32[$2205>>2]|0;
 $2207 = (($2204) + 4)|0;
 $2208 = $2207;
 $2209 = HEAP32[$2208>>2]|0;
 $2210 = (_bitshift64Shl(($2206|0),($2209|0),5)|0);
 $2211 = (getTempRet0() | 0);
 $2212 = $2202 | $2210;
 $2203 | $2211;
 $2213 = $2212&255;
 $2214 = $1;
 $2215 = ((($2214)) + 2|0);
 HEAP8[$2215>>0] = $2213;
 $2216 = $3;
 $2217 = $2216;
 $2218 = HEAP32[$2217>>2]|0;
 $2219 = (($2216) + 4)|0;
 $2220 = $2219;
 $2221 = HEAP32[$2220>>2]|0;
 $2222 = (_bitshift64Ashr(($2218|0),($2221|0),3)|0);
 $2223 = (getTempRet0() | 0);
 $2224 = $2222&255;
 $2225 = $1;
 $2226 = ((($2225)) + 3|0);
 HEAP8[$2226>>0] = $2224;
 $2227 = $3;
 $2228 = $2227;
 $2229 = HEAP32[$2228>>2]|0;
 $2230 = (($2227) + 4)|0;
 $2231 = $2230;
 $2232 = HEAP32[$2231>>2]|0;
 $2233 = (_bitshift64Ashr(($2229|0),($2232|0),11)|0);
 $2234 = (getTempRet0() | 0);
 $2235 = $2233&255;
 $2236 = $1;
 $2237 = ((($2236)) + 4|0);
 HEAP8[$2237>>0] = $2235;
 $2238 = $3;
 $2239 = $2238;
 $2240 = HEAP32[$2239>>2]|0;
 $2241 = (($2238) + 4)|0;
 $2242 = $2241;
 $2243 = HEAP32[$2242>>2]|0;
 $2244 = (_bitshift64Ashr(($2240|0),($2243|0),19)|0);
 $2245 = (getTempRet0() | 0);
 $2246 = $4;
 $2247 = $2246;
 $2248 = HEAP32[$2247>>2]|0;
 $2249 = (($2246) + 4)|0;
 $2250 = $2249;
 $2251 = HEAP32[$2250>>2]|0;
 $2252 = (_bitshift64Shl(($2248|0),($2251|0),2)|0);
 $2253 = (getTempRet0() | 0);
 $2254 = $2244 | $2252;
 $2245 | $2253;
 $2255 = $2254&255;
 $2256 = $1;
 $2257 = ((($2256)) + 5|0);
 HEAP8[$2257>>0] = $2255;
 $2258 = $4;
 $2259 = $2258;
 $2260 = HEAP32[$2259>>2]|0;
 $2261 = (($2258) + 4)|0;
 $2262 = $2261;
 $2263 = HEAP32[$2262>>2]|0;
 $2264 = (_bitshift64Ashr(($2260|0),($2263|0),6)|0);
 $2265 = (getTempRet0() | 0);
 $2266 = $2264&255;
 $2267 = $1;
 $2268 = ((($2267)) + 6|0);
 HEAP8[$2268>>0] = $2266;
 $2269 = $4;
 $2270 = $2269;
 $2271 = HEAP32[$2270>>2]|0;
 $2272 = (($2269) + 4)|0;
 $2273 = $2272;
 $2274 = HEAP32[$2273>>2]|0;
 $2275 = (_bitshift64Ashr(($2271|0),($2274|0),14)|0);
 $2276 = (getTempRet0() | 0);
 $2277 = $5;
 $2278 = $2277;
 $2279 = HEAP32[$2278>>2]|0;
 $2280 = (($2277) + 4)|0;
 $2281 = $2280;
 $2282 = HEAP32[$2281>>2]|0;
 $2283 = (_bitshift64Shl(($2279|0),($2282|0),7)|0);
 $2284 = (getTempRet0() | 0);
 $2285 = $2275 | $2283;
 $2276 | $2284;
 $2286 = $2285&255;
 $2287 = $1;
 $2288 = ((($2287)) + 7|0);
 HEAP8[$2288>>0] = $2286;
 $2289 = $5;
 $2290 = $2289;
 $2291 = HEAP32[$2290>>2]|0;
 $2292 = (($2289) + 4)|0;
 $2293 = $2292;
 $2294 = HEAP32[$2293>>2]|0;
 $2295 = (_bitshift64Ashr(($2291|0),($2294|0),1)|0);
 $2296 = (getTempRet0() | 0);
 $2297 = $2295&255;
 $2298 = $1;
 $2299 = ((($2298)) + 8|0);
 HEAP8[$2299>>0] = $2297;
 $2300 = $5;
 $2301 = $2300;
 $2302 = HEAP32[$2301>>2]|0;
 $2303 = (($2300) + 4)|0;
 $2304 = $2303;
 $2305 = HEAP32[$2304>>2]|0;
 $2306 = (_bitshift64Ashr(($2302|0),($2305|0),9)|0);
 $2307 = (getTempRet0() | 0);
 $2308 = $2306&255;
 $2309 = $1;
 $2310 = ((($2309)) + 9|0);
 HEAP8[$2310>>0] = $2308;
 $2311 = $5;
 $2312 = $2311;
 $2313 = HEAP32[$2312>>2]|0;
 $2314 = (($2311) + 4)|0;
 $2315 = $2314;
 $2316 = HEAP32[$2315>>2]|0;
 $2317 = (_bitshift64Ashr(($2313|0),($2316|0),17)|0);
 $2318 = (getTempRet0() | 0);
 $2319 = $6;
 $2320 = $2319;
 $2321 = HEAP32[$2320>>2]|0;
 $2322 = (($2319) + 4)|0;
 $2323 = $2322;
 $2324 = HEAP32[$2323>>2]|0;
 $2325 = (_bitshift64Shl(($2321|0),($2324|0),4)|0);
 $2326 = (getTempRet0() | 0);
 $2327 = $2317 | $2325;
 $2318 | $2326;
 $2328 = $2327&255;
 $2329 = $1;
 $2330 = ((($2329)) + 10|0);
 HEAP8[$2330>>0] = $2328;
 $2331 = $6;
 $2332 = $2331;
 $2333 = HEAP32[$2332>>2]|0;
 $2334 = (($2331) + 4)|0;
 $2335 = $2334;
 $2336 = HEAP32[$2335>>2]|0;
 $2337 = (_bitshift64Ashr(($2333|0),($2336|0),4)|0);
 $2338 = (getTempRet0() | 0);
 $2339 = $2337&255;
 $2340 = $1;
 $2341 = ((($2340)) + 11|0);
 HEAP8[$2341>>0] = $2339;
 $2342 = $6;
 $2343 = $2342;
 $2344 = HEAP32[$2343>>2]|0;
 $2345 = (($2342) + 4)|0;
 $2346 = $2345;
 $2347 = HEAP32[$2346>>2]|0;
 $2348 = (_bitshift64Ashr(($2344|0),($2347|0),12)|0);
 $2349 = (getTempRet0() | 0);
 $2350 = $2348&255;
 $2351 = $1;
 $2352 = ((($2351)) + 12|0);
 HEAP8[$2352>>0] = $2350;
 $2353 = $6;
 $2354 = $2353;
 $2355 = HEAP32[$2354>>2]|0;
 $2356 = (($2353) + 4)|0;
 $2357 = $2356;
 $2358 = HEAP32[$2357>>2]|0;
 $2359 = (_bitshift64Ashr(($2355|0),($2358|0),20)|0);
 $2360 = (getTempRet0() | 0);
 $2361 = $7;
 $2362 = $2361;
 $2363 = HEAP32[$2362>>2]|0;
 $2364 = (($2361) + 4)|0;
 $2365 = $2364;
 $2366 = HEAP32[$2365>>2]|0;
 $2367 = (_bitshift64Shl(($2363|0),($2366|0),1)|0);
 $2368 = (getTempRet0() | 0);
 $2369 = $2359 | $2367;
 $2360 | $2368;
 $2370 = $2369&255;
 $2371 = $1;
 $2372 = ((($2371)) + 13|0);
 HEAP8[$2372>>0] = $2370;
 $2373 = $7;
 $2374 = $2373;
 $2375 = HEAP32[$2374>>2]|0;
 $2376 = (($2373) + 4)|0;
 $2377 = $2376;
 $2378 = HEAP32[$2377>>2]|0;
 $2379 = (_bitshift64Ashr(($2375|0),($2378|0),7)|0);
 $2380 = (getTempRet0() | 0);
 $2381 = $2379&255;
 $2382 = $1;
 $2383 = ((($2382)) + 14|0);
 HEAP8[$2383>>0] = $2381;
 $2384 = $7;
 $2385 = $2384;
 $2386 = HEAP32[$2385>>2]|0;
 $2387 = (($2384) + 4)|0;
 $2388 = $2387;
 $2389 = HEAP32[$2388>>2]|0;
 $2390 = (_bitshift64Ashr(($2386|0),($2389|0),15)|0);
 $2391 = (getTempRet0() | 0);
 $2392 = $8;
 $2393 = $2392;
 $2394 = HEAP32[$2393>>2]|0;
 $2395 = (($2392) + 4)|0;
 $2396 = $2395;
 $2397 = HEAP32[$2396>>2]|0;
 $2398 = (_bitshift64Shl(($2394|0),($2397|0),6)|0);
 $2399 = (getTempRet0() | 0);
 $2400 = $2390 | $2398;
 $2391 | $2399;
 $2401 = $2400&255;
 $2402 = $1;
 $2403 = ((($2402)) + 15|0);
 HEAP8[$2403>>0] = $2401;
 $2404 = $8;
 $2405 = $2404;
 $2406 = HEAP32[$2405>>2]|0;
 $2407 = (($2404) + 4)|0;
 $2408 = $2407;
 $2409 = HEAP32[$2408>>2]|0;
 $2410 = (_bitshift64Ashr(($2406|0),($2409|0),2)|0);
 $2411 = (getTempRet0() | 0);
 $2412 = $2410&255;
 $2413 = $1;
 $2414 = ((($2413)) + 16|0);
 HEAP8[$2414>>0] = $2412;
 $2415 = $8;
 $2416 = $2415;
 $2417 = HEAP32[$2416>>2]|0;
 $2418 = (($2415) + 4)|0;
 $2419 = $2418;
 $2420 = HEAP32[$2419>>2]|0;
 $2421 = (_bitshift64Ashr(($2417|0),($2420|0),10)|0);
 $2422 = (getTempRet0() | 0);
 $2423 = $2421&255;
 $2424 = $1;
 $2425 = ((($2424)) + 17|0);
 HEAP8[$2425>>0] = $2423;
 $2426 = $8;
 $2427 = $2426;
 $2428 = HEAP32[$2427>>2]|0;
 $2429 = (($2426) + 4)|0;
 $2430 = $2429;
 $2431 = HEAP32[$2430>>2]|0;
 $2432 = (_bitshift64Ashr(($2428|0),($2431|0),18)|0);
 $2433 = (getTempRet0() | 0);
 $2434 = $9;
 $2435 = $2434;
 $2436 = HEAP32[$2435>>2]|0;
 $2437 = (($2434) + 4)|0;
 $2438 = $2437;
 $2439 = HEAP32[$2438>>2]|0;
 $2440 = (_bitshift64Shl(($2436|0),($2439|0),3)|0);
 $2441 = (getTempRet0() | 0);
 $2442 = $2432 | $2440;
 $2433 | $2441;
 $2443 = $2442&255;
 $2444 = $1;
 $2445 = ((($2444)) + 18|0);
 HEAP8[$2445>>0] = $2443;
 $2446 = $9;
 $2447 = $2446;
 $2448 = HEAP32[$2447>>2]|0;
 $2449 = (($2446) + 4)|0;
 $2450 = $2449;
 $2451 = HEAP32[$2450>>2]|0;
 $2452 = (_bitshift64Ashr(($2448|0),($2451|0),5)|0);
 $2453 = (getTempRet0() | 0);
 $2454 = $2452&255;
 $2455 = $1;
 $2456 = ((($2455)) + 19|0);
 HEAP8[$2456>>0] = $2454;
 $2457 = $9;
 $2458 = $2457;
 $2459 = HEAP32[$2458>>2]|0;
 $2460 = (($2457) + 4)|0;
 $2461 = $2460;
 $2462 = HEAP32[$2461>>2]|0;
 $2463 = (_bitshift64Ashr(($2459|0),($2462|0),13)|0);
 $2464 = (getTempRet0() | 0);
 $2465 = $2463&255;
 $2466 = $1;
 $2467 = ((($2466)) + 20|0);
 HEAP8[$2467>>0] = $2465;
 $2468 = $10;
 $2469 = $2468;
 $2470 = HEAP32[$2469>>2]|0;
 $2471 = (($2468) + 4)|0;
 $2472 = $2471;
 $2473 = HEAP32[$2472>>2]|0;
 $2474 = (_bitshift64Ashr(($2470|0),($2473|0),0)|0);
 $2475 = (getTempRet0() | 0);
 $2476 = $2474&255;
 $2477 = $1;
 $2478 = ((($2477)) + 21|0);
 HEAP8[$2478>>0] = $2476;
 $2479 = $10;
 $2480 = $2479;
 $2481 = HEAP32[$2480>>2]|0;
 $2482 = (($2479) + 4)|0;
 $2483 = $2482;
 $2484 = HEAP32[$2483>>2]|0;
 $2485 = (_bitshift64Ashr(($2481|0),($2484|0),8)|0);
 $2486 = (getTempRet0() | 0);
 $2487 = $2485&255;
 $2488 = $1;
 $2489 = ((($2488)) + 22|0);
 HEAP8[$2489>>0] = $2487;
 $2490 = $10;
 $2491 = $2490;
 $2492 = HEAP32[$2491>>2]|0;
 $2493 = (($2490) + 4)|0;
 $2494 = $2493;
 $2495 = HEAP32[$2494>>2]|0;
 $2496 = (_bitshift64Ashr(($2492|0),($2495|0),16)|0);
 $2497 = (getTempRet0() | 0);
 $2498 = $11;
 $2499 = $2498;
 $2500 = HEAP32[$2499>>2]|0;
 $2501 = (($2498) + 4)|0;
 $2502 = $2501;
 $2503 = HEAP32[$2502>>2]|0;
 $2504 = (_bitshift64Shl(($2500|0),($2503|0),5)|0);
 $2505 = (getTempRet0() | 0);
 $2506 = $2496 | $2504;
 $2497 | $2505;
 $2507 = $2506&255;
 $2508 = $1;
 $2509 = ((($2508)) + 23|0);
 HEAP8[$2509>>0] = $2507;
 $2510 = $11;
 $2511 = $2510;
 $2512 = HEAP32[$2511>>2]|0;
 $2513 = (($2510) + 4)|0;
 $2514 = $2513;
 $2515 = HEAP32[$2514>>2]|0;
 $2516 = (_bitshift64Ashr(($2512|0),($2515|0),3)|0);
 $2517 = (getTempRet0() | 0);
 $2518 = $2516&255;
 $2519 = $1;
 $2520 = ((($2519)) + 24|0);
 HEAP8[$2520>>0] = $2518;
 $2521 = $11;
 $2522 = $2521;
 $2523 = HEAP32[$2522>>2]|0;
 $2524 = (($2521) + 4)|0;
 $2525 = $2524;
 $2526 = HEAP32[$2525>>2]|0;
 $2527 = (_bitshift64Ashr(($2523|0),($2526|0),11)|0);
 $2528 = (getTempRet0() | 0);
 $2529 = $2527&255;
 $2530 = $1;
 $2531 = ((($2530)) + 25|0);
 HEAP8[$2531>>0] = $2529;
 $2532 = $11;
 $2533 = $2532;
 $2534 = HEAP32[$2533>>2]|0;
 $2535 = (($2532) + 4)|0;
 $2536 = $2535;
 $2537 = HEAP32[$2536>>2]|0;
 $2538 = (_bitshift64Ashr(($2534|0),($2537|0),19)|0);
 $2539 = (getTempRet0() | 0);
 $2540 = $12;
 $2541 = $2540;
 $2542 = HEAP32[$2541>>2]|0;
 $2543 = (($2540) + 4)|0;
 $2544 = $2543;
 $2545 = HEAP32[$2544>>2]|0;
 $2546 = (_bitshift64Shl(($2542|0),($2545|0),2)|0);
 $2547 = (getTempRet0() | 0);
 $2548 = $2538 | $2546;
 $2539 | $2547;
 $2549 = $2548&255;
 $2550 = $1;
 $2551 = ((($2550)) + 26|0);
 HEAP8[$2551>>0] = $2549;
 $2552 = $12;
 $2553 = $2552;
 $2554 = HEAP32[$2553>>2]|0;
 $2555 = (($2552) + 4)|0;
 $2556 = $2555;
 $2557 = HEAP32[$2556>>2]|0;
 $2558 = (_bitshift64Ashr(($2554|0),($2557|0),6)|0);
 $2559 = (getTempRet0() | 0);
 $2560 = $2558&255;
 $2561 = $1;
 $2562 = ((($2561)) + 27|0);
 HEAP8[$2562>>0] = $2560;
 $2563 = $12;
 $2564 = $2563;
 $2565 = HEAP32[$2564>>2]|0;
 $2566 = (($2563) + 4)|0;
 $2567 = $2566;
 $2568 = HEAP32[$2567>>2]|0;
 $2569 = (_bitshift64Ashr(($2565|0),($2568|0),14)|0);
 $2570 = (getTempRet0() | 0);
 $2571 = $13;
 $2572 = $2571;
 $2573 = HEAP32[$2572>>2]|0;
 $2574 = (($2571) + 4)|0;
 $2575 = $2574;
 $2576 = HEAP32[$2575>>2]|0;
 $2577 = (_bitshift64Shl(($2573|0),($2576|0),7)|0);
 $2578 = (getTempRet0() | 0);
 $2579 = $2569 | $2577;
 $2570 | $2578;
 $2580 = $2579&255;
 $2581 = $1;
 $2582 = ((($2581)) + 28|0);
 HEAP8[$2582>>0] = $2580;
 $2583 = $13;
 $2584 = $2583;
 $2585 = HEAP32[$2584>>2]|0;
 $2586 = (($2583) + 4)|0;
 $2587 = $2586;
 $2588 = HEAP32[$2587>>2]|0;
 $2589 = (_bitshift64Ashr(($2585|0),($2588|0),1)|0);
 $2590 = (getTempRet0() | 0);
 $2591 = $2589&255;
 $2592 = $1;
 $2593 = ((($2592)) + 29|0);
 HEAP8[$2593>>0] = $2591;
 $2594 = $13;
 $2595 = $2594;
 $2596 = HEAP32[$2595>>2]|0;
 $2597 = (($2594) + 4)|0;
 $2598 = $2597;
 $2599 = HEAP32[$2598>>2]|0;
 $2600 = (_bitshift64Ashr(($2596|0),($2599|0),9)|0);
 $2601 = (getTempRet0() | 0);
 $2602 = $2600&255;
 $2603 = $1;
 $2604 = ((($2603)) + 30|0);
 HEAP8[$2604>>0] = $2602;
 $2605 = $13;
 $2606 = $2605;
 $2607 = HEAP32[$2606>>2]|0;
 $2608 = (($2605) + 4)|0;
 $2609 = $2608;
 $2610 = HEAP32[$2609>>2]|0;
 $2611 = (_bitshift64Ashr(($2607|0),($2610|0),17)|0);
 $2612 = (getTempRet0() | 0);
 $2613 = $2611&255;
 $2614 = $1;
 $2615 = ((($2614)) + 31|0);
 HEAP8[$2615>>0] = $2613;
 STACKTOP = sp;return;
}
function _sc_add($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $6 = sp + 384|0;
 $7 = sp + 376|0;
 $8 = sp + 368|0;
 $9 = sp + 360|0;
 $10 = sp + 352|0;
 $11 = sp + 344|0;
 $12 = sp + 336|0;
 $13 = sp + 328|0;
 $14 = sp + 320|0;
 $15 = sp + 312|0;
 $16 = sp + 304|0;
 $17 = sp + 296|0;
 $18 = sp + 288|0;
 $19 = sp + 280|0;
 $20 = sp + 272|0;
 $21 = sp + 264|0;
 $22 = sp + 256|0;
 $23 = sp + 248|0;
 $24 = sp + 240|0;
 $25 = sp + 232|0;
 $26 = sp + 224|0;
 $27 = sp + 216|0;
 $28 = sp + 208|0;
 $29 = sp + 200|0;
 $30 = sp + 192|0;
 $31 = sp + 184|0;
 $32 = sp + 176|0;
 $33 = sp + 168|0;
 $34 = sp + 160|0;
 $35 = sp + 152|0;
 $36 = sp + 144|0;
 $37 = sp + 136|0;
 $38 = sp + 128|0;
 $39 = sp + 120|0;
 $40 = sp + 112|0;
 $41 = sp + 104|0;
 $42 = sp + 96|0;
 $43 = sp + 88|0;
 $44 = sp + 80|0;
 $45 = sp + 72|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $49 = sp + 40|0;
 $50 = sp + 32|0;
 $51 = sp + 24|0;
 $52 = sp + 16|0;
 $53 = sp + 8|0;
 $54 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $55 = $4;
 $56 = (_load_3($55)|0);
 $57 = (getTempRet0() | 0);
 $58 = 2097151 & $56;
 $59 = $6;
 $60 = $59;
 HEAP32[$60>>2] = $58;
 $61 = (($59) + 4)|0;
 $62 = $61;
 HEAP32[$62>>2] = 0;
 $63 = $4;
 $64 = ((($63)) + 2|0);
 $65 = (_load_4($64)|0);
 $66 = (getTempRet0() | 0);
 $67 = (_bitshift64Lshr(($65|0),($66|0),5)|0);
 $68 = (getTempRet0() | 0);
 $69 = 2097151 & $67;
 $70 = $7;
 $71 = $70;
 HEAP32[$71>>2] = $69;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = $4;
 $75 = ((($74)) + 5|0);
 $76 = (_load_3($75)|0);
 $77 = (getTempRet0() | 0);
 $78 = (_bitshift64Lshr(($76|0),($77|0),2)|0);
 $79 = (getTempRet0() | 0);
 $80 = 2097151 & $78;
 $81 = $8;
 $82 = $81;
 HEAP32[$82>>2] = $80;
 $83 = (($81) + 4)|0;
 $84 = $83;
 HEAP32[$84>>2] = 0;
 $85 = $4;
 $86 = ((($85)) + 7|0);
 $87 = (_load_4($86)|0);
 $88 = (getTempRet0() | 0);
 $89 = (_bitshift64Lshr(($87|0),($88|0),7)|0);
 $90 = (getTempRet0() | 0);
 $91 = 2097151 & $89;
 $92 = $9;
 $93 = $92;
 HEAP32[$93>>2] = $91;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = 0;
 $96 = $4;
 $97 = ((($96)) + 10|0);
 $98 = (_load_4($97)|0);
 $99 = (getTempRet0() | 0);
 $100 = (_bitshift64Lshr(($98|0),($99|0),4)|0);
 $101 = (getTempRet0() | 0);
 $102 = 2097151 & $100;
 $103 = $10;
 $104 = $103;
 HEAP32[$104>>2] = $102;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = 0;
 $107 = $4;
 $108 = ((($107)) + 13|0);
 $109 = (_load_3($108)|0);
 $110 = (getTempRet0() | 0);
 $111 = (_bitshift64Lshr(($109|0),($110|0),1)|0);
 $112 = (getTempRet0() | 0);
 $113 = 2097151 & $111;
 $114 = $11;
 $115 = $114;
 HEAP32[$115>>2] = $113;
 $116 = (($114) + 4)|0;
 $117 = $116;
 HEAP32[$117>>2] = 0;
 $118 = $4;
 $119 = ((($118)) + 15|0);
 $120 = (_load_4($119)|0);
 $121 = (getTempRet0() | 0);
 $122 = (_bitshift64Lshr(($120|0),($121|0),6)|0);
 $123 = (getTempRet0() | 0);
 $124 = 2097151 & $122;
 $125 = $12;
 $126 = $125;
 HEAP32[$126>>2] = $124;
 $127 = (($125) + 4)|0;
 $128 = $127;
 HEAP32[$128>>2] = 0;
 $129 = $4;
 $130 = ((($129)) + 18|0);
 $131 = (_load_3($130)|0);
 $132 = (getTempRet0() | 0);
 $133 = (_bitshift64Lshr(($131|0),($132|0),3)|0);
 $134 = (getTempRet0() | 0);
 $135 = 2097151 & $133;
 $136 = $13;
 $137 = $136;
 HEAP32[$137>>2] = $135;
 $138 = (($136) + 4)|0;
 $139 = $138;
 HEAP32[$139>>2] = 0;
 $140 = $4;
 $141 = ((($140)) + 21|0);
 $142 = (_load_3($141)|0);
 $143 = (getTempRet0() | 0);
 $144 = 2097151 & $142;
 $145 = $14;
 $146 = $145;
 HEAP32[$146>>2] = $144;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = 0;
 $149 = $4;
 $150 = ((($149)) + 23|0);
 $151 = (_load_4($150)|0);
 $152 = (getTempRet0() | 0);
 $153 = (_bitshift64Lshr(($151|0),($152|0),5)|0);
 $154 = (getTempRet0() | 0);
 $155 = 2097151 & $153;
 $156 = $15;
 $157 = $156;
 HEAP32[$157>>2] = $155;
 $158 = (($156) + 4)|0;
 $159 = $158;
 HEAP32[$159>>2] = 0;
 $160 = $4;
 $161 = ((($160)) + 26|0);
 $162 = (_load_3($161)|0);
 $163 = (getTempRet0() | 0);
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = 2097151 & $164;
 $167 = $16;
 $168 = $167;
 HEAP32[$168>>2] = $166;
 $169 = (($167) + 4)|0;
 $170 = $169;
 HEAP32[$170>>2] = 0;
 $171 = $4;
 $172 = ((($171)) + 28|0);
 $173 = (_load_4($172)|0);
 $174 = (getTempRet0() | 0);
 $175 = (_bitshift64Lshr(($173|0),($174|0),7)|0);
 $176 = (getTempRet0() | 0);
 $177 = $17;
 $178 = $177;
 HEAP32[$178>>2] = $175;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = $176;
 $181 = $5;
 $182 = (_load_3($181)|0);
 $183 = (getTempRet0() | 0);
 $184 = 2097151 & $182;
 $185 = $18;
 $186 = $185;
 HEAP32[$186>>2] = $184;
 $187 = (($185) + 4)|0;
 $188 = $187;
 HEAP32[$188>>2] = 0;
 $189 = $5;
 $190 = ((($189)) + 2|0);
 $191 = (_load_4($190)|0);
 $192 = (getTempRet0() | 0);
 $193 = (_bitshift64Lshr(($191|0),($192|0),5)|0);
 $194 = (getTempRet0() | 0);
 $195 = 2097151 & $193;
 $196 = $19;
 $197 = $196;
 HEAP32[$197>>2] = $195;
 $198 = (($196) + 4)|0;
 $199 = $198;
 HEAP32[$199>>2] = 0;
 $200 = $5;
 $201 = ((($200)) + 5|0);
 $202 = (_load_3($201)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_bitshift64Lshr(($202|0),($203|0),2)|0);
 $205 = (getTempRet0() | 0);
 $206 = 2097151 & $204;
 $207 = $20;
 $208 = $207;
 HEAP32[$208>>2] = $206;
 $209 = (($207) + 4)|0;
 $210 = $209;
 HEAP32[$210>>2] = 0;
 $211 = $5;
 $212 = ((($211)) + 7|0);
 $213 = (_load_4($212)|0);
 $214 = (getTempRet0() | 0);
 $215 = (_bitshift64Lshr(($213|0),($214|0),7)|0);
 $216 = (getTempRet0() | 0);
 $217 = 2097151 & $215;
 $218 = $21;
 $219 = $218;
 HEAP32[$219>>2] = $217;
 $220 = (($218) + 4)|0;
 $221 = $220;
 HEAP32[$221>>2] = 0;
 $222 = $5;
 $223 = ((($222)) + 10|0);
 $224 = (_load_4($223)|0);
 $225 = (getTempRet0() | 0);
 $226 = (_bitshift64Lshr(($224|0),($225|0),4)|0);
 $227 = (getTempRet0() | 0);
 $228 = 2097151 & $226;
 $229 = $22;
 $230 = $229;
 HEAP32[$230>>2] = $228;
 $231 = (($229) + 4)|0;
 $232 = $231;
 HEAP32[$232>>2] = 0;
 $233 = $5;
 $234 = ((($233)) + 13|0);
 $235 = (_load_3($234)|0);
 $236 = (getTempRet0() | 0);
 $237 = (_bitshift64Lshr(($235|0),($236|0),1)|0);
 $238 = (getTempRet0() | 0);
 $239 = 2097151 & $237;
 $240 = $23;
 $241 = $240;
 HEAP32[$241>>2] = $239;
 $242 = (($240) + 4)|0;
 $243 = $242;
 HEAP32[$243>>2] = 0;
 $244 = $5;
 $245 = ((($244)) + 15|0);
 $246 = (_load_4($245)|0);
 $247 = (getTempRet0() | 0);
 $248 = (_bitshift64Lshr(($246|0),($247|0),6)|0);
 $249 = (getTempRet0() | 0);
 $250 = 2097151 & $248;
 $251 = $24;
 $252 = $251;
 HEAP32[$252>>2] = $250;
 $253 = (($251) + 4)|0;
 $254 = $253;
 HEAP32[$254>>2] = 0;
 $255 = $5;
 $256 = ((($255)) + 18|0);
 $257 = (_load_3($256)|0);
 $258 = (getTempRet0() | 0);
 $259 = (_bitshift64Lshr(($257|0),($258|0),3)|0);
 $260 = (getTempRet0() | 0);
 $261 = 2097151 & $259;
 $262 = $25;
 $263 = $262;
 HEAP32[$263>>2] = $261;
 $264 = (($262) + 4)|0;
 $265 = $264;
 HEAP32[$265>>2] = 0;
 $266 = $5;
 $267 = ((($266)) + 21|0);
 $268 = (_load_3($267)|0);
 $269 = (getTempRet0() | 0);
 $270 = 2097151 & $268;
 $271 = $26;
 $272 = $271;
 HEAP32[$272>>2] = $270;
 $273 = (($271) + 4)|0;
 $274 = $273;
 HEAP32[$274>>2] = 0;
 $275 = $5;
 $276 = ((($275)) + 23|0);
 $277 = (_load_4($276)|0);
 $278 = (getTempRet0() | 0);
 $279 = (_bitshift64Lshr(($277|0),($278|0),5)|0);
 $280 = (getTempRet0() | 0);
 $281 = 2097151 & $279;
 $282 = $27;
 $283 = $282;
 HEAP32[$283>>2] = $281;
 $284 = (($282) + 4)|0;
 $285 = $284;
 HEAP32[$285>>2] = 0;
 $286 = $5;
 $287 = ((($286)) + 26|0);
 $288 = (_load_3($287)|0);
 $289 = (getTempRet0() | 0);
 $290 = (_bitshift64Lshr(($288|0),($289|0),2)|0);
 $291 = (getTempRet0() | 0);
 $292 = 2097151 & $290;
 $293 = $28;
 $294 = $293;
 HEAP32[$294>>2] = $292;
 $295 = (($293) + 4)|0;
 $296 = $295;
 HEAP32[$296>>2] = 0;
 $297 = $5;
 $298 = ((($297)) + 28|0);
 $299 = (_load_4($298)|0);
 $300 = (getTempRet0() | 0);
 $301 = (_bitshift64Lshr(($299|0),($300|0),7)|0);
 $302 = (getTempRet0() | 0);
 $303 = $29;
 $304 = $303;
 HEAP32[$304>>2] = $301;
 $305 = (($303) + 4)|0;
 $306 = $305;
 HEAP32[$306>>2] = $302;
 $307 = $6;
 $308 = $307;
 $309 = HEAP32[$308>>2]|0;
 $310 = (($307) + 4)|0;
 $311 = $310;
 $312 = HEAP32[$311>>2]|0;
 $313 = $18;
 $314 = $313;
 $315 = HEAP32[$314>>2]|0;
 $316 = (($313) + 4)|0;
 $317 = $316;
 $318 = HEAP32[$317>>2]|0;
 $319 = (_i64Add(($309|0),($312|0),($315|0),($318|0))|0);
 $320 = (getTempRet0() | 0);
 $321 = $30;
 $322 = $321;
 HEAP32[$322>>2] = $319;
 $323 = (($321) + 4)|0;
 $324 = $323;
 HEAP32[$324>>2] = $320;
 $325 = $7;
 $326 = $325;
 $327 = HEAP32[$326>>2]|0;
 $328 = (($325) + 4)|0;
 $329 = $328;
 $330 = HEAP32[$329>>2]|0;
 $331 = $19;
 $332 = $331;
 $333 = HEAP32[$332>>2]|0;
 $334 = (($331) + 4)|0;
 $335 = $334;
 $336 = HEAP32[$335>>2]|0;
 $337 = (_i64Add(($327|0),($330|0),($333|0),($336|0))|0);
 $338 = (getTempRet0() | 0);
 $339 = $31;
 $340 = $339;
 HEAP32[$340>>2] = $337;
 $341 = (($339) + 4)|0;
 $342 = $341;
 HEAP32[$342>>2] = $338;
 $343 = $8;
 $344 = $343;
 $345 = HEAP32[$344>>2]|0;
 $346 = (($343) + 4)|0;
 $347 = $346;
 $348 = HEAP32[$347>>2]|0;
 $349 = $20;
 $350 = $349;
 $351 = HEAP32[$350>>2]|0;
 $352 = (($349) + 4)|0;
 $353 = $352;
 $354 = HEAP32[$353>>2]|0;
 $355 = (_i64Add(($345|0),($348|0),($351|0),($354|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = $32;
 $358 = $357;
 HEAP32[$358>>2] = $355;
 $359 = (($357) + 4)|0;
 $360 = $359;
 HEAP32[$360>>2] = $356;
 $361 = $9;
 $362 = $361;
 $363 = HEAP32[$362>>2]|0;
 $364 = (($361) + 4)|0;
 $365 = $364;
 $366 = HEAP32[$365>>2]|0;
 $367 = $21;
 $368 = $367;
 $369 = HEAP32[$368>>2]|0;
 $370 = (($367) + 4)|0;
 $371 = $370;
 $372 = HEAP32[$371>>2]|0;
 $373 = (_i64Add(($363|0),($366|0),($369|0),($372|0))|0);
 $374 = (getTempRet0() | 0);
 $375 = $33;
 $376 = $375;
 HEAP32[$376>>2] = $373;
 $377 = (($375) + 4)|0;
 $378 = $377;
 HEAP32[$378>>2] = $374;
 $379 = $10;
 $380 = $379;
 $381 = HEAP32[$380>>2]|0;
 $382 = (($379) + 4)|0;
 $383 = $382;
 $384 = HEAP32[$383>>2]|0;
 $385 = $22;
 $386 = $385;
 $387 = HEAP32[$386>>2]|0;
 $388 = (($385) + 4)|0;
 $389 = $388;
 $390 = HEAP32[$389>>2]|0;
 $391 = (_i64Add(($381|0),($384|0),($387|0),($390|0))|0);
 $392 = (getTempRet0() | 0);
 $393 = $34;
 $394 = $393;
 HEAP32[$394>>2] = $391;
 $395 = (($393) + 4)|0;
 $396 = $395;
 HEAP32[$396>>2] = $392;
 $397 = $11;
 $398 = $397;
 $399 = HEAP32[$398>>2]|0;
 $400 = (($397) + 4)|0;
 $401 = $400;
 $402 = HEAP32[$401>>2]|0;
 $403 = $23;
 $404 = $403;
 $405 = HEAP32[$404>>2]|0;
 $406 = (($403) + 4)|0;
 $407 = $406;
 $408 = HEAP32[$407>>2]|0;
 $409 = (_i64Add(($399|0),($402|0),($405|0),($408|0))|0);
 $410 = (getTempRet0() | 0);
 $411 = $35;
 $412 = $411;
 HEAP32[$412>>2] = $409;
 $413 = (($411) + 4)|0;
 $414 = $413;
 HEAP32[$414>>2] = $410;
 $415 = $12;
 $416 = $415;
 $417 = HEAP32[$416>>2]|0;
 $418 = (($415) + 4)|0;
 $419 = $418;
 $420 = HEAP32[$419>>2]|0;
 $421 = $24;
 $422 = $421;
 $423 = HEAP32[$422>>2]|0;
 $424 = (($421) + 4)|0;
 $425 = $424;
 $426 = HEAP32[$425>>2]|0;
 $427 = (_i64Add(($417|0),($420|0),($423|0),($426|0))|0);
 $428 = (getTempRet0() | 0);
 $429 = $36;
 $430 = $429;
 HEAP32[$430>>2] = $427;
 $431 = (($429) + 4)|0;
 $432 = $431;
 HEAP32[$432>>2] = $428;
 $433 = $13;
 $434 = $433;
 $435 = HEAP32[$434>>2]|0;
 $436 = (($433) + 4)|0;
 $437 = $436;
 $438 = HEAP32[$437>>2]|0;
 $439 = $25;
 $440 = $439;
 $441 = HEAP32[$440>>2]|0;
 $442 = (($439) + 4)|0;
 $443 = $442;
 $444 = HEAP32[$443>>2]|0;
 $445 = (_i64Add(($435|0),($438|0),($441|0),($444|0))|0);
 $446 = (getTempRet0() | 0);
 $447 = $37;
 $448 = $447;
 HEAP32[$448>>2] = $445;
 $449 = (($447) + 4)|0;
 $450 = $449;
 HEAP32[$450>>2] = $446;
 $451 = $14;
 $452 = $451;
 $453 = HEAP32[$452>>2]|0;
 $454 = (($451) + 4)|0;
 $455 = $454;
 $456 = HEAP32[$455>>2]|0;
 $457 = $26;
 $458 = $457;
 $459 = HEAP32[$458>>2]|0;
 $460 = (($457) + 4)|0;
 $461 = $460;
 $462 = HEAP32[$461>>2]|0;
 $463 = (_i64Add(($453|0),($456|0),($459|0),($462|0))|0);
 $464 = (getTempRet0() | 0);
 $465 = $38;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $15;
 $470 = $469;
 $471 = HEAP32[$470>>2]|0;
 $472 = (($469) + 4)|0;
 $473 = $472;
 $474 = HEAP32[$473>>2]|0;
 $475 = $27;
 $476 = $475;
 $477 = HEAP32[$476>>2]|0;
 $478 = (($475) + 4)|0;
 $479 = $478;
 $480 = HEAP32[$479>>2]|0;
 $481 = (_i64Add(($471|0),($474|0),($477|0),($480|0))|0);
 $482 = (getTempRet0() | 0);
 $483 = $39;
 $484 = $483;
 HEAP32[$484>>2] = $481;
 $485 = (($483) + 4)|0;
 $486 = $485;
 HEAP32[$486>>2] = $482;
 $487 = $16;
 $488 = $487;
 $489 = HEAP32[$488>>2]|0;
 $490 = (($487) + 4)|0;
 $491 = $490;
 $492 = HEAP32[$491>>2]|0;
 $493 = $28;
 $494 = $493;
 $495 = HEAP32[$494>>2]|0;
 $496 = (($493) + 4)|0;
 $497 = $496;
 $498 = HEAP32[$497>>2]|0;
 $499 = (_i64Add(($489|0),($492|0),($495|0),($498|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = $40;
 $502 = $501;
 HEAP32[$502>>2] = $499;
 $503 = (($501) + 4)|0;
 $504 = $503;
 HEAP32[$504>>2] = $500;
 $505 = $17;
 $506 = $505;
 $507 = HEAP32[$506>>2]|0;
 $508 = (($505) + 4)|0;
 $509 = $508;
 $510 = HEAP32[$509>>2]|0;
 $511 = $29;
 $512 = $511;
 $513 = HEAP32[$512>>2]|0;
 $514 = (($511) + 4)|0;
 $515 = $514;
 $516 = HEAP32[$515>>2]|0;
 $517 = (_i64Add(($507|0),($510|0),($513|0),($516|0))|0);
 $518 = (getTempRet0() | 0);
 $519 = $41;
 $520 = $519;
 HEAP32[$520>>2] = $517;
 $521 = (($519) + 4)|0;
 $522 = $521;
 HEAP32[$522>>2] = $518;
 $523 = $42;
 $524 = $523;
 HEAP32[$524>>2] = 0;
 $525 = (($523) + 4)|0;
 $526 = $525;
 HEAP32[$526>>2] = 0;
 $527 = $30;
 $528 = $527;
 $529 = HEAP32[$528>>2]|0;
 $530 = (($527) + 4)|0;
 $531 = $530;
 $532 = HEAP32[$531>>2]|0;
 $533 = (_i64Add(($529|0),($532|0),1048576,0)|0);
 $534 = (getTempRet0() | 0);
 $535 = (_bitshift64Ashr(($533|0),($534|0),21)|0);
 $536 = (getTempRet0() | 0);
 $537 = $43;
 $538 = $537;
 HEAP32[$538>>2] = $535;
 $539 = (($537) + 4)|0;
 $540 = $539;
 HEAP32[$540>>2] = $536;
 $541 = $43;
 $542 = $541;
 $543 = HEAP32[$542>>2]|0;
 $544 = (($541) + 4)|0;
 $545 = $544;
 $546 = HEAP32[$545>>2]|0;
 $547 = $31;
 $548 = $547;
 $549 = HEAP32[$548>>2]|0;
 $550 = (($547) + 4)|0;
 $551 = $550;
 $552 = HEAP32[$551>>2]|0;
 $553 = (_i64Add(($549|0),($552|0),($543|0),($546|0))|0);
 $554 = (getTempRet0() | 0);
 $555 = $31;
 $556 = $555;
 HEAP32[$556>>2] = $553;
 $557 = (($555) + 4)|0;
 $558 = $557;
 HEAP32[$558>>2] = $554;
 $559 = $43;
 $560 = $559;
 $561 = HEAP32[$560>>2]|0;
 $562 = (($559) + 4)|0;
 $563 = $562;
 $564 = HEAP32[$563>>2]|0;
 $565 = (_bitshift64Shl(($561|0),($564|0),21)|0);
 $566 = (getTempRet0() | 0);
 $567 = $30;
 $568 = $567;
 $569 = HEAP32[$568>>2]|0;
 $570 = (($567) + 4)|0;
 $571 = $570;
 $572 = HEAP32[$571>>2]|0;
 $573 = (_i64Subtract(($569|0),($572|0),($565|0),($566|0))|0);
 $574 = (getTempRet0() | 0);
 $575 = $30;
 $576 = $575;
 HEAP32[$576>>2] = $573;
 $577 = (($575) + 4)|0;
 $578 = $577;
 HEAP32[$578>>2] = $574;
 $579 = $32;
 $580 = $579;
 $581 = HEAP32[$580>>2]|0;
 $582 = (($579) + 4)|0;
 $583 = $582;
 $584 = HEAP32[$583>>2]|0;
 $585 = (_i64Add(($581|0),($584|0),1048576,0)|0);
 $586 = (getTempRet0() | 0);
 $587 = (_bitshift64Ashr(($585|0),($586|0),21)|0);
 $588 = (getTempRet0() | 0);
 $589 = $45;
 $590 = $589;
 HEAP32[$590>>2] = $587;
 $591 = (($589) + 4)|0;
 $592 = $591;
 HEAP32[$592>>2] = $588;
 $593 = $45;
 $594 = $593;
 $595 = HEAP32[$594>>2]|0;
 $596 = (($593) + 4)|0;
 $597 = $596;
 $598 = HEAP32[$597>>2]|0;
 $599 = $33;
 $600 = $599;
 $601 = HEAP32[$600>>2]|0;
 $602 = (($599) + 4)|0;
 $603 = $602;
 $604 = HEAP32[$603>>2]|0;
 $605 = (_i64Add(($601|0),($604|0),($595|0),($598|0))|0);
 $606 = (getTempRet0() | 0);
 $607 = $33;
 $608 = $607;
 HEAP32[$608>>2] = $605;
 $609 = (($607) + 4)|0;
 $610 = $609;
 HEAP32[$610>>2] = $606;
 $611 = $45;
 $612 = $611;
 $613 = HEAP32[$612>>2]|0;
 $614 = (($611) + 4)|0;
 $615 = $614;
 $616 = HEAP32[$615>>2]|0;
 $617 = (_bitshift64Shl(($613|0),($616|0),21)|0);
 $618 = (getTempRet0() | 0);
 $619 = $32;
 $620 = $619;
 $621 = HEAP32[$620>>2]|0;
 $622 = (($619) + 4)|0;
 $623 = $622;
 $624 = HEAP32[$623>>2]|0;
 $625 = (_i64Subtract(($621|0),($624|0),($617|0),($618|0))|0);
 $626 = (getTempRet0() | 0);
 $627 = $32;
 $628 = $627;
 HEAP32[$628>>2] = $625;
 $629 = (($627) + 4)|0;
 $630 = $629;
 HEAP32[$630>>2] = $626;
 $631 = $34;
 $632 = $631;
 $633 = HEAP32[$632>>2]|0;
 $634 = (($631) + 4)|0;
 $635 = $634;
 $636 = HEAP32[$635>>2]|0;
 $637 = (_i64Add(($633|0),($636|0),1048576,0)|0);
 $638 = (getTempRet0() | 0);
 $639 = (_bitshift64Ashr(($637|0),($638|0),21)|0);
 $640 = (getTempRet0() | 0);
 $641 = $47;
 $642 = $641;
 HEAP32[$642>>2] = $639;
 $643 = (($641) + 4)|0;
 $644 = $643;
 HEAP32[$644>>2] = $640;
 $645 = $47;
 $646 = $645;
 $647 = HEAP32[$646>>2]|0;
 $648 = (($645) + 4)|0;
 $649 = $648;
 $650 = HEAP32[$649>>2]|0;
 $651 = $35;
 $652 = $651;
 $653 = HEAP32[$652>>2]|0;
 $654 = (($651) + 4)|0;
 $655 = $654;
 $656 = HEAP32[$655>>2]|0;
 $657 = (_i64Add(($653|0),($656|0),($647|0),($650|0))|0);
 $658 = (getTempRet0() | 0);
 $659 = $35;
 $660 = $659;
 HEAP32[$660>>2] = $657;
 $661 = (($659) + 4)|0;
 $662 = $661;
 HEAP32[$662>>2] = $658;
 $663 = $47;
 $664 = $663;
 $665 = HEAP32[$664>>2]|0;
 $666 = (($663) + 4)|0;
 $667 = $666;
 $668 = HEAP32[$667>>2]|0;
 $669 = (_bitshift64Shl(($665|0),($668|0),21)|0);
 $670 = (getTempRet0() | 0);
 $671 = $34;
 $672 = $671;
 $673 = HEAP32[$672>>2]|0;
 $674 = (($671) + 4)|0;
 $675 = $674;
 $676 = HEAP32[$675>>2]|0;
 $677 = (_i64Subtract(($673|0),($676|0),($669|0),($670|0))|0);
 $678 = (getTempRet0() | 0);
 $679 = $34;
 $680 = $679;
 HEAP32[$680>>2] = $677;
 $681 = (($679) + 4)|0;
 $682 = $681;
 HEAP32[$682>>2] = $678;
 $683 = $36;
 $684 = $683;
 $685 = HEAP32[$684>>2]|0;
 $686 = (($683) + 4)|0;
 $687 = $686;
 $688 = HEAP32[$687>>2]|0;
 $689 = (_i64Add(($685|0),($688|0),1048576,0)|0);
 $690 = (getTempRet0() | 0);
 $691 = (_bitshift64Ashr(($689|0),($690|0),21)|0);
 $692 = (getTempRet0() | 0);
 $693 = $49;
 $694 = $693;
 HEAP32[$694>>2] = $691;
 $695 = (($693) + 4)|0;
 $696 = $695;
 HEAP32[$696>>2] = $692;
 $697 = $49;
 $698 = $697;
 $699 = HEAP32[$698>>2]|0;
 $700 = (($697) + 4)|0;
 $701 = $700;
 $702 = HEAP32[$701>>2]|0;
 $703 = $37;
 $704 = $703;
 $705 = HEAP32[$704>>2]|0;
 $706 = (($703) + 4)|0;
 $707 = $706;
 $708 = HEAP32[$707>>2]|0;
 $709 = (_i64Add(($705|0),($708|0),($699|0),($702|0))|0);
 $710 = (getTempRet0() | 0);
 $711 = $37;
 $712 = $711;
 HEAP32[$712>>2] = $709;
 $713 = (($711) + 4)|0;
 $714 = $713;
 HEAP32[$714>>2] = $710;
 $715 = $49;
 $716 = $715;
 $717 = HEAP32[$716>>2]|0;
 $718 = (($715) + 4)|0;
 $719 = $718;
 $720 = HEAP32[$719>>2]|0;
 $721 = (_bitshift64Shl(($717|0),($720|0),21)|0);
 $722 = (getTempRet0() | 0);
 $723 = $36;
 $724 = $723;
 $725 = HEAP32[$724>>2]|0;
 $726 = (($723) + 4)|0;
 $727 = $726;
 $728 = HEAP32[$727>>2]|0;
 $729 = (_i64Subtract(($725|0),($728|0),($721|0),($722|0))|0);
 $730 = (getTempRet0() | 0);
 $731 = $36;
 $732 = $731;
 HEAP32[$732>>2] = $729;
 $733 = (($731) + 4)|0;
 $734 = $733;
 HEAP32[$734>>2] = $730;
 $735 = $38;
 $736 = $735;
 $737 = HEAP32[$736>>2]|0;
 $738 = (($735) + 4)|0;
 $739 = $738;
 $740 = HEAP32[$739>>2]|0;
 $741 = (_i64Add(($737|0),($740|0),1048576,0)|0);
 $742 = (getTempRet0() | 0);
 $743 = (_bitshift64Ashr(($741|0),($742|0),21)|0);
 $744 = (getTempRet0() | 0);
 $745 = $51;
 $746 = $745;
 HEAP32[$746>>2] = $743;
 $747 = (($745) + 4)|0;
 $748 = $747;
 HEAP32[$748>>2] = $744;
 $749 = $51;
 $750 = $749;
 $751 = HEAP32[$750>>2]|0;
 $752 = (($749) + 4)|0;
 $753 = $752;
 $754 = HEAP32[$753>>2]|0;
 $755 = $39;
 $756 = $755;
 $757 = HEAP32[$756>>2]|0;
 $758 = (($755) + 4)|0;
 $759 = $758;
 $760 = HEAP32[$759>>2]|0;
 $761 = (_i64Add(($757|0),($760|0),($751|0),($754|0))|0);
 $762 = (getTempRet0() | 0);
 $763 = $39;
 $764 = $763;
 HEAP32[$764>>2] = $761;
 $765 = (($763) + 4)|0;
 $766 = $765;
 HEAP32[$766>>2] = $762;
 $767 = $51;
 $768 = $767;
 $769 = HEAP32[$768>>2]|0;
 $770 = (($767) + 4)|0;
 $771 = $770;
 $772 = HEAP32[$771>>2]|0;
 $773 = (_bitshift64Shl(($769|0),($772|0),21)|0);
 $774 = (getTempRet0() | 0);
 $775 = $38;
 $776 = $775;
 $777 = HEAP32[$776>>2]|0;
 $778 = (($775) + 4)|0;
 $779 = $778;
 $780 = HEAP32[$779>>2]|0;
 $781 = (_i64Subtract(($777|0),($780|0),($773|0),($774|0))|0);
 $782 = (getTempRet0() | 0);
 $783 = $38;
 $784 = $783;
 HEAP32[$784>>2] = $781;
 $785 = (($783) + 4)|0;
 $786 = $785;
 HEAP32[$786>>2] = $782;
 $787 = $40;
 $788 = $787;
 $789 = HEAP32[$788>>2]|0;
 $790 = (($787) + 4)|0;
 $791 = $790;
 $792 = HEAP32[$791>>2]|0;
 $793 = (_i64Add(($789|0),($792|0),1048576,0)|0);
 $794 = (getTempRet0() | 0);
 $795 = (_bitshift64Ashr(($793|0),($794|0),21)|0);
 $796 = (getTempRet0() | 0);
 $797 = $53;
 $798 = $797;
 HEAP32[$798>>2] = $795;
 $799 = (($797) + 4)|0;
 $800 = $799;
 HEAP32[$800>>2] = $796;
 $801 = $53;
 $802 = $801;
 $803 = HEAP32[$802>>2]|0;
 $804 = (($801) + 4)|0;
 $805 = $804;
 $806 = HEAP32[$805>>2]|0;
 $807 = $41;
 $808 = $807;
 $809 = HEAP32[$808>>2]|0;
 $810 = (($807) + 4)|0;
 $811 = $810;
 $812 = HEAP32[$811>>2]|0;
 $813 = (_i64Add(($809|0),($812|0),($803|0),($806|0))|0);
 $814 = (getTempRet0() | 0);
 $815 = $41;
 $816 = $815;
 HEAP32[$816>>2] = $813;
 $817 = (($815) + 4)|0;
 $818 = $817;
 HEAP32[$818>>2] = $814;
 $819 = $53;
 $820 = $819;
 $821 = HEAP32[$820>>2]|0;
 $822 = (($819) + 4)|0;
 $823 = $822;
 $824 = HEAP32[$823>>2]|0;
 $825 = (_bitshift64Shl(($821|0),($824|0),21)|0);
 $826 = (getTempRet0() | 0);
 $827 = $40;
 $828 = $827;
 $829 = HEAP32[$828>>2]|0;
 $830 = (($827) + 4)|0;
 $831 = $830;
 $832 = HEAP32[$831>>2]|0;
 $833 = (_i64Subtract(($829|0),($832|0),($825|0),($826|0))|0);
 $834 = (getTempRet0() | 0);
 $835 = $40;
 $836 = $835;
 HEAP32[$836>>2] = $833;
 $837 = (($835) + 4)|0;
 $838 = $837;
 HEAP32[$838>>2] = $834;
 $839 = $31;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = (_i64Add(($841|0),($844|0),1048576,0)|0);
 $846 = (getTempRet0() | 0);
 $847 = (_bitshift64Ashr(($845|0),($846|0),21)|0);
 $848 = (getTempRet0() | 0);
 $849 = $44;
 $850 = $849;
 HEAP32[$850>>2] = $847;
 $851 = (($849) + 4)|0;
 $852 = $851;
 HEAP32[$852>>2] = $848;
 $853 = $44;
 $854 = $853;
 $855 = HEAP32[$854>>2]|0;
 $856 = (($853) + 4)|0;
 $857 = $856;
 $858 = HEAP32[$857>>2]|0;
 $859 = $32;
 $860 = $859;
 $861 = HEAP32[$860>>2]|0;
 $862 = (($859) + 4)|0;
 $863 = $862;
 $864 = HEAP32[$863>>2]|0;
 $865 = (_i64Add(($861|0),($864|0),($855|0),($858|0))|0);
 $866 = (getTempRet0() | 0);
 $867 = $32;
 $868 = $867;
 HEAP32[$868>>2] = $865;
 $869 = (($867) + 4)|0;
 $870 = $869;
 HEAP32[$870>>2] = $866;
 $871 = $44;
 $872 = $871;
 $873 = HEAP32[$872>>2]|0;
 $874 = (($871) + 4)|0;
 $875 = $874;
 $876 = HEAP32[$875>>2]|0;
 $877 = (_bitshift64Shl(($873|0),($876|0),21)|0);
 $878 = (getTempRet0() | 0);
 $879 = $31;
 $880 = $879;
 $881 = HEAP32[$880>>2]|0;
 $882 = (($879) + 4)|0;
 $883 = $882;
 $884 = HEAP32[$883>>2]|0;
 $885 = (_i64Subtract(($881|0),($884|0),($877|0),($878|0))|0);
 $886 = (getTempRet0() | 0);
 $887 = $31;
 $888 = $887;
 HEAP32[$888>>2] = $885;
 $889 = (($887) + 4)|0;
 $890 = $889;
 HEAP32[$890>>2] = $886;
 $891 = $33;
 $892 = $891;
 $893 = HEAP32[$892>>2]|0;
 $894 = (($891) + 4)|0;
 $895 = $894;
 $896 = HEAP32[$895>>2]|0;
 $897 = (_i64Add(($893|0),($896|0),1048576,0)|0);
 $898 = (getTempRet0() | 0);
 $899 = (_bitshift64Ashr(($897|0),($898|0),21)|0);
 $900 = (getTempRet0() | 0);
 $901 = $46;
 $902 = $901;
 HEAP32[$902>>2] = $899;
 $903 = (($901) + 4)|0;
 $904 = $903;
 HEAP32[$904>>2] = $900;
 $905 = $46;
 $906 = $905;
 $907 = HEAP32[$906>>2]|0;
 $908 = (($905) + 4)|0;
 $909 = $908;
 $910 = HEAP32[$909>>2]|0;
 $911 = $34;
 $912 = $911;
 $913 = HEAP32[$912>>2]|0;
 $914 = (($911) + 4)|0;
 $915 = $914;
 $916 = HEAP32[$915>>2]|0;
 $917 = (_i64Add(($913|0),($916|0),($907|0),($910|0))|0);
 $918 = (getTempRet0() | 0);
 $919 = $34;
 $920 = $919;
 HEAP32[$920>>2] = $917;
 $921 = (($919) + 4)|0;
 $922 = $921;
 HEAP32[$922>>2] = $918;
 $923 = $46;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (_bitshift64Shl(($925|0),($928|0),21)|0);
 $930 = (getTempRet0() | 0);
 $931 = $33;
 $932 = $931;
 $933 = HEAP32[$932>>2]|0;
 $934 = (($931) + 4)|0;
 $935 = $934;
 $936 = HEAP32[$935>>2]|0;
 $937 = (_i64Subtract(($933|0),($936|0),($929|0),($930|0))|0);
 $938 = (getTempRet0() | 0);
 $939 = $33;
 $940 = $939;
 HEAP32[$940>>2] = $937;
 $941 = (($939) + 4)|0;
 $942 = $941;
 HEAP32[$942>>2] = $938;
 $943 = $35;
 $944 = $943;
 $945 = HEAP32[$944>>2]|0;
 $946 = (($943) + 4)|0;
 $947 = $946;
 $948 = HEAP32[$947>>2]|0;
 $949 = (_i64Add(($945|0),($948|0),1048576,0)|0);
 $950 = (getTempRet0() | 0);
 $951 = (_bitshift64Ashr(($949|0),($950|0),21)|0);
 $952 = (getTempRet0() | 0);
 $953 = $48;
 $954 = $953;
 HEAP32[$954>>2] = $951;
 $955 = (($953) + 4)|0;
 $956 = $955;
 HEAP32[$956>>2] = $952;
 $957 = $48;
 $958 = $957;
 $959 = HEAP32[$958>>2]|0;
 $960 = (($957) + 4)|0;
 $961 = $960;
 $962 = HEAP32[$961>>2]|0;
 $963 = $36;
 $964 = $963;
 $965 = HEAP32[$964>>2]|0;
 $966 = (($963) + 4)|0;
 $967 = $966;
 $968 = HEAP32[$967>>2]|0;
 $969 = (_i64Add(($965|0),($968|0),($959|0),($962|0))|0);
 $970 = (getTempRet0() | 0);
 $971 = $36;
 $972 = $971;
 HEAP32[$972>>2] = $969;
 $973 = (($971) + 4)|0;
 $974 = $973;
 HEAP32[$974>>2] = $970;
 $975 = $48;
 $976 = $975;
 $977 = HEAP32[$976>>2]|0;
 $978 = (($975) + 4)|0;
 $979 = $978;
 $980 = HEAP32[$979>>2]|0;
 $981 = (_bitshift64Shl(($977|0),($980|0),21)|0);
 $982 = (getTempRet0() | 0);
 $983 = $35;
 $984 = $983;
 $985 = HEAP32[$984>>2]|0;
 $986 = (($983) + 4)|0;
 $987 = $986;
 $988 = HEAP32[$987>>2]|0;
 $989 = (_i64Subtract(($985|0),($988|0),($981|0),($982|0))|0);
 $990 = (getTempRet0() | 0);
 $991 = $35;
 $992 = $991;
 HEAP32[$992>>2] = $989;
 $993 = (($991) + 4)|0;
 $994 = $993;
 HEAP32[$994>>2] = $990;
 $995 = $37;
 $996 = $995;
 $997 = HEAP32[$996>>2]|0;
 $998 = (($995) + 4)|0;
 $999 = $998;
 $1000 = HEAP32[$999>>2]|0;
 $1001 = (_i64Add(($997|0),($1000|0),1048576,0)|0);
 $1002 = (getTempRet0() | 0);
 $1003 = (_bitshift64Ashr(($1001|0),($1002|0),21)|0);
 $1004 = (getTempRet0() | 0);
 $1005 = $50;
 $1006 = $1005;
 HEAP32[$1006>>2] = $1003;
 $1007 = (($1005) + 4)|0;
 $1008 = $1007;
 HEAP32[$1008>>2] = $1004;
 $1009 = $50;
 $1010 = $1009;
 $1011 = HEAP32[$1010>>2]|0;
 $1012 = (($1009) + 4)|0;
 $1013 = $1012;
 $1014 = HEAP32[$1013>>2]|0;
 $1015 = $38;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = (($1015) + 4)|0;
 $1019 = $1018;
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (_i64Add(($1017|0),($1020|0),($1011|0),($1014|0))|0);
 $1022 = (getTempRet0() | 0);
 $1023 = $38;
 $1024 = $1023;
 HEAP32[$1024>>2] = $1021;
 $1025 = (($1023) + 4)|0;
 $1026 = $1025;
 HEAP32[$1026>>2] = $1022;
 $1027 = $50;
 $1028 = $1027;
 $1029 = HEAP32[$1028>>2]|0;
 $1030 = (($1027) + 4)|0;
 $1031 = $1030;
 $1032 = HEAP32[$1031>>2]|0;
 $1033 = (_bitshift64Shl(($1029|0),($1032|0),21)|0);
 $1034 = (getTempRet0() | 0);
 $1035 = $37;
 $1036 = $1035;
 $1037 = HEAP32[$1036>>2]|0;
 $1038 = (($1035) + 4)|0;
 $1039 = $1038;
 $1040 = HEAP32[$1039>>2]|0;
 $1041 = (_i64Subtract(($1037|0),($1040|0),($1033|0),($1034|0))|0);
 $1042 = (getTempRet0() | 0);
 $1043 = $37;
 $1044 = $1043;
 HEAP32[$1044>>2] = $1041;
 $1045 = (($1043) + 4)|0;
 $1046 = $1045;
 HEAP32[$1046>>2] = $1042;
 $1047 = $39;
 $1048 = $1047;
 $1049 = HEAP32[$1048>>2]|0;
 $1050 = (($1047) + 4)|0;
 $1051 = $1050;
 $1052 = HEAP32[$1051>>2]|0;
 $1053 = (_i64Add(($1049|0),($1052|0),1048576,0)|0);
 $1054 = (getTempRet0() | 0);
 $1055 = (_bitshift64Ashr(($1053|0),($1054|0),21)|0);
 $1056 = (getTempRet0() | 0);
 $1057 = $52;
 $1058 = $1057;
 HEAP32[$1058>>2] = $1055;
 $1059 = (($1057) + 4)|0;
 $1060 = $1059;
 HEAP32[$1060>>2] = $1056;
 $1061 = $52;
 $1062 = $1061;
 $1063 = HEAP32[$1062>>2]|0;
 $1064 = (($1061) + 4)|0;
 $1065 = $1064;
 $1066 = HEAP32[$1065>>2]|0;
 $1067 = $40;
 $1068 = $1067;
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($1067) + 4)|0;
 $1071 = $1070;
 $1072 = HEAP32[$1071>>2]|0;
 $1073 = (_i64Add(($1069|0),($1072|0),($1063|0),($1066|0))|0);
 $1074 = (getTempRet0() | 0);
 $1075 = $40;
 $1076 = $1075;
 HEAP32[$1076>>2] = $1073;
 $1077 = (($1075) + 4)|0;
 $1078 = $1077;
 HEAP32[$1078>>2] = $1074;
 $1079 = $52;
 $1080 = $1079;
 $1081 = HEAP32[$1080>>2]|0;
 $1082 = (($1079) + 4)|0;
 $1083 = $1082;
 $1084 = HEAP32[$1083>>2]|0;
 $1085 = (_bitshift64Shl(($1081|0),($1084|0),21)|0);
 $1086 = (getTempRet0() | 0);
 $1087 = $39;
 $1088 = $1087;
 $1089 = HEAP32[$1088>>2]|0;
 $1090 = (($1087) + 4)|0;
 $1091 = $1090;
 $1092 = HEAP32[$1091>>2]|0;
 $1093 = (_i64Subtract(($1089|0),($1092|0),($1085|0),($1086|0))|0);
 $1094 = (getTempRet0() | 0);
 $1095 = $39;
 $1096 = $1095;
 HEAP32[$1096>>2] = $1093;
 $1097 = (($1095) + 4)|0;
 $1098 = $1097;
 HEAP32[$1098>>2] = $1094;
 $1099 = $41;
 $1100 = $1099;
 $1101 = HEAP32[$1100>>2]|0;
 $1102 = (($1099) + 4)|0;
 $1103 = $1102;
 $1104 = HEAP32[$1103>>2]|0;
 $1105 = (_i64Add(($1101|0),($1104|0),1048576,0)|0);
 $1106 = (getTempRet0() | 0);
 $1107 = (_bitshift64Ashr(($1105|0),($1106|0),21)|0);
 $1108 = (getTempRet0() | 0);
 $1109 = $54;
 $1110 = $1109;
 HEAP32[$1110>>2] = $1107;
 $1111 = (($1109) + 4)|0;
 $1112 = $1111;
 HEAP32[$1112>>2] = $1108;
 $1113 = $54;
 $1114 = $1113;
 $1115 = HEAP32[$1114>>2]|0;
 $1116 = (($1113) + 4)|0;
 $1117 = $1116;
 $1118 = HEAP32[$1117>>2]|0;
 $1119 = $42;
 $1120 = $1119;
 $1121 = HEAP32[$1120>>2]|0;
 $1122 = (($1119) + 4)|0;
 $1123 = $1122;
 $1124 = HEAP32[$1123>>2]|0;
 $1125 = (_i64Add(($1121|0),($1124|0),($1115|0),($1118|0))|0);
 $1126 = (getTempRet0() | 0);
 $1127 = $42;
 $1128 = $1127;
 HEAP32[$1128>>2] = $1125;
 $1129 = (($1127) + 4)|0;
 $1130 = $1129;
 HEAP32[$1130>>2] = $1126;
 $1131 = $54;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = (_bitshift64Shl(($1133|0),($1136|0),21)|0);
 $1138 = (getTempRet0() | 0);
 $1139 = $41;
 $1140 = $1139;
 $1141 = HEAP32[$1140>>2]|0;
 $1142 = (($1139) + 4)|0;
 $1143 = $1142;
 $1144 = HEAP32[$1143>>2]|0;
 $1145 = (_i64Subtract(($1141|0),($1144|0),($1137|0),($1138|0))|0);
 $1146 = (getTempRet0() | 0);
 $1147 = $41;
 $1148 = $1147;
 HEAP32[$1148>>2] = $1145;
 $1149 = (($1147) + 4)|0;
 $1150 = $1149;
 HEAP32[$1150>>2] = $1146;
 $1151 = $42;
 $1152 = $1151;
 $1153 = HEAP32[$1152>>2]|0;
 $1154 = (($1151) + 4)|0;
 $1155 = $1154;
 $1156 = HEAP32[$1155>>2]|0;
 $1157 = (___muldi3(($1153|0),($1156|0),666643,0)|0);
 $1158 = (getTempRet0() | 0);
 $1159 = $30;
 $1160 = $1159;
 $1161 = HEAP32[$1160>>2]|0;
 $1162 = (($1159) + 4)|0;
 $1163 = $1162;
 $1164 = HEAP32[$1163>>2]|0;
 $1165 = (_i64Add(($1161|0),($1164|0),($1157|0),($1158|0))|0);
 $1166 = (getTempRet0() | 0);
 $1167 = $30;
 $1168 = $1167;
 HEAP32[$1168>>2] = $1165;
 $1169 = (($1167) + 4)|0;
 $1170 = $1169;
 HEAP32[$1170>>2] = $1166;
 $1171 = $42;
 $1172 = $1171;
 $1173 = HEAP32[$1172>>2]|0;
 $1174 = (($1171) + 4)|0;
 $1175 = $1174;
 $1176 = HEAP32[$1175>>2]|0;
 $1177 = (___muldi3(($1173|0),($1176|0),470296,0)|0);
 $1178 = (getTempRet0() | 0);
 $1179 = $31;
 $1180 = $1179;
 $1181 = HEAP32[$1180>>2]|0;
 $1182 = (($1179) + 4)|0;
 $1183 = $1182;
 $1184 = HEAP32[$1183>>2]|0;
 $1185 = (_i64Add(($1181|0),($1184|0),($1177|0),($1178|0))|0);
 $1186 = (getTempRet0() | 0);
 $1187 = $31;
 $1188 = $1187;
 HEAP32[$1188>>2] = $1185;
 $1189 = (($1187) + 4)|0;
 $1190 = $1189;
 HEAP32[$1190>>2] = $1186;
 $1191 = $42;
 $1192 = $1191;
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + 4)|0;
 $1195 = $1194;
 $1196 = HEAP32[$1195>>2]|0;
 $1197 = (___muldi3(($1193|0),($1196|0),654183,0)|0);
 $1198 = (getTempRet0() | 0);
 $1199 = $32;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (_i64Add(($1201|0),($1204|0),($1197|0),($1198|0))|0);
 $1206 = (getTempRet0() | 0);
 $1207 = $32;
 $1208 = $1207;
 HEAP32[$1208>>2] = $1205;
 $1209 = (($1207) + 4)|0;
 $1210 = $1209;
 HEAP32[$1210>>2] = $1206;
 $1211 = $42;
 $1212 = $1211;
 $1213 = HEAP32[$1212>>2]|0;
 $1214 = (($1211) + 4)|0;
 $1215 = $1214;
 $1216 = HEAP32[$1215>>2]|0;
 $1217 = (___muldi3(($1213|0),($1216|0),997805,0)|0);
 $1218 = (getTempRet0() | 0);
 $1219 = $33;
 $1220 = $1219;
 $1221 = HEAP32[$1220>>2]|0;
 $1222 = (($1219) + 4)|0;
 $1223 = $1222;
 $1224 = HEAP32[$1223>>2]|0;
 $1225 = (_i64Subtract(($1221|0),($1224|0),($1217|0),($1218|0))|0);
 $1226 = (getTempRet0() | 0);
 $1227 = $33;
 $1228 = $1227;
 HEAP32[$1228>>2] = $1225;
 $1229 = (($1227) + 4)|0;
 $1230 = $1229;
 HEAP32[$1230>>2] = $1226;
 $1231 = $42;
 $1232 = $1231;
 $1233 = HEAP32[$1232>>2]|0;
 $1234 = (($1231) + 4)|0;
 $1235 = $1234;
 $1236 = HEAP32[$1235>>2]|0;
 $1237 = (___muldi3(($1233|0),($1236|0),136657,0)|0);
 $1238 = (getTempRet0() | 0);
 $1239 = $34;
 $1240 = $1239;
 $1241 = HEAP32[$1240>>2]|0;
 $1242 = (($1239) + 4)|0;
 $1243 = $1242;
 $1244 = HEAP32[$1243>>2]|0;
 $1245 = (_i64Add(($1241|0),($1244|0),($1237|0),($1238|0))|0);
 $1246 = (getTempRet0() | 0);
 $1247 = $34;
 $1248 = $1247;
 HEAP32[$1248>>2] = $1245;
 $1249 = (($1247) + 4)|0;
 $1250 = $1249;
 HEAP32[$1250>>2] = $1246;
 $1251 = $42;
 $1252 = $1251;
 $1253 = HEAP32[$1252>>2]|0;
 $1254 = (($1251) + 4)|0;
 $1255 = $1254;
 $1256 = HEAP32[$1255>>2]|0;
 $1257 = (___muldi3(($1253|0),($1256|0),683901,0)|0);
 $1258 = (getTempRet0() | 0);
 $1259 = $35;
 $1260 = $1259;
 $1261 = HEAP32[$1260>>2]|0;
 $1262 = (($1259) + 4)|0;
 $1263 = $1262;
 $1264 = HEAP32[$1263>>2]|0;
 $1265 = (_i64Subtract(($1261|0),($1264|0),($1257|0),($1258|0))|0);
 $1266 = (getTempRet0() | 0);
 $1267 = $35;
 $1268 = $1267;
 HEAP32[$1268>>2] = $1265;
 $1269 = (($1267) + 4)|0;
 $1270 = $1269;
 HEAP32[$1270>>2] = $1266;
 $1271 = $42;
 $1272 = $1271;
 HEAP32[$1272>>2] = 0;
 $1273 = (($1271) + 4)|0;
 $1274 = $1273;
 HEAP32[$1274>>2] = 0;
 $1275 = $30;
 $1276 = $1275;
 $1277 = HEAP32[$1276>>2]|0;
 $1278 = (($1275) + 4)|0;
 $1279 = $1278;
 $1280 = HEAP32[$1279>>2]|0;
 $1281 = (_bitshift64Ashr(($1277|0),($1280|0),21)|0);
 $1282 = (getTempRet0() | 0);
 $1283 = $43;
 $1284 = $1283;
 HEAP32[$1284>>2] = $1281;
 $1285 = (($1283) + 4)|0;
 $1286 = $1285;
 HEAP32[$1286>>2] = $1282;
 $1287 = $43;
 $1288 = $1287;
 $1289 = HEAP32[$1288>>2]|0;
 $1290 = (($1287) + 4)|0;
 $1291 = $1290;
 $1292 = HEAP32[$1291>>2]|0;
 $1293 = $31;
 $1294 = $1293;
 $1295 = HEAP32[$1294>>2]|0;
 $1296 = (($1293) + 4)|0;
 $1297 = $1296;
 $1298 = HEAP32[$1297>>2]|0;
 $1299 = (_i64Add(($1295|0),($1298|0),($1289|0),($1292|0))|0);
 $1300 = (getTempRet0() | 0);
 $1301 = $31;
 $1302 = $1301;
 HEAP32[$1302>>2] = $1299;
 $1303 = (($1301) + 4)|0;
 $1304 = $1303;
 HEAP32[$1304>>2] = $1300;
 $1305 = $43;
 $1306 = $1305;
 $1307 = HEAP32[$1306>>2]|0;
 $1308 = (($1305) + 4)|0;
 $1309 = $1308;
 $1310 = HEAP32[$1309>>2]|0;
 $1311 = (_bitshift64Shl(($1307|0),($1310|0),21)|0);
 $1312 = (getTempRet0() | 0);
 $1313 = $30;
 $1314 = $1313;
 $1315 = HEAP32[$1314>>2]|0;
 $1316 = (($1313) + 4)|0;
 $1317 = $1316;
 $1318 = HEAP32[$1317>>2]|0;
 $1319 = (_i64Subtract(($1315|0),($1318|0),($1311|0),($1312|0))|0);
 $1320 = (getTempRet0() | 0);
 $1321 = $30;
 $1322 = $1321;
 HEAP32[$1322>>2] = $1319;
 $1323 = (($1321) + 4)|0;
 $1324 = $1323;
 HEAP32[$1324>>2] = $1320;
 $1325 = $31;
 $1326 = $1325;
 $1327 = HEAP32[$1326>>2]|0;
 $1328 = (($1325) + 4)|0;
 $1329 = $1328;
 $1330 = HEAP32[$1329>>2]|0;
 $1331 = (_bitshift64Ashr(($1327|0),($1330|0),21)|0);
 $1332 = (getTempRet0() | 0);
 $1333 = $44;
 $1334 = $1333;
 HEAP32[$1334>>2] = $1331;
 $1335 = (($1333) + 4)|0;
 $1336 = $1335;
 HEAP32[$1336>>2] = $1332;
 $1337 = $44;
 $1338 = $1337;
 $1339 = HEAP32[$1338>>2]|0;
 $1340 = (($1337) + 4)|0;
 $1341 = $1340;
 $1342 = HEAP32[$1341>>2]|0;
 $1343 = $32;
 $1344 = $1343;
 $1345 = HEAP32[$1344>>2]|0;
 $1346 = (($1343) + 4)|0;
 $1347 = $1346;
 $1348 = HEAP32[$1347>>2]|0;
 $1349 = (_i64Add(($1345|0),($1348|0),($1339|0),($1342|0))|0);
 $1350 = (getTempRet0() | 0);
 $1351 = $32;
 $1352 = $1351;
 HEAP32[$1352>>2] = $1349;
 $1353 = (($1351) + 4)|0;
 $1354 = $1353;
 HEAP32[$1354>>2] = $1350;
 $1355 = $44;
 $1356 = $1355;
 $1357 = HEAP32[$1356>>2]|0;
 $1358 = (($1355) + 4)|0;
 $1359 = $1358;
 $1360 = HEAP32[$1359>>2]|0;
 $1361 = (_bitshift64Shl(($1357|0),($1360|0),21)|0);
 $1362 = (getTempRet0() | 0);
 $1363 = $31;
 $1364 = $1363;
 $1365 = HEAP32[$1364>>2]|0;
 $1366 = (($1363) + 4)|0;
 $1367 = $1366;
 $1368 = HEAP32[$1367>>2]|0;
 $1369 = (_i64Subtract(($1365|0),($1368|0),($1361|0),($1362|0))|0);
 $1370 = (getTempRet0() | 0);
 $1371 = $31;
 $1372 = $1371;
 HEAP32[$1372>>2] = $1369;
 $1373 = (($1371) + 4)|0;
 $1374 = $1373;
 HEAP32[$1374>>2] = $1370;
 $1375 = $32;
 $1376 = $1375;
 $1377 = HEAP32[$1376>>2]|0;
 $1378 = (($1375) + 4)|0;
 $1379 = $1378;
 $1380 = HEAP32[$1379>>2]|0;
 $1381 = (_bitshift64Ashr(($1377|0),($1380|0),21)|0);
 $1382 = (getTempRet0() | 0);
 $1383 = $45;
 $1384 = $1383;
 HEAP32[$1384>>2] = $1381;
 $1385 = (($1383) + 4)|0;
 $1386 = $1385;
 HEAP32[$1386>>2] = $1382;
 $1387 = $45;
 $1388 = $1387;
 $1389 = HEAP32[$1388>>2]|0;
 $1390 = (($1387) + 4)|0;
 $1391 = $1390;
 $1392 = HEAP32[$1391>>2]|0;
 $1393 = $33;
 $1394 = $1393;
 $1395 = HEAP32[$1394>>2]|0;
 $1396 = (($1393) + 4)|0;
 $1397 = $1396;
 $1398 = HEAP32[$1397>>2]|0;
 $1399 = (_i64Add(($1395|0),($1398|0),($1389|0),($1392|0))|0);
 $1400 = (getTempRet0() | 0);
 $1401 = $33;
 $1402 = $1401;
 HEAP32[$1402>>2] = $1399;
 $1403 = (($1401) + 4)|0;
 $1404 = $1403;
 HEAP32[$1404>>2] = $1400;
 $1405 = $45;
 $1406 = $1405;
 $1407 = HEAP32[$1406>>2]|0;
 $1408 = (($1405) + 4)|0;
 $1409 = $1408;
 $1410 = HEAP32[$1409>>2]|0;
 $1411 = (_bitshift64Shl(($1407|0),($1410|0),21)|0);
 $1412 = (getTempRet0() | 0);
 $1413 = $32;
 $1414 = $1413;
 $1415 = HEAP32[$1414>>2]|0;
 $1416 = (($1413) + 4)|0;
 $1417 = $1416;
 $1418 = HEAP32[$1417>>2]|0;
 $1419 = (_i64Subtract(($1415|0),($1418|0),($1411|0),($1412|0))|0);
 $1420 = (getTempRet0() | 0);
 $1421 = $32;
 $1422 = $1421;
 HEAP32[$1422>>2] = $1419;
 $1423 = (($1421) + 4)|0;
 $1424 = $1423;
 HEAP32[$1424>>2] = $1420;
 $1425 = $33;
 $1426 = $1425;
 $1427 = HEAP32[$1426>>2]|0;
 $1428 = (($1425) + 4)|0;
 $1429 = $1428;
 $1430 = HEAP32[$1429>>2]|0;
 $1431 = (_bitshift64Ashr(($1427|0),($1430|0),21)|0);
 $1432 = (getTempRet0() | 0);
 $1433 = $46;
 $1434 = $1433;
 HEAP32[$1434>>2] = $1431;
 $1435 = (($1433) + 4)|0;
 $1436 = $1435;
 HEAP32[$1436>>2] = $1432;
 $1437 = $46;
 $1438 = $1437;
 $1439 = HEAP32[$1438>>2]|0;
 $1440 = (($1437) + 4)|0;
 $1441 = $1440;
 $1442 = HEAP32[$1441>>2]|0;
 $1443 = $34;
 $1444 = $1443;
 $1445 = HEAP32[$1444>>2]|0;
 $1446 = (($1443) + 4)|0;
 $1447 = $1446;
 $1448 = HEAP32[$1447>>2]|0;
 $1449 = (_i64Add(($1445|0),($1448|0),($1439|0),($1442|0))|0);
 $1450 = (getTempRet0() | 0);
 $1451 = $34;
 $1452 = $1451;
 HEAP32[$1452>>2] = $1449;
 $1453 = (($1451) + 4)|0;
 $1454 = $1453;
 HEAP32[$1454>>2] = $1450;
 $1455 = $46;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (($1455) + 4)|0;
 $1459 = $1458;
 $1460 = HEAP32[$1459>>2]|0;
 $1461 = (_bitshift64Shl(($1457|0),($1460|0),21)|0);
 $1462 = (getTempRet0() | 0);
 $1463 = $33;
 $1464 = $1463;
 $1465 = HEAP32[$1464>>2]|0;
 $1466 = (($1463) + 4)|0;
 $1467 = $1466;
 $1468 = HEAP32[$1467>>2]|0;
 $1469 = (_i64Subtract(($1465|0),($1468|0),($1461|0),($1462|0))|0);
 $1470 = (getTempRet0() | 0);
 $1471 = $33;
 $1472 = $1471;
 HEAP32[$1472>>2] = $1469;
 $1473 = (($1471) + 4)|0;
 $1474 = $1473;
 HEAP32[$1474>>2] = $1470;
 $1475 = $34;
 $1476 = $1475;
 $1477 = HEAP32[$1476>>2]|0;
 $1478 = (($1475) + 4)|0;
 $1479 = $1478;
 $1480 = HEAP32[$1479>>2]|0;
 $1481 = (_bitshift64Ashr(($1477|0),($1480|0),21)|0);
 $1482 = (getTempRet0() | 0);
 $1483 = $47;
 $1484 = $1483;
 HEAP32[$1484>>2] = $1481;
 $1485 = (($1483) + 4)|0;
 $1486 = $1485;
 HEAP32[$1486>>2] = $1482;
 $1487 = $47;
 $1488 = $1487;
 $1489 = HEAP32[$1488>>2]|0;
 $1490 = (($1487) + 4)|0;
 $1491 = $1490;
 $1492 = HEAP32[$1491>>2]|0;
 $1493 = $35;
 $1494 = $1493;
 $1495 = HEAP32[$1494>>2]|0;
 $1496 = (($1493) + 4)|0;
 $1497 = $1496;
 $1498 = HEAP32[$1497>>2]|0;
 $1499 = (_i64Add(($1495|0),($1498|0),($1489|0),($1492|0))|0);
 $1500 = (getTempRet0() | 0);
 $1501 = $35;
 $1502 = $1501;
 HEAP32[$1502>>2] = $1499;
 $1503 = (($1501) + 4)|0;
 $1504 = $1503;
 HEAP32[$1504>>2] = $1500;
 $1505 = $47;
 $1506 = $1505;
 $1507 = HEAP32[$1506>>2]|0;
 $1508 = (($1505) + 4)|0;
 $1509 = $1508;
 $1510 = HEAP32[$1509>>2]|0;
 $1511 = (_bitshift64Shl(($1507|0),($1510|0),21)|0);
 $1512 = (getTempRet0() | 0);
 $1513 = $34;
 $1514 = $1513;
 $1515 = HEAP32[$1514>>2]|0;
 $1516 = (($1513) + 4)|0;
 $1517 = $1516;
 $1518 = HEAP32[$1517>>2]|0;
 $1519 = (_i64Subtract(($1515|0),($1518|0),($1511|0),($1512|0))|0);
 $1520 = (getTempRet0() | 0);
 $1521 = $34;
 $1522 = $1521;
 HEAP32[$1522>>2] = $1519;
 $1523 = (($1521) + 4)|0;
 $1524 = $1523;
 HEAP32[$1524>>2] = $1520;
 $1525 = $35;
 $1526 = $1525;
 $1527 = HEAP32[$1526>>2]|0;
 $1528 = (($1525) + 4)|0;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (_bitshift64Ashr(($1527|0),($1530|0),21)|0);
 $1532 = (getTempRet0() | 0);
 $1533 = $48;
 $1534 = $1533;
 HEAP32[$1534>>2] = $1531;
 $1535 = (($1533) + 4)|0;
 $1536 = $1535;
 HEAP32[$1536>>2] = $1532;
 $1537 = $48;
 $1538 = $1537;
 $1539 = HEAP32[$1538>>2]|0;
 $1540 = (($1537) + 4)|0;
 $1541 = $1540;
 $1542 = HEAP32[$1541>>2]|0;
 $1543 = $36;
 $1544 = $1543;
 $1545 = HEAP32[$1544>>2]|0;
 $1546 = (($1543) + 4)|0;
 $1547 = $1546;
 $1548 = HEAP32[$1547>>2]|0;
 $1549 = (_i64Add(($1545|0),($1548|0),($1539|0),($1542|0))|0);
 $1550 = (getTempRet0() | 0);
 $1551 = $36;
 $1552 = $1551;
 HEAP32[$1552>>2] = $1549;
 $1553 = (($1551) + 4)|0;
 $1554 = $1553;
 HEAP32[$1554>>2] = $1550;
 $1555 = $48;
 $1556 = $1555;
 $1557 = HEAP32[$1556>>2]|0;
 $1558 = (($1555) + 4)|0;
 $1559 = $1558;
 $1560 = HEAP32[$1559>>2]|0;
 $1561 = (_bitshift64Shl(($1557|0),($1560|0),21)|0);
 $1562 = (getTempRet0() | 0);
 $1563 = $35;
 $1564 = $1563;
 $1565 = HEAP32[$1564>>2]|0;
 $1566 = (($1563) + 4)|0;
 $1567 = $1566;
 $1568 = HEAP32[$1567>>2]|0;
 $1569 = (_i64Subtract(($1565|0),($1568|0),($1561|0),($1562|0))|0);
 $1570 = (getTempRet0() | 0);
 $1571 = $35;
 $1572 = $1571;
 HEAP32[$1572>>2] = $1569;
 $1573 = (($1571) + 4)|0;
 $1574 = $1573;
 HEAP32[$1574>>2] = $1570;
 $1575 = $36;
 $1576 = $1575;
 $1577 = HEAP32[$1576>>2]|0;
 $1578 = (($1575) + 4)|0;
 $1579 = $1578;
 $1580 = HEAP32[$1579>>2]|0;
 $1581 = (_bitshift64Ashr(($1577|0),($1580|0),21)|0);
 $1582 = (getTempRet0() | 0);
 $1583 = $49;
 $1584 = $1583;
 HEAP32[$1584>>2] = $1581;
 $1585 = (($1583) + 4)|0;
 $1586 = $1585;
 HEAP32[$1586>>2] = $1582;
 $1587 = $49;
 $1588 = $1587;
 $1589 = HEAP32[$1588>>2]|0;
 $1590 = (($1587) + 4)|0;
 $1591 = $1590;
 $1592 = HEAP32[$1591>>2]|0;
 $1593 = $37;
 $1594 = $1593;
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = (($1593) + 4)|0;
 $1597 = $1596;
 $1598 = HEAP32[$1597>>2]|0;
 $1599 = (_i64Add(($1595|0),($1598|0),($1589|0),($1592|0))|0);
 $1600 = (getTempRet0() | 0);
 $1601 = $37;
 $1602 = $1601;
 HEAP32[$1602>>2] = $1599;
 $1603 = (($1601) + 4)|0;
 $1604 = $1603;
 HEAP32[$1604>>2] = $1600;
 $1605 = $49;
 $1606 = $1605;
 $1607 = HEAP32[$1606>>2]|0;
 $1608 = (($1605) + 4)|0;
 $1609 = $1608;
 $1610 = HEAP32[$1609>>2]|0;
 $1611 = (_bitshift64Shl(($1607|0),($1610|0),21)|0);
 $1612 = (getTempRet0() | 0);
 $1613 = $36;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = (($1613) + 4)|0;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (_i64Subtract(($1615|0),($1618|0),($1611|0),($1612|0))|0);
 $1620 = (getTempRet0() | 0);
 $1621 = $36;
 $1622 = $1621;
 HEAP32[$1622>>2] = $1619;
 $1623 = (($1621) + 4)|0;
 $1624 = $1623;
 HEAP32[$1624>>2] = $1620;
 $1625 = $37;
 $1626 = $1625;
 $1627 = HEAP32[$1626>>2]|0;
 $1628 = (($1625) + 4)|0;
 $1629 = $1628;
 $1630 = HEAP32[$1629>>2]|0;
 $1631 = (_bitshift64Ashr(($1627|0),($1630|0),21)|0);
 $1632 = (getTempRet0() | 0);
 $1633 = $50;
 $1634 = $1633;
 HEAP32[$1634>>2] = $1631;
 $1635 = (($1633) + 4)|0;
 $1636 = $1635;
 HEAP32[$1636>>2] = $1632;
 $1637 = $50;
 $1638 = $1637;
 $1639 = HEAP32[$1638>>2]|0;
 $1640 = (($1637) + 4)|0;
 $1641 = $1640;
 $1642 = HEAP32[$1641>>2]|0;
 $1643 = $38;
 $1644 = $1643;
 $1645 = HEAP32[$1644>>2]|0;
 $1646 = (($1643) + 4)|0;
 $1647 = $1646;
 $1648 = HEAP32[$1647>>2]|0;
 $1649 = (_i64Add(($1645|0),($1648|0),($1639|0),($1642|0))|0);
 $1650 = (getTempRet0() | 0);
 $1651 = $38;
 $1652 = $1651;
 HEAP32[$1652>>2] = $1649;
 $1653 = (($1651) + 4)|0;
 $1654 = $1653;
 HEAP32[$1654>>2] = $1650;
 $1655 = $50;
 $1656 = $1655;
 $1657 = HEAP32[$1656>>2]|0;
 $1658 = (($1655) + 4)|0;
 $1659 = $1658;
 $1660 = HEAP32[$1659>>2]|0;
 $1661 = (_bitshift64Shl(($1657|0),($1660|0),21)|0);
 $1662 = (getTempRet0() | 0);
 $1663 = $37;
 $1664 = $1663;
 $1665 = HEAP32[$1664>>2]|0;
 $1666 = (($1663) + 4)|0;
 $1667 = $1666;
 $1668 = HEAP32[$1667>>2]|0;
 $1669 = (_i64Subtract(($1665|0),($1668|0),($1661|0),($1662|0))|0);
 $1670 = (getTempRet0() | 0);
 $1671 = $37;
 $1672 = $1671;
 HEAP32[$1672>>2] = $1669;
 $1673 = (($1671) + 4)|0;
 $1674 = $1673;
 HEAP32[$1674>>2] = $1670;
 $1675 = $38;
 $1676 = $1675;
 $1677 = HEAP32[$1676>>2]|0;
 $1678 = (($1675) + 4)|0;
 $1679 = $1678;
 $1680 = HEAP32[$1679>>2]|0;
 $1681 = (_bitshift64Ashr(($1677|0),($1680|0),21)|0);
 $1682 = (getTempRet0() | 0);
 $1683 = $51;
 $1684 = $1683;
 HEAP32[$1684>>2] = $1681;
 $1685 = (($1683) + 4)|0;
 $1686 = $1685;
 HEAP32[$1686>>2] = $1682;
 $1687 = $51;
 $1688 = $1687;
 $1689 = HEAP32[$1688>>2]|0;
 $1690 = (($1687) + 4)|0;
 $1691 = $1690;
 $1692 = HEAP32[$1691>>2]|0;
 $1693 = $39;
 $1694 = $1693;
 $1695 = HEAP32[$1694>>2]|0;
 $1696 = (($1693) + 4)|0;
 $1697 = $1696;
 $1698 = HEAP32[$1697>>2]|0;
 $1699 = (_i64Add(($1695|0),($1698|0),($1689|0),($1692|0))|0);
 $1700 = (getTempRet0() | 0);
 $1701 = $39;
 $1702 = $1701;
 HEAP32[$1702>>2] = $1699;
 $1703 = (($1701) + 4)|0;
 $1704 = $1703;
 HEAP32[$1704>>2] = $1700;
 $1705 = $51;
 $1706 = $1705;
 $1707 = HEAP32[$1706>>2]|0;
 $1708 = (($1705) + 4)|0;
 $1709 = $1708;
 $1710 = HEAP32[$1709>>2]|0;
 $1711 = (_bitshift64Shl(($1707|0),($1710|0),21)|0);
 $1712 = (getTempRet0() | 0);
 $1713 = $38;
 $1714 = $1713;
 $1715 = HEAP32[$1714>>2]|0;
 $1716 = (($1713) + 4)|0;
 $1717 = $1716;
 $1718 = HEAP32[$1717>>2]|0;
 $1719 = (_i64Subtract(($1715|0),($1718|0),($1711|0),($1712|0))|0);
 $1720 = (getTempRet0() | 0);
 $1721 = $38;
 $1722 = $1721;
 HEAP32[$1722>>2] = $1719;
 $1723 = (($1721) + 4)|0;
 $1724 = $1723;
 HEAP32[$1724>>2] = $1720;
 $1725 = $39;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (($1725) + 4)|0;
 $1729 = $1728;
 $1730 = HEAP32[$1729>>2]|0;
 $1731 = (_bitshift64Ashr(($1727|0),($1730|0),21)|0);
 $1732 = (getTempRet0() | 0);
 $1733 = $52;
 $1734 = $1733;
 HEAP32[$1734>>2] = $1731;
 $1735 = (($1733) + 4)|0;
 $1736 = $1735;
 HEAP32[$1736>>2] = $1732;
 $1737 = $52;
 $1738 = $1737;
 $1739 = HEAP32[$1738>>2]|0;
 $1740 = (($1737) + 4)|0;
 $1741 = $1740;
 $1742 = HEAP32[$1741>>2]|0;
 $1743 = $40;
 $1744 = $1743;
 $1745 = HEAP32[$1744>>2]|0;
 $1746 = (($1743) + 4)|0;
 $1747 = $1746;
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = (_i64Add(($1745|0),($1748|0),($1739|0),($1742|0))|0);
 $1750 = (getTempRet0() | 0);
 $1751 = $40;
 $1752 = $1751;
 HEAP32[$1752>>2] = $1749;
 $1753 = (($1751) + 4)|0;
 $1754 = $1753;
 HEAP32[$1754>>2] = $1750;
 $1755 = $52;
 $1756 = $1755;
 $1757 = HEAP32[$1756>>2]|0;
 $1758 = (($1755) + 4)|0;
 $1759 = $1758;
 $1760 = HEAP32[$1759>>2]|0;
 $1761 = (_bitshift64Shl(($1757|0),($1760|0),21)|0);
 $1762 = (getTempRet0() | 0);
 $1763 = $39;
 $1764 = $1763;
 $1765 = HEAP32[$1764>>2]|0;
 $1766 = (($1763) + 4)|0;
 $1767 = $1766;
 $1768 = HEAP32[$1767>>2]|0;
 $1769 = (_i64Subtract(($1765|0),($1768|0),($1761|0),($1762|0))|0);
 $1770 = (getTempRet0() | 0);
 $1771 = $39;
 $1772 = $1771;
 HEAP32[$1772>>2] = $1769;
 $1773 = (($1771) + 4)|0;
 $1774 = $1773;
 HEAP32[$1774>>2] = $1770;
 $1775 = $40;
 $1776 = $1775;
 $1777 = HEAP32[$1776>>2]|0;
 $1778 = (($1775) + 4)|0;
 $1779 = $1778;
 $1780 = HEAP32[$1779>>2]|0;
 $1781 = (_bitshift64Ashr(($1777|0),($1780|0),21)|0);
 $1782 = (getTempRet0() | 0);
 $1783 = $53;
 $1784 = $1783;
 HEAP32[$1784>>2] = $1781;
 $1785 = (($1783) + 4)|0;
 $1786 = $1785;
 HEAP32[$1786>>2] = $1782;
 $1787 = $53;
 $1788 = $1787;
 $1789 = HEAP32[$1788>>2]|0;
 $1790 = (($1787) + 4)|0;
 $1791 = $1790;
 $1792 = HEAP32[$1791>>2]|0;
 $1793 = $41;
 $1794 = $1793;
 $1795 = HEAP32[$1794>>2]|0;
 $1796 = (($1793) + 4)|0;
 $1797 = $1796;
 $1798 = HEAP32[$1797>>2]|0;
 $1799 = (_i64Add(($1795|0),($1798|0),($1789|0),($1792|0))|0);
 $1800 = (getTempRet0() | 0);
 $1801 = $41;
 $1802 = $1801;
 HEAP32[$1802>>2] = $1799;
 $1803 = (($1801) + 4)|0;
 $1804 = $1803;
 HEAP32[$1804>>2] = $1800;
 $1805 = $53;
 $1806 = $1805;
 $1807 = HEAP32[$1806>>2]|0;
 $1808 = (($1805) + 4)|0;
 $1809 = $1808;
 $1810 = HEAP32[$1809>>2]|0;
 $1811 = (_bitshift64Shl(($1807|0),($1810|0),21)|0);
 $1812 = (getTempRet0() | 0);
 $1813 = $40;
 $1814 = $1813;
 $1815 = HEAP32[$1814>>2]|0;
 $1816 = (($1813) + 4)|0;
 $1817 = $1816;
 $1818 = HEAP32[$1817>>2]|0;
 $1819 = (_i64Subtract(($1815|0),($1818|0),($1811|0),($1812|0))|0);
 $1820 = (getTempRet0() | 0);
 $1821 = $40;
 $1822 = $1821;
 HEAP32[$1822>>2] = $1819;
 $1823 = (($1821) + 4)|0;
 $1824 = $1823;
 HEAP32[$1824>>2] = $1820;
 $1825 = $41;
 $1826 = $1825;
 $1827 = HEAP32[$1826>>2]|0;
 $1828 = (($1825) + 4)|0;
 $1829 = $1828;
 $1830 = HEAP32[$1829>>2]|0;
 $1831 = (_bitshift64Ashr(($1827|0),($1830|0),21)|0);
 $1832 = (getTempRet0() | 0);
 $1833 = $54;
 $1834 = $1833;
 HEAP32[$1834>>2] = $1831;
 $1835 = (($1833) + 4)|0;
 $1836 = $1835;
 HEAP32[$1836>>2] = $1832;
 $1837 = $54;
 $1838 = $1837;
 $1839 = HEAP32[$1838>>2]|0;
 $1840 = (($1837) + 4)|0;
 $1841 = $1840;
 $1842 = HEAP32[$1841>>2]|0;
 $1843 = $42;
 $1844 = $1843;
 $1845 = HEAP32[$1844>>2]|0;
 $1846 = (($1843) + 4)|0;
 $1847 = $1846;
 $1848 = HEAP32[$1847>>2]|0;
 $1849 = (_i64Add(($1845|0),($1848|0),($1839|0),($1842|0))|0);
 $1850 = (getTempRet0() | 0);
 $1851 = $42;
 $1852 = $1851;
 HEAP32[$1852>>2] = $1849;
 $1853 = (($1851) + 4)|0;
 $1854 = $1853;
 HEAP32[$1854>>2] = $1850;
 $1855 = $54;
 $1856 = $1855;
 $1857 = HEAP32[$1856>>2]|0;
 $1858 = (($1855) + 4)|0;
 $1859 = $1858;
 $1860 = HEAP32[$1859>>2]|0;
 $1861 = (_bitshift64Shl(($1857|0),($1860|0),21)|0);
 $1862 = (getTempRet0() | 0);
 $1863 = $41;
 $1864 = $1863;
 $1865 = HEAP32[$1864>>2]|0;
 $1866 = (($1863) + 4)|0;
 $1867 = $1866;
 $1868 = HEAP32[$1867>>2]|0;
 $1869 = (_i64Subtract(($1865|0),($1868|0),($1861|0),($1862|0))|0);
 $1870 = (getTempRet0() | 0);
 $1871 = $41;
 $1872 = $1871;
 HEAP32[$1872>>2] = $1869;
 $1873 = (($1871) + 4)|0;
 $1874 = $1873;
 HEAP32[$1874>>2] = $1870;
 $1875 = $42;
 $1876 = $1875;
 $1877 = HEAP32[$1876>>2]|0;
 $1878 = (($1875) + 4)|0;
 $1879 = $1878;
 $1880 = HEAP32[$1879>>2]|0;
 $1881 = (___muldi3(($1877|0),($1880|0),666643,0)|0);
 $1882 = (getTempRet0() | 0);
 $1883 = $30;
 $1884 = $1883;
 $1885 = HEAP32[$1884>>2]|0;
 $1886 = (($1883) + 4)|0;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = (_i64Add(($1885|0),($1888|0),($1881|0),($1882|0))|0);
 $1890 = (getTempRet0() | 0);
 $1891 = $30;
 $1892 = $1891;
 HEAP32[$1892>>2] = $1889;
 $1893 = (($1891) + 4)|0;
 $1894 = $1893;
 HEAP32[$1894>>2] = $1890;
 $1895 = $42;
 $1896 = $1895;
 $1897 = HEAP32[$1896>>2]|0;
 $1898 = (($1895) + 4)|0;
 $1899 = $1898;
 $1900 = HEAP32[$1899>>2]|0;
 $1901 = (___muldi3(($1897|0),($1900|0),470296,0)|0);
 $1902 = (getTempRet0() | 0);
 $1903 = $31;
 $1904 = $1903;
 $1905 = HEAP32[$1904>>2]|0;
 $1906 = (($1903) + 4)|0;
 $1907 = $1906;
 $1908 = HEAP32[$1907>>2]|0;
 $1909 = (_i64Add(($1905|0),($1908|0),($1901|0),($1902|0))|0);
 $1910 = (getTempRet0() | 0);
 $1911 = $31;
 $1912 = $1911;
 HEAP32[$1912>>2] = $1909;
 $1913 = (($1911) + 4)|0;
 $1914 = $1913;
 HEAP32[$1914>>2] = $1910;
 $1915 = $42;
 $1916 = $1915;
 $1917 = HEAP32[$1916>>2]|0;
 $1918 = (($1915) + 4)|0;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = (___muldi3(($1917|0),($1920|0),654183,0)|0);
 $1922 = (getTempRet0() | 0);
 $1923 = $32;
 $1924 = $1923;
 $1925 = HEAP32[$1924>>2]|0;
 $1926 = (($1923) + 4)|0;
 $1927 = $1926;
 $1928 = HEAP32[$1927>>2]|0;
 $1929 = (_i64Add(($1925|0),($1928|0),($1921|0),($1922|0))|0);
 $1930 = (getTempRet0() | 0);
 $1931 = $32;
 $1932 = $1931;
 HEAP32[$1932>>2] = $1929;
 $1933 = (($1931) + 4)|0;
 $1934 = $1933;
 HEAP32[$1934>>2] = $1930;
 $1935 = $42;
 $1936 = $1935;
 $1937 = HEAP32[$1936>>2]|0;
 $1938 = (($1935) + 4)|0;
 $1939 = $1938;
 $1940 = HEAP32[$1939>>2]|0;
 $1941 = (___muldi3(($1937|0),($1940|0),997805,0)|0);
 $1942 = (getTempRet0() | 0);
 $1943 = $33;
 $1944 = $1943;
 $1945 = HEAP32[$1944>>2]|0;
 $1946 = (($1943) + 4)|0;
 $1947 = $1946;
 $1948 = HEAP32[$1947>>2]|0;
 $1949 = (_i64Subtract(($1945|0),($1948|0),($1941|0),($1942|0))|0);
 $1950 = (getTempRet0() | 0);
 $1951 = $33;
 $1952 = $1951;
 HEAP32[$1952>>2] = $1949;
 $1953 = (($1951) + 4)|0;
 $1954 = $1953;
 HEAP32[$1954>>2] = $1950;
 $1955 = $42;
 $1956 = $1955;
 $1957 = HEAP32[$1956>>2]|0;
 $1958 = (($1955) + 4)|0;
 $1959 = $1958;
 $1960 = HEAP32[$1959>>2]|0;
 $1961 = (___muldi3(($1957|0),($1960|0),136657,0)|0);
 $1962 = (getTempRet0() | 0);
 $1963 = $34;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (($1963) + 4)|0;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = (_i64Add(($1965|0),($1968|0),($1961|0),($1962|0))|0);
 $1970 = (getTempRet0() | 0);
 $1971 = $34;
 $1972 = $1971;
 HEAP32[$1972>>2] = $1969;
 $1973 = (($1971) + 4)|0;
 $1974 = $1973;
 HEAP32[$1974>>2] = $1970;
 $1975 = $42;
 $1976 = $1975;
 $1977 = HEAP32[$1976>>2]|0;
 $1978 = (($1975) + 4)|0;
 $1979 = $1978;
 $1980 = HEAP32[$1979>>2]|0;
 $1981 = (___muldi3(($1977|0),($1980|0),683901,0)|0);
 $1982 = (getTempRet0() | 0);
 $1983 = $35;
 $1984 = $1983;
 $1985 = HEAP32[$1984>>2]|0;
 $1986 = (($1983) + 4)|0;
 $1987 = $1986;
 $1988 = HEAP32[$1987>>2]|0;
 $1989 = (_i64Subtract(($1985|0),($1988|0),($1981|0),($1982|0))|0);
 $1990 = (getTempRet0() | 0);
 $1991 = $35;
 $1992 = $1991;
 HEAP32[$1992>>2] = $1989;
 $1993 = (($1991) + 4)|0;
 $1994 = $1993;
 HEAP32[$1994>>2] = $1990;
 $1995 = $30;
 $1996 = $1995;
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = (($1995) + 4)|0;
 $1999 = $1998;
 $2000 = HEAP32[$1999>>2]|0;
 $2001 = (_bitshift64Ashr(($1997|0),($2000|0),21)|0);
 $2002 = (getTempRet0() | 0);
 $2003 = $43;
 $2004 = $2003;
 HEAP32[$2004>>2] = $2001;
 $2005 = (($2003) + 4)|0;
 $2006 = $2005;
 HEAP32[$2006>>2] = $2002;
 $2007 = $43;
 $2008 = $2007;
 $2009 = HEAP32[$2008>>2]|0;
 $2010 = (($2007) + 4)|0;
 $2011 = $2010;
 $2012 = HEAP32[$2011>>2]|0;
 $2013 = $31;
 $2014 = $2013;
 $2015 = HEAP32[$2014>>2]|0;
 $2016 = (($2013) + 4)|0;
 $2017 = $2016;
 $2018 = HEAP32[$2017>>2]|0;
 $2019 = (_i64Add(($2015|0),($2018|0),($2009|0),($2012|0))|0);
 $2020 = (getTempRet0() | 0);
 $2021 = $31;
 $2022 = $2021;
 HEAP32[$2022>>2] = $2019;
 $2023 = (($2021) + 4)|0;
 $2024 = $2023;
 HEAP32[$2024>>2] = $2020;
 $2025 = $43;
 $2026 = $2025;
 $2027 = HEAP32[$2026>>2]|0;
 $2028 = (($2025) + 4)|0;
 $2029 = $2028;
 $2030 = HEAP32[$2029>>2]|0;
 $2031 = (_bitshift64Shl(($2027|0),($2030|0),21)|0);
 $2032 = (getTempRet0() | 0);
 $2033 = $30;
 $2034 = $2033;
 $2035 = HEAP32[$2034>>2]|0;
 $2036 = (($2033) + 4)|0;
 $2037 = $2036;
 $2038 = HEAP32[$2037>>2]|0;
 $2039 = (_i64Subtract(($2035|0),($2038|0),($2031|0),($2032|0))|0);
 $2040 = (getTempRet0() | 0);
 $2041 = $30;
 $2042 = $2041;
 HEAP32[$2042>>2] = $2039;
 $2043 = (($2041) + 4)|0;
 $2044 = $2043;
 HEAP32[$2044>>2] = $2040;
 $2045 = $31;
 $2046 = $2045;
 $2047 = HEAP32[$2046>>2]|0;
 $2048 = (($2045) + 4)|0;
 $2049 = $2048;
 $2050 = HEAP32[$2049>>2]|0;
 $2051 = (_bitshift64Ashr(($2047|0),($2050|0),21)|0);
 $2052 = (getTempRet0() | 0);
 $2053 = $44;
 $2054 = $2053;
 HEAP32[$2054>>2] = $2051;
 $2055 = (($2053) + 4)|0;
 $2056 = $2055;
 HEAP32[$2056>>2] = $2052;
 $2057 = $44;
 $2058 = $2057;
 $2059 = HEAP32[$2058>>2]|0;
 $2060 = (($2057) + 4)|0;
 $2061 = $2060;
 $2062 = HEAP32[$2061>>2]|0;
 $2063 = $32;
 $2064 = $2063;
 $2065 = HEAP32[$2064>>2]|0;
 $2066 = (($2063) + 4)|0;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (_i64Add(($2065|0),($2068|0),($2059|0),($2062|0))|0);
 $2070 = (getTempRet0() | 0);
 $2071 = $32;
 $2072 = $2071;
 HEAP32[$2072>>2] = $2069;
 $2073 = (($2071) + 4)|0;
 $2074 = $2073;
 HEAP32[$2074>>2] = $2070;
 $2075 = $44;
 $2076 = $2075;
 $2077 = HEAP32[$2076>>2]|0;
 $2078 = (($2075) + 4)|0;
 $2079 = $2078;
 $2080 = HEAP32[$2079>>2]|0;
 $2081 = (_bitshift64Shl(($2077|0),($2080|0),21)|0);
 $2082 = (getTempRet0() | 0);
 $2083 = $31;
 $2084 = $2083;
 $2085 = HEAP32[$2084>>2]|0;
 $2086 = (($2083) + 4)|0;
 $2087 = $2086;
 $2088 = HEAP32[$2087>>2]|0;
 $2089 = (_i64Subtract(($2085|0),($2088|0),($2081|0),($2082|0))|0);
 $2090 = (getTempRet0() | 0);
 $2091 = $31;
 $2092 = $2091;
 HEAP32[$2092>>2] = $2089;
 $2093 = (($2091) + 4)|0;
 $2094 = $2093;
 HEAP32[$2094>>2] = $2090;
 $2095 = $32;
 $2096 = $2095;
 $2097 = HEAP32[$2096>>2]|0;
 $2098 = (($2095) + 4)|0;
 $2099 = $2098;
 $2100 = HEAP32[$2099>>2]|0;
 $2101 = (_bitshift64Ashr(($2097|0),($2100|0),21)|0);
 $2102 = (getTempRet0() | 0);
 $2103 = $45;
 $2104 = $2103;
 HEAP32[$2104>>2] = $2101;
 $2105 = (($2103) + 4)|0;
 $2106 = $2105;
 HEAP32[$2106>>2] = $2102;
 $2107 = $45;
 $2108 = $2107;
 $2109 = HEAP32[$2108>>2]|0;
 $2110 = (($2107) + 4)|0;
 $2111 = $2110;
 $2112 = HEAP32[$2111>>2]|0;
 $2113 = $33;
 $2114 = $2113;
 $2115 = HEAP32[$2114>>2]|0;
 $2116 = (($2113) + 4)|0;
 $2117 = $2116;
 $2118 = HEAP32[$2117>>2]|0;
 $2119 = (_i64Add(($2115|0),($2118|0),($2109|0),($2112|0))|0);
 $2120 = (getTempRet0() | 0);
 $2121 = $33;
 $2122 = $2121;
 HEAP32[$2122>>2] = $2119;
 $2123 = (($2121) + 4)|0;
 $2124 = $2123;
 HEAP32[$2124>>2] = $2120;
 $2125 = $45;
 $2126 = $2125;
 $2127 = HEAP32[$2126>>2]|0;
 $2128 = (($2125) + 4)|0;
 $2129 = $2128;
 $2130 = HEAP32[$2129>>2]|0;
 $2131 = (_bitshift64Shl(($2127|0),($2130|0),21)|0);
 $2132 = (getTempRet0() | 0);
 $2133 = $32;
 $2134 = $2133;
 $2135 = HEAP32[$2134>>2]|0;
 $2136 = (($2133) + 4)|0;
 $2137 = $2136;
 $2138 = HEAP32[$2137>>2]|0;
 $2139 = (_i64Subtract(($2135|0),($2138|0),($2131|0),($2132|0))|0);
 $2140 = (getTempRet0() | 0);
 $2141 = $32;
 $2142 = $2141;
 HEAP32[$2142>>2] = $2139;
 $2143 = (($2141) + 4)|0;
 $2144 = $2143;
 HEAP32[$2144>>2] = $2140;
 $2145 = $33;
 $2146 = $2145;
 $2147 = HEAP32[$2146>>2]|0;
 $2148 = (($2145) + 4)|0;
 $2149 = $2148;
 $2150 = HEAP32[$2149>>2]|0;
 $2151 = (_bitshift64Ashr(($2147|0),($2150|0),21)|0);
 $2152 = (getTempRet0() | 0);
 $2153 = $46;
 $2154 = $2153;
 HEAP32[$2154>>2] = $2151;
 $2155 = (($2153) + 4)|0;
 $2156 = $2155;
 HEAP32[$2156>>2] = $2152;
 $2157 = $46;
 $2158 = $2157;
 $2159 = HEAP32[$2158>>2]|0;
 $2160 = (($2157) + 4)|0;
 $2161 = $2160;
 $2162 = HEAP32[$2161>>2]|0;
 $2163 = $34;
 $2164 = $2163;
 $2165 = HEAP32[$2164>>2]|0;
 $2166 = (($2163) + 4)|0;
 $2167 = $2166;
 $2168 = HEAP32[$2167>>2]|0;
 $2169 = (_i64Add(($2165|0),($2168|0),($2159|0),($2162|0))|0);
 $2170 = (getTempRet0() | 0);
 $2171 = $34;
 $2172 = $2171;
 HEAP32[$2172>>2] = $2169;
 $2173 = (($2171) + 4)|0;
 $2174 = $2173;
 HEAP32[$2174>>2] = $2170;
 $2175 = $46;
 $2176 = $2175;
 $2177 = HEAP32[$2176>>2]|0;
 $2178 = (($2175) + 4)|0;
 $2179 = $2178;
 $2180 = HEAP32[$2179>>2]|0;
 $2181 = (_bitshift64Shl(($2177|0),($2180|0),21)|0);
 $2182 = (getTempRet0() | 0);
 $2183 = $33;
 $2184 = $2183;
 $2185 = HEAP32[$2184>>2]|0;
 $2186 = (($2183) + 4)|0;
 $2187 = $2186;
 $2188 = HEAP32[$2187>>2]|0;
 $2189 = (_i64Subtract(($2185|0),($2188|0),($2181|0),($2182|0))|0);
 $2190 = (getTempRet0() | 0);
 $2191 = $33;
 $2192 = $2191;
 HEAP32[$2192>>2] = $2189;
 $2193 = (($2191) + 4)|0;
 $2194 = $2193;
 HEAP32[$2194>>2] = $2190;
 $2195 = $34;
 $2196 = $2195;
 $2197 = HEAP32[$2196>>2]|0;
 $2198 = (($2195) + 4)|0;
 $2199 = $2198;
 $2200 = HEAP32[$2199>>2]|0;
 $2201 = (_bitshift64Ashr(($2197|0),($2200|0),21)|0);
 $2202 = (getTempRet0() | 0);
 $2203 = $47;
 $2204 = $2203;
 HEAP32[$2204>>2] = $2201;
 $2205 = (($2203) + 4)|0;
 $2206 = $2205;
 HEAP32[$2206>>2] = $2202;
 $2207 = $47;
 $2208 = $2207;
 $2209 = HEAP32[$2208>>2]|0;
 $2210 = (($2207) + 4)|0;
 $2211 = $2210;
 $2212 = HEAP32[$2211>>2]|0;
 $2213 = $35;
 $2214 = $2213;
 $2215 = HEAP32[$2214>>2]|0;
 $2216 = (($2213) + 4)|0;
 $2217 = $2216;
 $2218 = HEAP32[$2217>>2]|0;
 $2219 = (_i64Add(($2215|0),($2218|0),($2209|0),($2212|0))|0);
 $2220 = (getTempRet0() | 0);
 $2221 = $35;
 $2222 = $2221;
 HEAP32[$2222>>2] = $2219;
 $2223 = (($2221) + 4)|0;
 $2224 = $2223;
 HEAP32[$2224>>2] = $2220;
 $2225 = $47;
 $2226 = $2225;
 $2227 = HEAP32[$2226>>2]|0;
 $2228 = (($2225) + 4)|0;
 $2229 = $2228;
 $2230 = HEAP32[$2229>>2]|0;
 $2231 = (_bitshift64Shl(($2227|0),($2230|0),21)|0);
 $2232 = (getTempRet0() | 0);
 $2233 = $34;
 $2234 = $2233;
 $2235 = HEAP32[$2234>>2]|0;
 $2236 = (($2233) + 4)|0;
 $2237 = $2236;
 $2238 = HEAP32[$2237>>2]|0;
 $2239 = (_i64Subtract(($2235|0),($2238|0),($2231|0),($2232|0))|0);
 $2240 = (getTempRet0() | 0);
 $2241 = $34;
 $2242 = $2241;
 HEAP32[$2242>>2] = $2239;
 $2243 = (($2241) + 4)|0;
 $2244 = $2243;
 HEAP32[$2244>>2] = $2240;
 $2245 = $35;
 $2246 = $2245;
 $2247 = HEAP32[$2246>>2]|0;
 $2248 = (($2245) + 4)|0;
 $2249 = $2248;
 $2250 = HEAP32[$2249>>2]|0;
 $2251 = (_bitshift64Ashr(($2247|0),($2250|0),21)|0);
 $2252 = (getTempRet0() | 0);
 $2253 = $48;
 $2254 = $2253;
 HEAP32[$2254>>2] = $2251;
 $2255 = (($2253) + 4)|0;
 $2256 = $2255;
 HEAP32[$2256>>2] = $2252;
 $2257 = $48;
 $2258 = $2257;
 $2259 = HEAP32[$2258>>2]|0;
 $2260 = (($2257) + 4)|0;
 $2261 = $2260;
 $2262 = HEAP32[$2261>>2]|0;
 $2263 = $36;
 $2264 = $2263;
 $2265 = HEAP32[$2264>>2]|0;
 $2266 = (($2263) + 4)|0;
 $2267 = $2266;
 $2268 = HEAP32[$2267>>2]|0;
 $2269 = (_i64Add(($2265|0),($2268|0),($2259|0),($2262|0))|0);
 $2270 = (getTempRet0() | 0);
 $2271 = $36;
 $2272 = $2271;
 HEAP32[$2272>>2] = $2269;
 $2273 = (($2271) + 4)|0;
 $2274 = $2273;
 HEAP32[$2274>>2] = $2270;
 $2275 = $48;
 $2276 = $2275;
 $2277 = HEAP32[$2276>>2]|0;
 $2278 = (($2275) + 4)|0;
 $2279 = $2278;
 $2280 = HEAP32[$2279>>2]|0;
 $2281 = (_bitshift64Shl(($2277|0),($2280|0),21)|0);
 $2282 = (getTempRet0() | 0);
 $2283 = $35;
 $2284 = $2283;
 $2285 = HEAP32[$2284>>2]|0;
 $2286 = (($2283) + 4)|0;
 $2287 = $2286;
 $2288 = HEAP32[$2287>>2]|0;
 $2289 = (_i64Subtract(($2285|0),($2288|0),($2281|0),($2282|0))|0);
 $2290 = (getTempRet0() | 0);
 $2291 = $35;
 $2292 = $2291;
 HEAP32[$2292>>2] = $2289;
 $2293 = (($2291) + 4)|0;
 $2294 = $2293;
 HEAP32[$2294>>2] = $2290;
 $2295 = $36;
 $2296 = $2295;
 $2297 = HEAP32[$2296>>2]|0;
 $2298 = (($2295) + 4)|0;
 $2299 = $2298;
 $2300 = HEAP32[$2299>>2]|0;
 $2301 = (_bitshift64Ashr(($2297|0),($2300|0),21)|0);
 $2302 = (getTempRet0() | 0);
 $2303 = $49;
 $2304 = $2303;
 HEAP32[$2304>>2] = $2301;
 $2305 = (($2303) + 4)|0;
 $2306 = $2305;
 HEAP32[$2306>>2] = $2302;
 $2307 = $49;
 $2308 = $2307;
 $2309 = HEAP32[$2308>>2]|0;
 $2310 = (($2307) + 4)|0;
 $2311 = $2310;
 $2312 = HEAP32[$2311>>2]|0;
 $2313 = $37;
 $2314 = $2313;
 $2315 = HEAP32[$2314>>2]|0;
 $2316 = (($2313) + 4)|0;
 $2317 = $2316;
 $2318 = HEAP32[$2317>>2]|0;
 $2319 = (_i64Add(($2315|0),($2318|0),($2309|0),($2312|0))|0);
 $2320 = (getTempRet0() | 0);
 $2321 = $37;
 $2322 = $2321;
 HEAP32[$2322>>2] = $2319;
 $2323 = (($2321) + 4)|0;
 $2324 = $2323;
 HEAP32[$2324>>2] = $2320;
 $2325 = $49;
 $2326 = $2325;
 $2327 = HEAP32[$2326>>2]|0;
 $2328 = (($2325) + 4)|0;
 $2329 = $2328;
 $2330 = HEAP32[$2329>>2]|0;
 $2331 = (_bitshift64Shl(($2327|0),($2330|0),21)|0);
 $2332 = (getTempRet0() | 0);
 $2333 = $36;
 $2334 = $2333;
 $2335 = HEAP32[$2334>>2]|0;
 $2336 = (($2333) + 4)|0;
 $2337 = $2336;
 $2338 = HEAP32[$2337>>2]|0;
 $2339 = (_i64Subtract(($2335|0),($2338|0),($2331|0),($2332|0))|0);
 $2340 = (getTempRet0() | 0);
 $2341 = $36;
 $2342 = $2341;
 HEAP32[$2342>>2] = $2339;
 $2343 = (($2341) + 4)|0;
 $2344 = $2343;
 HEAP32[$2344>>2] = $2340;
 $2345 = $37;
 $2346 = $2345;
 $2347 = HEAP32[$2346>>2]|0;
 $2348 = (($2345) + 4)|0;
 $2349 = $2348;
 $2350 = HEAP32[$2349>>2]|0;
 $2351 = (_bitshift64Ashr(($2347|0),($2350|0),21)|0);
 $2352 = (getTempRet0() | 0);
 $2353 = $50;
 $2354 = $2353;
 HEAP32[$2354>>2] = $2351;
 $2355 = (($2353) + 4)|0;
 $2356 = $2355;
 HEAP32[$2356>>2] = $2352;
 $2357 = $50;
 $2358 = $2357;
 $2359 = HEAP32[$2358>>2]|0;
 $2360 = (($2357) + 4)|0;
 $2361 = $2360;
 $2362 = HEAP32[$2361>>2]|0;
 $2363 = $38;
 $2364 = $2363;
 $2365 = HEAP32[$2364>>2]|0;
 $2366 = (($2363) + 4)|0;
 $2367 = $2366;
 $2368 = HEAP32[$2367>>2]|0;
 $2369 = (_i64Add(($2365|0),($2368|0),($2359|0),($2362|0))|0);
 $2370 = (getTempRet0() | 0);
 $2371 = $38;
 $2372 = $2371;
 HEAP32[$2372>>2] = $2369;
 $2373 = (($2371) + 4)|0;
 $2374 = $2373;
 HEAP32[$2374>>2] = $2370;
 $2375 = $50;
 $2376 = $2375;
 $2377 = HEAP32[$2376>>2]|0;
 $2378 = (($2375) + 4)|0;
 $2379 = $2378;
 $2380 = HEAP32[$2379>>2]|0;
 $2381 = (_bitshift64Shl(($2377|0),($2380|0),21)|0);
 $2382 = (getTempRet0() | 0);
 $2383 = $37;
 $2384 = $2383;
 $2385 = HEAP32[$2384>>2]|0;
 $2386 = (($2383) + 4)|0;
 $2387 = $2386;
 $2388 = HEAP32[$2387>>2]|0;
 $2389 = (_i64Subtract(($2385|0),($2388|0),($2381|0),($2382|0))|0);
 $2390 = (getTempRet0() | 0);
 $2391 = $37;
 $2392 = $2391;
 HEAP32[$2392>>2] = $2389;
 $2393 = (($2391) + 4)|0;
 $2394 = $2393;
 HEAP32[$2394>>2] = $2390;
 $2395 = $38;
 $2396 = $2395;
 $2397 = HEAP32[$2396>>2]|0;
 $2398 = (($2395) + 4)|0;
 $2399 = $2398;
 $2400 = HEAP32[$2399>>2]|0;
 $2401 = (_bitshift64Ashr(($2397|0),($2400|0),21)|0);
 $2402 = (getTempRet0() | 0);
 $2403 = $51;
 $2404 = $2403;
 HEAP32[$2404>>2] = $2401;
 $2405 = (($2403) + 4)|0;
 $2406 = $2405;
 HEAP32[$2406>>2] = $2402;
 $2407 = $51;
 $2408 = $2407;
 $2409 = HEAP32[$2408>>2]|0;
 $2410 = (($2407) + 4)|0;
 $2411 = $2410;
 $2412 = HEAP32[$2411>>2]|0;
 $2413 = $39;
 $2414 = $2413;
 $2415 = HEAP32[$2414>>2]|0;
 $2416 = (($2413) + 4)|0;
 $2417 = $2416;
 $2418 = HEAP32[$2417>>2]|0;
 $2419 = (_i64Add(($2415|0),($2418|0),($2409|0),($2412|0))|0);
 $2420 = (getTempRet0() | 0);
 $2421 = $39;
 $2422 = $2421;
 HEAP32[$2422>>2] = $2419;
 $2423 = (($2421) + 4)|0;
 $2424 = $2423;
 HEAP32[$2424>>2] = $2420;
 $2425 = $51;
 $2426 = $2425;
 $2427 = HEAP32[$2426>>2]|0;
 $2428 = (($2425) + 4)|0;
 $2429 = $2428;
 $2430 = HEAP32[$2429>>2]|0;
 $2431 = (_bitshift64Shl(($2427|0),($2430|0),21)|0);
 $2432 = (getTempRet0() | 0);
 $2433 = $38;
 $2434 = $2433;
 $2435 = HEAP32[$2434>>2]|0;
 $2436 = (($2433) + 4)|0;
 $2437 = $2436;
 $2438 = HEAP32[$2437>>2]|0;
 $2439 = (_i64Subtract(($2435|0),($2438|0),($2431|0),($2432|0))|0);
 $2440 = (getTempRet0() | 0);
 $2441 = $38;
 $2442 = $2441;
 HEAP32[$2442>>2] = $2439;
 $2443 = (($2441) + 4)|0;
 $2444 = $2443;
 HEAP32[$2444>>2] = $2440;
 $2445 = $39;
 $2446 = $2445;
 $2447 = HEAP32[$2446>>2]|0;
 $2448 = (($2445) + 4)|0;
 $2449 = $2448;
 $2450 = HEAP32[$2449>>2]|0;
 $2451 = (_bitshift64Ashr(($2447|0),($2450|0),21)|0);
 $2452 = (getTempRet0() | 0);
 $2453 = $52;
 $2454 = $2453;
 HEAP32[$2454>>2] = $2451;
 $2455 = (($2453) + 4)|0;
 $2456 = $2455;
 HEAP32[$2456>>2] = $2452;
 $2457 = $52;
 $2458 = $2457;
 $2459 = HEAP32[$2458>>2]|0;
 $2460 = (($2457) + 4)|0;
 $2461 = $2460;
 $2462 = HEAP32[$2461>>2]|0;
 $2463 = $40;
 $2464 = $2463;
 $2465 = HEAP32[$2464>>2]|0;
 $2466 = (($2463) + 4)|0;
 $2467 = $2466;
 $2468 = HEAP32[$2467>>2]|0;
 $2469 = (_i64Add(($2465|0),($2468|0),($2459|0),($2462|0))|0);
 $2470 = (getTempRet0() | 0);
 $2471 = $40;
 $2472 = $2471;
 HEAP32[$2472>>2] = $2469;
 $2473 = (($2471) + 4)|0;
 $2474 = $2473;
 HEAP32[$2474>>2] = $2470;
 $2475 = $52;
 $2476 = $2475;
 $2477 = HEAP32[$2476>>2]|0;
 $2478 = (($2475) + 4)|0;
 $2479 = $2478;
 $2480 = HEAP32[$2479>>2]|0;
 $2481 = (_bitshift64Shl(($2477|0),($2480|0),21)|0);
 $2482 = (getTempRet0() | 0);
 $2483 = $39;
 $2484 = $2483;
 $2485 = HEAP32[$2484>>2]|0;
 $2486 = (($2483) + 4)|0;
 $2487 = $2486;
 $2488 = HEAP32[$2487>>2]|0;
 $2489 = (_i64Subtract(($2485|0),($2488|0),($2481|0),($2482|0))|0);
 $2490 = (getTempRet0() | 0);
 $2491 = $39;
 $2492 = $2491;
 HEAP32[$2492>>2] = $2489;
 $2493 = (($2491) + 4)|0;
 $2494 = $2493;
 HEAP32[$2494>>2] = $2490;
 $2495 = $40;
 $2496 = $2495;
 $2497 = HEAP32[$2496>>2]|0;
 $2498 = (($2495) + 4)|0;
 $2499 = $2498;
 $2500 = HEAP32[$2499>>2]|0;
 $2501 = (_bitshift64Ashr(($2497|0),($2500|0),21)|0);
 $2502 = (getTempRet0() | 0);
 $2503 = $53;
 $2504 = $2503;
 HEAP32[$2504>>2] = $2501;
 $2505 = (($2503) + 4)|0;
 $2506 = $2505;
 HEAP32[$2506>>2] = $2502;
 $2507 = $53;
 $2508 = $2507;
 $2509 = HEAP32[$2508>>2]|0;
 $2510 = (($2507) + 4)|0;
 $2511 = $2510;
 $2512 = HEAP32[$2511>>2]|0;
 $2513 = $41;
 $2514 = $2513;
 $2515 = HEAP32[$2514>>2]|0;
 $2516 = (($2513) + 4)|0;
 $2517 = $2516;
 $2518 = HEAP32[$2517>>2]|0;
 $2519 = (_i64Add(($2515|0),($2518|0),($2509|0),($2512|0))|0);
 $2520 = (getTempRet0() | 0);
 $2521 = $41;
 $2522 = $2521;
 HEAP32[$2522>>2] = $2519;
 $2523 = (($2521) + 4)|0;
 $2524 = $2523;
 HEAP32[$2524>>2] = $2520;
 $2525 = $53;
 $2526 = $2525;
 $2527 = HEAP32[$2526>>2]|0;
 $2528 = (($2525) + 4)|0;
 $2529 = $2528;
 $2530 = HEAP32[$2529>>2]|0;
 $2531 = (_bitshift64Shl(($2527|0),($2530|0),21)|0);
 $2532 = (getTempRet0() | 0);
 $2533 = $40;
 $2534 = $2533;
 $2535 = HEAP32[$2534>>2]|0;
 $2536 = (($2533) + 4)|0;
 $2537 = $2536;
 $2538 = HEAP32[$2537>>2]|0;
 $2539 = (_i64Subtract(($2535|0),($2538|0),($2531|0),($2532|0))|0);
 $2540 = (getTempRet0() | 0);
 $2541 = $40;
 $2542 = $2541;
 HEAP32[$2542>>2] = $2539;
 $2543 = (($2541) + 4)|0;
 $2544 = $2543;
 HEAP32[$2544>>2] = $2540;
 $2545 = $30;
 $2546 = $2545;
 $2547 = HEAP32[$2546>>2]|0;
 $2548 = (($2545) + 4)|0;
 $2549 = $2548;
 $2550 = HEAP32[$2549>>2]|0;
 $2551 = (_bitshift64Ashr(($2547|0),($2550|0),0)|0);
 $2552 = (getTempRet0() | 0);
 $2553 = $2551&255;
 $2554 = $3;
 HEAP8[$2554>>0] = $2553;
 $2555 = $30;
 $2556 = $2555;
 $2557 = HEAP32[$2556>>2]|0;
 $2558 = (($2555) + 4)|0;
 $2559 = $2558;
 $2560 = HEAP32[$2559>>2]|0;
 $2561 = (_bitshift64Ashr(($2557|0),($2560|0),8)|0);
 $2562 = (getTempRet0() | 0);
 $2563 = $2561&255;
 $2564 = $3;
 $2565 = ((($2564)) + 1|0);
 HEAP8[$2565>>0] = $2563;
 $2566 = $30;
 $2567 = $2566;
 $2568 = HEAP32[$2567>>2]|0;
 $2569 = (($2566) + 4)|0;
 $2570 = $2569;
 $2571 = HEAP32[$2570>>2]|0;
 $2572 = (_bitshift64Ashr(($2568|0),($2571|0),16)|0);
 $2573 = (getTempRet0() | 0);
 $2574 = $31;
 $2575 = $2574;
 $2576 = HEAP32[$2575>>2]|0;
 $2577 = (($2574) + 4)|0;
 $2578 = $2577;
 $2579 = HEAP32[$2578>>2]|0;
 $2580 = (_bitshift64Shl(($2576|0),($2579|0),5)|0);
 $2581 = (getTempRet0() | 0);
 $2582 = $2572 | $2580;
 $2573 | $2581;
 $2583 = $2582&255;
 $2584 = $3;
 $2585 = ((($2584)) + 2|0);
 HEAP8[$2585>>0] = $2583;
 $2586 = $31;
 $2587 = $2586;
 $2588 = HEAP32[$2587>>2]|0;
 $2589 = (($2586) + 4)|0;
 $2590 = $2589;
 $2591 = HEAP32[$2590>>2]|0;
 $2592 = (_bitshift64Ashr(($2588|0),($2591|0),3)|0);
 $2593 = (getTempRet0() | 0);
 $2594 = $2592&255;
 $2595 = $3;
 $2596 = ((($2595)) + 3|0);
 HEAP8[$2596>>0] = $2594;
 $2597 = $31;
 $2598 = $2597;
 $2599 = HEAP32[$2598>>2]|0;
 $2600 = (($2597) + 4)|0;
 $2601 = $2600;
 $2602 = HEAP32[$2601>>2]|0;
 $2603 = (_bitshift64Ashr(($2599|0),($2602|0),11)|0);
 $2604 = (getTempRet0() | 0);
 $2605 = $2603&255;
 $2606 = $3;
 $2607 = ((($2606)) + 4|0);
 HEAP8[$2607>>0] = $2605;
 $2608 = $31;
 $2609 = $2608;
 $2610 = HEAP32[$2609>>2]|0;
 $2611 = (($2608) + 4)|0;
 $2612 = $2611;
 $2613 = HEAP32[$2612>>2]|0;
 $2614 = (_bitshift64Ashr(($2610|0),($2613|0),19)|0);
 $2615 = (getTempRet0() | 0);
 $2616 = $32;
 $2617 = $2616;
 $2618 = HEAP32[$2617>>2]|0;
 $2619 = (($2616) + 4)|0;
 $2620 = $2619;
 $2621 = HEAP32[$2620>>2]|0;
 $2622 = (_bitshift64Shl(($2618|0),($2621|0),2)|0);
 $2623 = (getTempRet0() | 0);
 $2624 = $2614 | $2622;
 $2615 | $2623;
 $2625 = $2624&255;
 $2626 = $3;
 $2627 = ((($2626)) + 5|0);
 HEAP8[$2627>>0] = $2625;
 $2628 = $32;
 $2629 = $2628;
 $2630 = HEAP32[$2629>>2]|0;
 $2631 = (($2628) + 4)|0;
 $2632 = $2631;
 $2633 = HEAP32[$2632>>2]|0;
 $2634 = (_bitshift64Ashr(($2630|0),($2633|0),6)|0);
 $2635 = (getTempRet0() | 0);
 $2636 = $2634&255;
 $2637 = $3;
 $2638 = ((($2637)) + 6|0);
 HEAP8[$2638>>0] = $2636;
 $2639 = $32;
 $2640 = $2639;
 $2641 = HEAP32[$2640>>2]|0;
 $2642 = (($2639) + 4)|0;
 $2643 = $2642;
 $2644 = HEAP32[$2643>>2]|0;
 $2645 = (_bitshift64Ashr(($2641|0),($2644|0),14)|0);
 $2646 = (getTempRet0() | 0);
 $2647 = $33;
 $2648 = $2647;
 $2649 = HEAP32[$2648>>2]|0;
 $2650 = (($2647) + 4)|0;
 $2651 = $2650;
 $2652 = HEAP32[$2651>>2]|0;
 $2653 = (_bitshift64Shl(($2649|0),($2652|0),7)|0);
 $2654 = (getTempRet0() | 0);
 $2655 = $2645 | $2653;
 $2646 | $2654;
 $2656 = $2655&255;
 $2657 = $3;
 $2658 = ((($2657)) + 7|0);
 HEAP8[$2658>>0] = $2656;
 $2659 = $33;
 $2660 = $2659;
 $2661 = HEAP32[$2660>>2]|0;
 $2662 = (($2659) + 4)|0;
 $2663 = $2662;
 $2664 = HEAP32[$2663>>2]|0;
 $2665 = (_bitshift64Ashr(($2661|0),($2664|0),1)|0);
 $2666 = (getTempRet0() | 0);
 $2667 = $2665&255;
 $2668 = $3;
 $2669 = ((($2668)) + 8|0);
 HEAP8[$2669>>0] = $2667;
 $2670 = $33;
 $2671 = $2670;
 $2672 = HEAP32[$2671>>2]|0;
 $2673 = (($2670) + 4)|0;
 $2674 = $2673;
 $2675 = HEAP32[$2674>>2]|0;
 $2676 = (_bitshift64Ashr(($2672|0),($2675|0),9)|0);
 $2677 = (getTempRet0() | 0);
 $2678 = $2676&255;
 $2679 = $3;
 $2680 = ((($2679)) + 9|0);
 HEAP8[$2680>>0] = $2678;
 $2681 = $33;
 $2682 = $2681;
 $2683 = HEAP32[$2682>>2]|0;
 $2684 = (($2681) + 4)|0;
 $2685 = $2684;
 $2686 = HEAP32[$2685>>2]|0;
 $2687 = (_bitshift64Ashr(($2683|0),($2686|0),17)|0);
 $2688 = (getTempRet0() | 0);
 $2689 = $34;
 $2690 = $2689;
 $2691 = HEAP32[$2690>>2]|0;
 $2692 = (($2689) + 4)|0;
 $2693 = $2692;
 $2694 = HEAP32[$2693>>2]|0;
 $2695 = (_bitshift64Shl(($2691|0),($2694|0),4)|0);
 $2696 = (getTempRet0() | 0);
 $2697 = $2687 | $2695;
 $2688 | $2696;
 $2698 = $2697&255;
 $2699 = $3;
 $2700 = ((($2699)) + 10|0);
 HEAP8[$2700>>0] = $2698;
 $2701 = $34;
 $2702 = $2701;
 $2703 = HEAP32[$2702>>2]|0;
 $2704 = (($2701) + 4)|0;
 $2705 = $2704;
 $2706 = HEAP32[$2705>>2]|0;
 $2707 = (_bitshift64Ashr(($2703|0),($2706|0),4)|0);
 $2708 = (getTempRet0() | 0);
 $2709 = $2707&255;
 $2710 = $3;
 $2711 = ((($2710)) + 11|0);
 HEAP8[$2711>>0] = $2709;
 $2712 = $34;
 $2713 = $2712;
 $2714 = HEAP32[$2713>>2]|0;
 $2715 = (($2712) + 4)|0;
 $2716 = $2715;
 $2717 = HEAP32[$2716>>2]|0;
 $2718 = (_bitshift64Ashr(($2714|0),($2717|0),12)|0);
 $2719 = (getTempRet0() | 0);
 $2720 = $2718&255;
 $2721 = $3;
 $2722 = ((($2721)) + 12|0);
 HEAP8[$2722>>0] = $2720;
 $2723 = $34;
 $2724 = $2723;
 $2725 = HEAP32[$2724>>2]|0;
 $2726 = (($2723) + 4)|0;
 $2727 = $2726;
 $2728 = HEAP32[$2727>>2]|0;
 $2729 = (_bitshift64Ashr(($2725|0),($2728|0),20)|0);
 $2730 = (getTempRet0() | 0);
 $2731 = $35;
 $2732 = $2731;
 $2733 = HEAP32[$2732>>2]|0;
 $2734 = (($2731) + 4)|0;
 $2735 = $2734;
 $2736 = HEAP32[$2735>>2]|0;
 $2737 = (_bitshift64Shl(($2733|0),($2736|0),1)|0);
 $2738 = (getTempRet0() | 0);
 $2739 = $2729 | $2737;
 $2730 | $2738;
 $2740 = $2739&255;
 $2741 = $3;
 $2742 = ((($2741)) + 13|0);
 HEAP8[$2742>>0] = $2740;
 $2743 = $35;
 $2744 = $2743;
 $2745 = HEAP32[$2744>>2]|0;
 $2746 = (($2743) + 4)|0;
 $2747 = $2746;
 $2748 = HEAP32[$2747>>2]|0;
 $2749 = (_bitshift64Ashr(($2745|0),($2748|0),7)|0);
 $2750 = (getTempRet0() | 0);
 $2751 = $2749&255;
 $2752 = $3;
 $2753 = ((($2752)) + 14|0);
 HEAP8[$2753>>0] = $2751;
 $2754 = $35;
 $2755 = $2754;
 $2756 = HEAP32[$2755>>2]|0;
 $2757 = (($2754) + 4)|0;
 $2758 = $2757;
 $2759 = HEAP32[$2758>>2]|0;
 $2760 = (_bitshift64Ashr(($2756|0),($2759|0),15)|0);
 $2761 = (getTempRet0() | 0);
 $2762 = $36;
 $2763 = $2762;
 $2764 = HEAP32[$2763>>2]|0;
 $2765 = (($2762) + 4)|0;
 $2766 = $2765;
 $2767 = HEAP32[$2766>>2]|0;
 $2768 = (_bitshift64Shl(($2764|0),($2767|0),6)|0);
 $2769 = (getTempRet0() | 0);
 $2770 = $2760 | $2768;
 $2761 | $2769;
 $2771 = $2770&255;
 $2772 = $3;
 $2773 = ((($2772)) + 15|0);
 HEAP8[$2773>>0] = $2771;
 $2774 = $36;
 $2775 = $2774;
 $2776 = HEAP32[$2775>>2]|0;
 $2777 = (($2774) + 4)|0;
 $2778 = $2777;
 $2779 = HEAP32[$2778>>2]|0;
 $2780 = (_bitshift64Ashr(($2776|0),($2779|0),2)|0);
 $2781 = (getTempRet0() | 0);
 $2782 = $2780&255;
 $2783 = $3;
 $2784 = ((($2783)) + 16|0);
 HEAP8[$2784>>0] = $2782;
 $2785 = $36;
 $2786 = $2785;
 $2787 = HEAP32[$2786>>2]|0;
 $2788 = (($2785) + 4)|0;
 $2789 = $2788;
 $2790 = HEAP32[$2789>>2]|0;
 $2791 = (_bitshift64Ashr(($2787|0),($2790|0),10)|0);
 $2792 = (getTempRet0() | 0);
 $2793 = $2791&255;
 $2794 = $3;
 $2795 = ((($2794)) + 17|0);
 HEAP8[$2795>>0] = $2793;
 $2796 = $36;
 $2797 = $2796;
 $2798 = HEAP32[$2797>>2]|0;
 $2799 = (($2796) + 4)|0;
 $2800 = $2799;
 $2801 = HEAP32[$2800>>2]|0;
 $2802 = (_bitshift64Ashr(($2798|0),($2801|0),18)|0);
 $2803 = (getTempRet0() | 0);
 $2804 = $37;
 $2805 = $2804;
 $2806 = HEAP32[$2805>>2]|0;
 $2807 = (($2804) + 4)|0;
 $2808 = $2807;
 $2809 = HEAP32[$2808>>2]|0;
 $2810 = (_bitshift64Shl(($2806|0),($2809|0),3)|0);
 $2811 = (getTempRet0() | 0);
 $2812 = $2802 | $2810;
 $2803 | $2811;
 $2813 = $2812&255;
 $2814 = $3;
 $2815 = ((($2814)) + 18|0);
 HEAP8[$2815>>0] = $2813;
 $2816 = $37;
 $2817 = $2816;
 $2818 = HEAP32[$2817>>2]|0;
 $2819 = (($2816) + 4)|0;
 $2820 = $2819;
 $2821 = HEAP32[$2820>>2]|0;
 $2822 = (_bitshift64Ashr(($2818|0),($2821|0),5)|0);
 $2823 = (getTempRet0() | 0);
 $2824 = $2822&255;
 $2825 = $3;
 $2826 = ((($2825)) + 19|0);
 HEAP8[$2826>>0] = $2824;
 $2827 = $37;
 $2828 = $2827;
 $2829 = HEAP32[$2828>>2]|0;
 $2830 = (($2827) + 4)|0;
 $2831 = $2830;
 $2832 = HEAP32[$2831>>2]|0;
 $2833 = (_bitshift64Ashr(($2829|0),($2832|0),13)|0);
 $2834 = (getTempRet0() | 0);
 $2835 = $2833&255;
 $2836 = $3;
 $2837 = ((($2836)) + 20|0);
 HEAP8[$2837>>0] = $2835;
 $2838 = $38;
 $2839 = $2838;
 $2840 = HEAP32[$2839>>2]|0;
 $2841 = (($2838) + 4)|0;
 $2842 = $2841;
 $2843 = HEAP32[$2842>>2]|0;
 $2844 = (_bitshift64Ashr(($2840|0),($2843|0),0)|0);
 $2845 = (getTempRet0() | 0);
 $2846 = $2844&255;
 $2847 = $3;
 $2848 = ((($2847)) + 21|0);
 HEAP8[$2848>>0] = $2846;
 $2849 = $38;
 $2850 = $2849;
 $2851 = HEAP32[$2850>>2]|0;
 $2852 = (($2849) + 4)|0;
 $2853 = $2852;
 $2854 = HEAP32[$2853>>2]|0;
 $2855 = (_bitshift64Ashr(($2851|0),($2854|0),8)|0);
 $2856 = (getTempRet0() | 0);
 $2857 = $2855&255;
 $2858 = $3;
 $2859 = ((($2858)) + 22|0);
 HEAP8[$2859>>0] = $2857;
 $2860 = $38;
 $2861 = $2860;
 $2862 = HEAP32[$2861>>2]|0;
 $2863 = (($2860) + 4)|0;
 $2864 = $2863;
 $2865 = HEAP32[$2864>>2]|0;
 $2866 = (_bitshift64Ashr(($2862|0),($2865|0),16)|0);
 $2867 = (getTempRet0() | 0);
 $2868 = $39;
 $2869 = $2868;
 $2870 = HEAP32[$2869>>2]|0;
 $2871 = (($2868) + 4)|0;
 $2872 = $2871;
 $2873 = HEAP32[$2872>>2]|0;
 $2874 = (_bitshift64Shl(($2870|0),($2873|0),5)|0);
 $2875 = (getTempRet0() | 0);
 $2876 = $2866 | $2874;
 $2867 | $2875;
 $2877 = $2876&255;
 $2878 = $3;
 $2879 = ((($2878)) + 23|0);
 HEAP8[$2879>>0] = $2877;
 $2880 = $39;
 $2881 = $2880;
 $2882 = HEAP32[$2881>>2]|0;
 $2883 = (($2880) + 4)|0;
 $2884 = $2883;
 $2885 = HEAP32[$2884>>2]|0;
 $2886 = (_bitshift64Ashr(($2882|0),($2885|0),3)|0);
 $2887 = (getTempRet0() | 0);
 $2888 = $2886&255;
 $2889 = $3;
 $2890 = ((($2889)) + 24|0);
 HEAP8[$2890>>0] = $2888;
 $2891 = $39;
 $2892 = $2891;
 $2893 = HEAP32[$2892>>2]|0;
 $2894 = (($2891) + 4)|0;
 $2895 = $2894;
 $2896 = HEAP32[$2895>>2]|0;
 $2897 = (_bitshift64Ashr(($2893|0),($2896|0),11)|0);
 $2898 = (getTempRet0() | 0);
 $2899 = $2897&255;
 $2900 = $3;
 $2901 = ((($2900)) + 25|0);
 HEAP8[$2901>>0] = $2899;
 $2902 = $39;
 $2903 = $2902;
 $2904 = HEAP32[$2903>>2]|0;
 $2905 = (($2902) + 4)|0;
 $2906 = $2905;
 $2907 = HEAP32[$2906>>2]|0;
 $2908 = (_bitshift64Ashr(($2904|0),($2907|0),19)|0);
 $2909 = (getTempRet0() | 0);
 $2910 = $40;
 $2911 = $2910;
 $2912 = HEAP32[$2911>>2]|0;
 $2913 = (($2910) + 4)|0;
 $2914 = $2913;
 $2915 = HEAP32[$2914>>2]|0;
 $2916 = (_bitshift64Shl(($2912|0),($2915|0),2)|0);
 $2917 = (getTempRet0() | 0);
 $2918 = $2908 | $2916;
 $2909 | $2917;
 $2919 = $2918&255;
 $2920 = $3;
 $2921 = ((($2920)) + 26|0);
 HEAP8[$2921>>0] = $2919;
 $2922 = $40;
 $2923 = $2922;
 $2924 = HEAP32[$2923>>2]|0;
 $2925 = (($2922) + 4)|0;
 $2926 = $2925;
 $2927 = HEAP32[$2926>>2]|0;
 $2928 = (_bitshift64Ashr(($2924|0),($2927|0),6)|0);
 $2929 = (getTempRet0() | 0);
 $2930 = $2928&255;
 $2931 = $3;
 $2932 = ((($2931)) + 27|0);
 HEAP8[$2932>>0] = $2930;
 $2933 = $40;
 $2934 = $2933;
 $2935 = HEAP32[$2934>>2]|0;
 $2936 = (($2933) + 4)|0;
 $2937 = $2936;
 $2938 = HEAP32[$2937>>2]|0;
 $2939 = (_bitshift64Ashr(($2935|0),($2938|0),14)|0);
 $2940 = (getTempRet0() | 0);
 $2941 = $41;
 $2942 = $2941;
 $2943 = HEAP32[$2942>>2]|0;
 $2944 = (($2941) + 4)|0;
 $2945 = $2944;
 $2946 = HEAP32[$2945>>2]|0;
 $2947 = (_bitshift64Shl(($2943|0),($2946|0),7)|0);
 $2948 = (getTempRet0() | 0);
 $2949 = $2939 | $2947;
 $2940 | $2948;
 $2950 = $2949&255;
 $2951 = $3;
 $2952 = ((($2951)) + 28|0);
 HEAP8[$2952>>0] = $2950;
 $2953 = $41;
 $2954 = $2953;
 $2955 = HEAP32[$2954>>2]|0;
 $2956 = (($2953) + 4)|0;
 $2957 = $2956;
 $2958 = HEAP32[$2957>>2]|0;
 $2959 = (_bitshift64Ashr(($2955|0),($2958|0),1)|0);
 $2960 = (getTempRet0() | 0);
 $2961 = $2959&255;
 $2962 = $3;
 $2963 = ((($2962)) + 29|0);
 HEAP8[$2963>>0] = $2961;
 $2964 = $41;
 $2965 = $2964;
 $2966 = HEAP32[$2965>>2]|0;
 $2967 = (($2964) + 4)|0;
 $2968 = $2967;
 $2969 = HEAP32[$2968>>2]|0;
 $2970 = (_bitshift64Ashr(($2966|0),($2969|0),9)|0);
 $2971 = (getTempRet0() | 0);
 $2972 = $2970&255;
 $2973 = $3;
 $2974 = ((($2973)) + 30|0);
 HEAP8[$2974>>0] = $2972;
 $2975 = $41;
 $2976 = $2975;
 $2977 = HEAP32[$2976>>2]|0;
 $2978 = (($2975) + 4)|0;
 $2979 = $2978;
 $2980 = HEAP32[$2979>>2]|0;
 $2981 = (_bitshift64Ashr(($2977|0),($2980|0),17)|0);
 $2982 = (getTempRet0() | 0);
 $2983 = $2981&255;
 $2984 = $3;
 $2985 = ((($2984)) + 31|0);
 HEAP8[$2985>>0] = $2983;
 STACKTOP = sp;return;
}
function _sc_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $6 = sp + 384|0;
 $7 = sp + 376|0;
 $8 = sp + 368|0;
 $9 = sp + 360|0;
 $10 = sp + 352|0;
 $11 = sp + 344|0;
 $12 = sp + 336|0;
 $13 = sp + 328|0;
 $14 = sp + 320|0;
 $15 = sp + 312|0;
 $16 = sp + 304|0;
 $17 = sp + 296|0;
 $18 = sp + 288|0;
 $19 = sp + 280|0;
 $20 = sp + 272|0;
 $21 = sp + 264|0;
 $22 = sp + 256|0;
 $23 = sp + 248|0;
 $24 = sp + 240|0;
 $25 = sp + 232|0;
 $26 = sp + 224|0;
 $27 = sp + 216|0;
 $28 = sp + 208|0;
 $29 = sp + 200|0;
 $30 = sp + 192|0;
 $31 = sp + 184|0;
 $32 = sp + 176|0;
 $33 = sp + 168|0;
 $34 = sp + 160|0;
 $35 = sp + 152|0;
 $36 = sp + 144|0;
 $37 = sp + 136|0;
 $38 = sp + 128|0;
 $39 = sp + 120|0;
 $40 = sp + 112|0;
 $41 = sp + 104|0;
 $42 = sp + 96|0;
 $43 = sp + 88|0;
 $44 = sp + 80|0;
 $45 = sp + 72|0;
 $46 = sp + 64|0;
 $47 = sp + 56|0;
 $48 = sp + 48|0;
 $49 = sp + 40|0;
 $50 = sp + 32|0;
 $51 = sp + 24|0;
 $52 = sp + 16|0;
 $53 = sp + 8|0;
 $54 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $55 = $4;
 $56 = (_load_3($55)|0);
 $57 = (getTempRet0() | 0);
 $58 = 2097151 & $56;
 $59 = $6;
 $60 = $59;
 HEAP32[$60>>2] = $58;
 $61 = (($59) + 4)|0;
 $62 = $61;
 HEAP32[$62>>2] = 0;
 $63 = $4;
 $64 = ((($63)) + 2|0);
 $65 = (_load_4($64)|0);
 $66 = (getTempRet0() | 0);
 $67 = (_bitshift64Lshr(($65|0),($66|0),5)|0);
 $68 = (getTempRet0() | 0);
 $69 = 2097151 & $67;
 $70 = $7;
 $71 = $70;
 HEAP32[$71>>2] = $69;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = $4;
 $75 = ((($74)) + 5|0);
 $76 = (_load_3($75)|0);
 $77 = (getTempRet0() | 0);
 $78 = (_bitshift64Lshr(($76|0),($77|0),2)|0);
 $79 = (getTempRet0() | 0);
 $80 = 2097151 & $78;
 $81 = $8;
 $82 = $81;
 HEAP32[$82>>2] = $80;
 $83 = (($81) + 4)|0;
 $84 = $83;
 HEAP32[$84>>2] = 0;
 $85 = $4;
 $86 = ((($85)) + 7|0);
 $87 = (_load_4($86)|0);
 $88 = (getTempRet0() | 0);
 $89 = (_bitshift64Lshr(($87|0),($88|0),7)|0);
 $90 = (getTempRet0() | 0);
 $91 = 2097151 & $89;
 $92 = $9;
 $93 = $92;
 HEAP32[$93>>2] = $91;
 $94 = (($92) + 4)|0;
 $95 = $94;
 HEAP32[$95>>2] = 0;
 $96 = $4;
 $97 = ((($96)) + 10|0);
 $98 = (_load_4($97)|0);
 $99 = (getTempRet0() | 0);
 $100 = (_bitshift64Lshr(($98|0),($99|0),4)|0);
 $101 = (getTempRet0() | 0);
 $102 = 2097151 & $100;
 $103 = $10;
 $104 = $103;
 HEAP32[$104>>2] = $102;
 $105 = (($103) + 4)|0;
 $106 = $105;
 HEAP32[$106>>2] = 0;
 $107 = $4;
 $108 = ((($107)) + 13|0);
 $109 = (_load_3($108)|0);
 $110 = (getTempRet0() | 0);
 $111 = (_bitshift64Lshr(($109|0),($110|0),1)|0);
 $112 = (getTempRet0() | 0);
 $113 = 2097151 & $111;
 $114 = $11;
 $115 = $114;
 HEAP32[$115>>2] = $113;
 $116 = (($114) + 4)|0;
 $117 = $116;
 HEAP32[$117>>2] = 0;
 $118 = $4;
 $119 = ((($118)) + 15|0);
 $120 = (_load_4($119)|0);
 $121 = (getTempRet0() | 0);
 $122 = (_bitshift64Lshr(($120|0),($121|0),6)|0);
 $123 = (getTempRet0() | 0);
 $124 = 2097151 & $122;
 $125 = $12;
 $126 = $125;
 HEAP32[$126>>2] = $124;
 $127 = (($125) + 4)|0;
 $128 = $127;
 HEAP32[$128>>2] = 0;
 $129 = $4;
 $130 = ((($129)) + 18|0);
 $131 = (_load_3($130)|0);
 $132 = (getTempRet0() | 0);
 $133 = (_bitshift64Lshr(($131|0),($132|0),3)|0);
 $134 = (getTempRet0() | 0);
 $135 = 2097151 & $133;
 $136 = $13;
 $137 = $136;
 HEAP32[$137>>2] = $135;
 $138 = (($136) + 4)|0;
 $139 = $138;
 HEAP32[$139>>2] = 0;
 $140 = $4;
 $141 = ((($140)) + 21|0);
 $142 = (_load_3($141)|0);
 $143 = (getTempRet0() | 0);
 $144 = 2097151 & $142;
 $145 = $14;
 $146 = $145;
 HEAP32[$146>>2] = $144;
 $147 = (($145) + 4)|0;
 $148 = $147;
 HEAP32[$148>>2] = 0;
 $149 = $4;
 $150 = ((($149)) + 23|0);
 $151 = (_load_4($150)|0);
 $152 = (getTempRet0() | 0);
 $153 = (_bitshift64Lshr(($151|0),($152|0),5)|0);
 $154 = (getTempRet0() | 0);
 $155 = 2097151 & $153;
 $156 = $15;
 $157 = $156;
 HEAP32[$157>>2] = $155;
 $158 = (($156) + 4)|0;
 $159 = $158;
 HEAP32[$159>>2] = 0;
 $160 = $4;
 $161 = ((($160)) + 26|0);
 $162 = (_load_3($161)|0);
 $163 = (getTempRet0() | 0);
 $164 = (_bitshift64Lshr(($162|0),($163|0),2)|0);
 $165 = (getTempRet0() | 0);
 $166 = 2097151 & $164;
 $167 = $16;
 $168 = $167;
 HEAP32[$168>>2] = $166;
 $169 = (($167) + 4)|0;
 $170 = $169;
 HEAP32[$170>>2] = 0;
 $171 = $4;
 $172 = ((($171)) + 28|0);
 $173 = (_load_4($172)|0);
 $174 = (getTempRet0() | 0);
 $175 = (_bitshift64Lshr(($173|0),($174|0),7)|0);
 $176 = (getTempRet0() | 0);
 $177 = $17;
 $178 = $177;
 HEAP32[$178>>2] = $175;
 $179 = (($177) + 4)|0;
 $180 = $179;
 HEAP32[$180>>2] = $176;
 $181 = $5;
 $182 = (_load_3($181)|0);
 $183 = (getTempRet0() | 0);
 $184 = 2097151 & $182;
 $185 = $18;
 $186 = $185;
 HEAP32[$186>>2] = $184;
 $187 = (($185) + 4)|0;
 $188 = $187;
 HEAP32[$188>>2] = 0;
 $189 = $5;
 $190 = ((($189)) + 2|0);
 $191 = (_load_4($190)|0);
 $192 = (getTempRet0() | 0);
 $193 = (_bitshift64Lshr(($191|0),($192|0),5)|0);
 $194 = (getTempRet0() | 0);
 $195 = 2097151 & $193;
 $196 = $19;
 $197 = $196;
 HEAP32[$197>>2] = $195;
 $198 = (($196) + 4)|0;
 $199 = $198;
 HEAP32[$199>>2] = 0;
 $200 = $5;
 $201 = ((($200)) + 5|0);
 $202 = (_load_3($201)|0);
 $203 = (getTempRet0() | 0);
 $204 = (_bitshift64Lshr(($202|0),($203|0),2)|0);
 $205 = (getTempRet0() | 0);
 $206 = 2097151 & $204;
 $207 = $20;
 $208 = $207;
 HEAP32[$208>>2] = $206;
 $209 = (($207) + 4)|0;
 $210 = $209;
 HEAP32[$210>>2] = 0;
 $211 = $5;
 $212 = ((($211)) + 7|0);
 $213 = (_load_4($212)|0);
 $214 = (getTempRet0() | 0);
 $215 = (_bitshift64Lshr(($213|0),($214|0),7)|0);
 $216 = (getTempRet0() | 0);
 $217 = 2097151 & $215;
 $218 = $21;
 $219 = $218;
 HEAP32[$219>>2] = $217;
 $220 = (($218) + 4)|0;
 $221 = $220;
 HEAP32[$221>>2] = 0;
 $222 = $5;
 $223 = ((($222)) + 10|0);
 $224 = (_load_4($223)|0);
 $225 = (getTempRet0() | 0);
 $226 = (_bitshift64Lshr(($224|0),($225|0),4)|0);
 $227 = (getTempRet0() | 0);
 $228 = 2097151 & $226;
 $229 = $22;
 $230 = $229;
 HEAP32[$230>>2] = $228;
 $231 = (($229) + 4)|0;
 $232 = $231;
 HEAP32[$232>>2] = 0;
 $233 = $5;
 $234 = ((($233)) + 13|0);
 $235 = (_load_3($234)|0);
 $236 = (getTempRet0() | 0);
 $237 = (_bitshift64Lshr(($235|0),($236|0),1)|0);
 $238 = (getTempRet0() | 0);
 $239 = 2097151 & $237;
 $240 = $23;
 $241 = $240;
 HEAP32[$241>>2] = $239;
 $242 = (($240) + 4)|0;
 $243 = $242;
 HEAP32[$243>>2] = 0;
 $244 = $5;
 $245 = ((($244)) + 15|0);
 $246 = (_load_4($245)|0);
 $247 = (getTempRet0() | 0);
 $248 = (_bitshift64Lshr(($246|0),($247|0),6)|0);
 $249 = (getTempRet0() | 0);
 $250 = 2097151 & $248;
 $251 = $24;
 $252 = $251;
 HEAP32[$252>>2] = $250;
 $253 = (($251) + 4)|0;
 $254 = $253;
 HEAP32[$254>>2] = 0;
 $255 = $5;
 $256 = ((($255)) + 18|0);
 $257 = (_load_3($256)|0);
 $258 = (getTempRet0() | 0);
 $259 = (_bitshift64Lshr(($257|0),($258|0),3)|0);
 $260 = (getTempRet0() | 0);
 $261 = 2097151 & $259;
 $262 = $25;
 $263 = $262;
 HEAP32[$263>>2] = $261;
 $264 = (($262) + 4)|0;
 $265 = $264;
 HEAP32[$265>>2] = 0;
 $266 = $5;
 $267 = ((($266)) + 21|0);
 $268 = (_load_3($267)|0);
 $269 = (getTempRet0() | 0);
 $270 = 2097151 & $268;
 $271 = $26;
 $272 = $271;
 HEAP32[$272>>2] = $270;
 $273 = (($271) + 4)|0;
 $274 = $273;
 HEAP32[$274>>2] = 0;
 $275 = $5;
 $276 = ((($275)) + 23|0);
 $277 = (_load_4($276)|0);
 $278 = (getTempRet0() | 0);
 $279 = (_bitshift64Lshr(($277|0),($278|0),5)|0);
 $280 = (getTempRet0() | 0);
 $281 = 2097151 & $279;
 $282 = $27;
 $283 = $282;
 HEAP32[$283>>2] = $281;
 $284 = (($282) + 4)|0;
 $285 = $284;
 HEAP32[$285>>2] = 0;
 $286 = $5;
 $287 = ((($286)) + 26|0);
 $288 = (_load_3($287)|0);
 $289 = (getTempRet0() | 0);
 $290 = (_bitshift64Lshr(($288|0),($289|0),2)|0);
 $291 = (getTempRet0() | 0);
 $292 = 2097151 & $290;
 $293 = $28;
 $294 = $293;
 HEAP32[$294>>2] = $292;
 $295 = (($293) + 4)|0;
 $296 = $295;
 HEAP32[$296>>2] = 0;
 $297 = $5;
 $298 = ((($297)) + 28|0);
 $299 = (_load_4($298)|0);
 $300 = (getTempRet0() | 0);
 $301 = (_bitshift64Lshr(($299|0),($300|0),7)|0);
 $302 = (getTempRet0() | 0);
 $303 = $29;
 $304 = $303;
 HEAP32[$304>>2] = $301;
 $305 = (($303) + 4)|0;
 $306 = $305;
 HEAP32[$306>>2] = $302;
 $307 = $6;
 $308 = $307;
 $309 = HEAP32[$308>>2]|0;
 $310 = (($307) + 4)|0;
 $311 = $310;
 $312 = HEAP32[$311>>2]|0;
 $313 = $18;
 $314 = $313;
 $315 = HEAP32[$314>>2]|0;
 $316 = (($313) + 4)|0;
 $317 = $316;
 $318 = HEAP32[$317>>2]|0;
 $319 = (_i64Subtract(($309|0),($312|0),($315|0),($318|0))|0);
 $320 = (getTempRet0() | 0);
 $321 = $30;
 $322 = $321;
 HEAP32[$322>>2] = $319;
 $323 = (($321) + 4)|0;
 $324 = $323;
 HEAP32[$324>>2] = $320;
 $325 = $7;
 $326 = $325;
 $327 = HEAP32[$326>>2]|0;
 $328 = (($325) + 4)|0;
 $329 = $328;
 $330 = HEAP32[$329>>2]|0;
 $331 = $19;
 $332 = $331;
 $333 = HEAP32[$332>>2]|0;
 $334 = (($331) + 4)|0;
 $335 = $334;
 $336 = HEAP32[$335>>2]|0;
 $337 = (_i64Subtract(($327|0),($330|0),($333|0),($336|0))|0);
 $338 = (getTempRet0() | 0);
 $339 = $31;
 $340 = $339;
 HEAP32[$340>>2] = $337;
 $341 = (($339) + 4)|0;
 $342 = $341;
 HEAP32[$342>>2] = $338;
 $343 = $8;
 $344 = $343;
 $345 = HEAP32[$344>>2]|0;
 $346 = (($343) + 4)|0;
 $347 = $346;
 $348 = HEAP32[$347>>2]|0;
 $349 = $20;
 $350 = $349;
 $351 = HEAP32[$350>>2]|0;
 $352 = (($349) + 4)|0;
 $353 = $352;
 $354 = HEAP32[$353>>2]|0;
 $355 = (_i64Subtract(($345|0),($348|0),($351|0),($354|0))|0);
 $356 = (getTempRet0() | 0);
 $357 = $32;
 $358 = $357;
 HEAP32[$358>>2] = $355;
 $359 = (($357) + 4)|0;
 $360 = $359;
 HEAP32[$360>>2] = $356;
 $361 = $9;
 $362 = $361;
 $363 = HEAP32[$362>>2]|0;
 $364 = (($361) + 4)|0;
 $365 = $364;
 $366 = HEAP32[$365>>2]|0;
 $367 = $21;
 $368 = $367;
 $369 = HEAP32[$368>>2]|0;
 $370 = (($367) + 4)|0;
 $371 = $370;
 $372 = HEAP32[$371>>2]|0;
 $373 = (_i64Subtract(($363|0),($366|0),($369|0),($372|0))|0);
 $374 = (getTempRet0() | 0);
 $375 = $33;
 $376 = $375;
 HEAP32[$376>>2] = $373;
 $377 = (($375) + 4)|0;
 $378 = $377;
 HEAP32[$378>>2] = $374;
 $379 = $10;
 $380 = $379;
 $381 = HEAP32[$380>>2]|0;
 $382 = (($379) + 4)|0;
 $383 = $382;
 $384 = HEAP32[$383>>2]|0;
 $385 = $22;
 $386 = $385;
 $387 = HEAP32[$386>>2]|0;
 $388 = (($385) + 4)|0;
 $389 = $388;
 $390 = HEAP32[$389>>2]|0;
 $391 = (_i64Subtract(($381|0),($384|0),($387|0),($390|0))|0);
 $392 = (getTempRet0() | 0);
 $393 = $34;
 $394 = $393;
 HEAP32[$394>>2] = $391;
 $395 = (($393) + 4)|0;
 $396 = $395;
 HEAP32[$396>>2] = $392;
 $397 = $11;
 $398 = $397;
 $399 = HEAP32[$398>>2]|0;
 $400 = (($397) + 4)|0;
 $401 = $400;
 $402 = HEAP32[$401>>2]|0;
 $403 = $23;
 $404 = $403;
 $405 = HEAP32[$404>>2]|0;
 $406 = (($403) + 4)|0;
 $407 = $406;
 $408 = HEAP32[$407>>2]|0;
 $409 = (_i64Subtract(($399|0),($402|0),($405|0),($408|0))|0);
 $410 = (getTempRet0() | 0);
 $411 = $35;
 $412 = $411;
 HEAP32[$412>>2] = $409;
 $413 = (($411) + 4)|0;
 $414 = $413;
 HEAP32[$414>>2] = $410;
 $415 = $12;
 $416 = $415;
 $417 = HEAP32[$416>>2]|0;
 $418 = (($415) + 4)|0;
 $419 = $418;
 $420 = HEAP32[$419>>2]|0;
 $421 = $24;
 $422 = $421;
 $423 = HEAP32[$422>>2]|0;
 $424 = (($421) + 4)|0;
 $425 = $424;
 $426 = HEAP32[$425>>2]|0;
 $427 = (_i64Subtract(($417|0),($420|0),($423|0),($426|0))|0);
 $428 = (getTempRet0() | 0);
 $429 = $36;
 $430 = $429;
 HEAP32[$430>>2] = $427;
 $431 = (($429) + 4)|0;
 $432 = $431;
 HEAP32[$432>>2] = $428;
 $433 = $13;
 $434 = $433;
 $435 = HEAP32[$434>>2]|0;
 $436 = (($433) + 4)|0;
 $437 = $436;
 $438 = HEAP32[$437>>2]|0;
 $439 = $25;
 $440 = $439;
 $441 = HEAP32[$440>>2]|0;
 $442 = (($439) + 4)|0;
 $443 = $442;
 $444 = HEAP32[$443>>2]|0;
 $445 = (_i64Subtract(($435|0),($438|0),($441|0),($444|0))|0);
 $446 = (getTempRet0() | 0);
 $447 = $37;
 $448 = $447;
 HEAP32[$448>>2] = $445;
 $449 = (($447) + 4)|0;
 $450 = $449;
 HEAP32[$450>>2] = $446;
 $451 = $14;
 $452 = $451;
 $453 = HEAP32[$452>>2]|0;
 $454 = (($451) + 4)|0;
 $455 = $454;
 $456 = HEAP32[$455>>2]|0;
 $457 = $26;
 $458 = $457;
 $459 = HEAP32[$458>>2]|0;
 $460 = (($457) + 4)|0;
 $461 = $460;
 $462 = HEAP32[$461>>2]|0;
 $463 = (_i64Subtract(($453|0),($456|0),($459|0),($462|0))|0);
 $464 = (getTempRet0() | 0);
 $465 = $38;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $15;
 $470 = $469;
 $471 = HEAP32[$470>>2]|0;
 $472 = (($469) + 4)|0;
 $473 = $472;
 $474 = HEAP32[$473>>2]|0;
 $475 = $27;
 $476 = $475;
 $477 = HEAP32[$476>>2]|0;
 $478 = (($475) + 4)|0;
 $479 = $478;
 $480 = HEAP32[$479>>2]|0;
 $481 = (_i64Subtract(($471|0),($474|0),($477|0),($480|0))|0);
 $482 = (getTempRet0() | 0);
 $483 = $39;
 $484 = $483;
 HEAP32[$484>>2] = $481;
 $485 = (($483) + 4)|0;
 $486 = $485;
 HEAP32[$486>>2] = $482;
 $487 = $16;
 $488 = $487;
 $489 = HEAP32[$488>>2]|0;
 $490 = (($487) + 4)|0;
 $491 = $490;
 $492 = HEAP32[$491>>2]|0;
 $493 = $28;
 $494 = $493;
 $495 = HEAP32[$494>>2]|0;
 $496 = (($493) + 4)|0;
 $497 = $496;
 $498 = HEAP32[$497>>2]|0;
 $499 = (_i64Subtract(($489|0),($492|0),($495|0),($498|0))|0);
 $500 = (getTempRet0() | 0);
 $501 = $40;
 $502 = $501;
 HEAP32[$502>>2] = $499;
 $503 = (($501) + 4)|0;
 $504 = $503;
 HEAP32[$504>>2] = $500;
 $505 = $17;
 $506 = $505;
 $507 = HEAP32[$506>>2]|0;
 $508 = (($505) + 4)|0;
 $509 = $508;
 $510 = HEAP32[$509>>2]|0;
 $511 = $29;
 $512 = $511;
 $513 = HEAP32[$512>>2]|0;
 $514 = (($511) + 4)|0;
 $515 = $514;
 $516 = HEAP32[$515>>2]|0;
 $517 = (_i64Subtract(($507|0),($510|0),($513|0),($516|0))|0);
 $518 = (getTempRet0() | 0);
 $519 = $41;
 $520 = $519;
 HEAP32[$520>>2] = $517;
 $521 = (($519) + 4)|0;
 $522 = $521;
 HEAP32[$522>>2] = $518;
 $523 = $42;
 $524 = $523;
 HEAP32[$524>>2] = 0;
 $525 = (($523) + 4)|0;
 $526 = $525;
 HEAP32[$526>>2] = 0;
 $527 = $30;
 $528 = $527;
 $529 = HEAP32[$528>>2]|0;
 $530 = (($527) + 4)|0;
 $531 = $530;
 $532 = HEAP32[$531>>2]|0;
 $533 = (_i64Add(($529|0),($532|0),1048576,0)|0);
 $534 = (getTempRet0() | 0);
 $535 = (_bitshift64Ashr(($533|0),($534|0),21)|0);
 $536 = (getTempRet0() | 0);
 $537 = $43;
 $538 = $537;
 HEAP32[$538>>2] = $535;
 $539 = (($537) + 4)|0;
 $540 = $539;
 HEAP32[$540>>2] = $536;
 $541 = $43;
 $542 = $541;
 $543 = HEAP32[$542>>2]|0;
 $544 = (($541) + 4)|0;
 $545 = $544;
 $546 = HEAP32[$545>>2]|0;
 $547 = $31;
 $548 = $547;
 $549 = HEAP32[$548>>2]|0;
 $550 = (($547) + 4)|0;
 $551 = $550;
 $552 = HEAP32[$551>>2]|0;
 $553 = (_i64Add(($549|0),($552|0),($543|0),($546|0))|0);
 $554 = (getTempRet0() | 0);
 $555 = $31;
 $556 = $555;
 HEAP32[$556>>2] = $553;
 $557 = (($555) + 4)|0;
 $558 = $557;
 HEAP32[$558>>2] = $554;
 $559 = $43;
 $560 = $559;
 $561 = HEAP32[$560>>2]|0;
 $562 = (($559) + 4)|0;
 $563 = $562;
 $564 = HEAP32[$563>>2]|0;
 $565 = (_bitshift64Shl(($561|0),($564|0),21)|0);
 $566 = (getTempRet0() | 0);
 $567 = $30;
 $568 = $567;
 $569 = HEAP32[$568>>2]|0;
 $570 = (($567) + 4)|0;
 $571 = $570;
 $572 = HEAP32[$571>>2]|0;
 $573 = (_i64Subtract(($569|0),($572|0),($565|0),($566|0))|0);
 $574 = (getTempRet0() | 0);
 $575 = $30;
 $576 = $575;
 HEAP32[$576>>2] = $573;
 $577 = (($575) + 4)|0;
 $578 = $577;
 HEAP32[$578>>2] = $574;
 $579 = $32;
 $580 = $579;
 $581 = HEAP32[$580>>2]|0;
 $582 = (($579) + 4)|0;
 $583 = $582;
 $584 = HEAP32[$583>>2]|0;
 $585 = (_i64Add(($581|0),($584|0),1048576,0)|0);
 $586 = (getTempRet0() | 0);
 $587 = (_bitshift64Ashr(($585|0),($586|0),21)|0);
 $588 = (getTempRet0() | 0);
 $589 = $45;
 $590 = $589;
 HEAP32[$590>>2] = $587;
 $591 = (($589) + 4)|0;
 $592 = $591;
 HEAP32[$592>>2] = $588;
 $593 = $45;
 $594 = $593;
 $595 = HEAP32[$594>>2]|0;
 $596 = (($593) + 4)|0;
 $597 = $596;
 $598 = HEAP32[$597>>2]|0;
 $599 = $33;
 $600 = $599;
 $601 = HEAP32[$600>>2]|0;
 $602 = (($599) + 4)|0;
 $603 = $602;
 $604 = HEAP32[$603>>2]|0;
 $605 = (_i64Add(($601|0),($604|0),($595|0),($598|0))|0);
 $606 = (getTempRet0() | 0);
 $607 = $33;
 $608 = $607;
 HEAP32[$608>>2] = $605;
 $609 = (($607) + 4)|0;
 $610 = $609;
 HEAP32[$610>>2] = $606;
 $611 = $45;
 $612 = $611;
 $613 = HEAP32[$612>>2]|0;
 $614 = (($611) + 4)|0;
 $615 = $614;
 $616 = HEAP32[$615>>2]|0;
 $617 = (_bitshift64Shl(($613|0),($616|0),21)|0);
 $618 = (getTempRet0() | 0);
 $619 = $32;
 $620 = $619;
 $621 = HEAP32[$620>>2]|0;
 $622 = (($619) + 4)|0;
 $623 = $622;
 $624 = HEAP32[$623>>2]|0;
 $625 = (_i64Subtract(($621|0),($624|0),($617|0),($618|0))|0);
 $626 = (getTempRet0() | 0);
 $627 = $32;
 $628 = $627;
 HEAP32[$628>>2] = $625;
 $629 = (($627) + 4)|0;
 $630 = $629;
 HEAP32[$630>>2] = $626;
 $631 = $34;
 $632 = $631;
 $633 = HEAP32[$632>>2]|0;
 $634 = (($631) + 4)|0;
 $635 = $634;
 $636 = HEAP32[$635>>2]|0;
 $637 = (_i64Add(($633|0),($636|0),1048576,0)|0);
 $638 = (getTempRet0() | 0);
 $639 = (_bitshift64Ashr(($637|0),($638|0),21)|0);
 $640 = (getTempRet0() | 0);
 $641 = $47;
 $642 = $641;
 HEAP32[$642>>2] = $639;
 $643 = (($641) + 4)|0;
 $644 = $643;
 HEAP32[$644>>2] = $640;
 $645 = $47;
 $646 = $645;
 $647 = HEAP32[$646>>2]|0;
 $648 = (($645) + 4)|0;
 $649 = $648;
 $650 = HEAP32[$649>>2]|0;
 $651 = $35;
 $652 = $651;
 $653 = HEAP32[$652>>2]|0;
 $654 = (($651) + 4)|0;
 $655 = $654;
 $656 = HEAP32[$655>>2]|0;
 $657 = (_i64Add(($653|0),($656|0),($647|0),($650|0))|0);
 $658 = (getTempRet0() | 0);
 $659 = $35;
 $660 = $659;
 HEAP32[$660>>2] = $657;
 $661 = (($659) + 4)|0;
 $662 = $661;
 HEAP32[$662>>2] = $658;
 $663 = $47;
 $664 = $663;
 $665 = HEAP32[$664>>2]|0;
 $666 = (($663) + 4)|0;
 $667 = $666;
 $668 = HEAP32[$667>>2]|0;
 $669 = (_bitshift64Shl(($665|0),($668|0),21)|0);
 $670 = (getTempRet0() | 0);
 $671 = $34;
 $672 = $671;
 $673 = HEAP32[$672>>2]|0;
 $674 = (($671) + 4)|0;
 $675 = $674;
 $676 = HEAP32[$675>>2]|0;
 $677 = (_i64Subtract(($673|0),($676|0),($669|0),($670|0))|0);
 $678 = (getTempRet0() | 0);
 $679 = $34;
 $680 = $679;
 HEAP32[$680>>2] = $677;
 $681 = (($679) + 4)|0;
 $682 = $681;
 HEAP32[$682>>2] = $678;
 $683 = $36;
 $684 = $683;
 $685 = HEAP32[$684>>2]|0;
 $686 = (($683) + 4)|0;
 $687 = $686;
 $688 = HEAP32[$687>>2]|0;
 $689 = (_i64Add(($685|0),($688|0),1048576,0)|0);
 $690 = (getTempRet0() | 0);
 $691 = (_bitshift64Ashr(($689|0),($690|0),21)|0);
 $692 = (getTempRet0() | 0);
 $693 = $49;
 $694 = $693;
 HEAP32[$694>>2] = $691;
 $695 = (($693) + 4)|0;
 $696 = $695;
 HEAP32[$696>>2] = $692;
 $697 = $49;
 $698 = $697;
 $699 = HEAP32[$698>>2]|0;
 $700 = (($697) + 4)|0;
 $701 = $700;
 $702 = HEAP32[$701>>2]|0;
 $703 = $37;
 $704 = $703;
 $705 = HEAP32[$704>>2]|0;
 $706 = (($703) + 4)|0;
 $707 = $706;
 $708 = HEAP32[$707>>2]|0;
 $709 = (_i64Add(($705|0),($708|0),($699|0),($702|0))|0);
 $710 = (getTempRet0() | 0);
 $711 = $37;
 $712 = $711;
 HEAP32[$712>>2] = $709;
 $713 = (($711) + 4)|0;
 $714 = $713;
 HEAP32[$714>>2] = $710;
 $715 = $49;
 $716 = $715;
 $717 = HEAP32[$716>>2]|0;
 $718 = (($715) + 4)|0;
 $719 = $718;
 $720 = HEAP32[$719>>2]|0;
 $721 = (_bitshift64Shl(($717|0),($720|0),21)|0);
 $722 = (getTempRet0() | 0);
 $723 = $36;
 $724 = $723;
 $725 = HEAP32[$724>>2]|0;
 $726 = (($723) + 4)|0;
 $727 = $726;
 $728 = HEAP32[$727>>2]|0;
 $729 = (_i64Subtract(($725|0),($728|0),($721|0),($722|0))|0);
 $730 = (getTempRet0() | 0);
 $731 = $36;
 $732 = $731;
 HEAP32[$732>>2] = $729;
 $733 = (($731) + 4)|0;
 $734 = $733;
 HEAP32[$734>>2] = $730;
 $735 = $38;
 $736 = $735;
 $737 = HEAP32[$736>>2]|0;
 $738 = (($735) + 4)|0;
 $739 = $738;
 $740 = HEAP32[$739>>2]|0;
 $741 = (_i64Add(($737|0),($740|0),1048576,0)|0);
 $742 = (getTempRet0() | 0);
 $743 = (_bitshift64Ashr(($741|0),($742|0),21)|0);
 $744 = (getTempRet0() | 0);
 $745 = $51;
 $746 = $745;
 HEAP32[$746>>2] = $743;
 $747 = (($745) + 4)|0;
 $748 = $747;
 HEAP32[$748>>2] = $744;
 $749 = $51;
 $750 = $749;
 $751 = HEAP32[$750>>2]|0;
 $752 = (($749) + 4)|0;
 $753 = $752;
 $754 = HEAP32[$753>>2]|0;
 $755 = $39;
 $756 = $755;
 $757 = HEAP32[$756>>2]|0;
 $758 = (($755) + 4)|0;
 $759 = $758;
 $760 = HEAP32[$759>>2]|0;
 $761 = (_i64Add(($757|0),($760|0),($751|0),($754|0))|0);
 $762 = (getTempRet0() | 0);
 $763 = $39;
 $764 = $763;
 HEAP32[$764>>2] = $761;
 $765 = (($763) + 4)|0;
 $766 = $765;
 HEAP32[$766>>2] = $762;
 $767 = $51;
 $768 = $767;
 $769 = HEAP32[$768>>2]|0;
 $770 = (($767) + 4)|0;
 $771 = $770;
 $772 = HEAP32[$771>>2]|0;
 $773 = (_bitshift64Shl(($769|0),($772|0),21)|0);
 $774 = (getTempRet0() | 0);
 $775 = $38;
 $776 = $775;
 $777 = HEAP32[$776>>2]|0;
 $778 = (($775) + 4)|0;
 $779 = $778;
 $780 = HEAP32[$779>>2]|0;
 $781 = (_i64Subtract(($777|0),($780|0),($773|0),($774|0))|0);
 $782 = (getTempRet0() | 0);
 $783 = $38;
 $784 = $783;
 HEAP32[$784>>2] = $781;
 $785 = (($783) + 4)|0;
 $786 = $785;
 HEAP32[$786>>2] = $782;
 $787 = $40;
 $788 = $787;
 $789 = HEAP32[$788>>2]|0;
 $790 = (($787) + 4)|0;
 $791 = $790;
 $792 = HEAP32[$791>>2]|0;
 $793 = (_i64Add(($789|0),($792|0),1048576,0)|0);
 $794 = (getTempRet0() | 0);
 $795 = (_bitshift64Ashr(($793|0),($794|0),21)|0);
 $796 = (getTempRet0() | 0);
 $797 = $53;
 $798 = $797;
 HEAP32[$798>>2] = $795;
 $799 = (($797) + 4)|0;
 $800 = $799;
 HEAP32[$800>>2] = $796;
 $801 = $53;
 $802 = $801;
 $803 = HEAP32[$802>>2]|0;
 $804 = (($801) + 4)|0;
 $805 = $804;
 $806 = HEAP32[$805>>2]|0;
 $807 = $41;
 $808 = $807;
 $809 = HEAP32[$808>>2]|0;
 $810 = (($807) + 4)|0;
 $811 = $810;
 $812 = HEAP32[$811>>2]|0;
 $813 = (_i64Add(($809|0),($812|0),($803|0),($806|0))|0);
 $814 = (getTempRet0() | 0);
 $815 = $41;
 $816 = $815;
 HEAP32[$816>>2] = $813;
 $817 = (($815) + 4)|0;
 $818 = $817;
 HEAP32[$818>>2] = $814;
 $819 = $53;
 $820 = $819;
 $821 = HEAP32[$820>>2]|0;
 $822 = (($819) + 4)|0;
 $823 = $822;
 $824 = HEAP32[$823>>2]|0;
 $825 = (_bitshift64Shl(($821|0),($824|0),21)|0);
 $826 = (getTempRet0() | 0);
 $827 = $40;
 $828 = $827;
 $829 = HEAP32[$828>>2]|0;
 $830 = (($827) + 4)|0;
 $831 = $830;
 $832 = HEAP32[$831>>2]|0;
 $833 = (_i64Subtract(($829|0),($832|0),($825|0),($826|0))|0);
 $834 = (getTempRet0() | 0);
 $835 = $40;
 $836 = $835;
 HEAP32[$836>>2] = $833;
 $837 = (($835) + 4)|0;
 $838 = $837;
 HEAP32[$838>>2] = $834;
 $839 = $31;
 $840 = $839;
 $841 = HEAP32[$840>>2]|0;
 $842 = (($839) + 4)|0;
 $843 = $842;
 $844 = HEAP32[$843>>2]|0;
 $845 = (_i64Add(($841|0),($844|0),1048576,0)|0);
 $846 = (getTempRet0() | 0);
 $847 = (_bitshift64Ashr(($845|0),($846|0),21)|0);
 $848 = (getTempRet0() | 0);
 $849 = $44;
 $850 = $849;
 HEAP32[$850>>2] = $847;
 $851 = (($849) + 4)|0;
 $852 = $851;
 HEAP32[$852>>2] = $848;
 $853 = $44;
 $854 = $853;
 $855 = HEAP32[$854>>2]|0;
 $856 = (($853) + 4)|0;
 $857 = $856;
 $858 = HEAP32[$857>>2]|0;
 $859 = $32;
 $860 = $859;
 $861 = HEAP32[$860>>2]|0;
 $862 = (($859) + 4)|0;
 $863 = $862;
 $864 = HEAP32[$863>>2]|0;
 $865 = (_i64Add(($861|0),($864|0),($855|0),($858|0))|0);
 $866 = (getTempRet0() | 0);
 $867 = $32;
 $868 = $867;
 HEAP32[$868>>2] = $865;
 $869 = (($867) + 4)|0;
 $870 = $869;
 HEAP32[$870>>2] = $866;
 $871 = $44;
 $872 = $871;
 $873 = HEAP32[$872>>2]|0;
 $874 = (($871) + 4)|0;
 $875 = $874;
 $876 = HEAP32[$875>>2]|0;
 $877 = (_bitshift64Shl(($873|0),($876|0),21)|0);
 $878 = (getTempRet0() | 0);
 $879 = $31;
 $880 = $879;
 $881 = HEAP32[$880>>2]|0;
 $882 = (($879) + 4)|0;
 $883 = $882;
 $884 = HEAP32[$883>>2]|0;
 $885 = (_i64Subtract(($881|0),($884|0),($877|0),($878|0))|0);
 $886 = (getTempRet0() | 0);
 $887 = $31;
 $888 = $887;
 HEAP32[$888>>2] = $885;
 $889 = (($887) + 4)|0;
 $890 = $889;
 HEAP32[$890>>2] = $886;
 $891 = $33;
 $892 = $891;
 $893 = HEAP32[$892>>2]|0;
 $894 = (($891) + 4)|0;
 $895 = $894;
 $896 = HEAP32[$895>>2]|0;
 $897 = (_i64Add(($893|0),($896|0),1048576,0)|0);
 $898 = (getTempRet0() | 0);
 $899 = (_bitshift64Ashr(($897|0),($898|0),21)|0);
 $900 = (getTempRet0() | 0);
 $901 = $46;
 $902 = $901;
 HEAP32[$902>>2] = $899;
 $903 = (($901) + 4)|0;
 $904 = $903;
 HEAP32[$904>>2] = $900;
 $905 = $46;
 $906 = $905;
 $907 = HEAP32[$906>>2]|0;
 $908 = (($905) + 4)|0;
 $909 = $908;
 $910 = HEAP32[$909>>2]|0;
 $911 = $34;
 $912 = $911;
 $913 = HEAP32[$912>>2]|0;
 $914 = (($911) + 4)|0;
 $915 = $914;
 $916 = HEAP32[$915>>2]|0;
 $917 = (_i64Add(($913|0),($916|0),($907|0),($910|0))|0);
 $918 = (getTempRet0() | 0);
 $919 = $34;
 $920 = $919;
 HEAP32[$920>>2] = $917;
 $921 = (($919) + 4)|0;
 $922 = $921;
 HEAP32[$922>>2] = $918;
 $923 = $46;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (_bitshift64Shl(($925|0),($928|0),21)|0);
 $930 = (getTempRet0() | 0);
 $931 = $33;
 $932 = $931;
 $933 = HEAP32[$932>>2]|0;
 $934 = (($931) + 4)|0;
 $935 = $934;
 $936 = HEAP32[$935>>2]|0;
 $937 = (_i64Subtract(($933|0),($936|0),($929|0),($930|0))|0);
 $938 = (getTempRet0() | 0);
 $939 = $33;
 $940 = $939;
 HEAP32[$940>>2] = $937;
 $941 = (($939) + 4)|0;
 $942 = $941;
 HEAP32[$942>>2] = $938;
 $943 = $35;
 $944 = $943;
 $945 = HEAP32[$944>>2]|0;
 $946 = (($943) + 4)|0;
 $947 = $946;
 $948 = HEAP32[$947>>2]|0;
 $949 = (_i64Add(($945|0),($948|0),1048576,0)|0);
 $950 = (getTempRet0() | 0);
 $951 = (_bitshift64Ashr(($949|0),($950|0),21)|0);
 $952 = (getTempRet0() | 0);
 $953 = $48;
 $954 = $953;
 HEAP32[$954>>2] = $951;
 $955 = (($953) + 4)|0;
 $956 = $955;
 HEAP32[$956>>2] = $952;
 $957 = $48;
 $958 = $957;
 $959 = HEAP32[$958>>2]|0;
 $960 = (($957) + 4)|0;
 $961 = $960;
 $962 = HEAP32[$961>>2]|0;
 $963 = $36;
 $964 = $963;
 $965 = HEAP32[$964>>2]|0;
 $966 = (($963) + 4)|0;
 $967 = $966;
 $968 = HEAP32[$967>>2]|0;
 $969 = (_i64Add(($965|0),($968|0),($959|0),($962|0))|0);
 $970 = (getTempRet0() | 0);
 $971 = $36;
 $972 = $971;
 HEAP32[$972>>2] = $969;
 $973 = (($971) + 4)|0;
 $974 = $973;
 HEAP32[$974>>2] = $970;
 $975 = $48;
 $976 = $975;
 $977 = HEAP32[$976>>2]|0;
 $978 = (($975) + 4)|0;
 $979 = $978;
 $980 = HEAP32[$979>>2]|0;
 $981 = (_bitshift64Shl(($977|0),($980|0),21)|0);
 $982 = (getTempRet0() | 0);
 $983 = $35;
 $984 = $983;
 $985 = HEAP32[$984>>2]|0;
 $986 = (($983) + 4)|0;
 $987 = $986;
 $988 = HEAP32[$987>>2]|0;
 $989 = (_i64Subtract(($985|0),($988|0),($981|0),($982|0))|0);
 $990 = (getTempRet0() | 0);
 $991 = $35;
 $992 = $991;
 HEAP32[$992>>2] = $989;
 $993 = (($991) + 4)|0;
 $994 = $993;
 HEAP32[$994>>2] = $990;
 $995 = $37;
 $996 = $995;
 $997 = HEAP32[$996>>2]|0;
 $998 = (($995) + 4)|0;
 $999 = $998;
 $1000 = HEAP32[$999>>2]|0;
 $1001 = (_i64Add(($997|0),($1000|0),1048576,0)|0);
 $1002 = (getTempRet0() | 0);
 $1003 = (_bitshift64Ashr(($1001|0),($1002|0),21)|0);
 $1004 = (getTempRet0() | 0);
 $1005 = $50;
 $1006 = $1005;
 HEAP32[$1006>>2] = $1003;
 $1007 = (($1005) + 4)|0;
 $1008 = $1007;
 HEAP32[$1008>>2] = $1004;
 $1009 = $50;
 $1010 = $1009;
 $1011 = HEAP32[$1010>>2]|0;
 $1012 = (($1009) + 4)|0;
 $1013 = $1012;
 $1014 = HEAP32[$1013>>2]|0;
 $1015 = $38;
 $1016 = $1015;
 $1017 = HEAP32[$1016>>2]|0;
 $1018 = (($1015) + 4)|0;
 $1019 = $1018;
 $1020 = HEAP32[$1019>>2]|0;
 $1021 = (_i64Add(($1017|0),($1020|0),($1011|0),($1014|0))|0);
 $1022 = (getTempRet0() | 0);
 $1023 = $38;
 $1024 = $1023;
 HEAP32[$1024>>2] = $1021;
 $1025 = (($1023) + 4)|0;
 $1026 = $1025;
 HEAP32[$1026>>2] = $1022;
 $1027 = $50;
 $1028 = $1027;
 $1029 = HEAP32[$1028>>2]|0;
 $1030 = (($1027) + 4)|0;
 $1031 = $1030;
 $1032 = HEAP32[$1031>>2]|0;
 $1033 = (_bitshift64Shl(($1029|0),($1032|0),21)|0);
 $1034 = (getTempRet0() | 0);
 $1035 = $37;
 $1036 = $1035;
 $1037 = HEAP32[$1036>>2]|0;
 $1038 = (($1035) + 4)|0;
 $1039 = $1038;
 $1040 = HEAP32[$1039>>2]|0;
 $1041 = (_i64Subtract(($1037|0),($1040|0),($1033|0),($1034|0))|0);
 $1042 = (getTempRet0() | 0);
 $1043 = $37;
 $1044 = $1043;
 HEAP32[$1044>>2] = $1041;
 $1045 = (($1043) + 4)|0;
 $1046 = $1045;
 HEAP32[$1046>>2] = $1042;
 $1047 = $39;
 $1048 = $1047;
 $1049 = HEAP32[$1048>>2]|0;
 $1050 = (($1047) + 4)|0;
 $1051 = $1050;
 $1052 = HEAP32[$1051>>2]|0;
 $1053 = (_i64Add(($1049|0),($1052|0),1048576,0)|0);
 $1054 = (getTempRet0() | 0);
 $1055 = (_bitshift64Ashr(($1053|0),($1054|0),21)|0);
 $1056 = (getTempRet0() | 0);
 $1057 = $52;
 $1058 = $1057;
 HEAP32[$1058>>2] = $1055;
 $1059 = (($1057) + 4)|0;
 $1060 = $1059;
 HEAP32[$1060>>2] = $1056;
 $1061 = $52;
 $1062 = $1061;
 $1063 = HEAP32[$1062>>2]|0;
 $1064 = (($1061) + 4)|0;
 $1065 = $1064;
 $1066 = HEAP32[$1065>>2]|0;
 $1067 = $40;
 $1068 = $1067;
 $1069 = HEAP32[$1068>>2]|0;
 $1070 = (($1067) + 4)|0;
 $1071 = $1070;
 $1072 = HEAP32[$1071>>2]|0;
 $1073 = (_i64Add(($1069|0),($1072|0),($1063|0),($1066|0))|0);
 $1074 = (getTempRet0() | 0);
 $1075 = $40;
 $1076 = $1075;
 HEAP32[$1076>>2] = $1073;
 $1077 = (($1075) + 4)|0;
 $1078 = $1077;
 HEAP32[$1078>>2] = $1074;
 $1079 = $52;
 $1080 = $1079;
 $1081 = HEAP32[$1080>>2]|0;
 $1082 = (($1079) + 4)|0;
 $1083 = $1082;
 $1084 = HEAP32[$1083>>2]|0;
 $1085 = (_bitshift64Shl(($1081|0),($1084|0),21)|0);
 $1086 = (getTempRet0() | 0);
 $1087 = $39;
 $1088 = $1087;
 $1089 = HEAP32[$1088>>2]|0;
 $1090 = (($1087) + 4)|0;
 $1091 = $1090;
 $1092 = HEAP32[$1091>>2]|0;
 $1093 = (_i64Subtract(($1089|0),($1092|0),($1085|0),($1086|0))|0);
 $1094 = (getTempRet0() | 0);
 $1095 = $39;
 $1096 = $1095;
 HEAP32[$1096>>2] = $1093;
 $1097 = (($1095) + 4)|0;
 $1098 = $1097;
 HEAP32[$1098>>2] = $1094;
 $1099 = $41;
 $1100 = $1099;
 $1101 = HEAP32[$1100>>2]|0;
 $1102 = (($1099) + 4)|0;
 $1103 = $1102;
 $1104 = HEAP32[$1103>>2]|0;
 $1105 = (_i64Add(($1101|0),($1104|0),1048576,0)|0);
 $1106 = (getTempRet0() | 0);
 $1107 = (_bitshift64Ashr(($1105|0),($1106|0),21)|0);
 $1108 = (getTempRet0() | 0);
 $1109 = $54;
 $1110 = $1109;
 HEAP32[$1110>>2] = $1107;
 $1111 = (($1109) + 4)|0;
 $1112 = $1111;
 HEAP32[$1112>>2] = $1108;
 $1113 = $54;
 $1114 = $1113;
 $1115 = HEAP32[$1114>>2]|0;
 $1116 = (($1113) + 4)|0;
 $1117 = $1116;
 $1118 = HEAP32[$1117>>2]|0;
 $1119 = $42;
 $1120 = $1119;
 $1121 = HEAP32[$1120>>2]|0;
 $1122 = (($1119) + 4)|0;
 $1123 = $1122;
 $1124 = HEAP32[$1123>>2]|0;
 $1125 = (_i64Add(($1121|0),($1124|0),($1115|0),($1118|0))|0);
 $1126 = (getTempRet0() | 0);
 $1127 = $42;
 $1128 = $1127;
 HEAP32[$1128>>2] = $1125;
 $1129 = (($1127) + 4)|0;
 $1130 = $1129;
 HEAP32[$1130>>2] = $1126;
 $1131 = $54;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = (_bitshift64Shl(($1133|0),($1136|0),21)|0);
 $1138 = (getTempRet0() | 0);
 $1139 = $41;
 $1140 = $1139;
 $1141 = HEAP32[$1140>>2]|0;
 $1142 = (($1139) + 4)|0;
 $1143 = $1142;
 $1144 = HEAP32[$1143>>2]|0;
 $1145 = (_i64Subtract(($1141|0),($1144|0),($1137|0),($1138|0))|0);
 $1146 = (getTempRet0() | 0);
 $1147 = $41;
 $1148 = $1147;
 HEAP32[$1148>>2] = $1145;
 $1149 = (($1147) + 4)|0;
 $1150 = $1149;
 HEAP32[$1150>>2] = $1146;
 $1151 = $42;
 $1152 = $1151;
 $1153 = HEAP32[$1152>>2]|0;
 $1154 = (($1151) + 4)|0;
 $1155 = $1154;
 $1156 = HEAP32[$1155>>2]|0;
 $1157 = (___muldi3(($1153|0),($1156|0),666643,0)|0);
 $1158 = (getTempRet0() | 0);
 $1159 = $30;
 $1160 = $1159;
 $1161 = HEAP32[$1160>>2]|0;
 $1162 = (($1159) + 4)|0;
 $1163 = $1162;
 $1164 = HEAP32[$1163>>2]|0;
 $1165 = (_i64Add(($1161|0),($1164|0),($1157|0),($1158|0))|0);
 $1166 = (getTempRet0() | 0);
 $1167 = $30;
 $1168 = $1167;
 HEAP32[$1168>>2] = $1165;
 $1169 = (($1167) + 4)|0;
 $1170 = $1169;
 HEAP32[$1170>>2] = $1166;
 $1171 = $42;
 $1172 = $1171;
 $1173 = HEAP32[$1172>>2]|0;
 $1174 = (($1171) + 4)|0;
 $1175 = $1174;
 $1176 = HEAP32[$1175>>2]|0;
 $1177 = (___muldi3(($1173|0),($1176|0),470296,0)|0);
 $1178 = (getTempRet0() | 0);
 $1179 = $31;
 $1180 = $1179;
 $1181 = HEAP32[$1180>>2]|0;
 $1182 = (($1179) + 4)|0;
 $1183 = $1182;
 $1184 = HEAP32[$1183>>2]|0;
 $1185 = (_i64Add(($1181|0),($1184|0),($1177|0),($1178|0))|0);
 $1186 = (getTempRet0() | 0);
 $1187 = $31;
 $1188 = $1187;
 HEAP32[$1188>>2] = $1185;
 $1189 = (($1187) + 4)|0;
 $1190 = $1189;
 HEAP32[$1190>>2] = $1186;
 $1191 = $42;
 $1192 = $1191;
 $1193 = HEAP32[$1192>>2]|0;
 $1194 = (($1191) + 4)|0;
 $1195 = $1194;
 $1196 = HEAP32[$1195>>2]|0;
 $1197 = (___muldi3(($1193|0),($1196|0),654183,0)|0);
 $1198 = (getTempRet0() | 0);
 $1199 = $32;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (_i64Add(($1201|0),($1204|0),($1197|0),($1198|0))|0);
 $1206 = (getTempRet0() | 0);
 $1207 = $32;
 $1208 = $1207;
 HEAP32[$1208>>2] = $1205;
 $1209 = (($1207) + 4)|0;
 $1210 = $1209;
 HEAP32[$1210>>2] = $1206;
 $1211 = $42;
 $1212 = $1211;
 $1213 = HEAP32[$1212>>2]|0;
 $1214 = (($1211) + 4)|0;
 $1215 = $1214;
 $1216 = HEAP32[$1215>>2]|0;
 $1217 = (___muldi3(($1213|0),($1216|0),997805,0)|0);
 $1218 = (getTempRet0() | 0);
 $1219 = $33;
 $1220 = $1219;
 $1221 = HEAP32[$1220>>2]|0;
 $1222 = (($1219) + 4)|0;
 $1223 = $1222;
 $1224 = HEAP32[$1223>>2]|0;
 $1225 = (_i64Subtract(($1221|0),($1224|0),($1217|0),($1218|0))|0);
 $1226 = (getTempRet0() | 0);
 $1227 = $33;
 $1228 = $1227;
 HEAP32[$1228>>2] = $1225;
 $1229 = (($1227) + 4)|0;
 $1230 = $1229;
 HEAP32[$1230>>2] = $1226;
 $1231 = $42;
 $1232 = $1231;
 $1233 = HEAP32[$1232>>2]|0;
 $1234 = (($1231) + 4)|0;
 $1235 = $1234;
 $1236 = HEAP32[$1235>>2]|0;
 $1237 = (___muldi3(($1233|0),($1236|0),136657,0)|0);
 $1238 = (getTempRet0() | 0);
 $1239 = $34;
 $1240 = $1239;
 $1241 = HEAP32[$1240>>2]|0;
 $1242 = (($1239) + 4)|0;
 $1243 = $1242;
 $1244 = HEAP32[$1243>>2]|0;
 $1245 = (_i64Add(($1241|0),($1244|0),($1237|0),($1238|0))|0);
 $1246 = (getTempRet0() | 0);
 $1247 = $34;
 $1248 = $1247;
 HEAP32[$1248>>2] = $1245;
 $1249 = (($1247) + 4)|0;
 $1250 = $1249;
 HEAP32[$1250>>2] = $1246;
 $1251 = $42;
 $1252 = $1251;
 $1253 = HEAP32[$1252>>2]|0;
 $1254 = (($1251) + 4)|0;
 $1255 = $1254;
 $1256 = HEAP32[$1255>>2]|0;
 $1257 = (___muldi3(($1253|0),($1256|0),683901,0)|0);
 $1258 = (getTempRet0() | 0);
 $1259 = $35;
 $1260 = $1259;
 $1261 = HEAP32[$1260>>2]|0;
 $1262 = (($1259) + 4)|0;
 $1263 = $1262;
 $1264 = HEAP32[$1263>>2]|0;
 $1265 = (_i64Subtract(($1261|0),($1264|0),($1257|0),($1258|0))|0);
 $1266 = (getTempRet0() | 0);
 $1267 = $35;
 $1268 = $1267;
 HEAP32[$1268>>2] = $1265;
 $1269 = (($1267) + 4)|0;
 $1270 = $1269;
 HEAP32[$1270>>2] = $1266;
 $1271 = $42;
 $1272 = $1271;
 HEAP32[$1272>>2] = 0;
 $1273 = (($1271) + 4)|0;
 $1274 = $1273;
 HEAP32[$1274>>2] = 0;
 $1275 = $30;
 $1276 = $1275;
 $1277 = HEAP32[$1276>>2]|0;
 $1278 = (($1275) + 4)|0;
 $1279 = $1278;
 $1280 = HEAP32[$1279>>2]|0;
 $1281 = (_bitshift64Ashr(($1277|0),($1280|0),21)|0);
 $1282 = (getTempRet0() | 0);
 $1283 = $43;
 $1284 = $1283;
 HEAP32[$1284>>2] = $1281;
 $1285 = (($1283) + 4)|0;
 $1286 = $1285;
 HEAP32[$1286>>2] = $1282;
 $1287 = $43;
 $1288 = $1287;
 $1289 = HEAP32[$1288>>2]|0;
 $1290 = (($1287) + 4)|0;
 $1291 = $1290;
 $1292 = HEAP32[$1291>>2]|0;
 $1293 = $31;
 $1294 = $1293;
 $1295 = HEAP32[$1294>>2]|0;
 $1296 = (($1293) + 4)|0;
 $1297 = $1296;
 $1298 = HEAP32[$1297>>2]|0;
 $1299 = (_i64Add(($1295|0),($1298|0),($1289|0),($1292|0))|0);
 $1300 = (getTempRet0() | 0);
 $1301 = $31;
 $1302 = $1301;
 HEAP32[$1302>>2] = $1299;
 $1303 = (($1301) + 4)|0;
 $1304 = $1303;
 HEAP32[$1304>>2] = $1300;
 $1305 = $43;
 $1306 = $1305;
 $1307 = HEAP32[$1306>>2]|0;
 $1308 = (($1305) + 4)|0;
 $1309 = $1308;
 $1310 = HEAP32[$1309>>2]|0;
 $1311 = (_bitshift64Shl(($1307|0),($1310|0),21)|0);
 $1312 = (getTempRet0() | 0);
 $1313 = $30;
 $1314 = $1313;
 $1315 = HEAP32[$1314>>2]|0;
 $1316 = (($1313) + 4)|0;
 $1317 = $1316;
 $1318 = HEAP32[$1317>>2]|0;
 $1319 = (_i64Subtract(($1315|0),($1318|0),($1311|0),($1312|0))|0);
 $1320 = (getTempRet0() | 0);
 $1321 = $30;
 $1322 = $1321;
 HEAP32[$1322>>2] = $1319;
 $1323 = (($1321) + 4)|0;
 $1324 = $1323;
 HEAP32[$1324>>2] = $1320;
 $1325 = $31;
 $1326 = $1325;
 $1327 = HEAP32[$1326>>2]|0;
 $1328 = (($1325) + 4)|0;
 $1329 = $1328;
 $1330 = HEAP32[$1329>>2]|0;
 $1331 = (_bitshift64Ashr(($1327|0),($1330|0),21)|0);
 $1332 = (getTempRet0() | 0);
 $1333 = $44;
 $1334 = $1333;
 HEAP32[$1334>>2] = $1331;
 $1335 = (($1333) + 4)|0;
 $1336 = $1335;
 HEAP32[$1336>>2] = $1332;
 $1337 = $44;
 $1338 = $1337;
 $1339 = HEAP32[$1338>>2]|0;
 $1340 = (($1337) + 4)|0;
 $1341 = $1340;
 $1342 = HEAP32[$1341>>2]|0;
 $1343 = $32;
 $1344 = $1343;
 $1345 = HEAP32[$1344>>2]|0;
 $1346 = (($1343) + 4)|0;
 $1347 = $1346;
 $1348 = HEAP32[$1347>>2]|0;
 $1349 = (_i64Add(($1345|0),($1348|0),($1339|0),($1342|0))|0);
 $1350 = (getTempRet0() | 0);
 $1351 = $32;
 $1352 = $1351;
 HEAP32[$1352>>2] = $1349;
 $1353 = (($1351) + 4)|0;
 $1354 = $1353;
 HEAP32[$1354>>2] = $1350;
 $1355 = $44;
 $1356 = $1355;
 $1357 = HEAP32[$1356>>2]|0;
 $1358 = (($1355) + 4)|0;
 $1359 = $1358;
 $1360 = HEAP32[$1359>>2]|0;
 $1361 = (_bitshift64Shl(($1357|0),($1360|0),21)|0);
 $1362 = (getTempRet0() | 0);
 $1363 = $31;
 $1364 = $1363;
 $1365 = HEAP32[$1364>>2]|0;
 $1366 = (($1363) + 4)|0;
 $1367 = $1366;
 $1368 = HEAP32[$1367>>2]|0;
 $1369 = (_i64Subtract(($1365|0),($1368|0),($1361|0),($1362|0))|0);
 $1370 = (getTempRet0() | 0);
 $1371 = $31;
 $1372 = $1371;
 HEAP32[$1372>>2] = $1369;
 $1373 = (($1371) + 4)|0;
 $1374 = $1373;
 HEAP32[$1374>>2] = $1370;
 $1375 = $32;
 $1376 = $1375;
 $1377 = HEAP32[$1376>>2]|0;
 $1378 = (($1375) + 4)|0;
 $1379 = $1378;
 $1380 = HEAP32[$1379>>2]|0;
 $1381 = (_bitshift64Ashr(($1377|0),($1380|0),21)|0);
 $1382 = (getTempRet0() | 0);
 $1383 = $45;
 $1384 = $1383;
 HEAP32[$1384>>2] = $1381;
 $1385 = (($1383) + 4)|0;
 $1386 = $1385;
 HEAP32[$1386>>2] = $1382;
 $1387 = $45;
 $1388 = $1387;
 $1389 = HEAP32[$1388>>2]|0;
 $1390 = (($1387) + 4)|0;
 $1391 = $1390;
 $1392 = HEAP32[$1391>>2]|0;
 $1393 = $33;
 $1394 = $1393;
 $1395 = HEAP32[$1394>>2]|0;
 $1396 = (($1393) + 4)|0;
 $1397 = $1396;
 $1398 = HEAP32[$1397>>2]|0;
 $1399 = (_i64Add(($1395|0),($1398|0),($1389|0),($1392|0))|0);
 $1400 = (getTempRet0() | 0);
 $1401 = $33;
 $1402 = $1401;
 HEAP32[$1402>>2] = $1399;
 $1403 = (($1401) + 4)|0;
 $1404 = $1403;
 HEAP32[$1404>>2] = $1400;
 $1405 = $45;
 $1406 = $1405;
 $1407 = HEAP32[$1406>>2]|0;
 $1408 = (($1405) + 4)|0;
 $1409 = $1408;
 $1410 = HEAP32[$1409>>2]|0;
 $1411 = (_bitshift64Shl(($1407|0),($1410|0),21)|0);
 $1412 = (getTempRet0() | 0);
 $1413 = $32;
 $1414 = $1413;
 $1415 = HEAP32[$1414>>2]|0;
 $1416 = (($1413) + 4)|0;
 $1417 = $1416;
 $1418 = HEAP32[$1417>>2]|0;
 $1419 = (_i64Subtract(($1415|0),($1418|0),($1411|0),($1412|0))|0);
 $1420 = (getTempRet0() | 0);
 $1421 = $32;
 $1422 = $1421;
 HEAP32[$1422>>2] = $1419;
 $1423 = (($1421) + 4)|0;
 $1424 = $1423;
 HEAP32[$1424>>2] = $1420;
 $1425 = $33;
 $1426 = $1425;
 $1427 = HEAP32[$1426>>2]|0;
 $1428 = (($1425) + 4)|0;
 $1429 = $1428;
 $1430 = HEAP32[$1429>>2]|0;
 $1431 = (_bitshift64Ashr(($1427|0),($1430|0),21)|0);
 $1432 = (getTempRet0() | 0);
 $1433 = $46;
 $1434 = $1433;
 HEAP32[$1434>>2] = $1431;
 $1435 = (($1433) + 4)|0;
 $1436 = $1435;
 HEAP32[$1436>>2] = $1432;
 $1437 = $46;
 $1438 = $1437;
 $1439 = HEAP32[$1438>>2]|0;
 $1440 = (($1437) + 4)|0;
 $1441 = $1440;
 $1442 = HEAP32[$1441>>2]|0;
 $1443 = $34;
 $1444 = $1443;
 $1445 = HEAP32[$1444>>2]|0;
 $1446 = (($1443) + 4)|0;
 $1447 = $1446;
 $1448 = HEAP32[$1447>>2]|0;
 $1449 = (_i64Add(($1445|0),($1448|0),($1439|0),($1442|0))|0);
 $1450 = (getTempRet0() | 0);
 $1451 = $34;
 $1452 = $1451;
 HEAP32[$1452>>2] = $1449;
 $1453 = (($1451) + 4)|0;
 $1454 = $1453;
 HEAP32[$1454>>2] = $1450;
 $1455 = $46;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (($1455) + 4)|0;
 $1459 = $1458;
 $1460 = HEAP32[$1459>>2]|0;
 $1461 = (_bitshift64Shl(($1457|0),($1460|0),21)|0);
 $1462 = (getTempRet0() | 0);
 $1463 = $33;
 $1464 = $1463;
 $1465 = HEAP32[$1464>>2]|0;
 $1466 = (($1463) + 4)|0;
 $1467 = $1466;
 $1468 = HEAP32[$1467>>2]|0;
 $1469 = (_i64Subtract(($1465|0),($1468|0),($1461|0),($1462|0))|0);
 $1470 = (getTempRet0() | 0);
 $1471 = $33;
 $1472 = $1471;
 HEAP32[$1472>>2] = $1469;
 $1473 = (($1471) + 4)|0;
 $1474 = $1473;
 HEAP32[$1474>>2] = $1470;
 $1475 = $34;
 $1476 = $1475;
 $1477 = HEAP32[$1476>>2]|0;
 $1478 = (($1475) + 4)|0;
 $1479 = $1478;
 $1480 = HEAP32[$1479>>2]|0;
 $1481 = (_bitshift64Ashr(($1477|0),($1480|0),21)|0);
 $1482 = (getTempRet0() | 0);
 $1483 = $47;
 $1484 = $1483;
 HEAP32[$1484>>2] = $1481;
 $1485 = (($1483) + 4)|0;
 $1486 = $1485;
 HEAP32[$1486>>2] = $1482;
 $1487 = $47;
 $1488 = $1487;
 $1489 = HEAP32[$1488>>2]|0;
 $1490 = (($1487) + 4)|0;
 $1491 = $1490;
 $1492 = HEAP32[$1491>>2]|0;
 $1493 = $35;
 $1494 = $1493;
 $1495 = HEAP32[$1494>>2]|0;
 $1496 = (($1493) + 4)|0;
 $1497 = $1496;
 $1498 = HEAP32[$1497>>2]|0;
 $1499 = (_i64Add(($1495|0),($1498|0),($1489|0),($1492|0))|0);
 $1500 = (getTempRet0() | 0);
 $1501 = $35;
 $1502 = $1501;
 HEAP32[$1502>>2] = $1499;
 $1503 = (($1501) + 4)|0;
 $1504 = $1503;
 HEAP32[$1504>>2] = $1500;
 $1505 = $47;
 $1506 = $1505;
 $1507 = HEAP32[$1506>>2]|0;
 $1508 = (($1505) + 4)|0;
 $1509 = $1508;
 $1510 = HEAP32[$1509>>2]|0;
 $1511 = (_bitshift64Shl(($1507|0),($1510|0),21)|0);
 $1512 = (getTempRet0() | 0);
 $1513 = $34;
 $1514 = $1513;
 $1515 = HEAP32[$1514>>2]|0;
 $1516 = (($1513) + 4)|0;
 $1517 = $1516;
 $1518 = HEAP32[$1517>>2]|0;
 $1519 = (_i64Subtract(($1515|0),($1518|0),($1511|0),($1512|0))|0);
 $1520 = (getTempRet0() | 0);
 $1521 = $34;
 $1522 = $1521;
 HEAP32[$1522>>2] = $1519;
 $1523 = (($1521) + 4)|0;
 $1524 = $1523;
 HEAP32[$1524>>2] = $1520;
 $1525 = $35;
 $1526 = $1525;
 $1527 = HEAP32[$1526>>2]|0;
 $1528 = (($1525) + 4)|0;
 $1529 = $1528;
 $1530 = HEAP32[$1529>>2]|0;
 $1531 = (_bitshift64Ashr(($1527|0),($1530|0),21)|0);
 $1532 = (getTempRet0() | 0);
 $1533 = $48;
 $1534 = $1533;
 HEAP32[$1534>>2] = $1531;
 $1535 = (($1533) + 4)|0;
 $1536 = $1535;
 HEAP32[$1536>>2] = $1532;
 $1537 = $48;
 $1538 = $1537;
 $1539 = HEAP32[$1538>>2]|0;
 $1540 = (($1537) + 4)|0;
 $1541 = $1540;
 $1542 = HEAP32[$1541>>2]|0;
 $1543 = $36;
 $1544 = $1543;
 $1545 = HEAP32[$1544>>2]|0;
 $1546 = (($1543) + 4)|0;
 $1547 = $1546;
 $1548 = HEAP32[$1547>>2]|0;
 $1549 = (_i64Add(($1545|0),($1548|0),($1539|0),($1542|0))|0);
 $1550 = (getTempRet0() | 0);
 $1551 = $36;
 $1552 = $1551;
 HEAP32[$1552>>2] = $1549;
 $1553 = (($1551) + 4)|0;
 $1554 = $1553;
 HEAP32[$1554>>2] = $1550;
 $1555 = $48;
 $1556 = $1555;
 $1557 = HEAP32[$1556>>2]|0;
 $1558 = (($1555) + 4)|0;
 $1559 = $1558;
 $1560 = HEAP32[$1559>>2]|0;
 $1561 = (_bitshift64Shl(($1557|0),($1560|0),21)|0);
 $1562 = (getTempRet0() | 0);
 $1563 = $35;
 $1564 = $1563;
 $1565 = HEAP32[$1564>>2]|0;
 $1566 = (($1563) + 4)|0;
 $1567 = $1566;
 $1568 = HEAP32[$1567>>2]|0;
 $1569 = (_i64Subtract(($1565|0),($1568|0),($1561|0),($1562|0))|0);
 $1570 = (getTempRet0() | 0);
 $1571 = $35;
 $1572 = $1571;
 HEAP32[$1572>>2] = $1569;
 $1573 = (($1571) + 4)|0;
 $1574 = $1573;
 HEAP32[$1574>>2] = $1570;
 $1575 = $36;
 $1576 = $1575;
 $1577 = HEAP32[$1576>>2]|0;
 $1578 = (($1575) + 4)|0;
 $1579 = $1578;
 $1580 = HEAP32[$1579>>2]|0;
 $1581 = (_bitshift64Ashr(($1577|0),($1580|0),21)|0);
 $1582 = (getTempRet0() | 0);
 $1583 = $49;
 $1584 = $1583;
 HEAP32[$1584>>2] = $1581;
 $1585 = (($1583) + 4)|0;
 $1586 = $1585;
 HEAP32[$1586>>2] = $1582;
 $1587 = $49;
 $1588 = $1587;
 $1589 = HEAP32[$1588>>2]|0;
 $1590 = (($1587) + 4)|0;
 $1591 = $1590;
 $1592 = HEAP32[$1591>>2]|0;
 $1593 = $37;
 $1594 = $1593;
 $1595 = HEAP32[$1594>>2]|0;
 $1596 = (($1593) + 4)|0;
 $1597 = $1596;
 $1598 = HEAP32[$1597>>2]|0;
 $1599 = (_i64Add(($1595|0),($1598|0),($1589|0),($1592|0))|0);
 $1600 = (getTempRet0() | 0);
 $1601 = $37;
 $1602 = $1601;
 HEAP32[$1602>>2] = $1599;
 $1603 = (($1601) + 4)|0;
 $1604 = $1603;
 HEAP32[$1604>>2] = $1600;
 $1605 = $49;
 $1606 = $1605;
 $1607 = HEAP32[$1606>>2]|0;
 $1608 = (($1605) + 4)|0;
 $1609 = $1608;
 $1610 = HEAP32[$1609>>2]|0;
 $1611 = (_bitshift64Shl(($1607|0),($1610|0),21)|0);
 $1612 = (getTempRet0() | 0);
 $1613 = $36;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = (($1613) + 4)|0;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = (_i64Subtract(($1615|0),($1618|0),($1611|0),($1612|0))|0);
 $1620 = (getTempRet0() | 0);
 $1621 = $36;
 $1622 = $1621;
 HEAP32[$1622>>2] = $1619;
 $1623 = (($1621) + 4)|0;
 $1624 = $1623;
 HEAP32[$1624>>2] = $1620;
 $1625 = $37;
 $1626 = $1625;
 $1627 = HEAP32[$1626>>2]|0;
 $1628 = (($1625) + 4)|0;
 $1629 = $1628;
 $1630 = HEAP32[$1629>>2]|0;
 $1631 = (_bitshift64Ashr(($1627|0),($1630|0),21)|0);
 $1632 = (getTempRet0() | 0);
 $1633 = $50;
 $1634 = $1633;
 HEAP32[$1634>>2] = $1631;
 $1635 = (($1633) + 4)|0;
 $1636 = $1635;
 HEAP32[$1636>>2] = $1632;
 $1637 = $50;
 $1638 = $1637;
 $1639 = HEAP32[$1638>>2]|0;
 $1640 = (($1637) + 4)|0;
 $1641 = $1640;
 $1642 = HEAP32[$1641>>2]|0;
 $1643 = $38;
 $1644 = $1643;
 $1645 = HEAP32[$1644>>2]|0;
 $1646 = (($1643) + 4)|0;
 $1647 = $1646;
 $1648 = HEAP32[$1647>>2]|0;
 $1649 = (_i64Add(($1645|0),($1648|0),($1639|0),($1642|0))|0);
 $1650 = (getTempRet0() | 0);
 $1651 = $38;
 $1652 = $1651;
 HEAP32[$1652>>2] = $1649;
 $1653 = (($1651) + 4)|0;
 $1654 = $1653;
 HEAP32[$1654>>2] = $1650;
 $1655 = $50;
 $1656 = $1655;
 $1657 = HEAP32[$1656>>2]|0;
 $1658 = (($1655) + 4)|0;
 $1659 = $1658;
 $1660 = HEAP32[$1659>>2]|0;
 $1661 = (_bitshift64Shl(($1657|0),($1660|0),21)|0);
 $1662 = (getTempRet0() | 0);
 $1663 = $37;
 $1664 = $1663;
 $1665 = HEAP32[$1664>>2]|0;
 $1666 = (($1663) + 4)|0;
 $1667 = $1666;
 $1668 = HEAP32[$1667>>2]|0;
 $1669 = (_i64Subtract(($1665|0),($1668|0),($1661|0),($1662|0))|0);
 $1670 = (getTempRet0() | 0);
 $1671 = $37;
 $1672 = $1671;
 HEAP32[$1672>>2] = $1669;
 $1673 = (($1671) + 4)|0;
 $1674 = $1673;
 HEAP32[$1674>>2] = $1670;
 $1675 = $38;
 $1676 = $1675;
 $1677 = HEAP32[$1676>>2]|0;
 $1678 = (($1675) + 4)|0;
 $1679 = $1678;
 $1680 = HEAP32[$1679>>2]|0;
 $1681 = (_bitshift64Ashr(($1677|0),($1680|0),21)|0);
 $1682 = (getTempRet0() | 0);
 $1683 = $51;
 $1684 = $1683;
 HEAP32[$1684>>2] = $1681;
 $1685 = (($1683) + 4)|0;
 $1686 = $1685;
 HEAP32[$1686>>2] = $1682;
 $1687 = $51;
 $1688 = $1687;
 $1689 = HEAP32[$1688>>2]|0;
 $1690 = (($1687) + 4)|0;
 $1691 = $1690;
 $1692 = HEAP32[$1691>>2]|0;
 $1693 = $39;
 $1694 = $1693;
 $1695 = HEAP32[$1694>>2]|0;
 $1696 = (($1693) + 4)|0;
 $1697 = $1696;
 $1698 = HEAP32[$1697>>2]|0;
 $1699 = (_i64Add(($1695|0),($1698|0),($1689|0),($1692|0))|0);
 $1700 = (getTempRet0() | 0);
 $1701 = $39;
 $1702 = $1701;
 HEAP32[$1702>>2] = $1699;
 $1703 = (($1701) + 4)|0;
 $1704 = $1703;
 HEAP32[$1704>>2] = $1700;
 $1705 = $51;
 $1706 = $1705;
 $1707 = HEAP32[$1706>>2]|0;
 $1708 = (($1705) + 4)|0;
 $1709 = $1708;
 $1710 = HEAP32[$1709>>2]|0;
 $1711 = (_bitshift64Shl(($1707|0),($1710|0),21)|0);
 $1712 = (getTempRet0() | 0);
 $1713 = $38;
 $1714 = $1713;
 $1715 = HEAP32[$1714>>2]|0;
 $1716 = (($1713) + 4)|0;
 $1717 = $1716;
 $1718 = HEAP32[$1717>>2]|0;
 $1719 = (_i64Subtract(($1715|0),($1718|0),($1711|0),($1712|0))|0);
 $1720 = (getTempRet0() | 0);
 $1721 = $38;
 $1722 = $1721;
 HEAP32[$1722>>2] = $1719;
 $1723 = (($1721) + 4)|0;
 $1724 = $1723;
 HEAP32[$1724>>2] = $1720;
 $1725 = $39;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (($1725) + 4)|0;
 $1729 = $1728;
 $1730 = HEAP32[$1729>>2]|0;
 $1731 = (_bitshift64Ashr(($1727|0),($1730|0),21)|0);
 $1732 = (getTempRet0() | 0);
 $1733 = $52;
 $1734 = $1733;
 HEAP32[$1734>>2] = $1731;
 $1735 = (($1733) + 4)|0;
 $1736 = $1735;
 HEAP32[$1736>>2] = $1732;
 $1737 = $52;
 $1738 = $1737;
 $1739 = HEAP32[$1738>>2]|0;
 $1740 = (($1737) + 4)|0;
 $1741 = $1740;
 $1742 = HEAP32[$1741>>2]|0;
 $1743 = $40;
 $1744 = $1743;
 $1745 = HEAP32[$1744>>2]|0;
 $1746 = (($1743) + 4)|0;
 $1747 = $1746;
 $1748 = HEAP32[$1747>>2]|0;
 $1749 = (_i64Add(($1745|0),($1748|0),($1739|0),($1742|0))|0);
 $1750 = (getTempRet0() | 0);
 $1751 = $40;
 $1752 = $1751;
 HEAP32[$1752>>2] = $1749;
 $1753 = (($1751) + 4)|0;
 $1754 = $1753;
 HEAP32[$1754>>2] = $1750;
 $1755 = $52;
 $1756 = $1755;
 $1757 = HEAP32[$1756>>2]|0;
 $1758 = (($1755) + 4)|0;
 $1759 = $1758;
 $1760 = HEAP32[$1759>>2]|0;
 $1761 = (_bitshift64Shl(($1757|0),($1760|0),21)|0);
 $1762 = (getTempRet0() | 0);
 $1763 = $39;
 $1764 = $1763;
 $1765 = HEAP32[$1764>>2]|0;
 $1766 = (($1763) + 4)|0;
 $1767 = $1766;
 $1768 = HEAP32[$1767>>2]|0;
 $1769 = (_i64Subtract(($1765|0),($1768|0),($1761|0),($1762|0))|0);
 $1770 = (getTempRet0() | 0);
 $1771 = $39;
 $1772 = $1771;
 HEAP32[$1772>>2] = $1769;
 $1773 = (($1771) + 4)|0;
 $1774 = $1773;
 HEAP32[$1774>>2] = $1770;
 $1775 = $40;
 $1776 = $1775;
 $1777 = HEAP32[$1776>>2]|0;
 $1778 = (($1775) + 4)|0;
 $1779 = $1778;
 $1780 = HEAP32[$1779>>2]|0;
 $1781 = (_bitshift64Ashr(($1777|0),($1780|0),21)|0);
 $1782 = (getTempRet0() | 0);
 $1783 = $53;
 $1784 = $1783;
 HEAP32[$1784>>2] = $1781;
 $1785 = (($1783) + 4)|0;
 $1786 = $1785;
 HEAP32[$1786>>2] = $1782;
 $1787 = $53;
 $1788 = $1787;
 $1789 = HEAP32[$1788>>2]|0;
 $1790 = (($1787) + 4)|0;
 $1791 = $1790;
 $1792 = HEAP32[$1791>>2]|0;
 $1793 = $41;
 $1794 = $1793;
 $1795 = HEAP32[$1794>>2]|0;
 $1796 = (($1793) + 4)|0;
 $1797 = $1796;
 $1798 = HEAP32[$1797>>2]|0;
 $1799 = (_i64Add(($1795|0),($1798|0),($1789|0),($1792|0))|0);
 $1800 = (getTempRet0() | 0);
 $1801 = $41;
 $1802 = $1801;
 HEAP32[$1802>>2] = $1799;
 $1803 = (($1801) + 4)|0;
 $1804 = $1803;
 HEAP32[$1804>>2] = $1800;
 $1805 = $53;
 $1806 = $1805;
 $1807 = HEAP32[$1806>>2]|0;
 $1808 = (($1805) + 4)|0;
 $1809 = $1808;
 $1810 = HEAP32[$1809>>2]|0;
 $1811 = (_bitshift64Shl(($1807|0),($1810|0),21)|0);
 $1812 = (getTempRet0() | 0);
 $1813 = $40;
 $1814 = $1813;
 $1815 = HEAP32[$1814>>2]|0;
 $1816 = (($1813) + 4)|0;
 $1817 = $1816;
 $1818 = HEAP32[$1817>>2]|0;
 $1819 = (_i64Subtract(($1815|0),($1818|0),($1811|0),($1812|0))|0);
 $1820 = (getTempRet0() | 0);
 $1821 = $40;
 $1822 = $1821;
 HEAP32[$1822>>2] = $1819;
 $1823 = (($1821) + 4)|0;
 $1824 = $1823;
 HEAP32[$1824>>2] = $1820;
 $1825 = $41;
 $1826 = $1825;
 $1827 = HEAP32[$1826>>2]|0;
 $1828 = (($1825) + 4)|0;
 $1829 = $1828;
 $1830 = HEAP32[$1829>>2]|0;
 $1831 = (_bitshift64Ashr(($1827|0),($1830|0),21)|0);
 $1832 = (getTempRet0() | 0);
 $1833 = $54;
 $1834 = $1833;
 HEAP32[$1834>>2] = $1831;
 $1835 = (($1833) + 4)|0;
 $1836 = $1835;
 HEAP32[$1836>>2] = $1832;
 $1837 = $54;
 $1838 = $1837;
 $1839 = HEAP32[$1838>>2]|0;
 $1840 = (($1837) + 4)|0;
 $1841 = $1840;
 $1842 = HEAP32[$1841>>2]|0;
 $1843 = $42;
 $1844 = $1843;
 $1845 = HEAP32[$1844>>2]|0;
 $1846 = (($1843) + 4)|0;
 $1847 = $1846;
 $1848 = HEAP32[$1847>>2]|0;
 $1849 = (_i64Add(($1845|0),($1848|0),($1839|0),($1842|0))|0);
 $1850 = (getTempRet0() | 0);
 $1851 = $42;
 $1852 = $1851;
 HEAP32[$1852>>2] = $1849;
 $1853 = (($1851) + 4)|0;
 $1854 = $1853;
 HEAP32[$1854>>2] = $1850;
 $1855 = $54;
 $1856 = $1855;
 $1857 = HEAP32[$1856>>2]|0;
 $1858 = (($1855) + 4)|0;
 $1859 = $1858;
 $1860 = HEAP32[$1859>>2]|0;
 $1861 = (_bitshift64Shl(($1857|0),($1860|0),21)|0);
 $1862 = (getTempRet0() | 0);
 $1863 = $41;
 $1864 = $1863;
 $1865 = HEAP32[$1864>>2]|0;
 $1866 = (($1863) + 4)|0;
 $1867 = $1866;
 $1868 = HEAP32[$1867>>2]|0;
 $1869 = (_i64Subtract(($1865|0),($1868|0),($1861|0),($1862|0))|0);
 $1870 = (getTempRet0() | 0);
 $1871 = $41;
 $1872 = $1871;
 HEAP32[$1872>>2] = $1869;
 $1873 = (($1871) + 4)|0;
 $1874 = $1873;
 HEAP32[$1874>>2] = $1870;
 $1875 = $42;
 $1876 = $1875;
 $1877 = HEAP32[$1876>>2]|0;
 $1878 = (($1875) + 4)|0;
 $1879 = $1878;
 $1880 = HEAP32[$1879>>2]|0;
 $1881 = (___muldi3(($1877|0),($1880|0),666643,0)|0);
 $1882 = (getTempRet0() | 0);
 $1883 = $30;
 $1884 = $1883;
 $1885 = HEAP32[$1884>>2]|0;
 $1886 = (($1883) + 4)|0;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = (_i64Add(($1885|0),($1888|0),($1881|0),($1882|0))|0);
 $1890 = (getTempRet0() | 0);
 $1891 = $30;
 $1892 = $1891;
 HEAP32[$1892>>2] = $1889;
 $1893 = (($1891) + 4)|0;
 $1894 = $1893;
 HEAP32[$1894>>2] = $1890;
 $1895 = $42;
 $1896 = $1895;
 $1897 = HEAP32[$1896>>2]|0;
 $1898 = (($1895) + 4)|0;
 $1899 = $1898;
 $1900 = HEAP32[$1899>>2]|0;
 $1901 = (___muldi3(($1897|0),($1900|0),470296,0)|0);
 $1902 = (getTempRet0() | 0);
 $1903 = $31;
 $1904 = $1903;
 $1905 = HEAP32[$1904>>2]|0;
 $1906 = (($1903) + 4)|0;
 $1907 = $1906;
 $1908 = HEAP32[$1907>>2]|0;
 $1909 = (_i64Add(($1905|0),($1908|0),($1901|0),($1902|0))|0);
 $1910 = (getTempRet0() | 0);
 $1911 = $31;
 $1912 = $1911;
 HEAP32[$1912>>2] = $1909;
 $1913 = (($1911) + 4)|0;
 $1914 = $1913;
 HEAP32[$1914>>2] = $1910;
 $1915 = $42;
 $1916 = $1915;
 $1917 = HEAP32[$1916>>2]|0;
 $1918 = (($1915) + 4)|0;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = (___muldi3(($1917|0),($1920|0),654183,0)|0);
 $1922 = (getTempRet0() | 0);
 $1923 = $32;
 $1924 = $1923;
 $1925 = HEAP32[$1924>>2]|0;
 $1926 = (($1923) + 4)|0;
 $1927 = $1926;
 $1928 = HEAP32[$1927>>2]|0;
 $1929 = (_i64Add(($1925|0),($1928|0),($1921|0),($1922|0))|0);
 $1930 = (getTempRet0() | 0);
 $1931 = $32;
 $1932 = $1931;
 HEAP32[$1932>>2] = $1929;
 $1933 = (($1931) + 4)|0;
 $1934 = $1933;
 HEAP32[$1934>>2] = $1930;
 $1935 = $42;
 $1936 = $1935;
 $1937 = HEAP32[$1936>>2]|0;
 $1938 = (($1935) + 4)|0;
 $1939 = $1938;
 $1940 = HEAP32[$1939>>2]|0;
 $1941 = (___muldi3(($1937|0),($1940|0),997805,0)|0);
 $1942 = (getTempRet0() | 0);
 $1943 = $33;
 $1944 = $1943;
 $1945 = HEAP32[$1944>>2]|0;
 $1946 = (($1943) + 4)|0;
 $1947 = $1946;
 $1948 = HEAP32[$1947>>2]|0;
 $1949 = (_i64Subtract(($1945|0),($1948|0),($1941|0),($1942|0))|0);
 $1950 = (getTempRet0() | 0);
 $1951 = $33;
 $1952 = $1951;
 HEAP32[$1952>>2] = $1949;
 $1953 = (($1951) + 4)|0;
 $1954 = $1953;
 HEAP32[$1954>>2] = $1950;
 $1955 = $42;
 $1956 = $1955;
 $1957 = HEAP32[$1956>>2]|0;
 $1958 = (($1955) + 4)|0;
 $1959 = $1958;
 $1960 = HEAP32[$1959>>2]|0;
 $1961 = (___muldi3(($1957|0),($1960|0),136657,0)|0);
 $1962 = (getTempRet0() | 0);
 $1963 = $34;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (($1963) + 4)|0;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = (_i64Add(($1965|0),($1968|0),($1961|0),($1962|0))|0);
 $1970 = (getTempRet0() | 0);
 $1971 = $34;
 $1972 = $1971;
 HEAP32[$1972>>2] = $1969;
 $1973 = (($1971) + 4)|0;
 $1974 = $1973;
 HEAP32[$1974>>2] = $1970;
 $1975 = $42;
 $1976 = $1975;
 $1977 = HEAP32[$1976>>2]|0;
 $1978 = (($1975) + 4)|0;
 $1979 = $1978;
 $1980 = HEAP32[$1979>>2]|0;
 $1981 = (___muldi3(($1977|0),($1980|0),683901,0)|0);
 $1982 = (getTempRet0() | 0);
 $1983 = $35;
 $1984 = $1983;
 $1985 = HEAP32[$1984>>2]|0;
 $1986 = (($1983) + 4)|0;
 $1987 = $1986;
 $1988 = HEAP32[$1987>>2]|0;
 $1989 = (_i64Subtract(($1985|0),($1988|0),($1981|0),($1982|0))|0);
 $1990 = (getTempRet0() | 0);
 $1991 = $35;
 $1992 = $1991;
 HEAP32[$1992>>2] = $1989;
 $1993 = (($1991) + 4)|0;
 $1994 = $1993;
 HEAP32[$1994>>2] = $1990;
 $1995 = $30;
 $1996 = $1995;
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = (($1995) + 4)|0;
 $1999 = $1998;
 $2000 = HEAP32[$1999>>2]|0;
 $2001 = (_bitshift64Ashr(($1997|0),($2000|0),21)|0);
 $2002 = (getTempRet0() | 0);
 $2003 = $43;
 $2004 = $2003;
 HEAP32[$2004>>2] = $2001;
 $2005 = (($2003) + 4)|0;
 $2006 = $2005;
 HEAP32[$2006>>2] = $2002;
 $2007 = $43;
 $2008 = $2007;
 $2009 = HEAP32[$2008>>2]|0;
 $2010 = (($2007) + 4)|0;
 $2011 = $2010;
 $2012 = HEAP32[$2011>>2]|0;
 $2013 = $31;
 $2014 = $2013;
 $2015 = HEAP32[$2014>>2]|0;
 $2016 = (($2013) + 4)|0;
 $2017 = $2016;
 $2018 = HEAP32[$2017>>2]|0;
 $2019 = (_i64Add(($2015|0),($2018|0),($2009|0),($2012|0))|0);
 $2020 = (getTempRet0() | 0);
 $2021 = $31;
 $2022 = $2021;
 HEAP32[$2022>>2] = $2019;
 $2023 = (($2021) + 4)|0;
 $2024 = $2023;
 HEAP32[$2024>>2] = $2020;
 $2025 = $43;
 $2026 = $2025;
 $2027 = HEAP32[$2026>>2]|0;
 $2028 = (($2025) + 4)|0;
 $2029 = $2028;
 $2030 = HEAP32[$2029>>2]|0;
 $2031 = (_bitshift64Shl(($2027|0),($2030|0),21)|0);
 $2032 = (getTempRet0() | 0);
 $2033 = $30;
 $2034 = $2033;
 $2035 = HEAP32[$2034>>2]|0;
 $2036 = (($2033) + 4)|0;
 $2037 = $2036;
 $2038 = HEAP32[$2037>>2]|0;
 $2039 = (_i64Subtract(($2035|0),($2038|0),($2031|0),($2032|0))|0);
 $2040 = (getTempRet0() | 0);
 $2041 = $30;
 $2042 = $2041;
 HEAP32[$2042>>2] = $2039;
 $2043 = (($2041) + 4)|0;
 $2044 = $2043;
 HEAP32[$2044>>2] = $2040;
 $2045 = $31;
 $2046 = $2045;
 $2047 = HEAP32[$2046>>2]|0;
 $2048 = (($2045) + 4)|0;
 $2049 = $2048;
 $2050 = HEAP32[$2049>>2]|0;
 $2051 = (_bitshift64Ashr(($2047|0),($2050|0),21)|0);
 $2052 = (getTempRet0() | 0);
 $2053 = $44;
 $2054 = $2053;
 HEAP32[$2054>>2] = $2051;
 $2055 = (($2053) + 4)|0;
 $2056 = $2055;
 HEAP32[$2056>>2] = $2052;
 $2057 = $44;
 $2058 = $2057;
 $2059 = HEAP32[$2058>>2]|0;
 $2060 = (($2057) + 4)|0;
 $2061 = $2060;
 $2062 = HEAP32[$2061>>2]|0;
 $2063 = $32;
 $2064 = $2063;
 $2065 = HEAP32[$2064>>2]|0;
 $2066 = (($2063) + 4)|0;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = (_i64Add(($2065|0),($2068|0),($2059|0),($2062|0))|0);
 $2070 = (getTempRet0() | 0);
 $2071 = $32;
 $2072 = $2071;
 HEAP32[$2072>>2] = $2069;
 $2073 = (($2071) + 4)|0;
 $2074 = $2073;
 HEAP32[$2074>>2] = $2070;
 $2075 = $44;
 $2076 = $2075;
 $2077 = HEAP32[$2076>>2]|0;
 $2078 = (($2075) + 4)|0;
 $2079 = $2078;
 $2080 = HEAP32[$2079>>2]|0;
 $2081 = (_bitshift64Shl(($2077|0),($2080|0),21)|0);
 $2082 = (getTempRet0() | 0);
 $2083 = $31;
 $2084 = $2083;
 $2085 = HEAP32[$2084>>2]|0;
 $2086 = (($2083) + 4)|0;
 $2087 = $2086;
 $2088 = HEAP32[$2087>>2]|0;
 $2089 = (_i64Subtract(($2085|0),($2088|0),($2081|0),($2082|0))|0);
 $2090 = (getTempRet0() | 0);
 $2091 = $31;
 $2092 = $2091;
 HEAP32[$2092>>2] = $2089;
 $2093 = (($2091) + 4)|0;
 $2094 = $2093;
 HEAP32[$2094>>2] = $2090;
 $2095 = $32;
 $2096 = $2095;
 $2097 = HEAP32[$2096>>2]|0;
 $2098 = (($2095) + 4)|0;
 $2099 = $2098;
 $2100 = HEAP32[$2099>>2]|0;
 $2101 = (_bitshift64Ashr(($2097|0),($2100|0),21)|0);
 $2102 = (getTempRet0() | 0);
 $2103 = $45;
 $2104 = $2103;
 HEAP32[$2104>>2] = $2101;
 $2105 = (($2103) + 4)|0;
 $2106 = $2105;
 HEAP32[$2106>>2] = $2102;
 $2107 = $45;
 $2108 = $2107;
 $2109 = HEAP32[$2108>>2]|0;
 $2110 = (($2107) + 4)|0;
 $2111 = $2110;
 $2112 = HEAP32[$2111>>2]|0;
 $2113 = $33;
 $2114 = $2113;
 $2115 = HEAP32[$2114>>2]|0;
 $2116 = (($2113) + 4)|0;
 $2117 = $2116;
 $2118 = HEAP32[$2117>>2]|0;
 $2119 = (_i64Add(($2115|0),($2118|0),($2109|0),($2112|0))|0);
 $2120 = (getTempRet0() | 0);
 $2121 = $33;
 $2122 = $2121;
 HEAP32[$2122>>2] = $2119;
 $2123 = (($2121) + 4)|0;
 $2124 = $2123;
 HEAP32[$2124>>2] = $2120;
 $2125 = $45;
 $2126 = $2125;
 $2127 = HEAP32[$2126>>2]|0;
 $2128 = (($2125) + 4)|0;
 $2129 = $2128;
 $2130 = HEAP32[$2129>>2]|0;
 $2131 = (_bitshift64Shl(($2127|0),($2130|0),21)|0);
 $2132 = (getTempRet0() | 0);
 $2133 = $32;
 $2134 = $2133;
 $2135 = HEAP32[$2134>>2]|0;
 $2136 = (($2133) + 4)|0;
 $2137 = $2136;
 $2138 = HEAP32[$2137>>2]|0;
 $2139 = (_i64Subtract(($2135|0),($2138|0),($2131|0),($2132|0))|0);
 $2140 = (getTempRet0() | 0);
 $2141 = $32;
 $2142 = $2141;
 HEAP32[$2142>>2] = $2139;
 $2143 = (($2141) + 4)|0;
 $2144 = $2143;
 HEAP32[$2144>>2] = $2140;
 $2145 = $33;
 $2146 = $2145;
 $2147 = HEAP32[$2146>>2]|0;
 $2148 = (($2145) + 4)|0;
 $2149 = $2148;
 $2150 = HEAP32[$2149>>2]|0;
 $2151 = (_bitshift64Ashr(($2147|0),($2150|0),21)|0);
 $2152 = (getTempRet0() | 0);
 $2153 = $46;
 $2154 = $2153;
 HEAP32[$2154>>2] = $2151;
 $2155 = (($2153) + 4)|0;
 $2156 = $2155;
 HEAP32[$2156>>2] = $2152;
 $2157 = $46;
 $2158 = $2157;
 $2159 = HEAP32[$2158>>2]|0;
 $2160 = (($2157) + 4)|0;
 $2161 = $2160;
 $2162 = HEAP32[$2161>>2]|0;
 $2163 = $34;
 $2164 = $2163;
 $2165 = HEAP32[$2164>>2]|0;
 $2166 = (($2163) + 4)|0;
 $2167 = $2166;
 $2168 = HEAP32[$2167>>2]|0;
 $2169 = (_i64Add(($2165|0),($2168|0),($2159|0),($2162|0))|0);
 $2170 = (getTempRet0() | 0);
 $2171 = $34;
 $2172 = $2171;
 HEAP32[$2172>>2] = $2169;
 $2173 = (($2171) + 4)|0;
 $2174 = $2173;
 HEAP32[$2174>>2] = $2170;
 $2175 = $46;
 $2176 = $2175;
 $2177 = HEAP32[$2176>>2]|0;
 $2178 = (($2175) + 4)|0;
 $2179 = $2178;
 $2180 = HEAP32[$2179>>2]|0;
 $2181 = (_bitshift64Shl(($2177|0),($2180|0),21)|0);
 $2182 = (getTempRet0() | 0);
 $2183 = $33;
 $2184 = $2183;
 $2185 = HEAP32[$2184>>2]|0;
 $2186 = (($2183) + 4)|0;
 $2187 = $2186;
 $2188 = HEAP32[$2187>>2]|0;
 $2189 = (_i64Subtract(($2185|0),($2188|0),($2181|0),($2182|0))|0);
 $2190 = (getTempRet0() | 0);
 $2191 = $33;
 $2192 = $2191;
 HEAP32[$2192>>2] = $2189;
 $2193 = (($2191) + 4)|0;
 $2194 = $2193;
 HEAP32[$2194>>2] = $2190;
 $2195 = $34;
 $2196 = $2195;
 $2197 = HEAP32[$2196>>2]|0;
 $2198 = (($2195) + 4)|0;
 $2199 = $2198;
 $2200 = HEAP32[$2199>>2]|0;
 $2201 = (_bitshift64Ashr(($2197|0),($2200|0),21)|0);
 $2202 = (getTempRet0() | 0);
 $2203 = $47;
 $2204 = $2203;
 HEAP32[$2204>>2] = $2201;
 $2205 = (($2203) + 4)|0;
 $2206 = $2205;
 HEAP32[$2206>>2] = $2202;
 $2207 = $47;
 $2208 = $2207;
 $2209 = HEAP32[$2208>>2]|0;
 $2210 = (($2207) + 4)|0;
 $2211 = $2210;
 $2212 = HEAP32[$2211>>2]|0;
 $2213 = $35;
 $2214 = $2213;
 $2215 = HEAP32[$2214>>2]|0;
 $2216 = (($2213) + 4)|0;
 $2217 = $2216;
 $2218 = HEAP32[$2217>>2]|0;
 $2219 = (_i64Add(($2215|0),($2218|0),($2209|0),($2212|0))|0);
 $2220 = (getTempRet0() | 0);
 $2221 = $35;
 $2222 = $2221;
 HEAP32[$2222>>2] = $2219;
 $2223 = (($2221) + 4)|0;
 $2224 = $2223;
 HEAP32[$2224>>2] = $2220;
 $2225 = $47;
 $2226 = $2225;
 $2227 = HEAP32[$2226>>2]|0;
 $2228 = (($2225) + 4)|0;
 $2229 = $2228;
 $2230 = HEAP32[$2229>>2]|0;
 $2231 = (_bitshift64Shl(($2227|0),($2230|0),21)|0);
 $2232 = (getTempRet0() | 0);
 $2233 = $34;
 $2234 = $2233;
 $2235 = HEAP32[$2234>>2]|0;
 $2236 = (($2233) + 4)|0;
 $2237 = $2236;
 $2238 = HEAP32[$2237>>2]|0;
 $2239 = (_i64Subtract(($2235|0),($2238|0),($2231|0),($2232|0))|0);
 $2240 = (getTempRet0() | 0);
 $2241 = $34;
 $2242 = $2241;
 HEAP32[$2242>>2] = $2239;
 $2243 = (($2241) + 4)|0;
 $2244 = $2243;
 HEAP32[$2244>>2] = $2240;
 $2245 = $35;
 $2246 = $2245;
 $2247 = HEAP32[$2246>>2]|0;
 $2248 = (($2245) + 4)|0;
 $2249 = $2248;
 $2250 = HEAP32[$2249>>2]|0;
 $2251 = (_bitshift64Ashr(($2247|0),($2250|0),21)|0);
 $2252 = (getTempRet0() | 0);
 $2253 = $48;
 $2254 = $2253;
 HEAP32[$2254>>2] = $2251;
 $2255 = (($2253) + 4)|0;
 $2256 = $2255;
 HEAP32[$2256>>2] = $2252;
 $2257 = $48;
 $2258 = $2257;
 $2259 = HEAP32[$2258>>2]|0;
 $2260 = (($2257) + 4)|0;
 $2261 = $2260;
 $2262 = HEAP32[$2261>>2]|0;
 $2263 = $36;
 $2264 = $2263;
 $2265 = HEAP32[$2264>>2]|0;
 $2266 = (($2263) + 4)|0;
 $2267 = $2266;
 $2268 = HEAP32[$2267>>2]|0;
 $2269 = (_i64Add(($2265|0),($2268|0),($2259|0),($2262|0))|0);
 $2270 = (getTempRet0() | 0);
 $2271 = $36;
 $2272 = $2271;
 HEAP32[$2272>>2] = $2269;
 $2273 = (($2271) + 4)|0;
 $2274 = $2273;
 HEAP32[$2274>>2] = $2270;
 $2275 = $48;
 $2276 = $2275;
 $2277 = HEAP32[$2276>>2]|0;
 $2278 = (($2275) + 4)|0;
 $2279 = $2278;
 $2280 = HEAP32[$2279>>2]|0;
 $2281 = (_bitshift64Shl(($2277|0),($2280|0),21)|0);
 $2282 = (getTempRet0() | 0);
 $2283 = $35;
 $2284 = $2283;
 $2285 = HEAP32[$2284>>2]|0;
 $2286 = (($2283) + 4)|0;
 $2287 = $2286;
 $2288 = HEAP32[$2287>>2]|0;
 $2289 = (_i64Subtract(($2285|0),($2288|0),($2281|0),($2282|0))|0);
 $2290 = (getTempRet0() | 0);
 $2291 = $35;
 $2292 = $2291;
 HEAP32[$2292>>2] = $2289;
 $2293 = (($2291) + 4)|0;
 $2294 = $2293;
 HEAP32[$2294>>2] = $2290;
 $2295 = $36;
 $2296 = $2295;
 $2297 = HEAP32[$2296>>2]|0;
 $2298 = (($2295) + 4)|0;
 $2299 = $2298;
 $2300 = HEAP32[$2299>>2]|0;
 $2301 = (_bitshift64Ashr(($2297|0),($2300|0),21)|0);
 $2302 = (getTempRet0() | 0);
 $2303 = $49;
 $2304 = $2303;
 HEAP32[$2304>>2] = $2301;
 $2305 = (($2303) + 4)|0;
 $2306 = $2305;
 HEAP32[$2306>>2] = $2302;
 $2307 = $49;
 $2308 = $2307;
 $2309 = HEAP32[$2308>>2]|0;
 $2310 = (($2307) + 4)|0;
 $2311 = $2310;
 $2312 = HEAP32[$2311>>2]|0;
 $2313 = $37;
 $2314 = $2313;
 $2315 = HEAP32[$2314>>2]|0;
 $2316 = (($2313) + 4)|0;
 $2317 = $2316;
 $2318 = HEAP32[$2317>>2]|0;
 $2319 = (_i64Add(($2315|0),($2318|0),($2309|0),($2312|0))|0);
 $2320 = (getTempRet0() | 0);
 $2321 = $37;
 $2322 = $2321;
 HEAP32[$2322>>2] = $2319;
 $2323 = (($2321) + 4)|0;
 $2324 = $2323;
 HEAP32[$2324>>2] = $2320;
 $2325 = $49;
 $2326 = $2325;
 $2327 = HEAP32[$2326>>2]|0;
 $2328 = (($2325) + 4)|0;
 $2329 = $2328;
 $2330 = HEAP32[$2329>>2]|0;
 $2331 = (_bitshift64Shl(($2327|0),($2330|0),21)|0);
 $2332 = (getTempRet0() | 0);
 $2333 = $36;
 $2334 = $2333;
 $2335 = HEAP32[$2334>>2]|0;
 $2336 = (($2333) + 4)|0;
 $2337 = $2336;
 $2338 = HEAP32[$2337>>2]|0;
 $2339 = (_i64Subtract(($2335|0),($2338|0),($2331|0),($2332|0))|0);
 $2340 = (getTempRet0() | 0);
 $2341 = $36;
 $2342 = $2341;
 HEAP32[$2342>>2] = $2339;
 $2343 = (($2341) + 4)|0;
 $2344 = $2343;
 HEAP32[$2344>>2] = $2340;
 $2345 = $37;
 $2346 = $2345;
 $2347 = HEAP32[$2346>>2]|0;
 $2348 = (($2345) + 4)|0;
 $2349 = $2348;
 $2350 = HEAP32[$2349>>2]|0;
 $2351 = (_bitshift64Ashr(($2347|0),($2350|0),21)|0);
 $2352 = (getTempRet0() | 0);
 $2353 = $50;
 $2354 = $2353;
 HEAP32[$2354>>2] = $2351;
 $2355 = (($2353) + 4)|0;
 $2356 = $2355;
 HEAP32[$2356>>2] = $2352;
 $2357 = $50;
 $2358 = $2357;
 $2359 = HEAP32[$2358>>2]|0;
 $2360 = (($2357) + 4)|0;
 $2361 = $2360;
 $2362 = HEAP32[$2361>>2]|0;
 $2363 = $38;
 $2364 = $2363;
 $2365 = HEAP32[$2364>>2]|0;
 $2366 = (($2363) + 4)|0;
 $2367 = $2366;
 $2368 = HEAP32[$2367>>2]|0;
 $2369 = (_i64Add(($2365|0),($2368|0),($2359|0),($2362|0))|0);
 $2370 = (getTempRet0() | 0);
 $2371 = $38;
 $2372 = $2371;
 HEAP32[$2372>>2] = $2369;
 $2373 = (($2371) + 4)|0;
 $2374 = $2373;
 HEAP32[$2374>>2] = $2370;
 $2375 = $50;
 $2376 = $2375;
 $2377 = HEAP32[$2376>>2]|0;
 $2378 = (($2375) + 4)|0;
 $2379 = $2378;
 $2380 = HEAP32[$2379>>2]|0;
 $2381 = (_bitshift64Shl(($2377|0),($2380|0),21)|0);
 $2382 = (getTempRet0() | 0);
 $2383 = $37;
 $2384 = $2383;
 $2385 = HEAP32[$2384>>2]|0;
 $2386 = (($2383) + 4)|0;
 $2387 = $2386;
 $2388 = HEAP32[$2387>>2]|0;
 $2389 = (_i64Subtract(($2385|0),($2388|0),($2381|0),($2382|0))|0);
 $2390 = (getTempRet0() | 0);
 $2391 = $37;
 $2392 = $2391;
 HEAP32[$2392>>2] = $2389;
 $2393 = (($2391) + 4)|0;
 $2394 = $2393;
 HEAP32[$2394>>2] = $2390;
 $2395 = $38;
 $2396 = $2395;
 $2397 = HEAP32[$2396>>2]|0;
 $2398 = (($2395) + 4)|0;
 $2399 = $2398;
 $2400 = HEAP32[$2399>>2]|0;
 $2401 = (_bitshift64Ashr(($2397|0),($2400|0),21)|0);
 $2402 = (getTempRet0() | 0);
 $2403 = $51;
 $2404 = $2403;
 HEAP32[$2404>>2] = $2401;
 $2405 = (($2403) + 4)|0;
 $2406 = $2405;
 HEAP32[$2406>>2] = $2402;
 $2407 = $51;
 $2408 = $2407;
 $2409 = HEAP32[$2408>>2]|0;
 $2410 = (($2407) + 4)|0;
 $2411 = $2410;
 $2412 = HEAP32[$2411>>2]|0;
 $2413 = $39;
 $2414 = $2413;
 $2415 = HEAP32[$2414>>2]|0;
 $2416 = (($2413) + 4)|0;
 $2417 = $2416;
 $2418 = HEAP32[$2417>>2]|0;
 $2419 = (_i64Add(($2415|0),($2418|0),($2409|0),($2412|0))|0);
 $2420 = (getTempRet0() | 0);
 $2421 = $39;
 $2422 = $2421;
 HEAP32[$2422>>2] = $2419;
 $2423 = (($2421) + 4)|0;
 $2424 = $2423;
 HEAP32[$2424>>2] = $2420;
 $2425 = $51;
 $2426 = $2425;
 $2427 = HEAP32[$2426>>2]|0;
 $2428 = (($2425) + 4)|0;
 $2429 = $2428;
 $2430 = HEAP32[$2429>>2]|0;
 $2431 = (_bitshift64Shl(($2427|0),($2430|0),21)|0);
 $2432 = (getTempRet0() | 0);
 $2433 = $38;
 $2434 = $2433;
 $2435 = HEAP32[$2434>>2]|0;
 $2436 = (($2433) + 4)|0;
 $2437 = $2436;
 $2438 = HEAP32[$2437>>2]|0;
 $2439 = (_i64Subtract(($2435|0),($2438|0),($2431|0),($2432|0))|0);
 $2440 = (getTempRet0() | 0);
 $2441 = $38;
 $2442 = $2441;
 HEAP32[$2442>>2] = $2439;
 $2443 = (($2441) + 4)|0;
 $2444 = $2443;
 HEAP32[$2444>>2] = $2440;
 $2445 = $39;
 $2446 = $2445;
 $2447 = HEAP32[$2446>>2]|0;
 $2448 = (($2445) + 4)|0;
 $2449 = $2448;
 $2450 = HEAP32[$2449>>2]|0;
 $2451 = (_bitshift64Ashr(($2447|0),($2450|0),21)|0);
 $2452 = (getTempRet0() | 0);
 $2453 = $52;
 $2454 = $2453;
 HEAP32[$2454>>2] = $2451;
 $2455 = (($2453) + 4)|0;
 $2456 = $2455;
 HEAP32[$2456>>2] = $2452;
 $2457 = $52;
 $2458 = $2457;
 $2459 = HEAP32[$2458>>2]|0;
 $2460 = (($2457) + 4)|0;
 $2461 = $2460;
 $2462 = HEAP32[$2461>>2]|0;
 $2463 = $40;
 $2464 = $2463;
 $2465 = HEAP32[$2464>>2]|0;
 $2466 = (($2463) + 4)|0;
 $2467 = $2466;
 $2468 = HEAP32[$2467>>2]|0;
 $2469 = (_i64Add(($2465|0),($2468|0),($2459|0),($2462|0))|0);
 $2470 = (getTempRet0() | 0);
 $2471 = $40;
 $2472 = $2471;
 HEAP32[$2472>>2] = $2469;
 $2473 = (($2471) + 4)|0;
 $2474 = $2473;
 HEAP32[$2474>>2] = $2470;
 $2475 = $52;
 $2476 = $2475;
 $2477 = HEAP32[$2476>>2]|0;
 $2478 = (($2475) + 4)|0;
 $2479 = $2478;
 $2480 = HEAP32[$2479>>2]|0;
 $2481 = (_bitshift64Shl(($2477|0),($2480|0),21)|0);
 $2482 = (getTempRet0() | 0);
 $2483 = $39;
 $2484 = $2483;
 $2485 = HEAP32[$2484>>2]|0;
 $2486 = (($2483) + 4)|0;
 $2487 = $2486;
 $2488 = HEAP32[$2487>>2]|0;
 $2489 = (_i64Subtract(($2485|0),($2488|0),($2481|0),($2482|0))|0);
 $2490 = (getTempRet0() | 0);
 $2491 = $39;
 $2492 = $2491;
 HEAP32[$2492>>2] = $2489;
 $2493 = (($2491) + 4)|0;
 $2494 = $2493;
 HEAP32[$2494>>2] = $2490;
 $2495 = $40;
 $2496 = $2495;
 $2497 = HEAP32[$2496>>2]|0;
 $2498 = (($2495) + 4)|0;
 $2499 = $2498;
 $2500 = HEAP32[$2499>>2]|0;
 $2501 = (_bitshift64Ashr(($2497|0),($2500|0),21)|0);
 $2502 = (getTempRet0() | 0);
 $2503 = $53;
 $2504 = $2503;
 HEAP32[$2504>>2] = $2501;
 $2505 = (($2503) + 4)|0;
 $2506 = $2505;
 HEAP32[$2506>>2] = $2502;
 $2507 = $53;
 $2508 = $2507;
 $2509 = HEAP32[$2508>>2]|0;
 $2510 = (($2507) + 4)|0;
 $2511 = $2510;
 $2512 = HEAP32[$2511>>2]|0;
 $2513 = $41;
 $2514 = $2513;
 $2515 = HEAP32[$2514>>2]|0;
 $2516 = (($2513) + 4)|0;
 $2517 = $2516;
 $2518 = HEAP32[$2517>>2]|0;
 $2519 = (_i64Add(($2515|0),($2518|0),($2509|0),($2512|0))|0);
 $2520 = (getTempRet0() | 0);
 $2521 = $41;
 $2522 = $2521;
 HEAP32[$2522>>2] = $2519;
 $2523 = (($2521) + 4)|0;
 $2524 = $2523;
 HEAP32[$2524>>2] = $2520;
 $2525 = $53;
 $2526 = $2525;
 $2527 = HEAP32[$2526>>2]|0;
 $2528 = (($2525) + 4)|0;
 $2529 = $2528;
 $2530 = HEAP32[$2529>>2]|0;
 $2531 = (_bitshift64Shl(($2527|0),($2530|0),21)|0);
 $2532 = (getTempRet0() | 0);
 $2533 = $40;
 $2534 = $2533;
 $2535 = HEAP32[$2534>>2]|0;
 $2536 = (($2533) + 4)|0;
 $2537 = $2536;
 $2538 = HEAP32[$2537>>2]|0;
 $2539 = (_i64Subtract(($2535|0),($2538|0),($2531|0),($2532|0))|0);
 $2540 = (getTempRet0() | 0);
 $2541 = $40;
 $2542 = $2541;
 HEAP32[$2542>>2] = $2539;
 $2543 = (($2541) + 4)|0;
 $2544 = $2543;
 HEAP32[$2544>>2] = $2540;
 $2545 = $30;
 $2546 = $2545;
 $2547 = HEAP32[$2546>>2]|0;
 $2548 = (($2545) + 4)|0;
 $2549 = $2548;
 $2550 = HEAP32[$2549>>2]|0;
 $2551 = (_bitshift64Ashr(($2547|0),($2550|0),0)|0);
 $2552 = (getTempRet0() | 0);
 $2553 = $2551&255;
 $2554 = $3;
 HEAP8[$2554>>0] = $2553;
 $2555 = $30;
 $2556 = $2555;
 $2557 = HEAP32[$2556>>2]|0;
 $2558 = (($2555) + 4)|0;
 $2559 = $2558;
 $2560 = HEAP32[$2559>>2]|0;
 $2561 = (_bitshift64Ashr(($2557|0),($2560|0),8)|0);
 $2562 = (getTempRet0() | 0);
 $2563 = $2561&255;
 $2564 = $3;
 $2565 = ((($2564)) + 1|0);
 HEAP8[$2565>>0] = $2563;
 $2566 = $30;
 $2567 = $2566;
 $2568 = HEAP32[$2567>>2]|0;
 $2569 = (($2566) + 4)|0;
 $2570 = $2569;
 $2571 = HEAP32[$2570>>2]|0;
 $2572 = (_bitshift64Ashr(($2568|0),($2571|0),16)|0);
 $2573 = (getTempRet0() | 0);
 $2574 = $31;
 $2575 = $2574;
 $2576 = HEAP32[$2575>>2]|0;
 $2577 = (($2574) + 4)|0;
 $2578 = $2577;
 $2579 = HEAP32[$2578>>2]|0;
 $2580 = (_bitshift64Shl(($2576|0),($2579|0),5)|0);
 $2581 = (getTempRet0() | 0);
 $2582 = $2572 | $2580;
 $2573 | $2581;
 $2583 = $2582&255;
 $2584 = $3;
 $2585 = ((($2584)) + 2|0);
 HEAP8[$2585>>0] = $2583;
 $2586 = $31;
 $2587 = $2586;
 $2588 = HEAP32[$2587>>2]|0;
 $2589 = (($2586) + 4)|0;
 $2590 = $2589;
 $2591 = HEAP32[$2590>>2]|0;
 $2592 = (_bitshift64Ashr(($2588|0),($2591|0),3)|0);
 $2593 = (getTempRet0() | 0);
 $2594 = $2592&255;
 $2595 = $3;
 $2596 = ((($2595)) + 3|0);
 HEAP8[$2596>>0] = $2594;
 $2597 = $31;
 $2598 = $2597;
 $2599 = HEAP32[$2598>>2]|0;
 $2600 = (($2597) + 4)|0;
 $2601 = $2600;
 $2602 = HEAP32[$2601>>2]|0;
 $2603 = (_bitshift64Ashr(($2599|0),($2602|0),11)|0);
 $2604 = (getTempRet0() | 0);
 $2605 = $2603&255;
 $2606 = $3;
 $2607 = ((($2606)) + 4|0);
 HEAP8[$2607>>0] = $2605;
 $2608 = $31;
 $2609 = $2608;
 $2610 = HEAP32[$2609>>2]|0;
 $2611 = (($2608) + 4)|0;
 $2612 = $2611;
 $2613 = HEAP32[$2612>>2]|0;
 $2614 = (_bitshift64Ashr(($2610|0),($2613|0),19)|0);
 $2615 = (getTempRet0() | 0);
 $2616 = $32;
 $2617 = $2616;
 $2618 = HEAP32[$2617>>2]|0;
 $2619 = (($2616) + 4)|0;
 $2620 = $2619;
 $2621 = HEAP32[$2620>>2]|0;
 $2622 = (_bitshift64Shl(($2618|0),($2621|0),2)|0);
 $2623 = (getTempRet0() | 0);
 $2624 = $2614 | $2622;
 $2615 | $2623;
 $2625 = $2624&255;
 $2626 = $3;
 $2627 = ((($2626)) + 5|0);
 HEAP8[$2627>>0] = $2625;
 $2628 = $32;
 $2629 = $2628;
 $2630 = HEAP32[$2629>>2]|0;
 $2631 = (($2628) + 4)|0;
 $2632 = $2631;
 $2633 = HEAP32[$2632>>2]|0;
 $2634 = (_bitshift64Ashr(($2630|0),($2633|0),6)|0);
 $2635 = (getTempRet0() | 0);
 $2636 = $2634&255;
 $2637 = $3;
 $2638 = ((($2637)) + 6|0);
 HEAP8[$2638>>0] = $2636;
 $2639 = $32;
 $2640 = $2639;
 $2641 = HEAP32[$2640>>2]|0;
 $2642 = (($2639) + 4)|0;
 $2643 = $2642;
 $2644 = HEAP32[$2643>>2]|0;
 $2645 = (_bitshift64Ashr(($2641|0),($2644|0),14)|0);
 $2646 = (getTempRet0() | 0);
 $2647 = $33;
 $2648 = $2647;
 $2649 = HEAP32[$2648>>2]|0;
 $2650 = (($2647) + 4)|0;
 $2651 = $2650;
 $2652 = HEAP32[$2651>>2]|0;
 $2653 = (_bitshift64Shl(($2649|0),($2652|0),7)|0);
 $2654 = (getTempRet0() | 0);
 $2655 = $2645 | $2653;
 $2646 | $2654;
 $2656 = $2655&255;
 $2657 = $3;
 $2658 = ((($2657)) + 7|0);
 HEAP8[$2658>>0] = $2656;
 $2659 = $33;
 $2660 = $2659;
 $2661 = HEAP32[$2660>>2]|0;
 $2662 = (($2659) + 4)|0;
 $2663 = $2662;
 $2664 = HEAP32[$2663>>2]|0;
 $2665 = (_bitshift64Ashr(($2661|0),($2664|0),1)|0);
 $2666 = (getTempRet0() | 0);
 $2667 = $2665&255;
 $2668 = $3;
 $2669 = ((($2668)) + 8|0);
 HEAP8[$2669>>0] = $2667;
 $2670 = $33;
 $2671 = $2670;
 $2672 = HEAP32[$2671>>2]|0;
 $2673 = (($2670) + 4)|0;
 $2674 = $2673;
 $2675 = HEAP32[$2674>>2]|0;
 $2676 = (_bitshift64Ashr(($2672|0),($2675|0),9)|0);
 $2677 = (getTempRet0() | 0);
 $2678 = $2676&255;
 $2679 = $3;
 $2680 = ((($2679)) + 9|0);
 HEAP8[$2680>>0] = $2678;
 $2681 = $33;
 $2682 = $2681;
 $2683 = HEAP32[$2682>>2]|0;
 $2684 = (($2681) + 4)|0;
 $2685 = $2684;
 $2686 = HEAP32[$2685>>2]|0;
 $2687 = (_bitshift64Ashr(($2683|0),($2686|0),17)|0);
 $2688 = (getTempRet0() | 0);
 $2689 = $34;
 $2690 = $2689;
 $2691 = HEAP32[$2690>>2]|0;
 $2692 = (($2689) + 4)|0;
 $2693 = $2692;
 $2694 = HEAP32[$2693>>2]|0;
 $2695 = (_bitshift64Shl(($2691|0),($2694|0),4)|0);
 $2696 = (getTempRet0() | 0);
 $2697 = $2687 | $2695;
 $2688 | $2696;
 $2698 = $2697&255;
 $2699 = $3;
 $2700 = ((($2699)) + 10|0);
 HEAP8[$2700>>0] = $2698;
 $2701 = $34;
 $2702 = $2701;
 $2703 = HEAP32[$2702>>2]|0;
 $2704 = (($2701) + 4)|0;
 $2705 = $2704;
 $2706 = HEAP32[$2705>>2]|0;
 $2707 = (_bitshift64Ashr(($2703|0),($2706|0),4)|0);
 $2708 = (getTempRet0() | 0);
 $2709 = $2707&255;
 $2710 = $3;
 $2711 = ((($2710)) + 11|0);
 HEAP8[$2711>>0] = $2709;
 $2712 = $34;
 $2713 = $2712;
 $2714 = HEAP32[$2713>>2]|0;
 $2715 = (($2712) + 4)|0;
 $2716 = $2715;
 $2717 = HEAP32[$2716>>2]|0;
 $2718 = (_bitshift64Ashr(($2714|0),($2717|0),12)|0);
 $2719 = (getTempRet0() | 0);
 $2720 = $2718&255;
 $2721 = $3;
 $2722 = ((($2721)) + 12|0);
 HEAP8[$2722>>0] = $2720;
 $2723 = $34;
 $2724 = $2723;
 $2725 = HEAP32[$2724>>2]|0;
 $2726 = (($2723) + 4)|0;
 $2727 = $2726;
 $2728 = HEAP32[$2727>>2]|0;
 $2729 = (_bitshift64Ashr(($2725|0),($2728|0),20)|0);
 $2730 = (getTempRet0() | 0);
 $2731 = $35;
 $2732 = $2731;
 $2733 = HEAP32[$2732>>2]|0;
 $2734 = (($2731) + 4)|0;
 $2735 = $2734;
 $2736 = HEAP32[$2735>>2]|0;
 $2737 = (_bitshift64Shl(($2733|0),($2736|0),1)|0);
 $2738 = (getTempRet0() | 0);
 $2739 = $2729 | $2737;
 $2730 | $2738;
 $2740 = $2739&255;
 $2741 = $3;
 $2742 = ((($2741)) + 13|0);
 HEAP8[$2742>>0] = $2740;
 $2743 = $35;
 $2744 = $2743;
 $2745 = HEAP32[$2744>>2]|0;
 $2746 = (($2743) + 4)|0;
 $2747 = $2746;
 $2748 = HEAP32[$2747>>2]|0;
 $2749 = (_bitshift64Ashr(($2745|0),($2748|0),7)|0);
 $2750 = (getTempRet0() | 0);
 $2751 = $2749&255;
 $2752 = $3;
 $2753 = ((($2752)) + 14|0);
 HEAP8[$2753>>0] = $2751;
 $2754 = $35;
 $2755 = $2754;
 $2756 = HEAP32[$2755>>2]|0;
 $2757 = (($2754) + 4)|0;
 $2758 = $2757;
 $2759 = HEAP32[$2758>>2]|0;
 $2760 = (_bitshift64Ashr(($2756|0),($2759|0),15)|0);
 $2761 = (getTempRet0() | 0);
 $2762 = $36;
 $2763 = $2762;
 $2764 = HEAP32[$2763>>2]|0;
 $2765 = (($2762) + 4)|0;
 $2766 = $2765;
 $2767 = HEAP32[$2766>>2]|0;
 $2768 = (_bitshift64Shl(($2764|0),($2767|0),6)|0);
 $2769 = (getTempRet0() | 0);
 $2770 = $2760 | $2768;
 $2761 | $2769;
 $2771 = $2770&255;
 $2772 = $3;
 $2773 = ((($2772)) + 15|0);
 HEAP8[$2773>>0] = $2771;
 $2774 = $36;
 $2775 = $2774;
 $2776 = HEAP32[$2775>>2]|0;
 $2777 = (($2774) + 4)|0;
 $2778 = $2777;
 $2779 = HEAP32[$2778>>2]|0;
 $2780 = (_bitshift64Ashr(($2776|0),($2779|0),2)|0);
 $2781 = (getTempRet0() | 0);
 $2782 = $2780&255;
 $2783 = $3;
 $2784 = ((($2783)) + 16|0);
 HEAP8[$2784>>0] = $2782;
 $2785 = $36;
 $2786 = $2785;
 $2787 = HEAP32[$2786>>2]|0;
 $2788 = (($2785) + 4)|0;
 $2789 = $2788;
 $2790 = HEAP32[$2789>>2]|0;
 $2791 = (_bitshift64Ashr(($2787|0),($2790|0),10)|0);
 $2792 = (getTempRet0() | 0);
 $2793 = $2791&255;
 $2794 = $3;
 $2795 = ((($2794)) + 17|0);
 HEAP8[$2795>>0] = $2793;
 $2796 = $36;
 $2797 = $2796;
 $2798 = HEAP32[$2797>>2]|0;
 $2799 = (($2796) + 4)|0;
 $2800 = $2799;
 $2801 = HEAP32[$2800>>2]|0;
 $2802 = (_bitshift64Ashr(($2798|0),($2801|0),18)|0);
 $2803 = (getTempRet0() | 0);
 $2804 = $37;
 $2805 = $2804;
 $2806 = HEAP32[$2805>>2]|0;
 $2807 = (($2804) + 4)|0;
 $2808 = $2807;
 $2809 = HEAP32[$2808>>2]|0;
 $2810 = (_bitshift64Shl(($2806|0),($2809|0),3)|0);
 $2811 = (getTempRet0() | 0);
 $2812 = $2802 | $2810;
 $2803 | $2811;
 $2813 = $2812&255;
 $2814 = $3;
 $2815 = ((($2814)) + 18|0);
 HEAP8[$2815>>0] = $2813;
 $2816 = $37;
 $2817 = $2816;
 $2818 = HEAP32[$2817>>2]|0;
 $2819 = (($2816) + 4)|0;
 $2820 = $2819;
 $2821 = HEAP32[$2820>>2]|0;
 $2822 = (_bitshift64Ashr(($2818|0),($2821|0),5)|0);
 $2823 = (getTempRet0() | 0);
 $2824 = $2822&255;
 $2825 = $3;
 $2826 = ((($2825)) + 19|0);
 HEAP8[$2826>>0] = $2824;
 $2827 = $37;
 $2828 = $2827;
 $2829 = HEAP32[$2828>>2]|0;
 $2830 = (($2827) + 4)|0;
 $2831 = $2830;
 $2832 = HEAP32[$2831>>2]|0;
 $2833 = (_bitshift64Ashr(($2829|0),($2832|0),13)|0);
 $2834 = (getTempRet0() | 0);
 $2835 = $2833&255;
 $2836 = $3;
 $2837 = ((($2836)) + 20|0);
 HEAP8[$2837>>0] = $2835;
 $2838 = $38;
 $2839 = $2838;
 $2840 = HEAP32[$2839>>2]|0;
 $2841 = (($2838) + 4)|0;
 $2842 = $2841;
 $2843 = HEAP32[$2842>>2]|0;
 $2844 = (_bitshift64Ashr(($2840|0),($2843|0),0)|0);
 $2845 = (getTempRet0() | 0);
 $2846 = $2844&255;
 $2847 = $3;
 $2848 = ((($2847)) + 21|0);
 HEAP8[$2848>>0] = $2846;
 $2849 = $38;
 $2850 = $2849;
 $2851 = HEAP32[$2850>>2]|0;
 $2852 = (($2849) + 4)|0;
 $2853 = $2852;
 $2854 = HEAP32[$2853>>2]|0;
 $2855 = (_bitshift64Ashr(($2851|0),($2854|0),8)|0);
 $2856 = (getTempRet0() | 0);
 $2857 = $2855&255;
 $2858 = $3;
 $2859 = ((($2858)) + 22|0);
 HEAP8[$2859>>0] = $2857;
 $2860 = $38;
 $2861 = $2860;
 $2862 = HEAP32[$2861>>2]|0;
 $2863 = (($2860) + 4)|0;
 $2864 = $2863;
 $2865 = HEAP32[$2864>>2]|0;
 $2866 = (_bitshift64Ashr(($2862|0),($2865|0),16)|0);
 $2867 = (getTempRet0() | 0);
 $2868 = $39;
 $2869 = $2868;
 $2870 = HEAP32[$2869>>2]|0;
 $2871 = (($2868) + 4)|0;
 $2872 = $2871;
 $2873 = HEAP32[$2872>>2]|0;
 $2874 = (_bitshift64Shl(($2870|0),($2873|0),5)|0);
 $2875 = (getTempRet0() | 0);
 $2876 = $2866 | $2874;
 $2867 | $2875;
 $2877 = $2876&255;
 $2878 = $3;
 $2879 = ((($2878)) + 23|0);
 HEAP8[$2879>>0] = $2877;
 $2880 = $39;
 $2881 = $2880;
 $2882 = HEAP32[$2881>>2]|0;
 $2883 = (($2880) + 4)|0;
 $2884 = $2883;
 $2885 = HEAP32[$2884>>2]|0;
 $2886 = (_bitshift64Ashr(($2882|0),($2885|0),3)|0);
 $2887 = (getTempRet0() | 0);
 $2888 = $2886&255;
 $2889 = $3;
 $2890 = ((($2889)) + 24|0);
 HEAP8[$2890>>0] = $2888;
 $2891 = $39;
 $2892 = $2891;
 $2893 = HEAP32[$2892>>2]|0;
 $2894 = (($2891) + 4)|0;
 $2895 = $2894;
 $2896 = HEAP32[$2895>>2]|0;
 $2897 = (_bitshift64Ashr(($2893|0),($2896|0),11)|0);
 $2898 = (getTempRet0() | 0);
 $2899 = $2897&255;
 $2900 = $3;
 $2901 = ((($2900)) + 25|0);
 HEAP8[$2901>>0] = $2899;
 $2902 = $39;
 $2903 = $2902;
 $2904 = HEAP32[$2903>>2]|0;
 $2905 = (($2902) + 4)|0;
 $2906 = $2905;
 $2907 = HEAP32[$2906>>2]|0;
 $2908 = (_bitshift64Ashr(($2904|0),($2907|0),19)|0);
 $2909 = (getTempRet0() | 0);
 $2910 = $40;
 $2911 = $2910;
 $2912 = HEAP32[$2911>>2]|0;
 $2913 = (($2910) + 4)|0;
 $2914 = $2913;
 $2915 = HEAP32[$2914>>2]|0;
 $2916 = (_bitshift64Shl(($2912|0),($2915|0),2)|0);
 $2917 = (getTempRet0() | 0);
 $2918 = $2908 | $2916;
 $2909 | $2917;
 $2919 = $2918&255;
 $2920 = $3;
 $2921 = ((($2920)) + 26|0);
 HEAP8[$2921>>0] = $2919;
 $2922 = $40;
 $2923 = $2922;
 $2924 = HEAP32[$2923>>2]|0;
 $2925 = (($2922) + 4)|0;
 $2926 = $2925;
 $2927 = HEAP32[$2926>>2]|0;
 $2928 = (_bitshift64Ashr(($2924|0),($2927|0),6)|0);
 $2929 = (getTempRet0() | 0);
 $2930 = $2928&255;
 $2931 = $3;
 $2932 = ((($2931)) + 27|0);
 HEAP8[$2932>>0] = $2930;
 $2933 = $40;
 $2934 = $2933;
 $2935 = HEAP32[$2934>>2]|0;
 $2936 = (($2933) + 4)|0;
 $2937 = $2936;
 $2938 = HEAP32[$2937>>2]|0;
 $2939 = (_bitshift64Ashr(($2935|0),($2938|0),14)|0);
 $2940 = (getTempRet0() | 0);
 $2941 = $41;
 $2942 = $2941;
 $2943 = HEAP32[$2942>>2]|0;
 $2944 = (($2941) + 4)|0;
 $2945 = $2944;
 $2946 = HEAP32[$2945>>2]|0;
 $2947 = (_bitshift64Shl(($2943|0),($2946|0),7)|0);
 $2948 = (getTempRet0() | 0);
 $2949 = $2939 | $2947;
 $2940 | $2948;
 $2950 = $2949&255;
 $2951 = $3;
 $2952 = ((($2951)) + 28|0);
 HEAP8[$2952>>0] = $2950;
 $2953 = $41;
 $2954 = $2953;
 $2955 = HEAP32[$2954>>2]|0;
 $2956 = (($2953) + 4)|0;
 $2957 = $2956;
 $2958 = HEAP32[$2957>>2]|0;
 $2959 = (_bitshift64Ashr(($2955|0),($2958|0),1)|0);
 $2960 = (getTempRet0() | 0);
 $2961 = $2959&255;
 $2962 = $3;
 $2963 = ((($2962)) + 29|0);
 HEAP8[$2963>>0] = $2961;
 $2964 = $41;
 $2965 = $2964;
 $2966 = HEAP32[$2965>>2]|0;
 $2967 = (($2964) + 4)|0;
 $2968 = $2967;
 $2969 = HEAP32[$2968>>2]|0;
 $2970 = (_bitshift64Ashr(($2966|0),($2969|0),9)|0);
 $2971 = (getTempRet0() | 0);
 $2972 = $2970&255;
 $2973 = $3;
 $2974 = ((($2973)) + 30|0);
 HEAP8[$2974>>0] = $2972;
 $2975 = $41;
 $2976 = $2975;
 $2977 = HEAP32[$2976>>2]|0;
 $2978 = (($2975) + 4)|0;
 $2979 = $2978;
 $2980 = HEAP32[$2979>>2]|0;
 $2981 = (_bitshift64Ashr(($2977|0),($2980|0),17)|0);
 $2982 = (getTempRet0() | 0);
 $2983 = $2981&255;
 $2984 = $3;
 $2985 = ((($2984)) + 31|0);
 HEAP8[$2985>>0] = $2983;
 STACKTOP = sp;return;
}
function _sc_mulsub($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0;
 var $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0;
 var $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0;
 var $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0;
 var $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0;
 var $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0;
 var $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0;
 var $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0;
 var $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0;
 var $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0;
 var $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0;
 var $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0;
 var $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0;
 var $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0;
 var $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0;
 var $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0;
 var $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0;
 var $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0;
 var $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0;
 var $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0;
 var $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0;
 var $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0;
 var $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0;
 var $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0;
 var $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0;
 var $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0;
 var $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0;
 var $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0;
 var $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0;
 var $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0;
 var $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0;
 var $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0;
 var $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0;
 var $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0;
 var $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0;
 var $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0;
 var $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0;
 var $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0;
 var $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0;
 var $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0;
 var $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0;
 var $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0;
 var $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0;
 var $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0;
 var $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0;
 var $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0;
 var $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0;
 var $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0;
 var $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0;
 var $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0;
 var $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0;
 var $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0;
 var $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0;
 var $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0;
 var $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0;
 var $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0;
 var $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0;
 var $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0;
 var $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0;
 var $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0;
 var $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0;
 var $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0;
 var $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0;
 var $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0;
 var $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0;
 var $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0;
 var $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0;
 var $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0;
 var $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0;
 var $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0;
 var $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0;
 var $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0;
 var $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0;
 var $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0;
 var $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0;
 var $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0;
 var $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0;
 var $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0;
 var $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0;
 var $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0;
 var $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0;
 var $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0;
 var $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0;
 var $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0;
 var $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0;
 var $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0;
 var $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0;
 var $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0;
 var $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0, $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0;
 var $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0, $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0;
 var $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0, $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0;
 var $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0, $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0;
 var $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0, $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0;
 var $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0, $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0;
 var $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0, $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0;
 var $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0, $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0;
 var $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0, $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0;
 var $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0, $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0;
 var $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0, $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0;
 var $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0, $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0;
 var $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0, $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0;
 var $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0, $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0;
 var $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0, $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0;
 var $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0, $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0;
 var $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0, $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0;
 var $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0, $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0;
 var $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0, $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0;
 var $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0, $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0;
 var $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0, $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0;
 var $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0, $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0;
 var $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0, $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0;
 var $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0, $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0;
 var $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0, $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0;
 var $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0, $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0;
 var $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0, $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0;
 var $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0, $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0;
 var $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0, $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0;
 var $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0, $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0;
 var $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0, $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0;
 var $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0, $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0;
 var $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0, $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0;
 var $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0, $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0;
 var $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0, $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0;
 var $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0, $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0;
 var $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0, $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0;
 var $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0, $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0;
 var $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0, $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0;
 var $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0, $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0;
 var $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0, $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0;
 var $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0, $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0;
 var $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0, $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0;
 var $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0, $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0;
 var $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0, $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0;
 var $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0, $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0;
 var $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0, $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0;
 var $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0, $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0;
 var $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0, $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0;
 var $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0, $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0;
 var $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0, $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0;
 var $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0, $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0;
 var $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0, $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0;
 var $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0, $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0;
 var $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0, $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0;
 var $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0, $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0;
 var $3972 = 0, $3973 = 0, $3974 = 0, $3975 = 0, $3976 = 0, $3977 = 0, $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0;
 var $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0, $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0, $4006 = 0;
 var $4007 = 0, $4008 = 0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0, $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0;
 var $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0, $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0;
 var $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0, $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0, $4058 = 0, $4059 = 0, $406 = 0, $4060 = 0;
 var $4061 = 0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0, $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0;
 var $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0, $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0;
 var $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0, $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0;
 var $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0, $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0;
 var $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0, $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0;
 var $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0, $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0;
 var $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0, $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0;
 var $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0, $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0;
 var $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0, $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0;
 var $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0, $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0;
 var $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0, $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0;
 var $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0, $4265 = 0, $4266 = 0, $4267 = 0, $4268 = 0, $4269 = 0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0;
 var $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0, $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0;
 var $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0, $43 = 0, $430 = 0, $4300 = 0, $4301 = 0, $4302 = 0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0;
 var $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0, $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0;
 var $4331 = 0, $4332 = 0, $4333 = 0, $4334 = 0, $4335 = 0, $4336 = 0, $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0;
 var $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0, $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0;
 var $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0, $4371 = 0, $4372 = 0, $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0;
 var $4386 = 0, $4387 = 0, $4388 = 0, $4389 = 0, $439 = 0, $4390 = 0, $4391 = 0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0;
 var $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0, $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $4415 = 0, $4416 = 0, $4417 = 0, $4418 = 0, $4419 = 0, $442 = 0, $4420 = 0;
 var $4421 = 0, $4422 = 0, $4423 = 0, $4424 = 0, $4425 = 0, $4426 = 0, $4427 = 0, $4428 = 0, $4429 = 0, $443 = 0, $4430 = 0, $4431 = 0, $4432 = 0, $4433 = 0, $4434 = 0, $4435 = 0, $4436 = 0, $4437 = 0, $4438 = 0, $4439 = 0;
 var $444 = 0, $4440 = 0, $4441 = 0, $4442 = 0, $4443 = 0, $4444 = 0, $4445 = 0, $4446 = 0, $4447 = 0, $4448 = 0, $4449 = 0, $445 = 0, $4450 = 0, $4451 = 0, $4452 = 0, $4453 = 0, $4454 = 0, $4455 = 0, $4456 = 0, $4457 = 0;
 var $4458 = 0, $4459 = 0, $446 = 0, $4460 = 0, $4461 = 0, $4462 = 0, $4463 = 0, $4464 = 0, $4465 = 0, $4466 = 0, $4467 = 0, $4468 = 0, $4469 = 0, $447 = 0, $4470 = 0, $4471 = 0, $4472 = 0, $4473 = 0, $4474 = 0, $4475 = 0;
 var $4476 = 0, $4477 = 0, $4478 = 0, $4479 = 0, $448 = 0, $4480 = 0, $4481 = 0, $4482 = 0, $4483 = 0, $4484 = 0, $4485 = 0, $4486 = 0, $4487 = 0, $4488 = 0, $4489 = 0, $449 = 0, $4490 = 0, $4491 = 0, $4492 = 0, $4493 = 0;
 var $4494 = 0, $4495 = 0, $4496 = 0, $4497 = 0, $4498 = 0, $4499 = 0, $45 = 0, $450 = 0, $4500 = 0, $4501 = 0, $4502 = 0, $4503 = 0, $4504 = 0, $4505 = 0, $4506 = 0, $4507 = 0, $4508 = 0, $4509 = 0, $451 = 0, $4510 = 0;
 var $4511 = 0, $4512 = 0, $4513 = 0, $4514 = 0, $4515 = 0, $4516 = 0, $4517 = 0, $4518 = 0, $4519 = 0, $452 = 0, $4520 = 0, $4521 = 0, $4522 = 0, $4523 = 0, $4524 = 0, $4525 = 0, $4526 = 0, $4527 = 0, $4528 = 0, $4529 = 0;
 var $453 = 0, $4530 = 0, $4531 = 0, $4532 = 0, $4533 = 0, $4534 = 0, $4535 = 0, $4536 = 0, $4537 = 0, $4538 = 0, $4539 = 0, $454 = 0, $4540 = 0, $4541 = 0, $4542 = 0, $4543 = 0, $4544 = 0, $4545 = 0, $4546 = 0, $4547 = 0;
 var $4548 = 0, $4549 = 0, $455 = 0, $4550 = 0, $4551 = 0, $4552 = 0, $4553 = 0, $4554 = 0, $4555 = 0, $4556 = 0, $4557 = 0, $4558 = 0, $4559 = 0, $456 = 0, $4560 = 0, $4561 = 0, $4562 = 0, $4563 = 0, $4564 = 0, $4565 = 0;
 var $4566 = 0, $4567 = 0, $4568 = 0, $4569 = 0, $457 = 0, $4570 = 0, $4571 = 0, $4572 = 0, $4573 = 0, $4574 = 0, $4575 = 0, $4576 = 0, $4577 = 0, $4578 = 0, $4579 = 0, $458 = 0, $4580 = 0, $4581 = 0, $4582 = 0, $4583 = 0;
 var $4584 = 0, $4585 = 0, $4586 = 0, $4587 = 0, $4588 = 0, $4589 = 0, $459 = 0, $4590 = 0, $4591 = 0, $4592 = 0, $4593 = 0, $4594 = 0, $4595 = 0, $4596 = 0, $4597 = 0, $4598 = 0, $4599 = 0, $46 = 0, $460 = 0, $4600 = 0;
 var $4601 = 0, $4602 = 0, $4603 = 0, $4604 = 0, $4605 = 0, $4606 = 0, $4607 = 0, $4608 = 0, $4609 = 0, $461 = 0, $4610 = 0, $4611 = 0, $4612 = 0, $4613 = 0, $4614 = 0, $4615 = 0, $4616 = 0, $4617 = 0, $4618 = 0, $4619 = 0;
 var $462 = 0, $4620 = 0, $4621 = 0, $4622 = 0, $4623 = 0, $4624 = 0, $4625 = 0, $4626 = 0, $4627 = 0, $4628 = 0, $4629 = 0, $463 = 0, $4630 = 0, $4631 = 0, $4632 = 0, $4633 = 0, $4634 = 0, $4635 = 0, $4636 = 0, $4637 = 0;
 var $4638 = 0, $4639 = 0, $464 = 0, $4640 = 0, $4641 = 0, $4642 = 0, $4643 = 0, $4644 = 0, $4645 = 0, $4646 = 0, $4647 = 0, $4648 = 0, $4649 = 0, $465 = 0, $4650 = 0, $4651 = 0, $4652 = 0, $4653 = 0, $4654 = 0, $4655 = 0;
 var $4656 = 0, $4657 = 0, $4658 = 0, $4659 = 0, $466 = 0, $4660 = 0, $4661 = 0, $4662 = 0, $4663 = 0, $4664 = 0, $4665 = 0, $4666 = 0, $4667 = 0, $4668 = 0, $4669 = 0, $467 = 0, $4670 = 0, $4671 = 0, $4672 = 0, $4673 = 0;
 var $4674 = 0, $4675 = 0, $4676 = 0, $4677 = 0, $4678 = 0, $4679 = 0, $468 = 0, $4680 = 0, $4681 = 0, $4682 = 0, $4683 = 0, $4684 = 0, $4685 = 0, $4686 = 0, $4687 = 0, $4688 = 0, $4689 = 0, $469 = 0, $4690 = 0, $4691 = 0;
 var $4692 = 0, $4693 = 0, $4694 = 0, $4695 = 0, $4696 = 0, $4697 = 0, $4698 = 0, $4699 = 0, $47 = 0, $470 = 0, $4700 = 0, $4701 = 0, $4702 = 0, $4703 = 0, $4704 = 0, $4705 = 0, $4706 = 0, $4707 = 0, $4708 = 0, $4709 = 0;
 var $471 = 0, $4710 = 0, $4711 = 0, $4712 = 0, $4713 = 0, $4714 = 0, $4715 = 0, $4716 = 0, $4717 = 0, $4718 = 0, $4719 = 0, $472 = 0, $4720 = 0, $4721 = 0, $4722 = 0, $4723 = 0, $4724 = 0, $4725 = 0, $4726 = 0, $4727 = 0;
 var $4728 = 0, $4729 = 0, $473 = 0, $4730 = 0, $4731 = 0, $4732 = 0, $4733 = 0, $4734 = 0, $4735 = 0, $4736 = 0, $4737 = 0, $4738 = 0, $4739 = 0, $474 = 0, $4740 = 0, $4741 = 0, $4742 = 0, $4743 = 0, $4744 = 0, $4745 = 0;
 var $4746 = 0, $4747 = 0, $4748 = 0, $4749 = 0, $475 = 0, $4750 = 0, $4751 = 0, $4752 = 0, $4753 = 0, $4754 = 0, $4755 = 0, $4756 = 0, $4757 = 0, $4758 = 0, $4759 = 0, $476 = 0, $4760 = 0, $4761 = 0, $4762 = 0, $4763 = 0;
 var $4764 = 0, $4765 = 0, $4766 = 0, $4767 = 0, $4768 = 0, $4769 = 0, $477 = 0, $4770 = 0, $4771 = 0, $4772 = 0, $4773 = 0, $4774 = 0, $4775 = 0, $4776 = 0, $4777 = 0, $4778 = 0, $4779 = 0, $478 = 0, $4780 = 0, $4781 = 0;
 var $4782 = 0, $4783 = 0, $4784 = 0, $4785 = 0, $4786 = 0, $4787 = 0, $4788 = 0, $4789 = 0, $479 = 0, $4790 = 0, $4791 = 0, $4792 = 0, $4793 = 0, $4794 = 0, $4795 = 0, $4796 = 0, $4797 = 0, $4798 = 0, $4799 = 0, $48 = 0;
 var $480 = 0, $4800 = 0, $4801 = 0, $4802 = 0, $4803 = 0, $4804 = 0, $4805 = 0, $4806 = 0, $4807 = 0, $4808 = 0, $4809 = 0, $481 = 0, $4810 = 0, $4811 = 0, $4812 = 0, $4813 = 0, $4814 = 0, $4815 = 0, $4816 = 0, $4817 = 0;
 var $4818 = 0, $4819 = 0, $482 = 0, $4820 = 0, $4821 = 0, $4822 = 0, $4823 = 0, $4824 = 0, $4825 = 0, $4826 = 0, $4827 = 0, $4828 = 0, $4829 = 0, $483 = 0, $4830 = 0, $4831 = 0, $4832 = 0, $4833 = 0, $4834 = 0, $4835 = 0;
 var $4836 = 0, $4837 = 0, $4838 = 0, $4839 = 0, $484 = 0, $4840 = 0, $4841 = 0, $4842 = 0, $4843 = 0, $4844 = 0, $4845 = 0, $4846 = 0, $4847 = 0, $4848 = 0, $4849 = 0, $485 = 0, $4850 = 0, $4851 = 0, $4852 = 0, $4853 = 0;
 var $4854 = 0, $4855 = 0, $4856 = 0, $4857 = 0, $4858 = 0, $4859 = 0, $486 = 0, $4860 = 0, $4861 = 0, $4862 = 0, $4863 = 0, $4864 = 0, $4865 = 0, $4866 = 0, $4867 = 0, $4868 = 0, $4869 = 0, $487 = 0, $4870 = 0, $4871 = 0;
 var $4872 = 0, $4873 = 0, $4874 = 0, $4875 = 0, $4876 = 0, $4877 = 0, $4878 = 0, $4879 = 0, $488 = 0, $4880 = 0, $4881 = 0, $4882 = 0, $4883 = 0, $4884 = 0, $4885 = 0, $4886 = 0, $4887 = 0, $4888 = 0, $4889 = 0, $489 = 0;
 var $4890 = 0, $4891 = 0, $4892 = 0, $4893 = 0, $4894 = 0, $4895 = 0, $4896 = 0, $4897 = 0, $4898 = 0, $4899 = 0, $49 = 0, $490 = 0, $4900 = 0, $4901 = 0, $4902 = 0, $4903 = 0, $4904 = 0, $4905 = 0, $4906 = 0, $4907 = 0;
 var $4908 = 0, $4909 = 0, $491 = 0, $4910 = 0, $4911 = 0, $4912 = 0, $4913 = 0, $4914 = 0, $4915 = 0, $4916 = 0, $4917 = 0, $4918 = 0, $4919 = 0, $492 = 0, $4920 = 0, $4921 = 0, $4922 = 0, $4923 = 0, $4924 = 0, $4925 = 0;
 var $4926 = 0, $4927 = 0, $4928 = 0, $4929 = 0, $493 = 0, $4930 = 0, $4931 = 0, $4932 = 0, $4933 = 0, $4934 = 0, $4935 = 0, $4936 = 0, $4937 = 0, $4938 = 0, $4939 = 0, $494 = 0, $4940 = 0, $4941 = 0, $4942 = 0, $4943 = 0;
 var $4944 = 0, $4945 = 0, $4946 = 0, $4947 = 0, $4948 = 0, $4949 = 0, $495 = 0, $4950 = 0, $4951 = 0, $4952 = 0, $4953 = 0, $4954 = 0, $4955 = 0, $4956 = 0, $4957 = 0, $4958 = 0, $4959 = 0, $496 = 0, $4960 = 0, $4961 = 0;
 var $4962 = 0, $4963 = 0, $4964 = 0, $4965 = 0, $4966 = 0, $4967 = 0, $4968 = 0, $4969 = 0, $497 = 0, $4970 = 0, $4971 = 0, $4972 = 0, $4973 = 0, $4974 = 0, $4975 = 0, $4976 = 0, $4977 = 0, $4978 = 0, $4979 = 0, $498 = 0;
 var $4980 = 0, $4981 = 0, $4982 = 0, $4983 = 0, $4984 = 0, $4985 = 0, $4986 = 0, $4987 = 0, $4988 = 0, $4989 = 0, $499 = 0, $4990 = 0, $4991 = 0, $4992 = 0, $4993 = 0, $4994 = 0, $4995 = 0, $4996 = 0, $4997 = 0, $4998 = 0;
 var $4999 = 0, $5 = 0, $50 = 0, $500 = 0, $5000 = 0, $5001 = 0, $5002 = 0, $5003 = 0, $5004 = 0, $5005 = 0, $5006 = 0, $5007 = 0, $5008 = 0, $5009 = 0, $501 = 0, $5010 = 0, $5011 = 0, $5012 = 0, $5013 = 0, $5014 = 0;
 var $5015 = 0, $5016 = 0, $5017 = 0, $5018 = 0, $5019 = 0, $502 = 0, $5020 = 0, $5021 = 0, $5022 = 0, $5023 = 0, $5024 = 0, $5025 = 0, $5026 = 0, $5027 = 0, $5028 = 0, $5029 = 0, $503 = 0, $5030 = 0, $5031 = 0, $5032 = 0;
 var $5033 = 0, $5034 = 0, $5035 = 0, $5036 = 0, $5037 = 0, $5038 = 0, $5039 = 0, $504 = 0, $5040 = 0, $5041 = 0, $5042 = 0, $5043 = 0, $5044 = 0, $5045 = 0, $5046 = 0, $5047 = 0, $5048 = 0, $5049 = 0, $505 = 0, $5050 = 0;
 var $5051 = 0, $5052 = 0, $5053 = 0, $5054 = 0, $5055 = 0, $5056 = 0, $5057 = 0, $5058 = 0, $5059 = 0, $506 = 0, $5060 = 0, $5061 = 0, $5062 = 0, $5063 = 0, $5064 = 0, $5065 = 0, $5066 = 0, $5067 = 0, $5068 = 0, $5069 = 0;
 var $507 = 0, $5070 = 0, $5071 = 0, $5072 = 0, $5073 = 0, $5074 = 0, $5075 = 0, $5076 = 0, $5077 = 0, $5078 = 0, $5079 = 0, $508 = 0, $5080 = 0, $5081 = 0, $5082 = 0, $5083 = 0, $5084 = 0, $5085 = 0, $5086 = 0, $5087 = 0;
 var $5088 = 0, $5089 = 0, $509 = 0, $5090 = 0, $5091 = 0, $5092 = 0, $5093 = 0, $5094 = 0, $5095 = 0, $5096 = 0, $5097 = 0, $5098 = 0, $5099 = 0, $51 = 0, $510 = 0, $5100 = 0, $5101 = 0, $5102 = 0, $5103 = 0, $5104 = 0;
 var $5105 = 0, $5106 = 0, $5107 = 0, $5108 = 0, $5109 = 0, $511 = 0, $5110 = 0, $5111 = 0, $5112 = 0, $5113 = 0, $5114 = 0, $5115 = 0, $5116 = 0, $5117 = 0, $5118 = 0, $5119 = 0, $512 = 0, $5120 = 0, $5121 = 0, $5122 = 0;
 var $5123 = 0, $5124 = 0, $5125 = 0, $5126 = 0, $5127 = 0, $5128 = 0, $5129 = 0, $513 = 0, $5130 = 0, $5131 = 0, $5132 = 0, $5133 = 0, $5134 = 0, $5135 = 0, $5136 = 0, $5137 = 0, $5138 = 0, $5139 = 0, $514 = 0, $5140 = 0;
 var $5141 = 0, $5142 = 0, $5143 = 0, $5144 = 0, $5145 = 0, $5146 = 0, $5147 = 0, $5148 = 0, $5149 = 0, $515 = 0, $5150 = 0, $5151 = 0, $5152 = 0, $5153 = 0, $5154 = 0, $5155 = 0, $5156 = 0, $5157 = 0, $5158 = 0, $5159 = 0;
 var $516 = 0, $5160 = 0, $5161 = 0, $5162 = 0, $5163 = 0, $5164 = 0, $5165 = 0, $5166 = 0, $5167 = 0, $5168 = 0, $5169 = 0, $517 = 0, $5170 = 0, $5171 = 0, $5172 = 0, $5173 = 0, $5174 = 0, $5175 = 0, $5176 = 0, $5177 = 0;
 var $5178 = 0, $5179 = 0, $518 = 0, $5180 = 0, $5181 = 0, $5182 = 0, $5183 = 0, $5184 = 0, $5185 = 0, $5186 = 0, $5187 = 0, $5188 = 0, $5189 = 0, $519 = 0, $5190 = 0, $5191 = 0, $5192 = 0, $5193 = 0, $5194 = 0, $5195 = 0;
 var $5196 = 0, $5197 = 0, $5198 = 0, $5199 = 0, $52 = 0, $520 = 0, $5200 = 0, $5201 = 0, $5202 = 0, $5203 = 0, $5204 = 0, $5205 = 0, $5206 = 0, $5207 = 0, $5208 = 0, $5209 = 0, $521 = 0, $5210 = 0, $5211 = 0, $5212 = 0;
 var $5213 = 0, $5214 = 0, $5215 = 0, $5216 = 0, $5217 = 0, $5218 = 0, $5219 = 0, $522 = 0, $5220 = 0, $5221 = 0, $5222 = 0, $5223 = 0, $5224 = 0, $5225 = 0, $5226 = 0, $5227 = 0, $5228 = 0, $5229 = 0, $523 = 0, $5230 = 0;
 var $5231 = 0, $5232 = 0, $5233 = 0, $5234 = 0, $5235 = 0, $5236 = 0, $5237 = 0, $5238 = 0, $5239 = 0, $524 = 0, $5240 = 0, $5241 = 0, $5242 = 0, $5243 = 0, $5244 = 0, $5245 = 0, $5246 = 0, $5247 = 0, $5248 = 0, $5249 = 0;
 var $525 = 0, $5250 = 0, $5251 = 0, $5252 = 0, $5253 = 0, $5254 = 0, $5255 = 0, $5256 = 0, $5257 = 0, $5258 = 0, $5259 = 0, $526 = 0, $5260 = 0, $5261 = 0, $5262 = 0, $5263 = 0, $5264 = 0, $5265 = 0, $5266 = 0, $5267 = 0;
 var $5268 = 0, $5269 = 0, $527 = 0, $5270 = 0, $5271 = 0, $5272 = 0, $5273 = 0, $5274 = 0, $5275 = 0, $5276 = 0, $5277 = 0, $5278 = 0, $5279 = 0, $528 = 0, $5280 = 0, $5281 = 0, $5282 = 0, $5283 = 0, $5284 = 0, $5285 = 0;
 var $5286 = 0, $5287 = 0, $5288 = 0, $5289 = 0, $529 = 0, $5290 = 0, $5291 = 0, $5292 = 0, $5293 = 0, $5294 = 0, $5295 = 0, $5296 = 0, $5297 = 0, $5298 = 0, $5299 = 0, $53 = 0, $530 = 0, $5300 = 0, $5301 = 0, $5302 = 0;
 var $5303 = 0, $5304 = 0, $5305 = 0, $5306 = 0, $5307 = 0, $5308 = 0, $5309 = 0, $531 = 0, $5310 = 0, $5311 = 0, $5312 = 0, $5313 = 0, $5314 = 0, $5315 = 0, $5316 = 0, $5317 = 0, $5318 = 0, $5319 = 0, $532 = 0, $5320 = 0;
 var $5321 = 0, $5322 = 0, $5323 = 0, $5324 = 0, $5325 = 0, $5326 = 0, $5327 = 0, $5328 = 0, $5329 = 0, $533 = 0, $5330 = 0, $5331 = 0, $5332 = 0, $5333 = 0, $5334 = 0, $5335 = 0, $5336 = 0, $5337 = 0, $5338 = 0, $5339 = 0;
 var $534 = 0, $5340 = 0, $5341 = 0, $5342 = 0, $5343 = 0, $5344 = 0, $5345 = 0, $5346 = 0, $5347 = 0, $5348 = 0, $5349 = 0, $535 = 0, $5350 = 0, $5351 = 0, $5352 = 0, $5353 = 0, $5354 = 0, $5355 = 0, $5356 = 0, $5357 = 0;
 var $5358 = 0, $5359 = 0, $536 = 0, $5360 = 0, $5361 = 0, $5362 = 0, $5363 = 0, $5364 = 0, $5365 = 0, $5366 = 0, $5367 = 0, $5368 = 0, $5369 = 0, $537 = 0, $5370 = 0, $5371 = 0, $5372 = 0, $5373 = 0, $5374 = 0, $5375 = 0;
 var $5376 = 0, $5377 = 0, $5378 = 0, $5379 = 0, $538 = 0, $5380 = 0, $5381 = 0, $5382 = 0, $5383 = 0, $5384 = 0, $5385 = 0, $5386 = 0, $5387 = 0, $5388 = 0, $5389 = 0, $539 = 0, $5390 = 0, $5391 = 0, $5392 = 0, $5393 = 0;
 var $5394 = 0, $5395 = 0, $5396 = 0, $5397 = 0, $5398 = 0, $5399 = 0, $54 = 0, $540 = 0, $5400 = 0, $5401 = 0, $5402 = 0, $5403 = 0, $5404 = 0, $5405 = 0, $5406 = 0, $5407 = 0, $5408 = 0, $5409 = 0, $541 = 0, $5410 = 0;
 var $5411 = 0, $5412 = 0, $5413 = 0, $5414 = 0, $5415 = 0, $5416 = 0, $5417 = 0, $5418 = 0, $5419 = 0, $542 = 0, $5420 = 0, $5421 = 0, $5422 = 0, $5423 = 0, $5424 = 0, $5425 = 0, $5426 = 0, $5427 = 0, $5428 = 0, $5429 = 0;
 var $543 = 0, $5430 = 0, $5431 = 0, $5432 = 0, $5433 = 0, $5434 = 0, $5435 = 0, $5436 = 0, $5437 = 0, $5438 = 0, $5439 = 0, $544 = 0, $5440 = 0, $5441 = 0, $5442 = 0, $5443 = 0, $5444 = 0, $5445 = 0, $5446 = 0, $5447 = 0;
 var $5448 = 0, $5449 = 0, $545 = 0, $5450 = 0, $5451 = 0, $5452 = 0, $5453 = 0, $5454 = 0, $5455 = 0, $5456 = 0, $5457 = 0, $5458 = 0, $5459 = 0, $546 = 0, $5460 = 0, $5461 = 0, $5462 = 0, $5463 = 0, $5464 = 0, $5465 = 0;
 var $5466 = 0, $5467 = 0, $5468 = 0, $5469 = 0, $547 = 0, $5470 = 0, $5471 = 0, $5472 = 0, $5473 = 0, $5474 = 0, $5475 = 0, $5476 = 0, $5477 = 0, $5478 = 0, $5479 = 0, $548 = 0, $5480 = 0, $5481 = 0, $5482 = 0, $5483 = 0;
 var $5484 = 0, $5485 = 0, $5486 = 0, $5487 = 0, $5488 = 0, $5489 = 0, $549 = 0, $5490 = 0, $5491 = 0, $5492 = 0, $5493 = 0, $5494 = 0, $5495 = 0, $5496 = 0, $5497 = 0, $5498 = 0, $5499 = 0, $55 = 0, $550 = 0, $5500 = 0;
 var $5501 = 0, $5502 = 0, $5503 = 0, $5504 = 0, $5505 = 0, $5506 = 0, $5507 = 0, $5508 = 0, $5509 = 0, $551 = 0, $5510 = 0, $5511 = 0, $5512 = 0, $5513 = 0, $5514 = 0, $5515 = 0, $5516 = 0, $5517 = 0, $5518 = 0, $5519 = 0;
 var $552 = 0, $5520 = 0, $5521 = 0, $5522 = 0, $5523 = 0, $5524 = 0, $5525 = 0, $5526 = 0, $5527 = 0, $5528 = 0, $5529 = 0, $553 = 0, $5530 = 0, $5531 = 0, $5532 = 0, $5533 = 0, $5534 = 0, $5535 = 0, $5536 = 0, $5537 = 0;
 var $5538 = 0, $5539 = 0, $554 = 0, $5540 = 0, $5541 = 0, $5542 = 0, $5543 = 0, $5544 = 0, $5545 = 0, $5546 = 0, $5547 = 0, $5548 = 0, $5549 = 0, $555 = 0, $5550 = 0, $5551 = 0, $5552 = 0, $5553 = 0, $5554 = 0, $5555 = 0;
 var $5556 = 0, $5557 = 0, $5558 = 0, $5559 = 0, $556 = 0, $5560 = 0, $5561 = 0, $5562 = 0, $5563 = 0, $5564 = 0, $5565 = 0, $5566 = 0, $5567 = 0, $5568 = 0, $5569 = 0, $557 = 0, $5570 = 0, $5571 = 0, $5572 = 0, $5573 = 0;
 var $5574 = 0, $5575 = 0, $5576 = 0, $5577 = 0, $5578 = 0, $5579 = 0, $558 = 0, $5580 = 0, $5581 = 0, $5582 = 0, $5583 = 0, $5584 = 0, $5585 = 0, $5586 = 0, $5587 = 0, $5588 = 0, $5589 = 0, $559 = 0, $5590 = 0, $5591 = 0;
 var $5592 = 0, $5593 = 0, $5594 = 0, $5595 = 0, $5596 = 0, $5597 = 0, $5598 = 0, $5599 = 0, $56 = 0, $560 = 0, $5600 = 0, $5601 = 0, $5602 = 0, $5603 = 0, $5604 = 0, $5605 = 0, $5606 = 0, $5607 = 0, $5608 = 0, $5609 = 0;
 var $561 = 0, $5610 = 0, $5611 = 0, $5612 = 0, $5613 = 0, $5614 = 0, $5615 = 0, $5616 = 0, $5617 = 0, $5618 = 0, $5619 = 0, $562 = 0, $5620 = 0, $5621 = 0, $5622 = 0, $5623 = 0, $5624 = 0, $5625 = 0, $5626 = 0, $5627 = 0;
 var $5628 = 0, $5629 = 0, $563 = 0, $5630 = 0, $5631 = 0, $5632 = 0, $5633 = 0, $5634 = 0, $5635 = 0, $5636 = 0, $5637 = 0, $5638 = 0, $5639 = 0, $564 = 0, $5640 = 0, $5641 = 0, $5642 = 0, $5643 = 0, $5644 = 0, $5645 = 0;
 var $5646 = 0, $5647 = 0, $5648 = 0, $5649 = 0, $565 = 0, $5650 = 0, $5651 = 0, $5652 = 0, $5653 = 0, $5654 = 0, $5655 = 0, $5656 = 0, $5657 = 0, $5658 = 0, $5659 = 0, $566 = 0, $5660 = 0, $5661 = 0, $5662 = 0, $5663 = 0;
 var $5664 = 0, $5665 = 0, $5666 = 0, $5667 = 0, $5668 = 0, $5669 = 0, $567 = 0, $5670 = 0, $5671 = 0, $5672 = 0, $5673 = 0, $5674 = 0, $5675 = 0, $5676 = 0, $5677 = 0, $5678 = 0, $5679 = 0, $568 = 0, $5680 = 0, $5681 = 0;
 var $5682 = 0, $5683 = 0, $5684 = 0, $5685 = 0, $5686 = 0, $5687 = 0, $5688 = 0, $5689 = 0, $569 = 0, $5690 = 0, $5691 = 0, $5692 = 0, $5693 = 0, $5694 = 0, $5695 = 0, $5696 = 0, $5697 = 0, $5698 = 0, $5699 = 0, $57 = 0;
 var $570 = 0, $5700 = 0, $5701 = 0, $5702 = 0, $5703 = 0, $5704 = 0, $5705 = 0, $5706 = 0, $5707 = 0, $5708 = 0, $5709 = 0, $571 = 0, $5710 = 0, $5711 = 0, $5712 = 0, $5713 = 0, $5714 = 0, $5715 = 0, $5716 = 0, $5717 = 0;
 var $5718 = 0, $5719 = 0, $572 = 0, $5720 = 0, $5721 = 0, $5722 = 0, $5723 = 0, $5724 = 0, $5725 = 0, $5726 = 0, $5727 = 0, $5728 = 0, $5729 = 0, $573 = 0, $5730 = 0, $5731 = 0, $5732 = 0, $5733 = 0, $5734 = 0, $5735 = 0;
 var $5736 = 0, $5737 = 0, $5738 = 0, $5739 = 0, $574 = 0, $5740 = 0, $5741 = 0, $5742 = 0, $5743 = 0, $5744 = 0, $5745 = 0, $5746 = 0, $5747 = 0, $5748 = 0, $5749 = 0, $575 = 0, $5750 = 0, $5751 = 0, $5752 = 0, $5753 = 0;
 var $5754 = 0, $5755 = 0, $5756 = 0, $5757 = 0, $5758 = 0, $5759 = 0, $576 = 0, $5760 = 0, $5761 = 0, $5762 = 0, $5763 = 0, $5764 = 0, $5765 = 0, $5766 = 0, $5767 = 0, $5768 = 0, $5769 = 0, $577 = 0, $5770 = 0, $5771 = 0;
 var $5772 = 0, $5773 = 0, $5774 = 0, $5775 = 0, $5776 = 0, $5777 = 0, $5778 = 0, $5779 = 0, $578 = 0, $5780 = 0, $5781 = 0, $5782 = 0, $5783 = 0, $5784 = 0, $5785 = 0, $5786 = 0, $5787 = 0, $5788 = 0, $5789 = 0, $579 = 0;
 var $5790 = 0, $5791 = 0, $5792 = 0, $5793 = 0, $5794 = 0, $5795 = 0, $5796 = 0, $5797 = 0, $5798 = 0, $5799 = 0, $58 = 0, $580 = 0, $5800 = 0, $5801 = 0, $5802 = 0, $5803 = 0, $5804 = 0, $5805 = 0, $5806 = 0, $5807 = 0;
 var $5808 = 0, $5809 = 0, $581 = 0, $5810 = 0, $5811 = 0, $5812 = 0, $5813 = 0, $5814 = 0, $5815 = 0, $5816 = 0, $5817 = 0, $5818 = 0, $5819 = 0, $582 = 0, $5820 = 0, $5821 = 0, $5822 = 0, $5823 = 0, $5824 = 0, $5825 = 0;
 var $5826 = 0, $5827 = 0, $5828 = 0, $5829 = 0, $583 = 0, $5830 = 0, $5831 = 0, $5832 = 0, $5833 = 0, $5834 = 0, $5835 = 0, $5836 = 0, $5837 = 0, $5838 = 0, $5839 = 0, $584 = 0, $5840 = 0, $5841 = 0, $5842 = 0, $5843 = 0;
 var $5844 = 0, $5845 = 0, $5846 = 0, $5847 = 0, $5848 = 0, $5849 = 0, $585 = 0, $5850 = 0, $5851 = 0, $5852 = 0, $5853 = 0, $5854 = 0, $5855 = 0, $5856 = 0, $5857 = 0, $5858 = 0, $5859 = 0, $586 = 0, $5860 = 0, $5861 = 0;
 var $5862 = 0, $5863 = 0, $5864 = 0, $5865 = 0, $5866 = 0, $5867 = 0, $5868 = 0, $5869 = 0, $587 = 0, $5870 = 0, $5871 = 0, $5872 = 0, $5873 = 0, $5874 = 0, $5875 = 0, $5876 = 0, $5877 = 0, $5878 = 0, $5879 = 0, $588 = 0;
 var $5880 = 0, $5881 = 0, $5882 = 0, $5883 = 0, $5884 = 0, $5885 = 0, $5886 = 0, $5887 = 0, $5888 = 0, $5889 = 0, $589 = 0, $5890 = 0, $5891 = 0, $5892 = 0, $5893 = 0, $5894 = 0, $5895 = 0, $5896 = 0, $5897 = 0, $5898 = 0;
 var $5899 = 0, $59 = 0, $590 = 0, $5900 = 0, $5901 = 0, $5902 = 0, $5903 = 0, $5904 = 0, $5905 = 0, $5906 = 0, $5907 = 0, $5908 = 0, $5909 = 0, $591 = 0, $5910 = 0, $5911 = 0, $5912 = 0, $5913 = 0, $5914 = 0, $5915 = 0;
 var $5916 = 0, $5917 = 0, $5918 = 0, $5919 = 0, $592 = 0, $5920 = 0, $5921 = 0, $5922 = 0, $5923 = 0, $5924 = 0, $5925 = 0, $5926 = 0, $5927 = 0, $5928 = 0, $5929 = 0, $593 = 0, $5930 = 0, $5931 = 0, $5932 = 0, $5933 = 0;
 var $5934 = 0, $5935 = 0, $5936 = 0, $5937 = 0, $5938 = 0, $5939 = 0, $594 = 0, $5940 = 0, $5941 = 0, $5942 = 0, $5943 = 0, $5944 = 0, $5945 = 0, $5946 = 0, $5947 = 0, $5948 = 0, $5949 = 0, $595 = 0, $5950 = 0, $5951 = 0;
 var $5952 = 0, $5953 = 0, $5954 = 0, $5955 = 0, $5956 = 0, $5957 = 0, $5958 = 0, $5959 = 0, $596 = 0, $5960 = 0, $5961 = 0, $5962 = 0, $5963 = 0, $5964 = 0, $5965 = 0, $5966 = 0, $5967 = 0, $5968 = 0, $5969 = 0, $597 = 0;
 var $5970 = 0, $5971 = 0, $5972 = 0, $5973 = 0, $5974 = 0, $5975 = 0, $5976 = 0, $5977 = 0, $5978 = 0, $5979 = 0, $598 = 0, $5980 = 0, $5981 = 0, $5982 = 0, $5983 = 0, $5984 = 0, $5985 = 0, $5986 = 0, $5987 = 0, $5988 = 0;
 var $5989 = 0, $599 = 0, $5990 = 0, $5991 = 0, $5992 = 0, $5993 = 0, $5994 = 0, $5995 = 0, $5996 = 0, $5997 = 0, $5998 = 0, $5999 = 0, $6 = 0, $60 = 0, $600 = 0, $6000 = 0, $6001 = 0, $6002 = 0, $6003 = 0, $6004 = 0;
 var $6005 = 0, $6006 = 0, $6007 = 0, $6008 = 0, $6009 = 0, $601 = 0, $6010 = 0, $6011 = 0, $6012 = 0, $6013 = 0, $6014 = 0, $6015 = 0, $6016 = 0, $6017 = 0, $6018 = 0, $6019 = 0, $602 = 0, $6020 = 0, $6021 = 0, $6022 = 0;
 var $6023 = 0, $6024 = 0, $6025 = 0, $6026 = 0, $6027 = 0, $6028 = 0, $6029 = 0, $603 = 0, $6030 = 0, $6031 = 0, $6032 = 0, $6033 = 0, $6034 = 0, $6035 = 0, $6036 = 0, $6037 = 0, $6038 = 0, $6039 = 0, $604 = 0, $6040 = 0;
 var $6041 = 0, $6042 = 0, $6043 = 0, $6044 = 0, $6045 = 0, $6046 = 0, $6047 = 0, $6048 = 0, $6049 = 0, $605 = 0, $6050 = 0, $6051 = 0, $6052 = 0, $6053 = 0, $6054 = 0, $6055 = 0, $6056 = 0, $6057 = 0, $6058 = 0, $6059 = 0;
 var $606 = 0, $6060 = 0, $6061 = 0, $6062 = 0, $6063 = 0, $6064 = 0, $6065 = 0, $6066 = 0, $6067 = 0, $6068 = 0, $6069 = 0, $607 = 0, $6070 = 0, $6071 = 0, $6072 = 0, $6073 = 0, $6074 = 0, $6075 = 0, $6076 = 0, $6077 = 0;
 var $6078 = 0, $6079 = 0, $608 = 0, $6080 = 0, $6081 = 0, $6082 = 0, $6083 = 0, $6084 = 0, $6085 = 0, $6086 = 0, $6087 = 0, $6088 = 0, $6089 = 0, $609 = 0, $6090 = 0, $6091 = 0, $6092 = 0, $6093 = 0, $6094 = 0, $6095 = 0;
 var $6096 = 0, $6097 = 0, $6098 = 0, $6099 = 0, $61 = 0, $610 = 0, $6100 = 0, $6101 = 0, $6102 = 0, $6103 = 0, $6104 = 0, $6105 = 0, $6106 = 0, $6107 = 0, $6108 = 0, $6109 = 0, $611 = 0, $6110 = 0, $6111 = 0, $6112 = 0;
 var $6113 = 0, $6114 = 0, $6115 = 0, $6116 = 0, $6117 = 0, $6118 = 0, $6119 = 0, $612 = 0, $6120 = 0, $6121 = 0, $6122 = 0, $6123 = 0, $6124 = 0, $6125 = 0, $6126 = 0, $6127 = 0, $6128 = 0, $6129 = 0, $613 = 0, $6130 = 0;
 var $6131 = 0, $6132 = 0, $6133 = 0, $6134 = 0, $6135 = 0, $6136 = 0, $6137 = 0, $6138 = 0, $6139 = 0, $614 = 0, $6140 = 0, $6141 = 0, $6142 = 0, $6143 = 0, $6144 = 0, $6145 = 0, $6146 = 0, $6147 = 0, $6148 = 0, $6149 = 0;
 var $615 = 0, $6150 = 0, $6151 = 0, $6152 = 0, $6153 = 0, $6154 = 0, $6155 = 0, $6156 = 0, $6157 = 0, $6158 = 0, $6159 = 0, $616 = 0, $6160 = 0, $6161 = 0, $6162 = 0, $6163 = 0, $6164 = 0, $6165 = 0, $6166 = 0, $6167 = 0;
 var $6168 = 0, $6169 = 0, $617 = 0, $6170 = 0, $6171 = 0, $6172 = 0, $6173 = 0, $6174 = 0, $6175 = 0, $6176 = 0, $6177 = 0, $6178 = 0, $6179 = 0, $618 = 0, $6180 = 0, $6181 = 0, $6182 = 0, $6183 = 0, $6184 = 0, $6185 = 0;
 var $6186 = 0, $6187 = 0, $6188 = 0, $6189 = 0, $619 = 0, $6190 = 0, $6191 = 0, $6192 = 0, $6193 = 0, $6194 = 0, $6195 = 0, $6196 = 0, $6197 = 0, $6198 = 0, $6199 = 0, $62 = 0, $620 = 0, $6200 = 0, $6201 = 0, $6202 = 0;
 var $6203 = 0, $6204 = 0, $6205 = 0, $6206 = 0, $6207 = 0, $6208 = 0, $6209 = 0, $621 = 0, $6210 = 0, $6211 = 0, $6212 = 0, $6213 = 0, $6214 = 0, $6215 = 0, $6216 = 0, $6217 = 0, $6218 = 0, $6219 = 0, $622 = 0, $6220 = 0;
 var $6221 = 0, $6222 = 0, $6223 = 0, $6224 = 0, $6225 = 0, $6226 = 0, $6227 = 0, $6228 = 0, $6229 = 0, $623 = 0, $6230 = 0, $6231 = 0, $6232 = 0, $6233 = 0, $6234 = 0, $6235 = 0, $6236 = 0, $6237 = 0, $6238 = 0, $6239 = 0;
 var $624 = 0, $6240 = 0, $6241 = 0, $6242 = 0, $6243 = 0, $6244 = 0, $6245 = 0, $6246 = 0, $6247 = 0, $6248 = 0, $6249 = 0, $625 = 0, $6250 = 0, $6251 = 0, $6252 = 0, $6253 = 0, $6254 = 0, $6255 = 0, $6256 = 0, $6257 = 0;
 var $6258 = 0, $6259 = 0, $626 = 0, $6260 = 0, $6261 = 0, $6262 = 0, $6263 = 0, $6264 = 0, $6265 = 0, $6266 = 0, $6267 = 0, $6268 = 0, $6269 = 0, $627 = 0, $6270 = 0, $6271 = 0, $6272 = 0, $6273 = 0, $6274 = 0, $6275 = 0;
 var $6276 = 0, $6277 = 0, $6278 = 0, $6279 = 0, $628 = 0, $6280 = 0, $6281 = 0, $6282 = 0, $6283 = 0, $6284 = 0, $6285 = 0, $6286 = 0, $6287 = 0, $6288 = 0, $6289 = 0, $629 = 0, $6290 = 0, $6291 = 0, $6292 = 0, $6293 = 0;
 var $6294 = 0, $6295 = 0, $6296 = 0, $6297 = 0, $6298 = 0, $6299 = 0, $63 = 0, $630 = 0, $6300 = 0, $6301 = 0, $6302 = 0, $6303 = 0, $6304 = 0, $6305 = 0, $6306 = 0, $6307 = 0, $6308 = 0, $6309 = 0, $631 = 0, $6310 = 0;
 var $6311 = 0, $6312 = 0, $6313 = 0, $6314 = 0, $6315 = 0, $6316 = 0, $6317 = 0, $6318 = 0, $6319 = 0, $632 = 0, $6320 = 0, $6321 = 0, $6322 = 0, $6323 = 0, $6324 = 0, $6325 = 0, $6326 = 0, $6327 = 0, $6328 = 0, $6329 = 0;
 var $633 = 0, $6330 = 0, $6331 = 0, $6332 = 0, $6333 = 0, $6334 = 0, $6335 = 0, $6336 = 0, $6337 = 0, $6338 = 0, $6339 = 0, $634 = 0, $6340 = 0, $6341 = 0, $6342 = 0, $6343 = 0, $6344 = 0, $6345 = 0, $6346 = 0, $6347 = 0;
 var $6348 = 0, $6349 = 0, $635 = 0, $6350 = 0, $6351 = 0, $6352 = 0, $6353 = 0, $6354 = 0, $6355 = 0, $6356 = 0, $6357 = 0, $6358 = 0, $6359 = 0, $636 = 0, $6360 = 0, $6361 = 0, $6362 = 0, $6363 = 0, $6364 = 0, $6365 = 0;
 var $6366 = 0, $6367 = 0, $6368 = 0, $6369 = 0, $637 = 0, $6370 = 0, $6371 = 0, $6372 = 0, $6373 = 0, $6374 = 0, $6375 = 0, $6376 = 0, $6377 = 0, $6378 = 0, $6379 = 0, $638 = 0, $6380 = 0, $6381 = 0, $6382 = 0, $6383 = 0;
 var $6384 = 0, $6385 = 0, $6386 = 0, $6387 = 0, $6388 = 0, $6389 = 0, $639 = 0, $6390 = 0, $6391 = 0, $6392 = 0, $6393 = 0, $6394 = 0, $6395 = 0, $6396 = 0, $6397 = 0, $6398 = 0, $6399 = 0, $64 = 0, $640 = 0, $6400 = 0;
 var $6401 = 0, $6402 = 0, $6403 = 0, $6404 = 0, $6405 = 0, $6406 = 0, $6407 = 0, $6408 = 0, $6409 = 0, $641 = 0, $6410 = 0, $6411 = 0, $6412 = 0, $6413 = 0, $6414 = 0, $6415 = 0, $6416 = 0, $6417 = 0, $6418 = 0, $6419 = 0;
 var $642 = 0, $6420 = 0, $6421 = 0, $6422 = 0, $6423 = 0, $6424 = 0, $6425 = 0, $6426 = 0, $6427 = 0, $6428 = 0, $6429 = 0, $643 = 0, $6430 = 0, $6431 = 0, $6432 = 0, $6433 = 0, $6434 = 0, $6435 = 0, $6436 = 0, $6437 = 0;
 var $6438 = 0, $6439 = 0, $644 = 0, $6440 = 0, $6441 = 0, $6442 = 0, $6443 = 0, $6444 = 0, $6445 = 0, $6446 = 0, $6447 = 0, $6448 = 0, $6449 = 0, $645 = 0, $6450 = 0, $6451 = 0, $6452 = 0, $6453 = 0, $6454 = 0, $6455 = 0;
 var $6456 = 0, $6457 = 0, $6458 = 0, $6459 = 0, $646 = 0, $6460 = 0, $6461 = 0, $6462 = 0, $6463 = 0, $6464 = 0, $6465 = 0, $6466 = 0, $6467 = 0, $6468 = 0, $6469 = 0, $647 = 0, $6470 = 0, $6471 = 0, $6472 = 0, $6473 = 0;
 var $6474 = 0, $6475 = 0, $6476 = 0, $6477 = 0, $6478 = 0, $6479 = 0, $648 = 0, $6480 = 0, $6481 = 0, $6482 = 0, $6483 = 0, $6484 = 0, $6485 = 0, $6486 = 0, $6487 = 0, $6488 = 0, $6489 = 0, $649 = 0, $6490 = 0, $6491 = 0;
 var $6492 = 0, $6493 = 0, $6494 = 0, $6495 = 0, $6496 = 0, $6497 = 0, $6498 = 0, $6499 = 0, $65 = 0, $650 = 0, $6500 = 0, $6501 = 0, $6502 = 0, $6503 = 0, $6504 = 0, $6505 = 0, $6506 = 0, $6507 = 0, $6508 = 0, $6509 = 0;
 var $651 = 0, $6510 = 0, $6511 = 0, $6512 = 0, $6513 = 0, $6514 = 0, $6515 = 0, $6516 = 0, $6517 = 0, $6518 = 0, $6519 = 0, $652 = 0, $6520 = 0, $6521 = 0, $6522 = 0, $6523 = 0, $6524 = 0, $6525 = 0, $6526 = 0, $6527 = 0;
 var $6528 = 0, $6529 = 0, $653 = 0, $6530 = 0, $6531 = 0, $6532 = 0, $6533 = 0, $6534 = 0, $6535 = 0, $6536 = 0, $6537 = 0, $6538 = 0, $6539 = 0, $654 = 0, $6540 = 0, $6541 = 0, $6542 = 0, $6543 = 0, $6544 = 0, $6545 = 0;
 var $6546 = 0, $6547 = 0, $6548 = 0, $6549 = 0, $655 = 0, $6550 = 0, $6551 = 0, $6552 = 0, $6553 = 0, $6554 = 0, $6555 = 0, $6556 = 0, $6557 = 0, $6558 = 0, $6559 = 0, $656 = 0, $6560 = 0, $6561 = 0, $6562 = 0, $6563 = 0;
 var $6564 = 0, $6565 = 0, $6566 = 0, $6567 = 0, $6568 = 0, $6569 = 0, $657 = 0, $6570 = 0, $6571 = 0, $6572 = 0, $6573 = 0, $6574 = 0, $6575 = 0, $6576 = 0, $6577 = 0, $6578 = 0, $6579 = 0, $658 = 0, $6580 = 0, $6581 = 0;
 var $6582 = 0, $6583 = 0, $6584 = 0, $6585 = 0, $6586 = 0, $6587 = 0, $6588 = 0, $6589 = 0, $659 = 0, $6590 = 0, $6591 = 0, $6592 = 0, $6593 = 0, $6594 = 0, $6595 = 0, $6596 = 0, $6597 = 0, $6598 = 0, $6599 = 0, $66 = 0;
 var $660 = 0, $6600 = 0, $6601 = 0, $6602 = 0, $6603 = 0, $6604 = 0, $6605 = 0, $6606 = 0, $6607 = 0, $6608 = 0, $6609 = 0, $661 = 0, $6610 = 0, $6611 = 0, $6612 = 0, $6613 = 0, $6614 = 0, $6615 = 0, $6616 = 0, $6617 = 0;
 var $6618 = 0, $6619 = 0, $662 = 0, $6620 = 0, $6621 = 0, $6622 = 0, $6623 = 0, $6624 = 0, $6625 = 0, $6626 = 0, $6627 = 0, $6628 = 0, $6629 = 0, $663 = 0, $6630 = 0, $6631 = 0, $6632 = 0, $6633 = 0, $6634 = 0, $6635 = 0;
 var $6636 = 0, $6637 = 0, $6638 = 0, $6639 = 0, $664 = 0, $6640 = 0, $6641 = 0, $6642 = 0, $6643 = 0, $6644 = 0, $6645 = 0, $6646 = 0, $6647 = 0, $6648 = 0, $6649 = 0, $665 = 0, $6650 = 0, $6651 = 0, $6652 = 0, $6653 = 0;
 var $6654 = 0, $6655 = 0, $6656 = 0, $6657 = 0, $6658 = 0, $6659 = 0, $666 = 0, $6660 = 0, $6661 = 0, $6662 = 0, $6663 = 0, $6664 = 0, $6665 = 0, $6666 = 0, $6667 = 0, $6668 = 0, $6669 = 0, $667 = 0, $6670 = 0, $6671 = 0;
 var $6672 = 0, $6673 = 0, $6674 = 0, $6675 = 0, $6676 = 0, $6677 = 0, $6678 = 0, $6679 = 0, $668 = 0, $6680 = 0, $6681 = 0, $6682 = 0, $6683 = 0, $6684 = 0, $6685 = 0, $6686 = 0, $6687 = 0, $6688 = 0, $6689 = 0, $669 = 0;
 var $6690 = 0, $6691 = 0, $6692 = 0, $6693 = 0, $6694 = 0, $6695 = 0, $6696 = 0, $6697 = 0, $6698 = 0, $6699 = 0, $67 = 0, $670 = 0, $6700 = 0, $6701 = 0, $6702 = 0, $6703 = 0, $6704 = 0, $6705 = 0, $6706 = 0, $6707 = 0;
 var $6708 = 0, $6709 = 0, $671 = 0, $6710 = 0, $6711 = 0, $6712 = 0, $6713 = 0, $6714 = 0, $6715 = 0, $6716 = 0, $6717 = 0, $6718 = 0, $6719 = 0, $672 = 0, $6720 = 0, $6721 = 0, $6722 = 0, $6723 = 0, $6724 = 0, $6725 = 0;
 var $6726 = 0, $6727 = 0, $6728 = 0, $6729 = 0, $673 = 0, $6730 = 0, $6731 = 0, $6732 = 0, $6733 = 0, $6734 = 0, $6735 = 0, $6736 = 0, $6737 = 0, $6738 = 0, $6739 = 0, $674 = 0, $6740 = 0, $6741 = 0, $6742 = 0, $6743 = 0;
 var $6744 = 0, $6745 = 0, $6746 = 0, $6747 = 0, $6748 = 0, $6749 = 0, $675 = 0, $6750 = 0, $6751 = 0, $6752 = 0, $6753 = 0, $6754 = 0, $6755 = 0, $6756 = 0, $6757 = 0, $6758 = 0, $6759 = 0, $676 = 0, $6760 = 0, $6761 = 0;
 var $6762 = 0, $6763 = 0, $6764 = 0, $6765 = 0, $6766 = 0, $6767 = 0, $6768 = 0, $6769 = 0, $677 = 0, $6770 = 0, $6771 = 0, $6772 = 0, $6773 = 0, $6774 = 0, $6775 = 0, $6776 = 0, $6777 = 0, $6778 = 0, $6779 = 0, $678 = 0;
 var $6780 = 0, $6781 = 0, $6782 = 0, $6783 = 0, $6784 = 0, $6785 = 0, $6786 = 0, $6787 = 0, $6788 = 0, $6789 = 0, $679 = 0, $6790 = 0, $6791 = 0, $6792 = 0, $6793 = 0, $6794 = 0, $6795 = 0, $6796 = 0, $6797 = 0, $6798 = 0;
 var $6799 = 0, $68 = 0, $680 = 0, $6800 = 0, $6801 = 0, $6802 = 0, $6803 = 0, $6804 = 0, $6805 = 0, $6806 = 0, $6807 = 0, $6808 = 0, $6809 = 0, $681 = 0, $6810 = 0, $6811 = 0, $6812 = 0, $6813 = 0, $6814 = 0, $6815 = 0;
 var $6816 = 0, $6817 = 0, $6818 = 0, $6819 = 0, $682 = 0, $6820 = 0, $6821 = 0, $6822 = 0, $6823 = 0, $6824 = 0, $6825 = 0, $6826 = 0, $6827 = 0, $6828 = 0, $6829 = 0, $683 = 0, $6830 = 0, $6831 = 0, $6832 = 0, $6833 = 0;
 var $6834 = 0, $6835 = 0, $6836 = 0, $6837 = 0, $6838 = 0, $6839 = 0, $684 = 0, $6840 = 0, $6841 = 0, $6842 = 0, $6843 = 0, $6844 = 0, $6845 = 0, $6846 = 0, $6847 = 0, $6848 = 0, $6849 = 0, $685 = 0, $6850 = 0, $6851 = 0;
 var $6852 = 0, $6853 = 0, $6854 = 0, $6855 = 0, $6856 = 0, $6857 = 0, $6858 = 0, $6859 = 0, $686 = 0, $6860 = 0, $6861 = 0, $6862 = 0, $6863 = 0, $6864 = 0, $6865 = 0, $6866 = 0, $6867 = 0, $6868 = 0, $6869 = 0, $687 = 0;
 var $6870 = 0, $6871 = 0, $6872 = 0, $6873 = 0, $6874 = 0, $6875 = 0, $6876 = 0, $6877 = 0, $6878 = 0, $6879 = 0, $688 = 0, $6880 = 0, $6881 = 0, $6882 = 0, $6883 = 0, $6884 = 0, $6885 = 0, $6886 = 0, $6887 = 0, $6888 = 0;
 var $6889 = 0, $689 = 0, $6890 = 0, $6891 = 0, $6892 = 0, $6893 = 0, $6894 = 0, $6895 = 0, $6896 = 0, $6897 = 0, $6898 = 0, $6899 = 0, $69 = 0, $690 = 0, $6900 = 0, $6901 = 0, $6902 = 0, $6903 = 0, $6904 = 0, $6905 = 0;
 var $6906 = 0, $6907 = 0, $6908 = 0, $6909 = 0, $691 = 0, $6910 = 0, $6911 = 0, $6912 = 0, $6913 = 0, $6914 = 0, $6915 = 0, $6916 = 0, $6917 = 0, $6918 = 0, $6919 = 0, $692 = 0, $6920 = 0, $6921 = 0, $6922 = 0, $6923 = 0;
 var $6924 = 0, $6925 = 0, $6926 = 0, $6927 = 0, $6928 = 0, $6929 = 0, $693 = 0, $6930 = 0, $6931 = 0, $6932 = 0, $6933 = 0, $6934 = 0, $6935 = 0, $6936 = 0, $6937 = 0, $6938 = 0, $6939 = 0, $694 = 0, $6940 = 0, $6941 = 0;
 var $6942 = 0, $6943 = 0, $6944 = 0, $6945 = 0, $6946 = 0, $6947 = 0, $6948 = 0, $6949 = 0, $695 = 0, $6950 = 0, $6951 = 0, $6952 = 0, $6953 = 0, $6954 = 0, $6955 = 0, $6956 = 0, $6957 = 0, $6958 = 0, $6959 = 0, $696 = 0;
 var $6960 = 0, $6961 = 0, $6962 = 0, $6963 = 0, $6964 = 0, $6965 = 0, $6966 = 0, $6967 = 0, $6968 = 0, $6969 = 0, $697 = 0, $6970 = 0, $6971 = 0, $6972 = 0, $6973 = 0, $6974 = 0, $6975 = 0, $6976 = 0, $6977 = 0, $6978 = 0;
 var $6979 = 0, $698 = 0, $6980 = 0, $6981 = 0, $6982 = 0, $6983 = 0, $6984 = 0, $6985 = 0, $6986 = 0, $6987 = 0, $6988 = 0, $6989 = 0, $699 = 0, $6990 = 0, $6991 = 0, $6992 = 0, $6993 = 0, $6994 = 0, $6995 = 0, $6996 = 0;
 var $6997 = 0, $6998 = 0, $6999 = 0, $7 = 0, $70 = 0, $700 = 0, $7000 = 0, $7001 = 0, $7002 = 0, $7003 = 0, $7004 = 0, $7005 = 0, $7006 = 0, $7007 = 0, $7008 = 0, $7009 = 0, $701 = 0, $7010 = 0, $7011 = 0, $7012 = 0;
 var $7013 = 0, $7014 = 0, $7015 = 0, $7016 = 0, $7017 = 0, $7018 = 0, $7019 = 0, $702 = 0, $7020 = 0, $7021 = 0, $7022 = 0, $7023 = 0, $7024 = 0, $7025 = 0, $7026 = 0, $7027 = 0, $7028 = 0, $7029 = 0, $703 = 0, $7030 = 0;
 var $7031 = 0, $7032 = 0, $7033 = 0, $7034 = 0, $7035 = 0, $7036 = 0, $7037 = 0, $7038 = 0, $7039 = 0, $704 = 0, $7040 = 0, $7041 = 0, $7042 = 0, $7043 = 0, $7044 = 0, $7045 = 0, $7046 = 0, $7047 = 0, $7048 = 0, $7049 = 0;
 var $705 = 0, $7050 = 0, $7051 = 0, $7052 = 0, $7053 = 0, $7054 = 0, $7055 = 0, $7056 = 0, $7057 = 0, $7058 = 0, $7059 = 0, $706 = 0, $7060 = 0, $7061 = 0, $7062 = 0, $7063 = 0, $7064 = 0, $7065 = 0, $7066 = 0, $7067 = 0;
 var $7068 = 0, $7069 = 0, $707 = 0, $7070 = 0, $7071 = 0, $7072 = 0, $7073 = 0, $7074 = 0, $7075 = 0, $7076 = 0, $7077 = 0, $7078 = 0, $7079 = 0, $708 = 0, $7080 = 0, $7081 = 0, $7082 = 0, $7083 = 0, $7084 = 0, $7085 = 0;
 var $7086 = 0, $7087 = 0, $7088 = 0, $7089 = 0, $709 = 0, $7090 = 0, $7091 = 0, $7092 = 0, $7093 = 0, $7094 = 0, $7095 = 0, $7096 = 0, $7097 = 0, $7098 = 0, $7099 = 0, $71 = 0, $710 = 0, $7100 = 0, $7101 = 0, $7102 = 0;
 var $7103 = 0, $7104 = 0, $7105 = 0, $7106 = 0, $7107 = 0, $7108 = 0, $7109 = 0, $711 = 0, $7110 = 0, $7111 = 0, $7112 = 0, $7113 = 0, $7114 = 0, $7115 = 0, $7116 = 0, $7117 = 0, $7118 = 0, $7119 = 0, $712 = 0, $7120 = 0;
 var $7121 = 0, $7122 = 0, $7123 = 0, $7124 = 0, $7125 = 0, $7126 = 0, $7127 = 0, $7128 = 0, $7129 = 0, $713 = 0, $7130 = 0, $7131 = 0, $7132 = 0, $7133 = 0, $7134 = 0, $7135 = 0, $7136 = 0, $7137 = 0, $7138 = 0, $7139 = 0;
 var $714 = 0, $7140 = 0, $7141 = 0, $7142 = 0, $7143 = 0, $7144 = 0, $7145 = 0, $7146 = 0, $7147 = 0, $7148 = 0, $7149 = 0, $715 = 0, $7150 = 0, $7151 = 0, $7152 = 0, $7153 = 0, $7154 = 0, $7155 = 0, $7156 = 0, $7157 = 0;
 var $7158 = 0, $7159 = 0, $716 = 0, $7160 = 0, $7161 = 0, $7162 = 0, $7163 = 0, $7164 = 0, $7165 = 0, $7166 = 0, $7167 = 0, $7168 = 0, $7169 = 0, $717 = 0, $7170 = 0, $7171 = 0, $7172 = 0, $7173 = 0, $7174 = 0, $7175 = 0;
 var $7176 = 0, $7177 = 0, $7178 = 0, $7179 = 0, $718 = 0, $7180 = 0, $7181 = 0, $7182 = 0, $7183 = 0, $7184 = 0, $7185 = 0, $7186 = 0, $7187 = 0, $7188 = 0, $7189 = 0, $719 = 0, $7190 = 0, $7191 = 0, $7192 = 0, $7193 = 0;
 var $7194 = 0, $7195 = 0, $7196 = 0, $7197 = 0, $7198 = 0, $7199 = 0, $72 = 0, $720 = 0, $7200 = 0, $7201 = 0, $7202 = 0, $7203 = 0, $7204 = 0, $7205 = 0, $7206 = 0, $7207 = 0, $7208 = 0, $7209 = 0, $721 = 0, $7210 = 0;
 var $7211 = 0, $7212 = 0, $7213 = 0, $7214 = 0, $7215 = 0, $7216 = 0, $7217 = 0, $7218 = 0, $7219 = 0, $722 = 0, $7220 = 0, $7221 = 0, $7222 = 0, $7223 = 0, $7224 = 0, $7225 = 0, $7226 = 0, $7227 = 0, $7228 = 0, $7229 = 0;
 var $723 = 0, $7230 = 0, $7231 = 0, $7232 = 0, $7233 = 0, $7234 = 0, $7235 = 0, $7236 = 0, $7237 = 0, $7238 = 0, $7239 = 0, $724 = 0, $7240 = 0, $7241 = 0, $7242 = 0, $7243 = 0, $7244 = 0, $7245 = 0, $7246 = 0, $7247 = 0;
 var $7248 = 0, $7249 = 0, $725 = 0, $7250 = 0, $7251 = 0, $7252 = 0, $7253 = 0, $7254 = 0, $7255 = 0, $7256 = 0, $7257 = 0, $7258 = 0, $7259 = 0, $726 = 0, $7260 = 0, $7261 = 0, $7262 = 0, $7263 = 0, $7264 = 0, $7265 = 0;
 var $7266 = 0, $7267 = 0, $7268 = 0, $7269 = 0, $727 = 0, $7270 = 0, $7271 = 0, $7272 = 0, $7273 = 0, $7274 = 0, $7275 = 0, $7276 = 0, $7277 = 0, $7278 = 0, $7279 = 0, $728 = 0, $7280 = 0, $7281 = 0, $7282 = 0, $7283 = 0;
 var $7284 = 0, $7285 = 0, $7286 = 0, $7287 = 0, $7288 = 0, $7289 = 0, $729 = 0, $7290 = 0, $7291 = 0, $7292 = 0, $7293 = 0, $7294 = 0, $7295 = 0, $7296 = 0, $7297 = 0, $7298 = 0, $7299 = 0, $73 = 0, $730 = 0, $7300 = 0;
 var $7301 = 0, $7302 = 0, $7303 = 0, $7304 = 0, $7305 = 0, $7306 = 0, $7307 = 0, $7308 = 0, $7309 = 0, $731 = 0, $7310 = 0, $7311 = 0, $7312 = 0, $7313 = 0, $7314 = 0, $7315 = 0, $7316 = 0, $7317 = 0, $7318 = 0, $7319 = 0;
 var $732 = 0, $7320 = 0, $7321 = 0, $7322 = 0, $7323 = 0, $7324 = 0, $7325 = 0, $7326 = 0, $7327 = 0, $7328 = 0, $7329 = 0, $733 = 0, $7330 = 0, $7331 = 0, $7332 = 0, $7333 = 0, $7334 = 0, $7335 = 0, $7336 = 0, $7337 = 0;
 var $7338 = 0, $7339 = 0, $734 = 0, $7340 = 0, $7341 = 0, $7342 = 0, $7343 = 0, $7344 = 0, $7345 = 0, $7346 = 0, $7347 = 0, $7348 = 0, $7349 = 0, $735 = 0, $7350 = 0, $7351 = 0, $7352 = 0, $7353 = 0, $7354 = 0, $7355 = 0;
 var $7356 = 0, $7357 = 0, $7358 = 0, $7359 = 0, $736 = 0, $7360 = 0, $7361 = 0, $7362 = 0, $7363 = 0, $7364 = 0, $7365 = 0, $7366 = 0, $7367 = 0, $7368 = 0, $7369 = 0, $737 = 0, $7370 = 0, $7371 = 0, $7372 = 0, $7373 = 0;
 var $7374 = 0, $7375 = 0, $7376 = 0, $7377 = 0, $7378 = 0, $7379 = 0, $738 = 0, $7380 = 0, $7381 = 0, $7382 = 0, $7383 = 0, $7384 = 0, $7385 = 0, $7386 = 0, $7387 = 0, $7388 = 0, $7389 = 0, $739 = 0, $7390 = 0, $7391 = 0;
 var $7392 = 0, $7393 = 0, $7394 = 0, $7395 = 0, $7396 = 0, $7397 = 0, $7398 = 0, $7399 = 0, $74 = 0, $740 = 0, $7400 = 0, $7401 = 0, $7402 = 0, $7403 = 0, $7404 = 0, $7405 = 0, $7406 = 0, $7407 = 0, $7408 = 0, $7409 = 0;
 var $741 = 0, $7410 = 0, $7411 = 0, $7412 = 0, $7413 = 0, $7414 = 0, $7415 = 0, $7416 = 0, $7417 = 0, $7418 = 0, $7419 = 0, $742 = 0, $7420 = 0, $7421 = 0, $7422 = 0, $7423 = 0, $7424 = 0, $7425 = 0, $7426 = 0, $7427 = 0;
 var $7428 = 0, $7429 = 0, $743 = 0, $7430 = 0, $7431 = 0, $7432 = 0, $7433 = 0, $7434 = 0, $7435 = 0, $7436 = 0, $7437 = 0, $7438 = 0, $7439 = 0, $744 = 0, $7440 = 0, $7441 = 0, $7442 = 0, $7443 = 0, $7444 = 0, $7445 = 0;
 var $7446 = 0, $7447 = 0, $7448 = 0, $7449 = 0, $745 = 0, $7450 = 0, $7451 = 0, $7452 = 0, $7453 = 0, $7454 = 0, $7455 = 0, $7456 = 0, $7457 = 0, $7458 = 0, $7459 = 0, $746 = 0, $7460 = 0, $7461 = 0, $7462 = 0, $7463 = 0;
 var $7464 = 0, $7465 = 0, $7466 = 0, $7467 = 0, $7468 = 0, $7469 = 0, $747 = 0, $7470 = 0, $7471 = 0, $7472 = 0, $7473 = 0, $7474 = 0, $7475 = 0, $7476 = 0, $7477 = 0, $7478 = 0, $7479 = 0, $748 = 0, $7480 = 0, $7481 = 0;
 var $7482 = 0, $7483 = 0, $7484 = 0, $7485 = 0, $7486 = 0, $7487 = 0, $7488 = 0, $7489 = 0, $749 = 0, $7490 = 0, $7491 = 0, $7492 = 0, $7493 = 0, $7494 = 0, $7495 = 0, $7496 = 0, $7497 = 0, $7498 = 0, $7499 = 0, $75 = 0;
 var $750 = 0, $7500 = 0, $7501 = 0, $7502 = 0, $7503 = 0, $7504 = 0, $7505 = 0, $7506 = 0, $7507 = 0, $7508 = 0, $7509 = 0, $751 = 0, $7510 = 0, $7511 = 0, $7512 = 0, $7513 = 0, $7514 = 0, $7515 = 0, $7516 = 0, $7517 = 0;
 var $7518 = 0, $7519 = 0, $752 = 0, $7520 = 0, $7521 = 0, $7522 = 0, $7523 = 0, $7524 = 0, $7525 = 0, $7526 = 0, $7527 = 0, $7528 = 0, $7529 = 0, $753 = 0, $7530 = 0, $7531 = 0, $7532 = 0, $7533 = 0, $7534 = 0, $7535 = 0;
 var $7536 = 0, $7537 = 0, $7538 = 0, $7539 = 0, $754 = 0, $7540 = 0, $7541 = 0, $7542 = 0, $7543 = 0, $7544 = 0, $7545 = 0, $7546 = 0, $7547 = 0, $7548 = 0, $7549 = 0, $755 = 0, $7550 = 0, $7551 = 0, $7552 = 0, $7553 = 0;
 var $7554 = 0, $7555 = 0, $7556 = 0, $7557 = 0, $7558 = 0, $7559 = 0, $756 = 0, $7560 = 0, $7561 = 0, $7562 = 0, $7563 = 0, $7564 = 0, $7565 = 0, $7566 = 0, $7567 = 0, $7568 = 0, $7569 = 0, $757 = 0, $7570 = 0, $7571 = 0;
 var $7572 = 0, $7573 = 0, $7574 = 0, $7575 = 0, $7576 = 0, $7577 = 0, $7578 = 0, $7579 = 0, $758 = 0, $7580 = 0, $7581 = 0, $7582 = 0, $7583 = 0, $7584 = 0, $7585 = 0, $7586 = 0, $7587 = 0, $7588 = 0, $7589 = 0, $759 = 0;
 var $7590 = 0, $7591 = 0, $7592 = 0, $7593 = 0, $7594 = 0, $7595 = 0, $7596 = 0, $7597 = 0, $7598 = 0, $7599 = 0, $76 = 0, $760 = 0, $7600 = 0, $7601 = 0, $7602 = 0, $7603 = 0, $7604 = 0, $7605 = 0, $7606 = 0, $7607 = 0;
 var $7608 = 0, $7609 = 0, $761 = 0, $7610 = 0, $7611 = 0, $7612 = 0, $7613 = 0, $7614 = 0, $7615 = 0, $7616 = 0, $7617 = 0, $7618 = 0, $7619 = 0, $762 = 0, $7620 = 0, $7621 = 0, $7622 = 0, $7623 = 0, $7624 = 0, $7625 = 0;
 var $7626 = 0, $7627 = 0, $7628 = 0, $7629 = 0, $763 = 0, $7630 = 0, $7631 = 0, $7632 = 0, $7633 = 0, $7634 = 0, $7635 = 0, $7636 = 0, $7637 = 0, $7638 = 0, $7639 = 0, $764 = 0, $7640 = 0, $7641 = 0, $7642 = 0, $7643 = 0;
 var $7644 = 0, $7645 = 0, $7646 = 0, $7647 = 0, $7648 = 0, $7649 = 0, $765 = 0, $7650 = 0, $7651 = 0, $7652 = 0, $7653 = 0, $7654 = 0, $7655 = 0, $7656 = 0, $7657 = 0, $7658 = 0, $7659 = 0, $766 = 0, $7660 = 0, $7661 = 0;
 var $7662 = 0, $7663 = 0, $7664 = 0, $7665 = 0, $7666 = 0, $7667 = 0, $7668 = 0, $7669 = 0, $767 = 0, $7670 = 0, $7671 = 0, $7672 = 0, $7673 = 0, $7674 = 0, $7675 = 0, $7676 = 0, $7677 = 0, $7678 = 0, $7679 = 0, $768 = 0;
 var $7680 = 0, $7681 = 0, $7682 = 0, $7683 = 0, $7684 = 0, $7685 = 0, $7686 = 0, $7687 = 0, $7688 = 0, $7689 = 0, $769 = 0, $7690 = 0, $7691 = 0, $7692 = 0, $7693 = 0, $7694 = 0, $7695 = 0, $7696 = 0, $7697 = 0, $7698 = 0;
 var $7699 = 0, $77 = 0, $770 = 0, $7700 = 0, $7701 = 0, $7702 = 0, $7703 = 0, $7704 = 0, $7705 = 0, $7706 = 0, $7707 = 0, $7708 = 0, $7709 = 0, $771 = 0, $7710 = 0, $7711 = 0, $7712 = 0, $7713 = 0, $7714 = 0, $7715 = 0;
 var $7716 = 0, $7717 = 0, $7718 = 0, $7719 = 0, $772 = 0, $7720 = 0, $7721 = 0, $7722 = 0, $7723 = 0, $7724 = 0, $7725 = 0, $7726 = 0, $7727 = 0, $7728 = 0, $7729 = 0, $773 = 0, $7730 = 0, $7731 = 0, $7732 = 0, $7733 = 0;
 var $7734 = 0, $7735 = 0, $7736 = 0, $7737 = 0, $7738 = 0, $7739 = 0, $774 = 0, $7740 = 0, $7741 = 0, $7742 = 0, $7743 = 0, $7744 = 0, $7745 = 0, $7746 = 0, $7747 = 0, $7748 = 0, $7749 = 0, $775 = 0, $7750 = 0, $7751 = 0;
 var $7752 = 0, $7753 = 0, $7754 = 0, $7755 = 0, $7756 = 0, $7757 = 0, $7758 = 0, $7759 = 0, $776 = 0, $7760 = 0, $7761 = 0, $7762 = 0, $7763 = 0, $7764 = 0, $7765 = 0, $7766 = 0, $7767 = 0, $7768 = 0, $7769 = 0, $777 = 0;
 var $7770 = 0, $7771 = 0, $7772 = 0, $7773 = 0, $7774 = 0, $7775 = 0, $7776 = 0, $7777 = 0, $7778 = 0, $7779 = 0, $778 = 0, $7780 = 0, $7781 = 0, $7782 = 0, $7783 = 0, $7784 = 0, $7785 = 0, $7786 = 0, $7787 = 0, $7788 = 0;
 var $7789 = 0, $779 = 0, $7790 = 0, $7791 = 0, $7792 = 0, $7793 = 0, $7794 = 0, $7795 = 0, $7796 = 0, $7797 = 0, $7798 = 0, $7799 = 0, $78 = 0, $780 = 0, $7800 = 0, $7801 = 0, $7802 = 0, $7803 = 0, $7804 = 0, $7805 = 0;
 var $7806 = 0, $7807 = 0, $7808 = 0, $7809 = 0, $781 = 0, $7810 = 0, $7811 = 0, $7812 = 0, $7813 = 0, $7814 = 0, $7815 = 0, $7816 = 0, $7817 = 0, $7818 = 0, $7819 = 0, $782 = 0, $7820 = 0, $7821 = 0, $7822 = 0, $7823 = 0;
 var $7824 = 0, $7825 = 0, $7826 = 0, $7827 = 0, $7828 = 0, $7829 = 0, $783 = 0, $7830 = 0, $7831 = 0, $7832 = 0, $7833 = 0, $7834 = 0, $7835 = 0, $7836 = 0, $7837 = 0, $7838 = 0, $7839 = 0, $784 = 0, $7840 = 0, $7841 = 0;
 var $7842 = 0, $7843 = 0, $7844 = 0, $7845 = 0, $7846 = 0, $7847 = 0, $7848 = 0, $7849 = 0, $785 = 0, $7850 = 0, $7851 = 0, $7852 = 0, $7853 = 0, $7854 = 0, $7855 = 0, $7856 = 0, $7857 = 0, $7858 = 0, $7859 = 0, $786 = 0;
 var $7860 = 0, $7861 = 0, $7862 = 0, $7863 = 0, $7864 = 0, $7865 = 0, $7866 = 0, $7867 = 0, $7868 = 0, $7869 = 0, $787 = 0, $7870 = 0, $7871 = 0, $7872 = 0, $7873 = 0, $7874 = 0, $7875 = 0, $7876 = 0, $7877 = 0, $7878 = 0;
 var $7879 = 0, $788 = 0, $7880 = 0, $7881 = 0, $7882 = 0, $7883 = 0, $7884 = 0, $7885 = 0, $7886 = 0, $7887 = 0, $7888 = 0, $7889 = 0, $789 = 0, $7890 = 0, $7891 = 0, $7892 = 0, $7893 = 0, $7894 = 0, $7895 = 0, $7896 = 0;
 var $7897 = 0, $7898 = 0, $7899 = 0, $79 = 0, $790 = 0, $7900 = 0, $7901 = 0, $7902 = 0, $7903 = 0, $7904 = 0, $7905 = 0, $7906 = 0, $7907 = 0, $7908 = 0, $7909 = 0, $791 = 0, $7910 = 0, $7911 = 0, $7912 = 0, $7913 = 0;
 var $7914 = 0, $7915 = 0, $7916 = 0, $7917 = 0, $7918 = 0, $7919 = 0, $792 = 0, $7920 = 0, $7921 = 0, $7922 = 0, $7923 = 0, $7924 = 0, $7925 = 0, $7926 = 0, $7927 = 0, $7928 = 0, $7929 = 0, $793 = 0, $7930 = 0, $7931 = 0;
 var $7932 = 0, $7933 = 0, $7934 = 0, $7935 = 0, $7936 = 0, $7937 = 0, $7938 = 0, $7939 = 0, $794 = 0, $7940 = 0, $7941 = 0, $7942 = 0, $7943 = 0, $7944 = 0, $7945 = 0, $7946 = 0, $7947 = 0, $7948 = 0, $7949 = 0, $795 = 0;
 var $7950 = 0, $7951 = 0, $7952 = 0, $7953 = 0, $7954 = 0, $7955 = 0, $7956 = 0, $7957 = 0, $7958 = 0, $7959 = 0, $796 = 0, $7960 = 0, $7961 = 0, $7962 = 0, $7963 = 0, $7964 = 0, $7965 = 0, $7966 = 0, $7967 = 0, $7968 = 0;
 var $7969 = 0, $797 = 0, $7970 = 0, $7971 = 0, $7972 = 0, $7973 = 0, $7974 = 0, $7975 = 0, $7976 = 0, $7977 = 0, $7978 = 0, $7979 = 0, $798 = 0, $7980 = 0, $7981 = 0, $7982 = 0, $7983 = 0, $7984 = 0, $7985 = 0, $7986 = 0;
 var $7987 = 0, $7988 = 0, $7989 = 0, $799 = 0, $7990 = 0, $7991 = 0, $7992 = 0, $7993 = 0, $7994 = 0, $7995 = 0, $7996 = 0, $7997 = 0, $7998 = 0, $7999 = 0, $8 = 0, $80 = 0, $800 = 0, $8000 = 0, $8001 = 0, $8002 = 0;
 var $8003 = 0, $8004 = 0, $8005 = 0, $8006 = 0, $8007 = 0, $8008 = 0, $8009 = 0, $801 = 0, $8010 = 0, $8011 = 0, $8012 = 0, $8013 = 0, $8014 = 0, $8015 = 0, $8016 = 0, $8017 = 0, $8018 = 0, $8019 = 0, $802 = 0, $8020 = 0;
 var $8021 = 0, $8022 = 0, $8023 = 0, $8024 = 0, $8025 = 0, $8026 = 0, $8027 = 0, $8028 = 0, $8029 = 0, $803 = 0, $8030 = 0, $8031 = 0, $8032 = 0, $8033 = 0, $8034 = 0, $8035 = 0, $8036 = 0, $8037 = 0, $8038 = 0, $8039 = 0;
 var $804 = 0, $8040 = 0, $8041 = 0, $8042 = 0, $8043 = 0, $8044 = 0, $8045 = 0, $8046 = 0, $8047 = 0, $8048 = 0, $8049 = 0, $805 = 0, $8050 = 0, $8051 = 0, $8052 = 0, $8053 = 0, $8054 = 0, $8055 = 0, $8056 = 0, $8057 = 0;
 var $8058 = 0, $8059 = 0, $806 = 0, $8060 = 0, $8061 = 0, $8062 = 0, $8063 = 0, $8064 = 0, $8065 = 0, $8066 = 0, $8067 = 0, $8068 = 0, $8069 = 0, $807 = 0, $8070 = 0, $8071 = 0, $8072 = 0, $8073 = 0, $8074 = 0, $8075 = 0;
 var $8076 = 0, $8077 = 0, $8078 = 0, $8079 = 0, $808 = 0, $8080 = 0, $8081 = 0, $8082 = 0, $8083 = 0, $8084 = 0, $8085 = 0, $8086 = 0, $8087 = 0, $8088 = 0, $8089 = 0, $809 = 0, $8090 = 0, $8091 = 0, $8092 = 0, $8093 = 0;
 var $8094 = 0, $8095 = 0, $8096 = 0, $8097 = 0, $8098 = 0, $8099 = 0, $81 = 0, $810 = 0, $8100 = 0, $8101 = 0, $8102 = 0, $8103 = 0, $8104 = 0, $8105 = 0, $8106 = 0, $8107 = 0, $8108 = 0, $8109 = 0, $811 = 0, $8110 = 0;
 var $8111 = 0, $8112 = 0, $8113 = 0, $8114 = 0, $8115 = 0, $8116 = 0, $8117 = 0, $8118 = 0, $8119 = 0, $812 = 0, $8120 = 0, $8121 = 0, $8122 = 0, $8123 = 0, $8124 = 0, $8125 = 0, $8126 = 0, $8127 = 0, $8128 = 0, $8129 = 0;
 var $813 = 0, $8130 = 0, $8131 = 0, $8132 = 0, $8133 = 0, $8134 = 0, $8135 = 0, $8136 = 0, $8137 = 0, $8138 = 0, $8139 = 0, $814 = 0, $8140 = 0, $8141 = 0, $8142 = 0, $8143 = 0, $8144 = 0, $8145 = 0, $8146 = 0, $8147 = 0;
 var $8148 = 0, $8149 = 0, $815 = 0, $8150 = 0, $8151 = 0, $8152 = 0, $8153 = 0, $8154 = 0, $8155 = 0, $8156 = 0, $8157 = 0, $8158 = 0, $8159 = 0, $816 = 0, $8160 = 0, $8161 = 0, $8162 = 0, $8163 = 0, $8164 = 0, $8165 = 0;
 var $8166 = 0, $8167 = 0, $8168 = 0, $8169 = 0, $817 = 0, $8170 = 0, $8171 = 0, $8172 = 0, $8173 = 0, $8174 = 0, $8175 = 0, $8176 = 0, $8177 = 0, $8178 = 0, $8179 = 0, $818 = 0, $8180 = 0, $8181 = 0, $8182 = 0, $8183 = 0;
 var $8184 = 0, $8185 = 0, $8186 = 0, $8187 = 0, $8188 = 0, $8189 = 0, $819 = 0, $8190 = 0, $8191 = 0, $8192 = 0, $8193 = 0, $8194 = 0, $8195 = 0, $8196 = 0, $8197 = 0, $8198 = 0, $8199 = 0, $82 = 0, $820 = 0, $8200 = 0;
 var $8201 = 0, $8202 = 0, $8203 = 0, $8204 = 0, $8205 = 0, $8206 = 0, $8207 = 0, $8208 = 0, $8209 = 0, $821 = 0, $8210 = 0, $8211 = 0, $8212 = 0, $8213 = 0, $8214 = 0, $8215 = 0, $8216 = 0, $8217 = 0, $8218 = 0, $8219 = 0;
 var $822 = 0, $8220 = 0, $8221 = 0, $8222 = 0, $8223 = 0, $8224 = 0, $8225 = 0, $8226 = 0, $8227 = 0, $8228 = 0, $8229 = 0, $823 = 0, $8230 = 0, $8231 = 0, $8232 = 0, $8233 = 0, $8234 = 0, $8235 = 0, $8236 = 0, $8237 = 0;
 var $8238 = 0, $8239 = 0, $824 = 0, $8240 = 0, $8241 = 0, $8242 = 0, $8243 = 0, $8244 = 0, $8245 = 0, $8246 = 0, $8247 = 0, $8248 = 0, $8249 = 0, $825 = 0, $8250 = 0, $8251 = 0, $8252 = 0, $8253 = 0, $8254 = 0, $8255 = 0;
 var $8256 = 0, $8257 = 0, $8258 = 0, $8259 = 0, $826 = 0, $8260 = 0, $8261 = 0, $8262 = 0, $8263 = 0, $8264 = 0, $8265 = 0, $8266 = 0, $8267 = 0, $8268 = 0, $8269 = 0, $827 = 0, $8270 = 0, $8271 = 0, $8272 = 0, $8273 = 0;
 var $8274 = 0, $8275 = 0, $8276 = 0, $8277 = 0, $8278 = 0, $8279 = 0, $828 = 0, $8280 = 0, $8281 = 0, $8282 = 0, $8283 = 0, $8284 = 0, $8285 = 0, $8286 = 0, $8287 = 0, $8288 = 0, $8289 = 0, $829 = 0, $8290 = 0, $8291 = 0;
 var $8292 = 0, $8293 = 0, $8294 = 0, $8295 = 0, $8296 = 0, $8297 = 0, $8298 = 0, $8299 = 0, $83 = 0, $830 = 0, $8300 = 0, $8301 = 0, $8302 = 0, $8303 = 0, $8304 = 0, $8305 = 0, $8306 = 0, $8307 = 0, $8308 = 0, $8309 = 0;
 var $831 = 0, $8310 = 0, $8311 = 0, $8312 = 0, $8313 = 0, $8314 = 0, $8315 = 0, $8316 = 0, $8317 = 0, $8318 = 0, $8319 = 0, $832 = 0, $8320 = 0, $8321 = 0, $8322 = 0, $8323 = 0, $8324 = 0, $8325 = 0, $8326 = 0, $8327 = 0;
 var $8328 = 0, $8329 = 0, $833 = 0, $8330 = 0, $8331 = 0, $8332 = 0, $8333 = 0, $8334 = 0, $8335 = 0, $8336 = 0, $8337 = 0, $8338 = 0, $8339 = 0, $834 = 0, $8340 = 0, $8341 = 0, $8342 = 0, $8343 = 0, $8344 = 0, $8345 = 0;
 var $8346 = 0, $8347 = 0, $8348 = 0, $8349 = 0, $835 = 0, $8350 = 0, $8351 = 0, $8352 = 0, $8353 = 0, $8354 = 0, $8355 = 0, $8356 = 0, $8357 = 0, $8358 = 0, $8359 = 0, $836 = 0, $8360 = 0, $8361 = 0, $8362 = 0, $8363 = 0;
 var $8364 = 0, $8365 = 0, $8366 = 0, $8367 = 0, $8368 = 0, $8369 = 0, $837 = 0, $8370 = 0, $8371 = 0, $8372 = 0, $8373 = 0, $8374 = 0, $8375 = 0, $8376 = 0, $8377 = 0, $8378 = 0, $8379 = 0, $838 = 0, $8380 = 0, $8381 = 0;
 var $8382 = 0, $8383 = 0, $8384 = 0, $8385 = 0, $8386 = 0, $8387 = 0, $8388 = 0, $8389 = 0, $839 = 0, $8390 = 0, $8391 = 0, $8392 = 0, $8393 = 0, $8394 = 0, $8395 = 0, $8396 = 0, $8397 = 0, $8398 = 0, $8399 = 0, $84 = 0;
 var $840 = 0, $8400 = 0, $8401 = 0, $8402 = 0, $8403 = 0, $8404 = 0, $8405 = 0, $8406 = 0, $8407 = 0, $8408 = 0, $8409 = 0, $841 = 0, $8410 = 0, $8411 = 0, $8412 = 0, $8413 = 0, $8414 = 0, $8415 = 0, $8416 = 0, $8417 = 0;
 var $8418 = 0, $8419 = 0, $842 = 0, $8420 = 0, $8421 = 0, $8422 = 0, $8423 = 0, $8424 = 0, $8425 = 0, $8426 = 0, $8427 = 0, $8428 = 0, $8429 = 0, $843 = 0, $8430 = 0, $8431 = 0, $8432 = 0, $8433 = 0, $8434 = 0, $8435 = 0;
 var $8436 = 0, $8437 = 0, $8438 = 0, $8439 = 0, $844 = 0, $8440 = 0, $8441 = 0, $8442 = 0, $8443 = 0, $8444 = 0, $8445 = 0, $8446 = 0, $8447 = 0, $8448 = 0, $8449 = 0, $845 = 0, $8450 = 0, $8451 = 0, $8452 = 0, $8453 = 0;
 var $8454 = 0, $8455 = 0, $8456 = 0, $8457 = 0, $8458 = 0, $8459 = 0, $846 = 0, $8460 = 0, $8461 = 0, $8462 = 0, $8463 = 0, $8464 = 0, $8465 = 0, $8466 = 0, $8467 = 0, $8468 = 0, $8469 = 0, $847 = 0, $8470 = 0, $8471 = 0;
 var $8472 = 0, $8473 = 0, $8474 = 0, $8475 = 0, $8476 = 0, $8477 = 0, $8478 = 0, $8479 = 0, $848 = 0, $8480 = 0, $8481 = 0, $8482 = 0, $8483 = 0, $8484 = 0, $8485 = 0, $8486 = 0, $8487 = 0, $8488 = 0, $8489 = 0, $849 = 0;
 var $8490 = 0, $8491 = 0, $8492 = 0, $8493 = 0, $8494 = 0, $8495 = 0, $8496 = 0, $8497 = 0, $8498 = 0, $8499 = 0, $85 = 0, $850 = 0, $8500 = 0, $8501 = 0, $8502 = 0, $8503 = 0, $8504 = 0, $8505 = 0, $8506 = 0, $8507 = 0;
 var $8508 = 0, $8509 = 0, $851 = 0, $8510 = 0, $8511 = 0, $8512 = 0, $8513 = 0, $8514 = 0, $8515 = 0, $8516 = 0, $8517 = 0, $8518 = 0, $8519 = 0, $852 = 0, $8520 = 0, $8521 = 0, $8522 = 0, $8523 = 0, $8524 = 0, $8525 = 0;
 var $8526 = 0, $8527 = 0, $8528 = 0, $8529 = 0, $853 = 0, $8530 = 0, $8531 = 0, $8532 = 0, $8533 = 0, $8534 = 0, $8535 = 0, $8536 = 0, $8537 = 0, $8538 = 0, $8539 = 0, $854 = 0, $8540 = 0, $8541 = 0, $8542 = 0, $8543 = 0;
 var $8544 = 0, $8545 = 0, $8546 = 0, $8547 = 0, $8548 = 0, $8549 = 0, $855 = 0, $8550 = 0, $8551 = 0, $8552 = 0, $8553 = 0, $8554 = 0, $8555 = 0, $8556 = 0, $8557 = 0, $8558 = 0, $8559 = 0, $856 = 0, $8560 = 0, $8561 = 0;
 var $8562 = 0, $8563 = 0, $8564 = 0, $8565 = 0, $8566 = 0, $8567 = 0, $8568 = 0, $8569 = 0, $857 = 0, $8570 = 0, $8571 = 0, $8572 = 0, $8573 = 0, $8574 = 0, $8575 = 0, $8576 = 0, $8577 = 0, $8578 = 0, $8579 = 0, $858 = 0;
 var $8580 = 0, $8581 = 0, $8582 = 0, $8583 = 0, $8584 = 0, $8585 = 0, $8586 = 0, $8587 = 0, $8588 = 0, $8589 = 0, $859 = 0, $8590 = 0, $8591 = 0, $8592 = 0, $8593 = 0, $8594 = 0, $8595 = 0, $8596 = 0, $8597 = 0, $8598 = 0;
 var $8599 = 0, $86 = 0, $860 = 0, $8600 = 0, $8601 = 0, $8602 = 0, $8603 = 0, $8604 = 0, $8605 = 0, $8606 = 0, $8607 = 0, $8608 = 0, $8609 = 0, $861 = 0, $8610 = 0, $8611 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $8 = sp + 656|0;
 $9 = sp + 648|0;
 $10 = sp + 640|0;
 $11 = sp + 632|0;
 $12 = sp + 624|0;
 $13 = sp + 616|0;
 $14 = sp + 608|0;
 $15 = sp + 600|0;
 $16 = sp + 592|0;
 $17 = sp + 584|0;
 $18 = sp + 576|0;
 $19 = sp + 568|0;
 $20 = sp + 560|0;
 $21 = sp + 552|0;
 $22 = sp + 544|0;
 $23 = sp + 536|0;
 $24 = sp + 528|0;
 $25 = sp + 520|0;
 $26 = sp + 512|0;
 $27 = sp + 504|0;
 $28 = sp + 496|0;
 $29 = sp + 488|0;
 $30 = sp + 480|0;
 $31 = sp + 472|0;
 $32 = sp + 464|0;
 $33 = sp + 456|0;
 $34 = sp + 448|0;
 $35 = sp + 440|0;
 $36 = sp + 432|0;
 $37 = sp + 424|0;
 $38 = sp + 416|0;
 $39 = sp + 408|0;
 $40 = sp + 400|0;
 $41 = sp + 392|0;
 $42 = sp + 384|0;
 $43 = sp + 376|0;
 $44 = sp + 368|0;
 $45 = sp + 360|0;
 $46 = sp + 352|0;
 $47 = sp + 344|0;
 $48 = sp + 336|0;
 $49 = sp + 328|0;
 $50 = sp + 320|0;
 $51 = sp + 312|0;
 $52 = sp + 304|0;
 $53 = sp + 296|0;
 $54 = sp + 288|0;
 $55 = sp + 280|0;
 $56 = sp + 272|0;
 $57 = sp + 264|0;
 $58 = sp + 256|0;
 $59 = sp + 248|0;
 $60 = sp + 240|0;
 $61 = sp + 232|0;
 $62 = sp + 224|0;
 $63 = sp + 216|0;
 $64 = sp + 208|0;
 $65 = sp + 200|0;
 $66 = sp + 192|0;
 $67 = sp + 184|0;
 $68 = sp + 176|0;
 $69 = sp + 168|0;
 $70 = sp + 160|0;
 $71 = sp + 152|0;
 $72 = sp + 144|0;
 $73 = sp + 136|0;
 $74 = sp + 128|0;
 $75 = sp + 120|0;
 $76 = sp + 112|0;
 $77 = sp + 104|0;
 $78 = sp + 96|0;
 $79 = sp + 88|0;
 $80 = sp + 80|0;
 $81 = sp + 72|0;
 $82 = sp + 64|0;
 $83 = sp + 56|0;
 $84 = sp + 48|0;
 $85 = sp + 40|0;
 $86 = sp + 32|0;
 $87 = sp + 24|0;
 $88 = sp + 16|0;
 $89 = sp + 8|0;
 $90 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $91 = $5;
 $92 = (_load_3($91)|0);
 $93 = (getTempRet0() | 0);
 $94 = 2097151 & $92;
 $95 = $8;
 $96 = $95;
 HEAP32[$96>>2] = $94;
 $97 = (($95) + 4)|0;
 $98 = $97;
 HEAP32[$98>>2] = 0;
 $99 = $5;
 $100 = ((($99)) + 2|0);
 $101 = (_load_4($100)|0);
 $102 = (getTempRet0() | 0);
 $103 = (_bitshift64Lshr(($101|0),($102|0),5)|0);
 $104 = (getTempRet0() | 0);
 $105 = 2097151 & $103;
 $106 = $9;
 $107 = $106;
 HEAP32[$107>>2] = $105;
 $108 = (($106) + 4)|0;
 $109 = $108;
 HEAP32[$109>>2] = 0;
 $110 = $5;
 $111 = ((($110)) + 5|0);
 $112 = (_load_3($111)|0);
 $113 = (getTempRet0() | 0);
 $114 = (_bitshift64Lshr(($112|0),($113|0),2)|0);
 $115 = (getTempRet0() | 0);
 $116 = 2097151 & $114;
 $117 = $10;
 $118 = $117;
 HEAP32[$118>>2] = $116;
 $119 = (($117) + 4)|0;
 $120 = $119;
 HEAP32[$120>>2] = 0;
 $121 = $5;
 $122 = ((($121)) + 7|0);
 $123 = (_load_4($122)|0);
 $124 = (getTempRet0() | 0);
 $125 = (_bitshift64Lshr(($123|0),($124|0),7)|0);
 $126 = (getTempRet0() | 0);
 $127 = 2097151 & $125;
 $128 = $11;
 $129 = $128;
 HEAP32[$129>>2] = $127;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = 0;
 $132 = $5;
 $133 = ((($132)) + 10|0);
 $134 = (_load_4($133)|0);
 $135 = (getTempRet0() | 0);
 $136 = (_bitshift64Lshr(($134|0),($135|0),4)|0);
 $137 = (getTempRet0() | 0);
 $138 = 2097151 & $136;
 $139 = $12;
 $140 = $139;
 HEAP32[$140>>2] = $138;
 $141 = (($139) + 4)|0;
 $142 = $141;
 HEAP32[$142>>2] = 0;
 $143 = $5;
 $144 = ((($143)) + 13|0);
 $145 = (_load_3($144)|0);
 $146 = (getTempRet0() | 0);
 $147 = (_bitshift64Lshr(($145|0),($146|0),1)|0);
 $148 = (getTempRet0() | 0);
 $149 = 2097151 & $147;
 $150 = $13;
 $151 = $150;
 HEAP32[$151>>2] = $149;
 $152 = (($150) + 4)|0;
 $153 = $152;
 HEAP32[$153>>2] = 0;
 $154 = $5;
 $155 = ((($154)) + 15|0);
 $156 = (_load_4($155)|0);
 $157 = (getTempRet0() | 0);
 $158 = (_bitshift64Lshr(($156|0),($157|0),6)|0);
 $159 = (getTempRet0() | 0);
 $160 = 2097151 & $158;
 $161 = $14;
 $162 = $161;
 HEAP32[$162>>2] = $160;
 $163 = (($161) + 4)|0;
 $164 = $163;
 HEAP32[$164>>2] = 0;
 $165 = $5;
 $166 = ((($165)) + 18|0);
 $167 = (_load_3($166)|0);
 $168 = (getTempRet0() | 0);
 $169 = (_bitshift64Lshr(($167|0),($168|0),3)|0);
 $170 = (getTempRet0() | 0);
 $171 = 2097151 & $169;
 $172 = $15;
 $173 = $172;
 HEAP32[$173>>2] = $171;
 $174 = (($172) + 4)|0;
 $175 = $174;
 HEAP32[$175>>2] = 0;
 $176 = $5;
 $177 = ((($176)) + 21|0);
 $178 = (_load_3($177)|0);
 $179 = (getTempRet0() | 0);
 $180 = 2097151 & $178;
 $181 = $16;
 $182 = $181;
 HEAP32[$182>>2] = $180;
 $183 = (($181) + 4)|0;
 $184 = $183;
 HEAP32[$184>>2] = 0;
 $185 = $5;
 $186 = ((($185)) + 23|0);
 $187 = (_load_4($186)|0);
 $188 = (getTempRet0() | 0);
 $189 = (_bitshift64Lshr(($187|0),($188|0),5)|0);
 $190 = (getTempRet0() | 0);
 $191 = 2097151 & $189;
 $192 = $17;
 $193 = $192;
 HEAP32[$193>>2] = $191;
 $194 = (($192) + 4)|0;
 $195 = $194;
 HEAP32[$195>>2] = 0;
 $196 = $5;
 $197 = ((($196)) + 26|0);
 $198 = (_load_3($197)|0);
 $199 = (getTempRet0() | 0);
 $200 = (_bitshift64Lshr(($198|0),($199|0),2)|0);
 $201 = (getTempRet0() | 0);
 $202 = 2097151 & $200;
 $203 = $18;
 $204 = $203;
 HEAP32[$204>>2] = $202;
 $205 = (($203) + 4)|0;
 $206 = $205;
 HEAP32[$206>>2] = 0;
 $207 = $5;
 $208 = ((($207)) + 28|0);
 $209 = (_load_4($208)|0);
 $210 = (getTempRet0() | 0);
 $211 = (_bitshift64Lshr(($209|0),($210|0),7)|0);
 $212 = (getTempRet0() | 0);
 $213 = $19;
 $214 = $213;
 HEAP32[$214>>2] = $211;
 $215 = (($213) + 4)|0;
 $216 = $215;
 HEAP32[$216>>2] = $212;
 $217 = $6;
 $218 = (_load_3($217)|0);
 $219 = (getTempRet0() | 0);
 $220 = 2097151 & $218;
 $221 = $20;
 $222 = $221;
 HEAP32[$222>>2] = $220;
 $223 = (($221) + 4)|0;
 $224 = $223;
 HEAP32[$224>>2] = 0;
 $225 = $6;
 $226 = ((($225)) + 2|0);
 $227 = (_load_4($226)|0);
 $228 = (getTempRet0() | 0);
 $229 = (_bitshift64Lshr(($227|0),($228|0),5)|0);
 $230 = (getTempRet0() | 0);
 $231 = 2097151 & $229;
 $232 = $21;
 $233 = $232;
 HEAP32[$233>>2] = $231;
 $234 = (($232) + 4)|0;
 $235 = $234;
 HEAP32[$235>>2] = 0;
 $236 = $6;
 $237 = ((($236)) + 5|0);
 $238 = (_load_3($237)|0);
 $239 = (getTempRet0() | 0);
 $240 = (_bitshift64Lshr(($238|0),($239|0),2)|0);
 $241 = (getTempRet0() | 0);
 $242 = 2097151 & $240;
 $243 = $22;
 $244 = $243;
 HEAP32[$244>>2] = $242;
 $245 = (($243) + 4)|0;
 $246 = $245;
 HEAP32[$246>>2] = 0;
 $247 = $6;
 $248 = ((($247)) + 7|0);
 $249 = (_load_4($248)|0);
 $250 = (getTempRet0() | 0);
 $251 = (_bitshift64Lshr(($249|0),($250|0),7)|0);
 $252 = (getTempRet0() | 0);
 $253 = 2097151 & $251;
 $254 = $23;
 $255 = $254;
 HEAP32[$255>>2] = $253;
 $256 = (($254) + 4)|0;
 $257 = $256;
 HEAP32[$257>>2] = 0;
 $258 = $6;
 $259 = ((($258)) + 10|0);
 $260 = (_load_4($259)|0);
 $261 = (getTempRet0() | 0);
 $262 = (_bitshift64Lshr(($260|0),($261|0),4)|0);
 $263 = (getTempRet0() | 0);
 $264 = 2097151 & $262;
 $265 = $24;
 $266 = $265;
 HEAP32[$266>>2] = $264;
 $267 = (($265) + 4)|0;
 $268 = $267;
 HEAP32[$268>>2] = 0;
 $269 = $6;
 $270 = ((($269)) + 13|0);
 $271 = (_load_3($270)|0);
 $272 = (getTempRet0() | 0);
 $273 = (_bitshift64Lshr(($271|0),($272|0),1)|0);
 $274 = (getTempRet0() | 0);
 $275 = 2097151 & $273;
 $276 = $25;
 $277 = $276;
 HEAP32[$277>>2] = $275;
 $278 = (($276) + 4)|0;
 $279 = $278;
 HEAP32[$279>>2] = 0;
 $280 = $6;
 $281 = ((($280)) + 15|0);
 $282 = (_load_4($281)|0);
 $283 = (getTempRet0() | 0);
 $284 = (_bitshift64Lshr(($282|0),($283|0),6)|0);
 $285 = (getTempRet0() | 0);
 $286 = 2097151 & $284;
 $287 = $26;
 $288 = $287;
 HEAP32[$288>>2] = $286;
 $289 = (($287) + 4)|0;
 $290 = $289;
 HEAP32[$290>>2] = 0;
 $291 = $6;
 $292 = ((($291)) + 18|0);
 $293 = (_load_3($292)|0);
 $294 = (getTempRet0() | 0);
 $295 = (_bitshift64Lshr(($293|0),($294|0),3)|0);
 $296 = (getTempRet0() | 0);
 $297 = 2097151 & $295;
 $298 = $27;
 $299 = $298;
 HEAP32[$299>>2] = $297;
 $300 = (($298) + 4)|0;
 $301 = $300;
 HEAP32[$301>>2] = 0;
 $302 = $6;
 $303 = ((($302)) + 21|0);
 $304 = (_load_3($303)|0);
 $305 = (getTempRet0() | 0);
 $306 = 2097151 & $304;
 $307 = $28;
 $308 = $307;
 HEAP32[$308>>2] = $306;
 $309 = (($307) + 4)|0;
 $310 = $309;
 HEAP32[$310>>2] = 0;
 $311 = $6;
 $312 = ((($311)) + 23|0);
 $313 = (_load_4($312)|0);
 $314 = (getTempRet0() | 0);
 $315 = (_bitshift64Lshr(($313|0),($314|0),5)|0);
 $316 = (getTempRet0() | 0);
 $317 = 2097151 & $315;
 $318 = $29;
 $319 = $318;
 HEAP32[$319>>2] = $317;
 $320 = (($318) + 4)|0;
 $321 = $320;
 HEAP32[$321>>2] = 0;
 $322 = $6;
 $323 = ((($322)) + 26|0);
 $324 = (_load_3($323)|0);
 $325 = (getTempRet0() | 0);
 $326 = (_bitshift64Lshr(($324|0),($325|0),2)|0);
 $327 = (getTempRet0() | 0);
 $328 = 2097151 & $326;
 $329 = $30;
 $330 = $329;
 HEAP32[$330>>2] = $328;
 $331 = (($329) + 4)|0;
 $332 = $331;
 HEAP32[$332>>2] = 0;
 $333 = $6;
 $334 = ((($333)) + 28|0);
 $335 = (_load_4($334)|0);
 $336 = (getTempRet0() | 0);
 $337 = (_bitshift64Lshr(($335|0),($336|0),7)|0);
 $338 = (getTempRet0() | 0);
 $339 = $31;
 $340 = $339;
 HEAP32[$340>>2] = $337;
 $341 = (($339) + 4)|0;
 $342 = $341;
 HEAP32[$342>>2] = $338;
 $343 = $7;
 $344 = (_load_3($343)|0);
 $345 = (getTempRet0() | 0);
 $346 = 2097151 & $344;
 $347 = $32;
 $348 = $347;
 HEAP32[$348>>2] = $346;
 $349 = (($347) + 4)|0;
 $350 = $349;
 HEAP32[$350>>2] = 0;
 $351 = $7;
 $352 = ((($351)) + 2|0);
 $353 = (_load_4($352)|0);
 $354 = (getTempRet0() | 0);
 $355 = (_bitshift64Lshr(($353|0),($354|0),5)|0);
 $356 = (getTempRet0() | 0);
 $357 = 2097151 & $355;
 $358 = $33;
 $359 = $358;
 HEAP32[$359>>2] = $357;
 $360 = (($358) + 4)|0;
 $361 = $360;
 HEAP32[$361>>2] = 0;
 $362 = $7;
 $363 = ((($362)) + 5|0);
 $364 = (_load_3($363)|0);
 $365 = (getTempRet0() | 0);
 $366 = (_bitshift64Lshr(($364|0),($365|0),2)|0);
 $367 = (getTempRet0() | 0);
 $368 = 2097151 & $366;
 $369 = $34;
 $370 = $369;
 HEAP32[$370>>2] = $368;
 $371 = (($369) + 4)|0;
 $372 = $371;
 HEAP32[$372>>2] = 0;
 $373 = $7;
 $374 = ((($373)) + 7|0);
 $375 = (_load_4($374)|0);
 $376 = (getTempRet0() | 0);
 $377 = (_bitshift64Lshr(($375|0),($376|0),7)|0);
 $378 = (getTempRet0() | 0);
 $379 = 2097151 & $377;
 $380 = $35;
 $381 = $380;
 HEAP32[$381>>2] = $379;
 $382 = (($380) + 4)|0;
 $383 = $382;
 HEAP32[$383>>2] = 0;
 $384 = $7;
 $385 = ((($384)) + 10|0);
 $386 = (_load_4($385)|0);
 $387 = (getTempRet0() | 0);
 $388 = (_bitshift64Lshr(($386|0),($387|0),4)|0);
 $389 = (getTempRet0() | 0);
 $390 = 2097151 & $388;
 $391 = $36;
 $392 = $391;
 HEAP32[$392>>2] = $390;
 $393 = (($391) + 4)|0;
 $394 = $393;
 HEAP32[$394>>2] = 0;
 $395 = $7;
 $396 = ((($395)) + 13|0);
 $397 = (_load_3($396)|0);
 $398 = (getTempRet0() | 0);
 $399 = (_bitshift64Lshr(($397|0),($398|0),1)|0);
 $400 = (getTempRet0() | 0);
 $401 = 2097151 & $399;
 $402 = $37;
 $403 = $402;
 HEAP32[$403>>2] = $401;
 $404 = (($402) + 4)|0;
 $405 = $404;
 HEAP32[$405>>2] = 0;
 $406 = $7;
 $407 = ((($406)) + 15|0);
 $408 = (_load_4($407)|0);
 $409 = (getTempRet0() | 0);
 $410 = (_bitshift64Lshr(($408|0),($409|0),6)|0);
 $411 = (getTempRet0() | 0);
 $412 = 2097151 & $410;
 $413 = $38;
 $414 = $413;
 HEAP32[$414>>2] = $412;
 $415 = (($413) + 4)|0;
 $416 = $415;
 HEAP32[$416>>2] = 0;
 $417 = $7;
 $418 = ((($417)) + 18|0);
 $419 = (_load_3($418)|0);
 $420 = (getTempRet0() | 0);
 $421 = (_bitshift64Lshr(($419|0),($420|0),3)|0);
 $422 = (getTempRet0() | 0);
 $423 = 2097151 & $421;
 $424 = $39;
 $425 = $424;
 HEAP32[$425>>2] = $423;
 $426 = (($424) + 4)|0;
 $427 = $426;
 HEAP32[$427>>2] = 0;
 $428 = $7;
 $429 = ((($428)) + 21|0);
 $430 = (_load_3($429)|0);
 $431 = (getTempRet0() | 0);
 $432 = 2097151 & $430;
 $433 = $40;
 $434 = $433;
 HEAP32[$434>>2] = $432;
 $435 = (($433) + 4)|0;
 $436 = $435;
 HEAP32[$436>>2] = 0;
 $437 = $7;
 $438 = ((($437)) + 23|0);
 $439 = (_load_4($438)|0);
 $440 = (getTempRet0() | 0);
 $441 = (_bitshift64Lshr(($439|0),($440|0),5)|0);
 $442 = (getTempRet0() | 0);
 $443 = 2097151 & $441;
 $444 = $41;
 $445 = $444;
 HEAP32[$445>>2] = $443;
 $446 = (($444) + 4)|0;
 $447 = $446;
 HEAP32[$447>>2] = 0;
 $448 = $7;
 $449 = ((($448)) + 26|0);
 $450 = (_load_3($449)|0);
 $451 = (getTempRet0() | 0);
 $452 = (_bitshift64Lshr(($450|0),($451|0),2)|0);
 $453 = (getTempRet0() | 0);
 $454 = 2097151 & $452;
 $455 = $42;
 $456 = $455;
 HEAP32[$456>>2] = $454;
 $457 = (($455) + 4)|0;
 $458 = $457;
 HEAP32[$458>>2] = 0;
 $459 = $7;
 $460 = ((($459)) + 28|0);
 $461 = (_load_4($460)|0);
 $462 = (getTempRet0() | 0);
 $463 = (_bitshift64Lshr(($461|0),($462|0),7)|0);
 $464 = (getTempRet0() | 0);
 $465 = $43;
 $466 = $465;
 HEAP32[$466>>2] = $463;
 $467 = (($465) + 4)|0;
 $468 = $467;
 HEAP32[$468>>2] = $464;
 $469 = $32;
 $470 = $469;
 $471 = HEAP32[$470>>2]|0;
 $472 = (($469) + 4)|0;
 $473 = $472;
 $474 = HEAP32[$473>>2]|0;
 $475 = $8;
 $476 = $475;
 $477 = HEAP32[$476>>2]|0;
 $478 = (($475) + 4)|0;
 $479 = $478;
 $480 = HEAP32[$479>>2]|0;
 $481 = $20;
 $482 = $481;
 $483 = HEAP32[$482>>2]|0;
 $484 = (($481) + 4)|0;
 $485 = $484;
 $486 = HEAP32[$485>>2]|0;
 $487 = (___muldi3(($477|0),($480|0),($483|0),($486|0))|0);
 $488 = (getTempRet0() | 0);
 $489 = (_i64Subtract(($471|0),($474|0),($487|0),($488|0))|0);
 $490 = (getTempRet0() | 0);
 $491 = $44;
 $492 = $491;
 HEAP32[$492>>2] = $489;
 $493 = (($491) + 4)|0;
 $494 = $493;
 HEAP32[$494>>2] = $490;
 $495 = $33;
 $496 = $495;
 $497 = HEAP32[$496>>2]|0;
 $498 = (($495) + 4)|0;
 $499 = $498;
 $500 = HEAP32[$499>>2]|0;
 $501 = $8;
 $502 = $501;
 $503 = HEAP32[$502>>2]|0;
 $504 = (($501) + 4)|0;
 $505 = $504;
 $506 = HEAP32[$505>>2]|0;
 $507 = $21;
 $508 = $507;
 $509 = HEAP32[$508>>2]|0;
 $510 = (($507) + 4)|0;
 $511 = $510;
 $512 = HEAP32[$511>>2]|0;
 $513 = (___muldi3(($503|0),($506|0),($509|0),($512|0))|0);
 $514 = (getTempRet0() | 0);
 $515 = $9;
 $516 = $515;
 $517 = HEAP32[$516>>2]|0;
 $518 = (($515) + 4)|0;
 $519 = $518;
 $520 = HEAP32[$519>>2]|0;
 $521 = $20;
 $522 = $521;
 $523 = HEAP32[$522>>2]|0;
 $524 = (($521) + 4)|0;
 $525 = $524;
 $526 = HEAP32[$525>>2]|0;
 $527 = (___muldi3(($517|0),($520|0),($523|0),($526|0))|0);
 $528 = (getTempRet0() | 0);
 $529 = (_i64Add(($513|0),($514|0),($527|0),($528|0))|0);
 $530 = (getTempRet0() | 0);
 $531 = (_i64Subtract(($497|0),($500|0),($529|0),($530|0))|0);
 $532 = (getTempRet0() | 0);
 $533 = $45;
 $534 = $533;
 HEAP32[$534>>2] = $531;
 $535 = (($533) + 4)|0;
 $536 = $535;
 HEAP32[$536>>2] = $532;
 $537 = $34;
 $538 = $537;
 $539 = HEAP32[$538>>2]|0;
 $540 = (($537) + 4)|0;
 $541 = $540;
 $542 = HEAP32[$541>>2]|0;
 $543 = $8;
 $544 = $543;
 $545 = HEAP32[$544>>2]|0;
 $546 = (($543) + 4)|0;
 $547 = $546;
 $548 = HEAP32[$547>>2]|0;
 $549 = $22;
 $550 = $549;
 $551 = HEAP32[$550>>2]|0;
 $552 = (($549) + 4)|0;
 $553 = $552;
 $554 = HEAP32[$553>>2]|0;
 $555 = (___muldi3(($545|0),($548|0),($551|0),($554|0))|0);
 $556 = (getTempRet0() | 0);
 $557 = $9;
 $558 = $557;
 $559 = HEAP32[$558>>2]|0;
 $560 = (($557) + 4)|0;
 $561 = $560;
 $562 = HEAP32[$561>>2]|0;
 $563 = $21;
 $564 = $563;
 $565 = HEAP32[$564>>2]|0;
 $566 = (($563) + 4)|0;
 $567 = $566;
 $568 = HEAP32[$567>>2]|0;
 $569 = (___muldi3(($559|0),($562|0),($565|0),($568|0))|0);
 $570 = (getTempRet0() | 0);
 $571 = (_i64Add(($555|0),($556|0),($569|0),($570|0))|0);
 $572 = (getTempRet0() | 0);
 $573 = $10;
 $574 = $573;
 $575 = HEAP32[$574>>2]|0;
 $576 = (($573) + 4)|0;
 $577 = $576;
 $578 = HEAP32[$577>>2]|0;
 $579 = $20;
 $580 = $579;
 $581 = HEAP32[$580>>2]|0;
 $582 = (($579) + 4)|0;
 $583 = $582;
 $584 = HEAP32[$583>>2]|0;
 $585 = (___muldi3(($575|0),($578|0),($581|0),($584|0))|0);
 $586 = (getTempRet0() | 0);
 $587 = (_i64Add(($571|0),($572|0),($585|0),($586|0))|0);
 $588 = (getTempRet0() | 0);
 $589 = (_i64Subtract(($539|0),($542|0),($587|0),($588|0))|0);
 $590 = (getTempRet0() | 0);
 $591 = $46;
 $592 = $591;
 HEAP32[$592>>2] = $589;
 $593 = (($591) + 4)|0;
 $594 = $593;
 HEAP32[$594>>2] = $590;
 $595 = $35;
 $596 = $595;
 $597 = HEAP32[$596>>2]|0;
 $598 = (($595) + 4)|0;
 $599 = $598;
 $600 = HEAP32[$599>>2]|0;
 $601 = $8;
 $602 = $601;
 $603 = HEAP32[$602>>2]|0;
 $604 = (($601) + 4)|0;
 $605 = $604;
 $606 = HEAP32[$605>>2]|0;
 $607 = $23;
 $608 = $607;
 $609 = HEAP32[$608>>2]|0;
 $610 = (($607) + 4)|0;
 $611 = $610;
 $612 = HEAP32[$611>>2]|0;
 $613 = (___muldi3(($603|0),($606|0),($609|0),($612|0))|0);
 $614 = (getTempRet0() | 0);
 $615 = $9;
 $616 = $615;
 $617 = HEAP32[$616>>2]|0;
 $618 = (($615) + 4)|0;
 $619 = $618;
 $620 = HEAP32[$619>>2]|0;
 $621 = $22;
 $622 = $621;
 $623 = HEAP32[$622>>2]|0;
 $624 = (($621) + 4)|0;
 $625 = $624;
 $626 = HEAP32[$625>>2]|0;
 $627 = (___muldi3(($617|0),($620|0),($623|0),($626|0))|0);
 $628 = (getTempRet0() | 0);
 $629 = (_i64Add(($613|0),($614|0),($627|0),($628|0))|0);
 $630 = (getTempRet0() | 0);
 $631 = $10;
 $632 = $631;
 $633 = HEAP32[$632>>2]|0;
 $634 = (($631) + 4)|0;
 $635 = $634;
 $636 = HEAP32[$635>>2]|0;
 $637 = $21;
 $638 = $637;
 $639 = HEAP32[$638>>2]|0;
 $640 = (($637) + 4)|0;
 $641 = $640;
 $642 = HEAP32[$641>>2]|0;
 $643 = (___muldi3(($633|0),($636|0),($639|0),($642|0))|0);
 $644 = (getTempRet0() | 0);
 $645 = (_i64Add(($629|0),($630|0),($643|0),($644|0))|0);
 $646 = (getTempRet0() | 0);
 $647 = $11;
 $648 = $647;
 $649 = HEAP32[$648>>2]|0;
 $650 = (($647) + 4)|0;
 $651 = $650;
 $652 = HEAP32[$651>>2]|0;
 $653 = $20;
 $654 = $653;
 $655 = HEAP32[$654>>2]|0;
 $656 = (($653) + 4)|0;
 $657 = $656;
 $658 = HEAP32[$657>>2]|0;
 $659 = (___muldi3(($649|0),($652|0),($655|0),($658|0))|0);
 $660 = (getTempRet0() | 0);
 $661 = (_i64Add(($645|0),($646|0),($659|0),($660|0))|0);
 $662 = (getTempRet0() | 0);
 $663 = (_i64Subtract(($597|0),($600|0),($661|0),($662|0))|0);
 $664 = (getTempRet0() | 0);
 $665 = $47;
 $666 = $665;
 HEAP32[$666>>2] = $663;
 $667 = (($665) + 4)|0;
 $668 = $667;
 HEAP32[$668>>2] = $664;
 $669 = $36;
 $670 = $669;
 $671 = HEAP32[$670>>2]|0;
 $672 = (($669) + 4)|0;
 $673 = $672;
 $674 = HEAP32[$673>>2]|0;
 $675 = $8;
 $676 = $675;
 $677 = HEAP32[$676>>2]|0;
 $678 = (($675) + 4)|0;
 $679 = $678;
 $680 = HEAP32[$679>>2]|0;
 $681 = $24;
 $682 = $681;
 $683 = HEAP32[$682>>2]|0;
 $684 = (($681) + 4)|0;
 $685 = $684;
 $686 = HEAP32[$685>>2]|0;
 $687 = (___muldi3(($677|0),($680|0),($683|0),($686|0))|0);
 $688 = (getTempRet0() | 0);
 $689 = $9;
 $690 = $689;
 $691 = HEAP32[$690>>2]|0;
 $692 = (($689) + 4)|0;
 $693 = $692;
 $694 = HEAP32[$693>>2]|0;
 $695 = $23;
 $696 = $695;
 $697 = HEAP32[$696>>2]|0;
 $698 = (($695) + 4)|0;
 $699 = $698;
 $700 = HEAP32[$699>>2]|0;
 $701 = (___muldi3(($691|0),($694|0),($697|0),($700|0))|0);
 $702 = (getTempRet0() | 0);
 $703 = (_i64Add(($687|0),($688|0),($701|0),($702|0))|0);
 $704 = (getTempRet0() | 0);
 $705 = $10;
 $706 = $705;
 $707 = HEAP32[$706>>2]|0;
 $708 = (($705) + 4)|0;
 $709 = $708;
 $710 = HEAP32[$709>>2]|0;
 $711 = $22;
 $712 = $711;
 $713 = HEAP32[$712>>2]|0;
 $714 = (($711) + 4)|0;
 $715 = $714;
 $716 = HEAP32[$715>>2]|0;
 $717 = (___muldi3(($707|0),($710|0),($713|0),($716|0))|0);
 $718 = (getTempRet0() | 0);
 $719 = (_i64Add(($703|0),($704|0),($717|0),($718|0))|0);
 $720 = (getTempRet0() | 0);
 $721 = $11;
 $722 = $721;
 $723 = HEAP32[$722>>2]|0;
 $724 = (($721) + 4)|0;
 $725 = $724;
 $726 = HEAP32[$725>>2]|0;
 $727 = $21;
 $728 = $727;
 $729 = HEAP32[$728>>2]|0;
 $730 = (($727) + 4)|0;
 $731 = $730;
 $732 = HEAP32[$731>>2]|0;
 $733 = (___muldi3(($723|0),($726|0),($729|0),($732|0))|0);
 $734 = (getTempRet0() | 0);
 $735 = (_i64Add(($719|0),($720|0),($733|0),($734|0))|0);
 $736 = (getTempRet0() | 0);
 $737 = $12;
 $738 = $737;
 $739 = HEAP32[$738>>2]|0;
 $740 = (($737) + 4)|0;
 $741 = $740;
 $742 = HEAP32[$741>>2]|0;
 $743 = $20;
 $744 = $743;
 $745 = HEAP32[$744>>2]|0;
 $746 = (($743) + 4)|0;
 $747 = $746;
 $748 = HEAP32[$747>>2]|0;
 $749 = (___muldi3(($739|0),($742|0),($745|0),($748|0))|0);
 $750 = (getTempRet0() | 0);
 $751 = (_i64Add(($735|0),($736|0),($749|0),($750|0))|0);
 $752 = (getTempRet0() | 0);
 $753 = (_i64Subtract(($671|0),($674|0),($751|0),($752|0))|0);
 $754 = (getTempRet0() | 0);
 $755 = $48;
 $756 = $755;
 HEAP32[$756>>2] = $753;
 $757 = (($755) + 4)|0;
 $758 = $757;
 HEAP32[$758>>2] = $754;
 $759 = $37;
 $760 = $759;
 $761 = HEAP32[$760>>2]|0;
 $762 = (($759) + 4)|0;
 $763 = $762;
 $764 = HEAP32[$763>>2]|0;
 $765 = $8;
 $766 = $765;
 $767 = HEAP32[$766>>2]|0;
 $768 = (($765) + 4)|0;
 $769 = $768;
 $770 = HEAP32[$769>>2]|0;
 $771 = $25;
 $772 = $771;
 $773 = HEAP32[$772>>2]|0;
 $774 = (($771) + 4)|0;
 $775 = $774;
 $776 = HEAP32[$775>>2]|0;
 $777 = (___muldi3(($767|0),($770|0),($773|0),($776|0))|0);
 $778 = (getTempRet0() | 0);
 $779 = $9;
 $780 = $779;
 $781 = HEAP32[$780>>2]|0;
 $782 = (($779) + 4)|0;
 $783 = $782;
 $784 = HEAP32[$783>>2]|0;
 $785 = $24;
 $786 = $785;
 $787 = HEAP32[$786>>2]|0;
 $788 = (($785) + 4)|0;
 $789 = $788;
 $790 = HEAP32[$789>>2]|0;
 $791 = (___muldi3(($781|0),($784|0),($787|0),($790|0))|0);
 $792 = (getTempRet0() | 0);
 $793 = (_i64Add(($777|0),($778|0),($791|0),($792|0))|0);
 $794 = (getTempRet0() | 0);
 $795 = $10;
 $796 = $795;
 $797 = HEAP32[$796>>2]|0;
 $798 = (($795) + 4)|0;
 $799 = $798;
 $800 = HEAP32[$799>>2]|0;
 $801 = $23;
 $802 = $801;
 $803 = HEAP32[$802>>2]|0;
 $804 = (($801) + 4)|0;
 $805 = $804;
 $806 = HEAP32[$805>>2]|0;
 $807 = (___muldi3(($797|0),($800|0),($803|0),($806|0))|0);
 $808 = (getTempRet0() | 0);
 $809 = (_i64Add(($793|0),($794|0),($807|0),($808|0))|0);
 $810 = (getTempRet0() | 0);
 $811 = $11;
 $812 = $811;
 $813 = HEAP32[$812>>2]|0;
 $814 = (($811) + 4)|0;
 $815 = $814;
 $816 = HEAP32[$815>>2]|0;
 $817 = $22;
 $818 = $817;
 $819 = HEAP32[$818>>2]|0;
 $820 = (($817) + 4)|0;
 $821 = $820;
 $822 = HEAP32[$821>>2]|0;
 $823 = (___muldi3(($813|0),($816|0),($819|0),($822|0))|0);
 $824 = (getTempRet0() | 0);
 $825 = (_i64Add(($809|0),($810|0),($823|0),($824|0))|0);
 $826 = (getTempRet0() | 0);
 $827 = $12;
 $828 = $827;
 $829 = HEAP32[$828>>2]|0;
 $830 = (($827) + 4)|0;
 $831 = $830;
 $832 = HEAP32[$831>>2]|0;
 $833 = $21;
 $834 = $833;
 $835 = HEAP32[$834>>2]|0;
 $836 = (($833) + 4)|0;
 $837 = $836;
 $838 = HEAP32[$837>>2]|0;
 $839 = (___muldi3(($829|0),($832|0),($835|0),($838|0))|0);
 $840 = (getTempRet0() | 0);
 $841 = (_i64Add(($825|0),($826|0),($839|0),($840|0))|0);
 $842 = (getTempRet0() | 0);
 $843 = $13;
 $844 = $843;
 $845 = HEAP32[$844>>2]|0;
 $846 = (($843) + 4)|0;
 $847 = $846;
 $848 = HEAP32[$847>>2]|0;
 $849 = $20;
 $850 = $849;
 $851 = HEAP32[$850>>2]|0;
 $852 = (($849) + 4)|0;
 $853 = $852;
 $854 = HEAP32[$853>>2]|0;
 $855 = (___muldi3(($845|0),($848|0),($851|0),($854|0))|0);
 $856 = (getTempRet0() | 0);
 $857 = (_i64Add(($841|0),($842|0),($855|0),($856|0))|0);
 $858 = (getTempRet0() | 0);
 $859 = (_i64Subtract(($761|0),($764|0),($857|0),($858|0))|0);
 $860 = (getTempRet0() | 0);
 $861 = $49;
 $862 = $861;
 HEAP32[$862>>2] = $859;
 $863 = (($861) + 4)|0;
 $864 = $863;
 HEAP32[$864>>2] = $860;
 $865 = $38;
 $866 = $865;
 $867 = HEAP32[$866>>2]|0;
 $868 = (($865) + 4)|0;
 $869 = $868;
 $870 = HEAP32[$869>>2]|0;
 $871 = $8;
 $872 = $871;
 $873 = HEAP32[$872>>2]|0;
 $874 = (($871) + 4)|0;
 $875 = $874;
 $876 = HEAP32[$875>>2]|0;
 $877 = $26;
 $878 = $877;
 $879 = HEAP32[$878>>2]|0;
 $880 = (($877) + 4)|0;
 $881 = $880;
 $882 = HEAP32[$881>>2]|0;
 $883 = (___muldi3(($873|0),($876|0),($879|0),($882|0))|0);
 $884 = (getTempRet0() | 0);
 $885 = $9;
 $886 = $885;
 $887 = HEAP32[$886>>2]|0;
 $888 = (($885) + 4)|0;
 $889 = $888;
 $890 = HEAP32[$889>>2]|0;
 $891 = $25;
 $892 = $891;
 $893 = HEAP32[$892>>2]|0;
 $894 = (($891) + 4)|0;
 $895 = $894;
 $896 = HEAP32[$895>>2]|0;
 $897 = (___muldi3(($887|0),($890|0),($893|0),($896|0))|0);
 $898 = (getTempRet0() | 0);
 $899 = (_i64Add(($883|0),($884|0),($897|0),($898|0))|0);
 $900 = (getTempRet0() | 0);
 $901 = $10;
 $902 = $901;
 $903 = HEAP32[$902>>2]|0;
 $904 = (($901) + 4)|0;
 $905 = $904;
 $906 = HEAP32[$905>>2]|0;
 $907 = $24;
 $908 = $907;
 $909 = HEAP32[$908>>2]|0;
 $910 = (($907) + 4)|0;
 $911 = $910;
 $912 = HEAP32[$911>>2]|0;
 $913 = (___muldi3(($903|0),($906|0),($909|0),($912|0))|0);
 $914 = (getTempRet0() | 0);
 $915 = (_i64Add(($899|0),($900|0),($913|0),($914|0))|0);
 $916 = (getTempRet0() | 0);
 $917 = $11;
 $918 = $917;
 $919 = HEAP32[$918>>2]|0;
 $920 = (($917) + 4)|0;
 $921 = $920;
 $922 = HEAP32[$921>>2]|0;
 $923 = $23;
 $924 = $923;
 $925 = HEAP32[$924>>2]|0;
 $926 = (($923) + 4)|0;
 $927 = $926;
 $928 = HEAP32[$927>>2]|0;
 $929 = (___muldi3(($919|0),($922|0),($925|0),($928|0))|0);
 $930 = (getTempRet0() | 0);
 $931 = (_i64Add(($915|0),($916|0),($929|0),($930|0))|0);
 $932 = (getTempRet0() | 0);
 $933 = $12;
 $934 = $933;
 $935 = HEAP32[$934>>2]|0;
 $936 = (($933) + 4)|0;
 $937 = $936;
 $938 = HEAP32[$937>>2]|0;
 $939 = $22;
 $940 = $939;
 $941 = HEAP32[$940>>2]|0;
 $942 = (($939) + 4)|0;
 $943 = $942;
 $944 = HEAP32[$943>>2]|0;
 $945 = (___muldi3(($935|0),($938|0),($941|0),($944|0))|0);
 $946 = (getTempRet0() | 0);
 $947 = (_i64Add(($931|0),($932|0),($945|0),($946|0))|0);
 $948 = (getTempRet0() | 0);
 $949 = $13;
 $950 = $949;
 $951 = HEAP32[$950>>2]|0;
 $952 = (($949) + 4)|0;
 $953 = $952;
 $954 = HEAP32[$953>>2]|0;
 $955 = $21;
 $956 = $955;
 $957 = HEAP32[$956>>2]|0;
 $958 = (($955) + 4)|0;
 $959 = $958;
 $960 = HEAP32[$959>>2]|0;
 $961 = (___muldi3(($951|0),($954|0),($957|0),($960|0))|0);
 $962 = (getTempRet0() | 0);
 $963 = (_i64Add(($947|0),($948|0),($961|0),($962|0))|0);
 $964 = (getTempRet0() | 0);
 $965 = $14;
 $966 = $965;
 $967 = HEAP32[$966>>2]|0;
 $968 = (($965) + 4)|0;
 $969 = $968;
 $970 = HEAP32[$969>>2]|0;
 $971 = $20;
 $972 = $971;
 $973 = HEAP32[$972>>2]|0;
 $974 = (($971) + 4)|0;
 $975 = $974;
 $976 = HEAP32[$975>>2]|0;
 $977 = (___muldi3(($967|0),($970|0),($973|0),($976|0))|0);
 $978 = (getTempRet0() | 0);
 $979 = (_i64Add(($963|0),($964|0),($977|0),($978|0))|0);
 $980 = (getTempRet0() | 0);
 $981 = (_i64Subtract(($867|0),($870|0),($979|0),($980|0))|0);
 $982 = (getTempRet0() | 0);
 $983 = $50;
 $984 = $983;
 HEAP32[$984>>2] = $981;
 $985 = (($983) + 4)|0;
 $986 = $985;
 HEAP32[$986>>2] = $982;
 $987 = $39;
 $988 = $987;
 $989 = HEAP32[$988>>2]|0;
 $990 = (($987) + 4)|0;
 $991 = $990;
 $992 = HEAP32[$991>>2]|0;
 $993 = $8;
 $994 = $993;
 $995 = HEAP32[$994>>2]|0;
 $996 = (($993) + 4)|0;
 $997 = $996;
 $998 = HEAP32[$997>>2]|0;
 $999 = $27;
 $1000 = $999;
 $1001 = HEAP32[$1000>>2]|0;
 $1002 = (($999) + 4)|0;
 $1003 = $1002;
 $1004 = HEAP32[$1003>>2]|0;
 $1005 = (___muldi3(($995|0),($998|0),($1001|0),($1004|0))|0);
 $1006 = (getTempRet0() | 0);
 $1007 = $9;
 $1008 = $1007;
 $1009 = HEAP32[$1008>>2]|0;
 $1010 = (($1007) + 4)|0;
 $1011 = $1010;
 $1012 = HEAP32[$1011>>2]|0;
 $1013 = $26;
 $1014 = $1013;
 $1015 = HEAP32[$1014>>2]|0;
 $1016 = (($1013) + 4)|0;
 $1017 = $1016;
 $1018 = HEAP32[$1017>>2]|0;
 $1019 = (___muldi3(($1009|0),($1012|0),($1015|0),($1018|0))|0);
 $1020 = (getTempRet0() | 0);
 $1021 = (_i64Add(($1005|0),($1006|0),($1019|0),($1020|0))|0);
 $1022 = (getTempRet0() | 0);
 $1023 = $10;
 $1024 = $1023;
 $1025 = HEAP32[$1024>>2]|0;
 $1026 = (($1023) + 4)|0;
 $1027 = $1026;
 $1028 = HEAP32[$1027>>2]|0;
 $1029 = $25;
 $1030 = $1029;
 $1031 = HEAP32[$1030>>2]|0;
 $1032 = (($1029) + 4)|0;
 $1033 = $1032;
 $1034 = HEAP32[$1033>>2]|0;
 $1035 = (___muldi3(($1025|0),($1028|0),($1031|0),($1034|0))|0);
 $1036 = (getTempRet0() | 0);
 $1037 = (_i64Add(($1021|0),($1022|0),($1035|0),($1036|0))|0);
 $1038 = (getTempRet0() | 0);
 $1039 = $11;
 $1040 = $1039;
 $1041 = HEAP32[$1040>>2]|0;
 $1042 = (($1039) + 4)|0;
 $1043 = $1042;
 $1044 = HEAP32[$1043>>2]|0;
 $1045 = $24;
 $1046 = $1045;
 $1047 = HEAP32[$1046>>2]|0;
 $1048 = (($1045) + 4)|0;
 $1049 = $1048;
 $1050 = HEAP32[$1049>>2]|0;
 $1051 = (___muldi3(($1041|0),($1044|0),($1047|0),($1050|0))|0);
 $1052 = (getTempRet0() | 0);
 $1053 = (_i64Add(($1037|0),($1038|0),($1051|0),($1052|0))|0);
 $1054 = (getTempRet0() | 0);
 $1055 = $12;
 $1056 = $1055;
 $1057 = HEAP32[$1056>>2]|0;
 $1058 = (($1055) + 4)|0;
 $1059 = $1058;
 $1060 = HEAP32[$1059>>2]|0;
 $1061 = $23;
 $1062 = $1061;
 $1063 = HEAP32[$1062>>2]|0;
 $1064 = (($1061) + 4)|0;
 $1065 = $1064;
 $1066 = HEAP32[$1065>>2]|0;
 $1067 = (___muldi3(($1057|0),($1060|0),($1063|0),($1066|0))|0);
 $1068 = (getTempRet0() | 0);
 $1069 = (_i64Add(($1053|0),($1054|0),($1067|0),($1068|0))|0);
 $1070 = (getTempRet0() | 0);
 $1071 = $13;
 $1072 = $1071;
 $1073 = HEAP32[$1072>>2]|0;
 $1074 = (($1071) + 4)|0;
 $1075 = $1074;
 $1076 = HEAP32[$1075>>2]|0;
 $1077 = $22;
 $1078 = $1077;
 $1079 = HEAP32[$1078>>2]|0;
 $1080 = (($1077) + 4)|0;
 $1081 = $1080;
 $1082 = HEAP32[$1081>>2]|0;
 $1083 = (___muldi3(($1073|0),($1076|0),($1079|0),($1082|0))|0);
 $1084 = (getTempRet0() | 0);
 $1085 = (_i64Add(($1069|0),($1070|0),($1083|0),($1084|0))|0);
 $1086 = (getTempRet0() | 0);
 $1087 = $14;
 $1088 = $1087;
 $1089 = HEAP32[$1088>>2]|0;
 $1090 = (($1087) + 4)|0;
 $1091 = $1090;
 $1092 = HEAP32[$1091>>2]|0;
 $1093 = $21;
 $1094 = $1093;
 $1095 = HEAP32[$1094>>2]|0;
 $1096 = (($1093) + 4)|0;
 $1097 = $1096;
 $1098 = HEAP32[$1097>>2]|0;
 $1099 = (___muldi3(($1089|0),($1092|0),($1095|0),($1098|0))|0);
 $1100 = (getTempRet0() | 0);
 $1101 = (_i64Add(($1085|0),($1086|0),($1099|0),($1100|0))|0);
 $1102 = (getTempRet0() | 0);
 $1103 = $15;
 $1104 = $1103;
 $1105 = HEAP32[$1104>>2]|0;
 $1106 = (($1103) + 4)|0;
 $1107 = $1106;
 $1108 = HEAP32[$1107>>2]|0;
 $1109 = $20;
 $1110 = $1109;
 $1111 = HEAP32[$1110>>2]|0;
 $1112 = (($1109) + 4)|0;
 $1113 = $1112;
 $1114 = HEAP32[$1113>>2]|0;
 $1115 = (___muldi3(($1105|0),($1108|0),($1111|0),($1114|0))|0);
 $1116 = (getTempRet0() | 0);
 $1117 = (_i64Add(($1101|0),($1102|0),($1115|0),($1116|0))|0);
 $1118 = (getTempRet0() | 0);
 $1119 = (_i64Subtract(($989|0),($992|0),($1117|0),($1118|0))|0);
 $1120 = (getTempRet0() | 0);
 $1121 = $51;
 $1122 = $1121;
 HEAP32[$1122>>2] = $1119;
 $1123 = (($1121) + 4)|0;
 $1124 = $1123;
 HEAP32[$1124>>2] = $1120;
 $1125 = $40;
 $1126 = $1125;
 $1127 = HEAP32[$1126>>2]|0;
 $1128 = (($1125) + 4)|0;
 $1129 = $1128;
 $1130 = HEAP32[$1129>>2]|0;
 $1131 = $8;
 $1132 = $1131;
 $1133 = HEAP32[$1132>>2]|0;
 $1134 = (($1131) + 4)|0;
 $1135 = $1134;
 $1136 = HEAP32[$1135>>2]|0;
 $1137 = $28;
 $1138 = $1137;
 $1139 = HEAP32[$1138>>2]|0;
 $1140 = (($1137) + 4)|0;
 $1141 = $1140;
 $1142 = HEAP32[$1141>>2]|0;
 $1143 = (___muldi3(($1133|0),($1136|0),($1139|0),($1142|0))|0);
 $1144 = (getTempRet0() | 0);
 $1145 = $9;
 $1146 = $1145;
 $1147 = HEAP32[$1146>>2]|0;
 $1148 = (($1145) + 4)|0;
 $1149 = $1148;
 $1150 = HEAP32[$1149>>2]|0;
 $1151 = $27;
 $1152 = $1151;
 $1153 = HEAP32[$1152>>2]|0;
 $1154 = (($1151) + 4)|0;
 $1155 = $1154;
 $1156 = HEAP32[$1155>>2]|0;
 $1157 = (___muldi3(($1147|0),($1150|0),($1153|0),($1156|0))|0);
 $1158 = (getTempRet0() | 0);
 $1159 = (_i64Add(($1143|0),($1144|0),($1157|0),($1158|0))|0);
 $1160 = (getTempRet0() | 0);
 $1161 = $10;
 $1162 = $1161;
 $1163 = HEAP32[$1162>>2]|0;
 $1164 = (($1161) + 4)|0;
 $1165 = $1164;
 $1166 = HEAP32[$1165>>2]|0;
 $1167 = $26;
 $1168 = $1167;
 $1169 = HEAP32[$1168>>2]|0;
 $1170 = (($1167) + 4)|0;
 $1171 = $1170;
 $1172 = HEAP32[$1171>>2]|0;
 $1173 = (___muldi3(($1163|0),($1166|0),($1169|0),($1172|0))|0);
 $1174 = (getTempRet0() | 0);
 $1175 = (_i64Add(($1159|0),($1160|0),($1173|0),($1174|0))|0);
 $1176 = (getTempRet0() | 0);
 $1177 = $11;
 $1178 = $1177;
 $1179 = HEAP32[$1178>>2]|0;
 $1180 = (($1177) + 4)|0;
 $1181 = $1180;
 $1182 = HEAP32[$1181>>2]|0;
 $1183 = $25;
 $1184 = $1183;
 $1185 = HEAP32[$1184>>2]|0;
 $1186 = (($1183) + 4)|0;
 $1187 = $1186;
 $1188 = HEAP32[$1187>>2]|0;
 $1189 = (___muldi3(($1179|0),($1182|0),($1185|0),($1188|0))|0);
 $1190 = (getTempRet0() | 0);
 $1191 = (_i64Add(($1175|0),($1176|0),($1189|0),($1190|0))|0);
 $1192 = (getTempRet0() | 0);
 $1193 = $12;
 $1194 = $1193;
 $1195 = HEAP32[$1194>>2]|0;
 $1196 = (($1193) + 4)|0;
 $1197 = $1196;
 $1198 = HEAP32[$1197>>2]|0;
 $1199 = $24;
 $1200 = $1199;
 $1201 = HEAP32[$1200>>2]|0;
 $1202 = (($1199) + 4)|0;
 $1203 = $1202;
 $1204 = HEAP32[$1203>>2]|0;
 $1205 = (___muldi3(($1195|0),($1198|0),($1201|0),($1204|0))|0);
 $1206 = (getTempRet0() | 0);
 $1207 = (_i64Add(($1191|0),($1192|0),($1205|0),($1206|0))|0);
 $1208 = (getTempRet0() | 0);
 $1209 = $13;
 $1210 = $1209;
 $1211 = HEAP32[$1210>>2]|0;
 $1212 = (($1209) + 4)|0;
 $1213 = $1212;
 $1214 = HEAP32[$1213>>2]|0;
 $1215 = $23;
 $1216 = $1215;
 $1217 = HEAP32[$1216>>2]|0;
 $1218 = (($1215) + 4)|0;
 $1219 = $1218;
 $1220 = HEAP32[$1219>>2]|0;
 $1221 = (___muldi3(($1211|0),($1214|0),($1217|0),($1220|0))|0);
 $1222 = (getTempRet0() | 0);
 $1223 = (_i64Add(($1207|0),($1208|0),($1221|0),($1222|0))|0);
 $1224 = (getTempRet0() | 0);
 $1225 = $14;
 $1226 = $1225;
 $1227 = HEAP32[$1226>>2]|0;
 $1228 = (($1225) + 4)|0;
 $1229 = $1228;
 $1230 = HEAP32[$1229>>2]|0;
 $1231 = $22;
 $1232 = $1231;
 $1233 = HEAP32[$1232>>2]|0;
 $1234 = (($1231) + 4)|0;
 $1235 = $1234;
 $1236 = HEAP32[$1235>>2]|0;
 $1237 = (___muldi3(($1227|0),($1230|0),($1233|0),($1236|0))|0);
 $1238 = (getTempRet0() | 0);
 $1239 = (_i64Add(($1223|0),($1224|0),($1237|0),($1238|0))|0);
 $1240 = (getTempRet0() | 0);
 $1241 = $15;
 $1242 = $1241;
 $1243 = HEAP32[$1242>>2]|0;
 $1244 = (($1241) + 4)|0;
 $1245 = $1244;
 $1246 = HEAP32[$1245>>2]|0;
 $1247 = $21;
 $1248 = $1247;
 $1249 = HEAP32[$1248>>2]|0;
 $1250 = (($1247) + 4)|0;
 $1251 = $1250;
 $1252 = HEAP32[$1251>>2]|0;
 $1253 = (___muldi3(($1243|0),($1246|0),($1249|0),($1252|0))|0);
 $1254 = (getTempRet0() | 0);
 $1255 = (_i64Add(($1239|0),($1240|0),($1253|0),($1254|0))|0);
 $1256 = (getTempRet0() | 0);
 $1257 = $16;
 $1258 = $1257;
 $1259 = HEAP32[$1258>>2]|0;
 $1260 = (($1257) + 4)|0;
 $1261 = $1260;
 $1262 = HEAP32[$1261>>2]|0;
 $1263 = $20;
 $1264 = $1263;
 $1265 = HEAP32[$1264>>2]|0;
 $1266 = (($1263) + 4)|0;
 $1267 = $1266;
 $1268 = HEAP32[$1267>>2]|0;
 $1269 = (___muldi3(($1259|0),($1262|0),($1265|0),($1268|0))|0);
 $1270 = (getTempRet0() | 0);
 $1271 = (_i64Add(($1255|0),($1256|0),($1269|0),($1270|0))|0);
 $1272 = (getTempRet0() | 0);
 $1273 = (_i64Subtract(($1127|0),($1130|0),($1271|0),($1272|0))|0);
 $1274 = (getTempRet0() | 0);
 $1275 = $52;
 $1276 = $1275;
 HEAP32[$1276>>2] = $1273;
 $1277 = (($1275) + 4)|0;
 $1278 = $1277;
 HEAP32[$1278>>2] = $1274;
 $1279 = $41;
 $1280 = $1279;
 $1281 = HEAP32[$1280>>2]|0;
 $1282 = (($1279) + 4)|0;
 $1283 = $1282;
 $1284 = HEAP32[$1283>>2]|0;
 $1285 = $8;
 $1286 = $1285;
 $1287 = HEAP32[$1286>>2]|0;
 $1288 = (($1285) + 4)|0;
 $1289 = $1288;
 $1290 = HEAP32[$1289>>2]|0;
 $1291 = $29;
 $1292 = $1291;
 $1293 = HEAP32[$1292>>2]|0;
 $1294 = (($1291) + 4)|0;
 $1295 = $1294;
 $1296 = HEAP32[$1295>>2]|0;
 $1297 = (___muldi3(($1287|0),($1290|0),($1293|0),($1296|0))|0);
 $1298 = (getTempRet0() | 0);
 $1299 = $9;
 $1300 = $1299;
 $1301 = HEAP32[$1300>>2]|0;
 $1302 = (($1299) + 4)|0;
 $1303 = $1302;
 $1304 = HEAP32[$1303>>2]|0;
 $1305 = $28;
 $1306 = $1305;
 $1307 = HEAP32[$1306>>2]|0;
 $1308 = (($1305) + 4)|0;
 $1309 = $1308;
 $1310 = HEAP32[$1309>>2]|0;
 $1311 = (___muldi3(($1301|0),($1304|0),($1307|0),($1310|0))|0);
 $1312 = (getTempRet0() | 0);
 $1313 = (_i64Add(($1297|0),($1298|0),($1311|0),($1312|0))|0);
 $1314 = (getTempRet0() | 0);
 $1315 = $10;
 $1316 = $1315;
 $1317 = HEAP32[$1316>>2]|0;
 $1318 = (($1315) + 4)|0;
 $1319 = $1318;
 $1320 = HEAP32[$1319>>2]|0;
 $1321 = $27;
 $1322 = $1321;
 $1323 = HEAP32[$1322>>2]|0;
 $1324 = (($1321) + 4)|0;
 $1325 = $1324;
 $1326 = HEAP32[$1325>>2]|0;
 $1327 = (___muldi3(($1317|0),($1320|0),($1323|0),($1326|0))|0);
 $1328 = (getTempRet0() | 0);
 $1329 = (_i64Add(($1313|0),($1314|0),($1327|0),($1328|0))|0);
 $1330 = (getTempRet0() | 0);
 $1331 = $11;
 $1332 = $1331;
 $1333 = HEAP32[$1332>>2]|0;
 $1334 = (($1331) + 4)|0;
 $1335 = $1334;
 $1336 = HEAP32[$1335>>2]|0;
 $1337 = $26;
 $1338 = $1337;
 $1339 = HEAP32[$1338>>2]|0;
 $1340 = (($1337) + 4)|0;
 $1341 = $1340;
 $1342 = HEAP32[$1341>>2]|0;
 $1343 = (___muldi3(($1333|0),($1336|0),($1339|0),($1342|0))|0);
 $1344 = (getTempRet0() | 0);
 $1345 = (_i64Add(($1329|0),($1330|0),($1343|0),($1344|0))|0);
 $1346 = (getTempRet0() | 0);
 $1347 = $12;
 $1348 = $1347;
 $1349 = HEAP32[$1348>>2]|0;
 $1350 = (($1347) + 4)|0;
 $1351 = $1350;
 $1352 = HEAP32[$1351>>2]|0;
 $1353 = $25;
 $1354 = $1353;
 $1355 = HEAP32[$1354>>2]|0;
 $1356 = (($1353) + 4)|0;
 $1357 = $1356;
 $1358 = HEAP32[$1357>>2]|0;
 $1359 = (___muldi3(($1349|0),($1352|0),($1355|0),($1358|0))|0);
 $1360 = (getTempRet0() | 0);
 $1361 = (_i64Add(($1345|0),($1346|0),($1359|0),($1360|0))|0);
 $1362 = (getTempRet0() | 0);
 $1363 = $13;
 $1364 = $1363;
 $1365 = HEAP32[$1364>>2]|0;
 $1366 = (($1363) + 4)|0;
 $1367 = $1366;
 $1368 = HEAP32[$1367>>2]|0;
 $1369 = $24;
 $1370 = $1369;
 $1371 = HEAP32[$1370>>2]|0;
 $1372 = (($1369) + 4)|0;
 $1373 = $1372;
 $1374 = HEAP32[$1373>>2]|0;
 $1375 = (___muldi3(($1365|0),($1368|0),($1371|0),($1374|0))|0);
 $1376 = (getTempRet0() | 0);
 $1377 = (_i64Add(($1361|0),($1362|0),($1375|0),($1376|0))|0);
 $1378 = (getTempRet0() | 0);
 $1379 = $14;
 $1380 = $1379;
 $1381 = HEAP32[$1380>>2]|0;
 $1382 = (($1379) + 4)|0;
 $1383 = $1382;
 $1384 = HEAP32[$1383>>2]|0;
 $1385 = $23;
 $1386 = $1385;
 $1387 = HEAP32[$1386>>2]|0;
 $1388 = (($1385) + 4)|0;
 $1389 = $1388;
 $1390 = HEAP32[$1389>>2]|0;
 $1391 = (___muldi3(($1381|0),($1384|0),($1387|0),($1390|0))|0);
 $1392 = (getTempRet0() | 0);
 $1393 = (_i64Add(($1377|0),($1378|0),($1391|0),($1392|0))|0);
 $1394 = (getTempRet0() | 0);
 $1395 = $15;
 $1396 = $1395;
 $1397 = HEAP32[$1396>>2]|0;
 $1398 = (($1395) + 4)|0;
 $1399 = $1398;
 $1400 = HEAP32[$1399>>2]|0;
 $1401 = $22;
 $1402 = $1401;
 $1403 = HEAP32[$1402>>2]|0;
 $1404 = (($1401) + 4)|0;
 $1405 = $1404;
 $1406 = HEAP32[$1405>>2]|0;
 $1407 = (___muldi3(($1397|0),($1400|0),($1403|0),($1406|0))|0);
 $1408 = (getTempRet0() | 0);
 $1409 = (_i64Add(($1393|0),($1394|0),($1407|0),($1408|0))|0);
 $1410 = (getTempRet0() | 0);
 $1411 = $16;
 $1412 = $1411;
 $1413 = HEAP32[$1412>>2]|0;
 $1414 = (($1411) + 4)|0;
 $1415 = $1414;
 $1416 = HEAP32[$1415>>2]|0;
 $1417 = $21;
 $1418 = $1417;
 $1419 = HEAP32[$1418>>2]|0;
 $1420 = (($1417) + 4)|0;
 $1421 = $1420;
 $1422 = HEAP32[$1421>>2]|0;
 $1423 = (___muldi3(($1413|0),($1416|0),($1419|0),($1422|0))|0);
 $1424 = (getTempRet0() | 0);
 $1425 = (_i64Add(($1409|0),($1410|0),($1423|0),($1424|0))|0);
 $1426 = (getTempRet0() | 0);
 $1427 = $17;
 $1428 = $1427;
 $1429 = HEAP32[$1428>>2]|0;
 $1430 = (($1427) + 4)|0;
 $1431 = $1430;
 $1432 = HEAP32[$1431>>2]|0;
 $1433 = $20;
 $1434 = $1433;
 $1435 = HEAP32[$1434>>2]|0;
 $1436 = (($1433) + 4)|0;
 $1437 = $1436;
 $1438 = HEAP32[$1437>>2]|0;
 $1439 = (___muldi3(($1429|0),($1432|0),($1435|0),($1438|0))|0);
 $1440 = (getTempRet0() | 0);
 $1441 = (_i64Add(($1425|0),($1426|0),($1439|0),($1440|0))|0);
 $1442 = (getTempRet0() | 0);
 $1443 = (_i64Subtract(($1281|0),($1284|0),($1441|0),($1442|0))|0);
 $1444 = (getTempRet0() | 0);
 $1445 = $53;
 $1446 = $1445;
 HEAP32[$1446>>2] = $1443;
 $1447 = (($1445) + 4)|0;
 $1448 = $1447;
 HEAP32[$1448>>2] = $1444;
 $1449 = $42;
 $1450 = $1449;
 $1451 = HEAP32[$1450>>2]|0;
 $1452 = (($1449) + 4)|0;
 $1453 = $1452;
 $1454 = HEAP32[$1453>>2]|0;
 $1455 = $8;
 $1456 = $1455;
 $1457 = HEAP32[$1456>>2]|0;
 $1458 = (($1455) + 4)|0;
 $1459 = $1458;
 $1460 = HEAP32[$1459>>2]|0;
 $1461 = $30;
 $1462 = $1461;
 $1463 = HEAP32[$1462>>2]|0;
 $1464 = (($1461) + 4)|0;
 $1465 = $1464;
 $1466 = HEAP32[$1465>>2]|0;
 $1467 = (___muldi3(($1457|0),($1460|0),($1463|0),($1466|0))|0);
 $1468 = (getTempRet0() | 0);
 $1469 = $9;
 $1470 = $1469;
 $1471 = HEAP32[$1470>>2]|0;
 $1472 = (($1469) + 4)|0;
 $1473 = $1472;
 $1474 = HEAP32[$1473>>2]|0;
 $1475 = $29;
 $1476 = $1475;
 $1477 = HEAP32[$1476>>2]|0;
 $1478 = (($1475) + 4)|0;
 $1479 = $1478;
 $1480 = HEAP32[$1479>>2]|0;
 $1481 = (___muldi3(($1471|0),($1474|0),($1477|0),($1480|0))|0);
 $1482 = (getTempRet0() | 0);
 $1483 = (_i64Add(($1467|0),($1468|0),($1481|0),($1482|0))|0);
 $1484 = (getTempRet0() | 0);
 $1485 = $10;
 $1486 = $1485;
 $1487 = HEAP32[$1486>>2]|0;
 $1488 = (($1485) + 4)|0;
 $1489 = $1488;
 $1490 = HEAP32[$1489>>2]|0;
 $1491 = $28;
 $1492 = $1491;
 $1493 = HEAP32[$1492>>2]|0;
 $1494 = (($1491) + 4)|0;
 $1495 = $1494;
 $1496 = HEAP32[$1495>>2]|0;
 $1497 = (___muldi3(($1487|0),($1490|0),($1493|0),($1496|0))|0);
 $1498 = (getTempRet0() | 0);
 $1499 = (_i64Add(($1483|0),($1484|0),($1497|0),($1498|0))|0);
 $1500 = (getTempRet0() | 0);
 $1501 = $11;
 $1502 = $1501;
 $1503 = HEAP32[$1502>>2]|0;
 $1504 = (($1501) + 4)|0;
 $1505 = $1504;
 $1506 = HEAP32[$1505>>2]|0;
 $1507 = $27;
 $1508 = $1507;
 $1509 = HEAP32[$1508>>2]|0;
 $1510 = (($1507) + 4)|0;
 $1511 = $1510;
 $1512 = HEAP32[$1511>>2]|0;
 $1513 = (___muldi3(($1503|0),($1506|0),($1509|0),($1512|0))|0);
 $1514 = (getTempRet0() | 0);
 $1515 = (_i64Add(($1499|0),($1500|0),($1513|0),($1514|0))|0);
 $1516 = (getTempRet0() | 0);
 $1517 = $12;
 $1518 = $1517;
 $1519 = HEAP32[$1518>>2]|0;
 $1520 = (($1517) + 4)|0;
 $1521 = $1520;
 $1522 = HEAP32[$1521>>2]|0;
 $1523 = $26;
 $1524 = $1523;
 $1525 = HEAP32[$1524>>2]|0;
 $1526 = (($1523) + 4)|0;
 $1527 = $1526;
 $1528 = HEAP32[$1527>>2]|0;
 $1529 = (___muldi3(($1519|0),($1522|0),($1525|0),($1528|0))|0);
 $1530 = (getTempRet0() | 0);
 $1531 = (_i64Add(($1515|0),($1516|0),($1529|0),($1530|0))|0);
 $1532 = (getTempRet0() | 0);
 $1533 = $13;
 $1534 = $1533;
 $1535 = HEAP32[$1534>>2]|0;
 $1536 = (($1533) + 4)|0;
 $1537 = $1536;
 $1538 = HEAP32[$1537>>2]|0;
 $1539 = $25;
 $1540 = $1539;
 $1541 = HEAP32[$1540>>2]|0;
 $1542 = (($1539) + 4)|0;
 $1543 = $1542;
 $1544 = HEAP32[$1543>>2]|0;
 $1545 = (___muldi3(($1535|0),($1538|0),($1541|0),($1544|0))|0);
 $1546 = (getTempRet0() | 0);
 $1547 = (_i64Add(($1531|0),($1532|0),($1545|0),($1546|0))|0);
 $1548 = (getTempRet0() | 0);
 $1549 = $14;
 $1550 = $1549;
 $1551 = HEAP32[$1550>>2]|0;
 $1552 = (($1549) + 4)|0;
 $1553 = $1552;
 $1554 = HEAP32[$1553>>2]|0;
 $1555 = $24;
 $1556 = $1555;
 $1557 = HEAP32[$1556>>2]|0;
 $1558 = (($1555) + 4)|0;
 $1559 = $1558;
 $1560 = HEAP32[$1559>>2]|0;
 $1561 = (___muldi3(($1551|0),($1554|0),($1557|0),($1560|0))|0);
 $1562 = (getTempRet0() | 0);
 $1563 = (_i64Add(($1547|0),($1548|0),($1561|0),($1562|0))|0);
 $1564 = (getTempRet0() | 0);
 $1565 = $15;
 $1566 = $1565;
 $1567 = HEAP32[$1566>>2]|0;
 $1568 = (($1565) + 4)|0;
 $1569 = $1568;
 $1570 = HEAP32[$1569>>2]|0;
 $1571 = $23;
 $1572 = $1571;
 $1573 = HEAP32[$1572>>2]|0;
 $1574 = (($1571) + 4)|0;
 $1575 = $1574;
 $1576 = HEAP32[$1575>>2]|0;
 $1577 = (___muldi3(($1567|0),($1570|0),($1573|0),($1576|0))|0);
 $1578 = (getTempRet0() | 0);
 $1579 = (_i64Add(($1563|0),($1564|0),($1577|0),($1578|0))|0);
 $1580 = (getTempRet0() | 0);
 $1581 = $16;
 $1582 = $1581;
 $1583 = HEAP32[$1582>>2]|0;
 $1584 = (($1581) + 4)|0;
 $1585 = $1584;
 $1586 = HEAP32[$1585>>2]|0;
 $1587 = $22;
 $1588 = $1587;
 $1589 = HEAP32[$1588>>2]|0;
 $1590 = (($1587) + 4)|0;
 $1591 = $1590;
 $1592 = HEAP32[$1591>>2]|0;
 $1593 = (___muldi3(($1583|0),($1586|0),($1589|0),($1592|0))|0);
 $1594 = (getTempRet0() | 0);
 $1595 = (_i64Add(($1579|0),($1580|0),($1593|0),($1594|0))|0);
 $1596 = (getTempRet0() | 0);
 $1597 = $17;
 $1598 = $1597;
 $1599 = HEAP32[$1598>>2]|0;
 $1600 = (($1597) + 4)|0;
 $1601 = $1600;
 $1602 = HEAP32[$1601>>2]|0;
 $1603 = $21;
 $1604 = $1603;
 $1605 = HEAP32[$1604>>2]|0;
 $1606 = (($1603) + 4)|0;
 $1607 = $1606;
 $1608 = HEAP32[$1607>>2]|0;
 $1609 = (___muldi3(($1599|0),($1602|0),($1605|0),($1608|0))|0);
 $1610 = (getTempRet0() | 0);
 $1611 = (_i64Add(($1595|0),($1596|0),($1609|0),($1610|0))|0);
 $1612 = (getTempRet0() | 0);
 $1613 = $18;
 $1614 = $1613;
 $1615 = HEAP32[$1614>>2]|0;
 $1616 = (($1613) + 4)|0;
 $1617 = $1616;
 $1618 = HEAP32[$1617>>2]|0;
 $1619 = $20;
 $1620 = $1619;
 $1621 = HEAP32[$1620>>2]|0;
 $1622 = (($1619) + 4)|0;
 $1623 = $1622;
 $1624 = HEAP32[$1623>>2]|0;
 $1625 = (___muldi3(($1615|0),($1618|0),($1621|0),($1624|0))|0);
 $1626 = (getTempRet0() | 0);
 $1627 = (_i64Add(($1611|0),($1612|0),($1625|0),($1626|0))|0);
 $1628 = (getTempRet0() | 0);
 $1629 = (_i64Subtract(($1451|0),($1454|0),($1627|0),($1628|0))|0);
 $1630 = (getTempRet0() | 0);
 $1631 = $54;
 $1632 = $1631;
 HEAP32[$1632>>2] = $1629;
 $1633 = (($1631) + 4)|0;
 $1634 = $1633;
 HEAP32[$1634>>2] = $1630;
 $1635 = $43;
 $1636 = $1635;
 $1637 = HEAP32[$1636>>2]|0;
 $1638 = (($1635) + 4)|0;
 $1639 = $1638;
 $1640 = HEAP32[$1639>>2]|0;
 $1641 = $8;
 $1642 = $1641;
 $1643 = HEAP32[$1642>>2]|0;
 $1644 = (($1641) + 4)|0;
 $1645 = $1644;
 $1646 = HEAP32[$1645>>2]|0;
 $1647 = $31;
 $1648 = $1647;
 $1649 = HEAP32[$1648>>2]|0;
 $1650 = (($1647) + 4)|0;
 $1651 = $1650;
 $1652 = HEAP32[$1651>>2]|0;
 $1653 = (___muldi3(($1643|0),($1646|0),($1649|0),($1652|0))|0);
 $1654 = (getTempRet0() | 0);
 $1655 = $9;
 $1656 = $1655;
 $1657 = HEAP32[$1656>>2]|0;
 $1658 = (($1655) + 4)|0;
 $1659 = $1658;
 $1660 = HEAP32[$1659>>2]|0;
 $1661 = $30;
 $1662 = $1661;
 $1663 = HEAP32[$1662>>2]|0;
 $1664 = (($1661) + 4)|0;
 $1665 = $1664;
 $1666 = HEAP32[$1665>>2]|0;
 $1667 = (___muldi3(($1657|0),($1660|0),($1663|0),($1666|0))|0);
 $1668 = (getTempRet0() | 0);
 $1669 = (_i64Add(($1653|0),($1654|0),($1667|0),($1668|0))|0);
 $1670 = (getTempRet0() | 0);
 $1671 = $10;
 $1672 = $1671;
 $1673 = HEAP32[$1672>>2]|0;
 $1674 = (($1671) + 4)|0;
 $1675 = $1674;
 $1676 = HEAP32[$1675>>2]|0;
 $1677 = $29;
 $1678 = $1677;
 $1679 = HEAP32[$1678>>2]|0;
 $1680 = (($1677) + 4)|0;
 $1681 = $1680;
 $1682 = HEAP32[$1681>>2]|0;
 $1683 = (___muldi3(($1673|0),($1676|0),($1679|0),($1682|0))|0);
 $1684 = (getTempRet0() | 0);
 $1685 = (_i64Add(($1669|0),($1670|0),($1683|0),($1684|0))|0);
 $1686 = (getTempRet0() | 0);
 $1687 = $11;
 $1688 = $1687;
 $1689 = HEAP32[$1688>>2]|0;
 $1690 = (($1687) + 4)|0;
 $1691 = $1690;
 $1692 = HEAP32[$1691>>2]|0;
 $1693 = $28;
 $1694 = $1693;
 $1695 = HEAP32[$1694>>2]|0;
 $1696 = (($1693) + 4)|0;
 $1697 = $1696;
 $1698 = HEAP32[$1697>>2]|0;
 $1699 = (___muldi3(($1689|0),($1692|0),($1695|0),($1698|0))|0);
 $1700 = (getTempRet0() | 0);
 $1701 = (_i64Add(($1685|0),($1686|0),($1699|0),($1700|0))|0);
 $1702 = (getTempRet0() | 0);
 $1703 = $12;
 $1704 = $1703;
 $1705 = HEAP32[$1704>>2]|0;
 $1706 = (($1703) + 4)|0;
 $1707 = $1706;
 $1708 = HEAP32[$1707>>2]|0;
 $1709 = $27;
 $1710 = $1709;
 $1711 = HEAP32[$1710>>2]|0;
 $1712 = (($1709) + 4)|0;
 $1713 = $1712;
 $1714 = HEAP32[$1713>>2]|0;
 $1715 = (___muldi3(($1705|0),($1708|0),($1711|0),($1714|0))|0);
 $1716 = (getTempRet0() | 0);
 $1717 = (_i64Add(($1701|0),($1702|0),($1715|0),($1716|0))|0);
 $1718 = (getTempRet0() | 0);
 $1719 = $13;
 $1720 = $1719;
 $1721 = HEAP32[$1720>>2]|0;
 $1722 = (($1719) + 4)|0;
 $1723 = $1722;
 $1724 = HEAP32[$1723>>2]|0;
 $1725 = $26;
 $1726 = $1725;
 $1727 = HEAP32[$1726>>2]|0;
 $1728 = (($1725) + 4)|0;
 $1729 = $1728;
 $1730 = HEAP32[$1729>>2]|0;
 $1731 = (___muldi3(($1721|0),($1724|0),($1727|0),($1730|0))|0);
 $1732 = (getTempRet0() | 0);
 $1733 = (_i64Add(($1717|0),($1718|0),($1731|0),($1732|0))|0);
 $1734 = (getTempRet0() | 0);
 $1735 = $14;
 $1736 = $1735;
 $1737 = HEAP32[$1736>>2]|0;
 $1738 = (($1735) + 4)|0;
 $1739 = $1738;
 $1740 = HEAP32[$1739>>2]|0;
 $1741 = $25;
 $1742 = $1741;
 $1743 = HEAP32[$1742>>2]|0;
 $1744 = (($1741) + 4)|0;
 $1745 = $1744;
 $1746 = HEAP32[$1745>>2]|0;
 $1747 = (___muldi3(($1737|0),($1740|0),($1743|0),($1746|0))|0);
 $1748 = (getTempRet0() | 0);
 $1749 = (_i64Add(($1733|0),($1734|0),($1747|0),($1748|0))|0);
 $1750 = (getTempRet0() | 0);
 $1751 = $15;
 $1752 = $1751;
 $1753 = HEAP32[$1752>>2]|0;
 $1754 = (($1751) + 4)|0;
 $1755 = $1754;
 $1756 = HEAP32[$1755>>2]|0;
 $1757 = $24;
 $1758 = $1757;
 $1759 = HEAP32[$1758>>2]|0;
 $1760 = (($1757) + 4)|0;
 $1761 = $1760;
 $1762 = HEAP32[$1761>>2]|0;
 $1763 = (___muldi3(($1753|0),($1756|0),($1759|0),($1762|0))|0);
 $1764 = (getTempRet0() | 0);
 $1765 = (_i64Add(($1749|0),($1750|0),($1763|0),($1764|0))|0);
 $1766 = (getTempRet0() | 0);
 $1767 = $16;
 $1768 = $1767;
 $1769 = HEAP32[$1768>>2]|0;
 $1770 = (($1767) + 4)|0;
 $1771 = $1770;
 $1772 = HEAP32[$1771>>2]|0;
 $1773 = $23;
 $1774 = $1773;
 $1775 = HEAP32[$1774>>2]|0;
 $1776 = (($1773) + 4)|0;
 $1777 = $1776;
 $1778 = HEAP32[$1777>>2]|0;
 $1779 = (___muldi3(($1769|0),($1772|0),($1775|0),($1778|0))|0);
 $1780 = (getTempRet0() | 0);
 $1781 = (_i64Add(($1765|0),($1766|0),($1779|0),($1780|0))|0);
 $1782 = (getTempRet0() | 0);
 $1783 = $17;
 $1784 = $1783;
 $1785 = HEAP32[$1784>>2]|0;
 $1786 = (($1783) + 4)|0;
 $1787 = $1786;
 $1788 = HEAP32[$1787>>2]|0;
 $1789 = $22;
 $1790 = $1789;
 $1791 = HEAP32[$1790>>2]|0;
 $1792 = (($1789) + 4)|0;
 $1793 = $1792;
 $1794 = HEAP32[$1793>>2]|0;
 $1795 = (___muldi3(($1785|0),($1788|0),($1791|0),($1794|0))|0);
 $1796 = (getTempRet0() | 0);
 $1797 = (_i64Add(($1781|0),($1782|0),($1795|0),($1796|0))|0);
 $1798 = (getTempRet0() | 0);
 $1799 = $18;
 $1800 = $1799;
 $1801 = HEAP32[$1800>>2]|0;
 $1802 = (($1799) + 4)|0;
 $1803 = $1802;
 $1804 = HEAP32[$1803>>2]|0;
 $1805 = $21;
 $1806 = $1805;
 $1807 = HEAP32[$1806>>2]|0;
 $1808 = (($1805) + 4)|0;
 $1809 = $1808;
 $1810 = HEAP32[$1809>>2]|0;
 $1811 = (___muldi3(($1801|0),($1804|0),($1807|0),($1810|0))|0);
 $1812 = (getTempRet0() | 0);
 $1813 = (_i64Add(($1797|0),($1798|0),($1811|0),($1812|0))|0);
 $1814 = (getTempRet0() | 0);
 $1815 = $19;
 $1816 = $1815;
 $1817 = HEAP32[$1816>>2]|0;
 $1818 = (($1815) + 4)|0;
 $1819 = $1818;
 $1820 = HEAP32[$1819>>2]|0;
 $1821 = $20;
 $1822 = $1821;
 $1823 = HEAP32[$1822>>2]|0;
 $1824 = (($1821) + 4)|0;
 $1825 = $1824;
 $1826 = HEAP32[$1825>>2]|0;
 $1827 = (___muldi3(($1817|0),($1820|0),($1823|0),($1826|0))|0);
 $1828 = (getTempRet0() | 0);
 $1829 = (_i64Add(($1813|0),($1814|0),($1827|0),($1828|0))|0);
 $1830 = (getTempRet0() | 0);
 $1831 = (_i64Subtract(($1637|0),($1640|0),($1829|0),($1830|0))|0);
 $1832 = (getTempRet0() | 0);
 $1833 = $55;
 $1834 = $1833;
 HEAP32[$1834>>2] = $1831;
 $1835 = (($1833) + 4)|0;
 $1836 = $1835;
 HEAP32[$1836>>2] = $1832;
 $1837 = $9;
 $1838 = $1837;
 $1839 = HEAP32[$1838>>2]|0;
 $1840 = (($1837) + 4)|0;
 $1841 = $1840;
 $1842 = HEAP32[$1841>>2]|0;
 $1843 = $31;
 $1844 = $1843;
 $1845 = HEAP32[$1844>>2]|0;
 $1846 = (($1843) + 4)|0;
 $1847 = $1846;
 $1848 = HEAP32[$1847>>2]|0;
 $1849 = (___muldi3(($1839|0),($1842|0),($1845|0),($1848|0))|0);
 $1850 = (getTempRet0() | 0);
 $1851 = $10;
 $1852 = $1851;
 $1853 = HEAP32[$1852>>2]|0;
 $1854 = (($1851) + 4)|0;
 $1855 = $1854;
 $1856 = HEAP32[$1855>>2]|0;
 $1857 = $30;
 $1858 = $1857;
 $1859 = HEAP32[$1858>>2]|0;
 $1860 = (($1857) + 4)|0;
 $1861 = $1860;
 $1862 = HEAP32[$1861>>2]|0;
 $1863 = (___muldi3(($1853|0),($1856|0),($1859|0),($1862|0))|0);
 $1864 = (getTempRet0() | 0);
 $1865 = (_i64Add(($1849|0),($1850|0),($1863|0),($1864|0))|0);
 $1866 = (getTempRet0() | 0);
 $1867 = $11;
 $1868 = $1867;
 $1869 = HEAP32[$1868>>2]|0;
 $1870 = (($1867) + 4)|0;
 $1871 = $1870;
 $1872 = HEAP32[$1871>>2]|0;
 $1873 = $29;
 $1874 = $1873;
 $1875 = HEAP32[$1874>>2]|0;
 $1876 = (($1873) + 4)|0;
 $1877 = $1876;
 $1878 = HEAP32[$1877>>2]|0;
 $1879 = (___muldi3(($1869|0),($1872|0),($1875|0),($1878|0))|0);
 $1880 = (getTempRet0() | 0);
 $1881 = (_i64Add(($1865|0),($1866|0),($1879|0),($1880|0))|0);
 $1882 = (getTempRet0() | 0);
 $1883 = $12;
 $1884 = $1883;
 $1885 = HEAP32[$1884>>2]|0;
 $1886 = (($1883) + 4)|0;
 $1887 = $1886;
 $1888 = HEAP32[$1887>>2]|0;
 $1889 = $28;
 $1890 = $1889;
 $1891 = HEAP32[$1890>>2]|0;
 $1892 = (($1889) + 4)|0;
 $1893 = $1892;
 $1894 = HEAP32[$1893>>2]|0;
 $1895 = (___muldi3(($1885|0),($1888|0),($1891|0),($1894|0))|0);
 $1896 = (getTempRet0() | 0);
 $1897 = (_i64Add(($1881|0),($1882|0),($1895|0),($1896|0))|0);
 $1898 = (getTempRet0() | 0);
 $1899 = $13;
 $1900 = $1899;
 $1901 = HEAP32[$1900>>2]|0;
 $1902 = (($1899) + 4)|0;
 $1903 = $1902;
 $1904 = HEAP32[$1903>>2]|0;
 $1905 = $27;
 $1906 = $1905;
 $1907 = HEAP32[$1906>>2]|0;
 $1908 = (($1905) + 4)|0;
 $1909 = $1908;
 $1910 = HEAP32[$1909>>2]|0;
 $1911 = (___muldi3(($1901|0),($1904|0),($1907|0),($1910|0))|0);
 $1912 = (getTempRet0() | 0);
 $1913 = (_i64Add(($1897|0),($1898|0),($1911|0),($1912|0))|0);
 $1914 = (getTempRet0() | 0);
 $1915 = $14;
 $1916 = $1915;
 $1917 = HEAP32[$1916>>2]|0;
 $1918 = (($1915) + 4)|0;
 $1919 = $1918;
 $1920 = HEAP32[$1919>>2]|0;
 $1921 = $26;
 $1922 = $1921;
 $1923 = HEAP32[$1922>>2]|0;
 $1924 = (($1921) + 4)|0;
 $1925 = $1924;
 $1926 = HEAP32[$1925>>2]|0;
 $1927 = (___muldi3(($1917|0),($1920|0),($1923|0),($1926|0))|0);
 $1928 = (getTempRet0() | 0);
 $1929 = (_i64Add(($1913|0),($1914|0),($1927|0),($1928|0))|0);
 $1930 = (getTempRet0() | 0);
 $1931 = $15;
 $1932 = $1931;
 $1933 = HEAP32[$1932>>2]|0;
 $1934 = (($1931) + 4)|0;
 $1935 = $1934;
 $1936 = HEAP32[$1935>>2]|0;
 $1937 = $25;
 $1938 = $1937;
 $1939 = HEAP32[$1938>>2]|0;
 $1940 = (($1937) + 4)|0;
 $1941 = $1940;
 $1942 = HEAP32[$1941>>2]|0;
 $1943 = (___muldi3(($1933|0),($1936|0),($1939|0),($1942|0))|0);
 $1944 = (getTempRet0() | 0);
 $1945 = (_i64Add(($1929|0),($1930|0),($1943|0),($1944|0))|0);
 $1946 = (getTempRet0() | 0);
 $1947 = $16;
 $1948 = $1947;
 $1949 = HEAP32[$1948>>2]|0;
 $1950 = (($1947) + 4)|0;
 $1951 = $1950;
 $1952 = HEAP32[$1951>>2]|0;
 $1953 = $24;
 $1954 = $1953;
 $1955 = HEAP32[$1954>>2]|0;
 $1956 = (($1953) + 4)|0;
 $1957 = $1956;
 $1958 = HEAP32[$1957>>2]|0;
 $1959 = (___muldi3(($1949|0),($1952|0),($1955|0),($1958|0))|0);
 $1960 = (getTempRet0() | 0);
 $1961 = (_i64Add(($1945|0),($1946|0),($1959|0),($1960|0))|0);
 $1962 = (getTempRet0() | 0);
 $1963 = $17;
 $1964 = $1963;
 $1965 = HEAP32[$1964>>2]|0;
 $1966 = (($1963) + 4)|0;
 $1967 = $1966;
 $1968 = HEAP32[$1967>>2]|0;
 $1969 = $23;
 $1970 = $1969;
 $1971 = HEAP32[$1970>>2]|0;
 $1972 = (($1969) + 4)|0;
 $1973 = $1972;
 $1974 = HEAP32[$1973>>2]|0;
 $1975 = (___muldi3(($1965|0),($1968|0),($1971|0),($1974|0))|0);
 $1976 = (getTempRet0() | 0);
 $1977 = (_i64Add(($1961|0),($1962|0),($1975|0),($1976|0))|0);
 $1978 = (getTempRet0() | 0);
 $1979 = $18;
 $1980 = $1979;
 $1981 = HEAP32[$1980>>2]|0;
 $1982 = (($1979) + 4)|0;
 $1983 = $1982;
 $1984 = HEAP32[$1983>>2]|0;
 $1985 = $22;
 $1986 = $1985;
 $1987 = HEAP32[$1986>>2]|0;
 $1988 = (($1985) + 4)|0;
 $1989 = $1988;
 $1990 = HEAP32[$1989>>2]|0;
 $1991 = (___muldi3(($1981|0),($1984|0),($1987|0),($1990|0))|0);
 $1992 = (getTempRet0() | 0);
 $1993 = (_i64Add(($1977|0),($1978|0),($1991|0),($1992|0))|0);
 $1994 = (getTempRet0() | 0);
 $1995 = $19;
 $1996 = $1995;
 $1997 = HEAP32[$1996>>2]|0;
 $1998 = (($1995) + 4)|0;
 $1999 = $1998;
 $2000 = HEAP32[$1999>>2]|0;
 $2001 = $21;
 $2002 = $2001;
 $2003 = HEAP32[$2002>>2]|0;
 $2004 = (($2001) + 4)|0;
 $2005 = $2004;
 $2006 = HEAP32[$2005>>2]|0;
 $2007 = (___muldi3(($1997|0),($2000|0),($2003|0),($2006|0))|0);
 $2008 = (getTempRet0() | 0);
 $2009 = (_i64Add(($1993|0),($1994|0),($2007|0),($2008|0))|0);
 $2010 = (getTempRet0() | 0);
 $2011 = (_i64Subtract(0,0,($2009|0),($2010|0))|0);
 $2012 = (getTempRet0() | 0);
 $2013 = $56;
 $2014 = $2013;
 HEAP32[$2014>>2] = $2011;
 $2015 = (($2013) + 4)|0;
 $2016 = $2015;
 HEAP32[$2016>>2] = $2012;
 $2017 = $10;
 $2018 = $2017;
 $2019 = HEAP32[$2018>>2]|0;
 $2020 = (($2017) + 4)|0;
 $2021 = $2020;
 $2022 = HEAP32[$2021>>2]|0;
 $2023 = $31;
 $2024 = $2023;
 $2025 = HEAP32[$2024>>2]|0;
 $2026 = (($2023) + 4)|0;
 $2027 = $2026;
 $2028 = HEAP32[$2027>>2]|0;
 $2029 = (___muldi3(($2019|0),($2022|0),($2025|0),($2028|0))|0);
 $2030 = (getTempRet0() | 0);
 $2031 = $11;
 $2032 = $2031;
 $2033 = HEAP32[$2032>>2]|0;
 $2034 = (($2031) + 4)|0;
 $2035 = $2034;
 $2036 = HEAP32[$2035>>2]|0;
 $2037 = $30;
 $2038 = $2037;
 $2039 = HEAP32[$2038>>2]|0;
 $2040 = (($2037) + 4)|0;
 $2041 = $2040;
 $2042 = HEAP32[$2041>>2]|0;
 $2043 = (___muldi3(($2033|0),($2036|0),($2039|0),($2042|0))|0);
 $2044 = (getTempRet0() | 0);
 $2045 = (_i64Add(($2029|0),($2030|0),($2043|0),($2044|0))|0);
 $2046 = (getTempRet0() | 0);
 $2047 = $12;
 $2048 = $2047;
 $2049 = HEAP32[$2048>>2]|0;
 $2050 = (($2047) + 4)|0;
 $2051 = $2050;
 $2052 = HEAP32[$2051>>2]|0;
 $2053 = $29;
 $2054 = $2053;
 $2055 = HEAP32[$2054>>2]|0;
 $2056 = (($2053) + 4)|0;
 $2057 = $2056;
 $2058 = HEAP32[$2057>>2]|0;
 $2059 = (___muldi3(($2049|0),($2052|0),($2055|0),($2058|0))|0);
 $2060 = (getTempRet0() | 0);
 $2061 = (_i64Add(($2045|0),($2046|0),($2059|0),($2060|0))|0);
 $2062 = (getTempRet0() | 0);
 $2063 = $13;
 $2064 = $2063;
 $2065 = HEAP32[$2064>>2]|0;
 $2066 = (($2063) + 4)|0;
 $2067 = $2066;
 $2068 = HEAP32[$2067>>2]|0;
 $2069 = $28;
 $2070 = $2069;
 $2071 = HEAP32[$2070>>2]|0;
 $2072 = (($2069) + 4)|0;
 $2073 = $2072;
 $2074 = HEAP32[$2073>>2]|0;
 $2075 = (___muldi3(($2065|0),($2068|0),($2071|0),($2074|0))|0);
 $2076 = (getTempRet0() | 0);
 $2077 = (_i64Add(($2061|0),($2062|0),($2075|0),($2076|0))|0);
 $2078 = (getTempRet0() | 0);
 $2079 = $14;
 $2080 = $2079;
 $2081 = HEAP32[$2080>>2]|0;
 $2082 = (($2079) + 4)|0;
 $2083 = $2082;
 $2084 = HEAP32[$2083>>2]|0;
 $2085 = $27;
 $2086 = $2085;
 $2087 = HEAP32[$2086>>2]|0;
 $2088 = (($2085) + 4)|0;
 $2089 = $2088;
 $2090 = HEAP32[$2089>>2]|0;
 $2091 = (___muldi3(($2081|0),($2084|0),($2087|0),($2090|0))|0);
 $2092 = (getTempRet0() | 0);
 $2093 = (_i64Add(($2077|0),($2078|0),($2091|0),($2092|0))|0);
 $2094 = (getTempRet0() | 0);
 $2095 = $15;
 $2096 = $2095;
 $2097 = HEAP32[$2096>>2]|0;
 $2098 = (($2095) + 4)|0;
 $2099 = $2098;
 $2100 = HEAP32[$2099>>2]|0;
 $2101 = $26;
 $2102 = $2101;
 $2103 = HEAP32[$2102>>2]|0;
 $2104 = (($2101) + 4)|0;
 $2105 = $2104;
 $2106 = HEAP32[$2105>>2]|0;
 $2107 = (___muldi3(($2097|0),($2100|0),($2103|0),($2106|0))|0);
 $2108 = (getTempRet0() | 0);
 $2109 = (_i64Add(($2093|0),($2094|0),($2107|0),($2108|0))|0);
 $2110 = (getTempRet0() | 0);
 $2111 = $16;
 $2112 = $2111;
 $2113 = HEAP32[$2112>>2]|0;
 $2114 = (($2111) + 4)|0;
 $2115 = $2114;
 $2116 = HEAP32[$2115>>2]|0;
 $2117 = $25;
 $2118 = $2117;
 $2119 = HEAP32[$2118>>2]|0;
 $2120 = (($2117) + 4)|0;
 $2121 = $2120;
 $2122 = HEAP32[$2121>>2]|0;
 $2123 = (___muldi3(($2113|0),($2116|0),($2119|0),($2122|0))|0);
 $2124 = (getTempRet0() | 0);
 $2125 = (_i64Add(($2109|0),($2110|0),($2123|0),($2124|0))|0);
 $2126 = (getTempRet0() | 0);
 $2127 = $17;
 $2128 = $2127;
 $2129 = HEAP32[$2128>>2]|0;
 $2130 = (($2127) + 4)|0;
 $2131 = $2130;
 $2132 = HEAP32[$2131>>2]|0;
 $2133 = $24;
 $2134 = $2133;
 $2135 = HEAP32[$2134>>2]|0;
 $2136 = (($2133) + 4)|0;
 $2137 = $2136;
 $2138 = HEAP32[$2137>>2]|0;
 $2139 = (___muldi3(($2129|0),($2132|0),($2135|0),($2138|0))|0);
 $2140 = (getTempRet0() | 0);
 $2141 = (_i64Add(($2125|0),($2126|0),($2139|0),($2140|0))|0);
 $2142 = (getTempRet0() | 0);
 $2143 = $18;
 $2144 = $2143;
 $2145 = HEAP32[$2144>>2]|0;
 $2146 = (($2143) + 4)|0;
 $2147 = $2146;
 $2148 = HEAP32[$2147>>2]|0;
 $2149 = $23;
 $2150 = $2149;
 $2151 = HEAP32[$2150>>2]|0;
 $2152 = (($2149) + 4)|0;
 $2153 = $2152;
 $2154 = HEAP32[$2153>>2]|0;
 $2155 = (___muldi3(($2145|0),($2148|0),($2151|0),($2154|0))|0);
 $2156 = (getTempRet0() | 0);
 $2157 = (_i64Add(($2141|0),($2142|0),($2155|0),($2156|0))|0);
 $2158 = (getTempRet0() | 0);
 $2159 = $19;
 $2160 = $2159;
 $2161 = HEAP32[$2160>>2]|0;
 $2162 = (($2159) + 4)|0;
 $2163 = $2162;
 $2164 = HEAP32[$2163>>2]|0;
 $2165 = $22;
 $2166 = $2165;
 $2167 = HEAP32[$2166>>2]|0;
 $2168 = (($2165) + 4)|0;
 $2169 = $2168;
 $2170 = HEAP32[$2169>>2]|0;
 $2171 = (___muldi3(($2161|0),($2164|0),($2167|0),($2170|0))|0);
 $2172 = (getTempRet0() | 0);
 $2173 = (_i64Add(($2157|0),($2158|0),($2171|0),($2172|0))|0);
 $2174 = (getTempRet0() | 0);
 $2175 = (_i64Subtract(0,0,($2173|0),($2174|0))|0);
 $2176 = (getTempRet0() | 0);
 $2177 = $57;
 $2178 = $2177;
 HEAP32[$2178>>2] = $2175;
 $2179 = (($2177) + 4)|0;
 $2180 = $2179;
 HEAP32[$2180>>2] = $2176;
 $2181 = $11;
 $2182 = $2181;
 $2183 = HEAP32[$2182>>2]|0;
 $2184 = (($2181) + 4)|0;
 $2185 = $2184;
 $2186 = HEAP32[$2185>>2]|0;
 $2187 = $31;
 $2188 = $2187;
 $2189 = HEAP32[$2188>>2]|0;
 $2190 = (($2187) + 4)|0;
 $2191 = $2190;
 $2192 = HEAP32[$2191>>2]|0;
 $2193 = (___muldi3(($2183|0),($2186|0),($2189|0),($2192|0))|0);
 $2194 = (getTempRet0() | 0);
 $2195 = $12;
 $2196 = $2195;
 $2197 = HEAP32[$2196>>2]|0;
 $2198 = (($2195) + 4)|0;
 $2199 = $2198;
 $2200 = HEAP32[$2199>>2]|0;
 $2201 = $30;
 $2202 = $2201;
 $2203 = HEAP32[$2202>>2]|0;
 $2204 = (($2201) + 4)|0;
 $2205 = $2204;
 $2206 = HEAP32[$2205>>2]|0;
 $2207 = (___muldi3(($2197|0),($2200|0),($2203|0),($2206|0))|0);
 $2208 = (getTempRet0() | 0);
 $2209 = (_i64Add(($2193|0),($2194|0),($2207|0),($2208|0))|0);
 $2210 = (getTempRet0() | 0);
 $2211 = $13;
 $2212 = $2211;
 $2213 = HEAP32[$2212>>2]|0;
 $2214 = (($2211) + 4)|0;
 $2215 = $2214;
 $2216 = HEAP32[$2215>>2]|0;
 $2217 = $29;
 $2218 = $2217;
 $2219 = HEAP32[$2218>>2]|0;
 $2220 = (($2217) + 4)|0;
 $2221 = $2220;
 $2222 = HEAP32[$2221>>2]|0;
 $2223 = (___muldi3(($2213|0),($2216|0),($2219|0),($2222|0))|0);
 $2224 = (getTempRet0() | 0);
 $2225 = (_i64Add(($2209|0),($2210|0),($2223|0),($2224|0))|0);
 $2226 = (getTempRet0() | 0);
 $2227 = $14;
 $2228 = $2227;
 $2229 = HEAP32[$2228>>2]|0;
 $2230 = (($2227) + 4)|0;
 $2231 = $2230;
 $2232 = HEAP32[$2231>>2]|0;
 $2233 = $28;
 $2234 = $2233;
 $2235 = HEAP32[$2234>>2]|0;
 $2236 = (($2233) + 4)|0;
 $2237 = $2236;
 $2238 = HEAP32[$2237>>2]|0;
 $2239 = (___muldi3(($2229|0),($2232|0),($2235|0),($2238|0))|0);
 $2240 = (getTempRet0() | 0);
 $2241 = (_i64Add(($2225|0),($2226|0),($2239|0),($2240|0))|0);
 $2242 = (getTempRet0() | 0);
 $2243 = $15;
 $2244 = $2243;
 $2245 = HEAP32[$2244>>2]|0;
 $2246 = (($2243) + 4)|0;
 $2247 = $2246;
 $2248 = HEAP32[$2247>>2]|0;
 $2249 = $27;
 $2250 = $2249;
 $2251 = HEAP32[$2250>>2]|0;
 $2252 = (($2249) + 4)|0;
 $2253 = $2252;
 $2254 = HEAP32[$2253>>2]|0;
 $2255 = (___muldi3(($2245|0),($2248|0),($2251|0),($2254|0))|0);
 $2256 = (getTempRet0() | 0);
 $2257 = (_i64Add(($2241|0),($2242|0),($2255|0),($2256|0))|0);
 $2258 = (getTempRet0() | 0);
 $2259 = $16;
 $2260 = $2259;
 $2261 = HEAP32[$2260>>2]|0;
 $2262 = (($2259) + 4)|0;
 $2263 = $2262;
 $2264 = HEAP32[$2263>>2]|0;
 $2265 = $26;
 $2266 = $2265;
 $2267 = HEAP32[$2266>>2]|0;
 $2268 = (($2265) + 4)|0;
 $2269 = $2268;
 $2270 = HEAP32[$2269>>2]|0;
 $2271 = (___muldi3(($2261|0),($2264|0),($2267|0),($2270|0))|0);
 $2272 = (getTempRet0() | 0);
 $2273 = (_i64Add(($2257|0),($2258|0),($2271|0),($2272|0))|0);
 $2274 = (getTempRet0() | 0);
 $2275 = $17;
 $2276 = $2275;
 $2277 = HEAP32[$2276>>2]|0;
 $2278 = (($2275) + 4)|0;
 $2279 = $2278;
 $2280 = HEAP32[$2279>>2]|0;
 $2281 = $25;
 $2282 = $2281;
 $2283 = HEAP32[$2282>>2]|0;
 $2284 = (($2281) + 4)|0;
 $2285 = $2284;
 $2286 = HEAP32[$2285>>2]|0;
 $2287 = (___muldi3(($2277|0),($2280|0),($2283|0),($2286|0))|0);
 $2288 = (getTempRet0() | 0);
 $2289 = (_i64Add(($2273|0),($2274|0),($2287|0),($2288|0))|0);
 $2290 = (getTempRet0() | 0);
 $2291 = $18;
 $2292 = $2291;
 $2293 = HEAP32[$2292>>2]|0;
 $2294 = (($2291) + 4)|0;
 $2295 = $2294;
 $2296 = HEAP32[$2295>>2]|0;
 $2297 = $24;
 $2298 = $2297;
 $2299 = HEAP32[$2298>>2]|0;
 $2300 = (($2297) + 4)|0;
 $2301 = $2300;
 $2302 = HEAP32[$2301>>2]|0;
 $2303 = (___muldi3(($2293|0),($2296|0),($2299|0),($2302|0))|0);
 $2304 = (getTempRet0() | 0);
 $2305 = (_i64Add(($2289|0),($2290|0),($2303|0),($2304|0))|0);
 $2306 = (getTempRet0() | 0);
 $2307 = $19;
 $2308 = $2307;
 $2309 = HEAP32[$2308>>2]|0;
 $2310 = (($2307) + 4)|0;
 $2311 = $2310;
 $2312 = HEAP32[$2311>>2]|0;
 $2313 = $23;
 $2314 = $2313;
 $2315 = HEAP32[$2314>>2]|0;
 $2316 = (($2313) + 4)|0;
 $2317 = $2316;
 $2318 = HEAP32[$2317>>2]|0;
 $2319 = (___muldi3(($2309|0),($2312|0),($2315|0),($2318|0))|0);
 $2320 = (getTempRet0() | 0);
 $2321 = (_i64Add(($2305|0),($2306|0),($2319|0),($2320|0))|0);
 $2322 = (getTempRet0() | 0);
 $2323 = (_i64Subtract(0,0,($2321|0),($2322|0))|0);
 $2324 = (getTempRet0() | 0);
 $2325 = $58;
 $2326 = $2325;
 HEAP32[$2326>>2] = $2323;
 $2327 = (($2325) + 4)|0;
 $2328 = $2327;
 HEAP32[$2328>>2] = $2324;
 $2329 = $12;
 $2330 = $2329;
 $2331 = HEAP32[$2330>>2]|0;
 $2332 = (($2329) + 4)|0;
 $2333 = $2332;
 $2334 = HEAP32[$2333>>2]|0;
 $2335 = $31;
 $2336 = $2335;
 $2337 = HEAP32[$2336>>2]|0;
 $2338 = (($2335) + 4)|0;
 $2339 = $2338;
 $2340 = HEAP32[$2339>>2]|0;
 $2341 = (___muldi3(($2331|0),($2334|0),($2337|0),($2340|0))|0);
 $2342 = (getTempRet0() | 0);
 $2343 = $13;
 $2344 = $2343;
 $2345 = HEAP32[$2344>>2]|0;
 $2346 = (($2343) + 4)|0;
 $2347 = $2346;
 $2348 = HEAP32[$2347>>2]|0;
 $2349 = $30;
 $2350 = $2349;
 $2351 = HEAP32[$2350>>2]|0;
 $2352 = (($2349) + 4)|0;
 $2353 = $2352;
 $2354 = HEAP32[$2353>>2]|0;
 $2355 = (___muldi3(($2345|0),($2348|0),($2351|0),($2354|0))|0);
 $2356 = (getTempRet0() | 0);
 $2357 = (_i64Add(($2341|0),($2342|0),($2355|0),($2356|0))|0);
 $2358 = (getTempRet0() | 0);
 $2359 = $14;
 $2360 = $2359;
 $2361 = HEAP32[$2360>>2]|0;
 $2362 = (($2359) + 4)|0;
 $2363 = $2362;
 $2364 = HEAP32[$2363>>2]|0;
 $2365 = $29;
 $2366 = $2365;
 $2367 = HEAP32[$2366>>2]|0;
 $2368 = (($2365) + 4)|0;
 $2369 = $2368;
 $2370 = HEAP32[$2369>>2]|0;
 $2371 = (___muldi3(($2361|0),($2364|0),($2367|0),($2370|0))|0);
 $2372 = (getTempRet0() | 0);
 $2373 = (_i64Add(($2357|0),($2358|0),($2371|0),($2372|0))|0);
 $2374 = (getTempRet0() | 0);
 $2375 = $15;
 $2376 = $2375;
 $2377 = HEAP32[$2376>>2]|0;
 $2378 = (($2375) + 4)|0;
 $2379 = $2378;
 $2380 = HEAP32[$2379>>2]|0;
 $2381 = $28;
 $2382 = $2381;
 $2383 = HEAP32[$2382>>2]|0;
 $2384 = (($2381) + 4)|0;
 $2385 = $2384;
 $2386 = HEAP32[$2385>>2]|0;
 $2387 = (___muldi3(($2377|0),($2380|0),($2383|0),($2386|0))|0);
 $2388 = (getTempRet0() | 0);
 $2389 = (_i64Add(($2373|0),($2374|0),($2387|0),($2388|0))|0);
 $2390 = (getTempRet0() | 0);
 $2391 = $16;
 $2392 = $2391;
 $2393 = HEAP32[$2392>>2]|0;
 $2394 = (($2391) + 4)|0;
 $2395 = $2394;
 $2396 = HEAP32[$2395>>2]|0;
 $2397 = $27;
 $2398 = $2397;
 $2399 = HEAP32[$2398>>2]|0;
 $2400 = (($2397) + 4)|0;
 $2401 = $2400;
 $2402 = HEAP32[$2401>>2]|0;
 $2403 = (___muldi3(($2393|0),($2396|0),($2399|0),($2402|0))|0);
 $2404 = (getTempRet0() | 0);
 $2405 = (_i64Add(($2389|0),($2390|0),($2403|0),($2404|0))|0);
 $2406 = (getTempRet0() | 0);
 $2407 = $17;
 $2408 = $2407;
 $2409 = HEAP32[$2408>>2]|0;
 $2410 = (($2407) + 4)|0;
 $2411 = $2410;
 $2412 = HEAP32[$2411>>2]|0;
 $2413 = $26;
 $2414 = $2413;
 $2415 = HEAP32[$2414>>2]|0;
 $2416 = (($2413) + 4)|0;
 $2417 = $2416;
 $2418 = HEAP32[$2417>>2]|0;
 $2419 = (___muldi3(($2409|0),($2412|0),($2415|0),($2418|0))|0);
 $2420 = (getTempRet0() | 0);
 $2421 = (_i64Add(($2405|0),($2406|0),($2419|0),($2420|0))|0);
 $2422 = (getTempRet0() | 0);
 $2423 = $18;
 $2424 = $2423;
 $2425 = HEAP32[$2424>>2]|0;
 $2426 = (($2423) + 4)|0;
 $2427 = $2426;
 $2428 = HEAP32[$2427>>2]|0;
 $2429 = $25;
 $2430 = $2429;
 $2431 = HEAP32[$2430>>2]|0;
 $2432 = (($2429) + 4)|0;
 $2433 = $2432;
 $2434 = HEAP32[$2433>>2]|0;
 $2435 = (___muldi3(($2425|0),($2428|0),($2431|0),($2434|0))|0);
 $2436 = (getTempRet0() | 0);
 $2437 = (_i64Add(($2421|0),($2422|0),($2435|0),($2436|0))|0);
 $2438 = (getTempRet0() | 0);
 $2439 = $19;
 $2440 = $2439;
 $2441 = HEAP32[$2440>>2]|0;
 $2442 = (($2439) + 4)|0;
 $2443 = $2442;
 $2444 = HEAP32[$2443>>2]|0;
 $2445 = $24;
 $2446 = $2445;
 $2447 = HEAP32[$2446>>2]|0;
 $2448 = (($2445) + 4)|0;
 $2449 = $2448;
 $2450 = HEAP32[$2449>>2]|0;
 $2451 = (___muldi3(($2441|0),($2444|0),($2447|0),($2450|0))|0);
 $2452 = (getTempRet0() | 0);
 $2453 = (_i64Add(($2437|0),($2438|0),($2451|0),($2452|0))|0);
 $2454 = (getTempRet0() | 0);
 $2455 = (_i64Subtract(0,0,($2453|0),($2454|0))|0);
 $2456 = (getTempRet0() | 0);
 $2457 = $59;
 $2458 = $2457;
 HEAP32[$2458>>2] = $2455;
 $2459 = (($2457) + 4)|0;
 $2460 = $2459;
 HEAP32[$2460>>2] = $2456;
 $2461 = $13;
 $2462 = $2461;
 $2463 = HEAP32[$2462>>2]|0;
 $2464 = (($2461) + 4)|0;
 $2465 = $2464;
 $2466 = HEAP32[$2465>>2]|0;
 $2467 = $31;
 $2468 = $2467;
 $2469 = HEAP32[$2468>>2]|0;
 $2470 = (($2467) + 4)|0;
 $2471 = $2470;
 $2472 = HEAP32[$2471>>2]|0;
 $2473 = (___muldi3(($2463|0),($2466|0),($2469|0),($2472|0))|0);
 $2474 = (getTempRet0() | 0);
 $2475 = $14;
 $2476 = $2475;
 $2477 = HEAP32[$2476>>2]|0;
 $2478 = (($2475) + 4)|0;
 $2479 = $2478;
 $2480 = HEAP32[$2479>>2]|0;
 $2481 = $30;
 $2482 = $2481;
 $2483 = HEAP32[$2482>>2]|0;
 $2484 = (($2481) + 4)|0;
 $2485 = $2484;
 $2486 = HEAP32[$2485>>2]|0;
 $2487 = (___muldi3(($2477|0),($2480|0),($2483|0),($2486|0))|0);
 $2488 = (getTempRet0() | 0);
 $2489 = (_i64Add(($2473|0),($2474|0),($2487|0),($2488|0))|0);
 $2490 = (getTempRet0() | 0);
 $2491 = $15;
 $2492 = $2491;
 $2493 = HEAP32[$2492>>2]|0;
 $2494 = (($2491) + 4)|0;
 $2495 = $2494;
 $2496 = HEAP32[$2495>>2]|0;
 $2497 = $29;
 $2498 = $2497;
 $2499 = HEAP32[$2498>>2]|0;
 $2500 = (($2497) + 4)|0;
 $2501 = $2500;
 $2502 = HEAP32[$2501>>2]|0;
 $2503 = (___muldi3(($2493|0),($2496|0),($2499|0),($2502|0))|0);
 $2504 = (getTempRet0() | 0);
 $2505 = (_i64Add(($2489|0),($2490|0),($2503|0),($2504|0))|0);
 $2506 = (getTempRet0() | 0);
 $2507 = $16;
 $2508 = $2507;
 $2509 = HEAP32[$2508>>2]|0;
 $2510 = (($2507) + 4)|0;
 $2511 = $2510;
 $2512 = HEAP32[$2511>>2]|0;
 $2513 = $28;
 $2514 = $2513;
 $2515 = HEAP32[$2514>>2]|0;
 $2516 = (($2513) + 4)|0;
 $2517 = $2516;
 $2518 = HEAP32[$2517>>2]|0;
 $2519 = (___muldi3(($2509|0),($2512|0),($2515|0),($2518|0))|0);
 $2520 = (getTempRet0() | 0);
 $2521 = (_i64Add(($2505|0),($2506|0),($2519|0),($2520|0))|0);
 $2522 = (getTempRet0() | 0);
 $2523 = $17;
 $2524 = $2523;
 $2525 = HEAP32[$2524>>2]|0;
 $2526 = (($2523) + 4)|0;
 $2527 = $2526;
 $2528 = HEAP32[$2527>>2]|0;
 $2529 = $27;
 $2530 = $2529;
 $2531 = HEAP32[$2530>>2]|0;
 $2532 = (($2529) + 4)|0;
 $2533 = $2532;
 $2534 = HEAP32[$2533>>2]|0;
 $2535 = (___muldi3(($2525|0),($2528|0),($2531|0),($2534|0))|0);
 $2536 = (getTempRet0() | 0);
 $2537 = (_i64Add(($2521|0),($2522|0),($2535|0),($2536|0))|0);
 $2538 = (getTempRet0() | 0);
 $2539 = $18;
 $2540 = $2539;
 $2541 = HEAP32[$2540>>2]|0;
 $2542 = (($2539) + 4)|0;
 $2543 = $2542;
 $2544 = HEAP32[$2543>>2]|0;
 $2545 = $26;
 $2546 = $2545;
 $2547 = HEAP32[$2546>>2]|0;
 $2548 = (($2545) + 4)|0;
 $2549 = $2548;
 $2550 = HEAP32[$2549>>2]|0;
 $2551 = (___muldi3(($2541|0),($2544|0),($2547|0),($2550|0))|0);
 $2552 = (getTempRet0() | 0);
 $2553 = (_i64Add(($2537|0),($2538|0),($2551|0),($2552|0))|0);
 $2554 = (getTempRet0() | 0);
 $2555 = $19;
 $2556 = $2555;
 $2557 = HEAP32[$2556>>2]|0;
 $2558 = (($2555) + 4)|0;
 $2559 = $2558;
 $2560 = HEAP32[$2559>>2]|0;
 $2561 = $25;
 $2562 = $2561;
 $2563 = HEAP32[$2562>>2]|0;
 $2564 = (($2561) + 4)|0;
 $2565 = $2564;
 $2566 = HEAP32[$2565>>2]|0;
 $2567 = (___muldi3(($2557|0),($2560|0),($2563|0),($2566|0))|0);
 $2568 = (getTempRet0() | 0);
 $2569 = (_i64Add(($2553|0),($2554|0),($2567|0),($2568|0))|0);
 $2570 = (getTempRet0() | 0);
 $2571 = (_i64Subtract(0,0,($2569|0),($2570|0))|0);
 $2572 = (getTempRet0() | 0);
 $2573 = $60;
 $2574 = $2573;
 HEAP32[$2574>>2] = $2571;
 $2575 = (($2573) + 4)|0;
 $2576 = $2575;
 HEAP32[$2576>>2] = $2572;
 $2577 = $14;
 $2578 = $2577;
 $2579 = HEAP32[$2578>>2]|0;
 $2580 = (($2577) + 4)|0;
 $2581 = $2580;
 $2582 = HEAP32[$2581>>2]|0;
 $2583 = $31;
 $2584 = $2583;
 $2585 = HEAP32[$2584>>2]|0;
 $2586 = (($2583) + 4)|0;
 $2587 = $2586;
 $2588 = HEAP32[$2587>>2]|0;
 $2589 = (___muldi3(($2579|0),($2582|0),($2585|0),($2588|0))|0);
 $2590 = (getTempRet0() | 0);
 $2591 = $15;
 $2592 = $2591;
 $2593 = HEAP32[$2592>>2]|0;
 $2594 = (($2591) + 4)|0;
 $2595 = $2594;
 $2596 = HEAP32[$2595>>2]|0;
 $2597 = $30;
 $2598 = $2597;
 $2599 = HEAP32[$2598>>2]|0;
 $2600 = (($2597) + 4)|0;
 $2601 = $2600;
 $2602 = HEAP32[$2601>>2]|0;
 $2603 = (___muldi3(($2593|0),($2596|0),($2599|0),($2602|0))|0);
 $2604 = (getTempRet0() | 0);
 $2605 = (_i64Add(($2589|0),($2590|0),($2603|0),($2604|0))|0);
 $2606 = (getTempRet0() | 0);
 $2607 = $16;
 $2608 = $2607;
 $2609 = HEAP32[$2608>>2]|0;
 $2610 = (($2607) + 4)|0;
 $2611 = $2610;
 $2612 = HEAP32[$2611>>2]|0;
 $2613 = $29;
 $2614 = $2613;
 $2615 = HEAP32[$2614>>2]|0;
 $2616 = (($2613) + 4)|0;
 $2617 = $2616;
 $2618 = HEAP32[$2617>>2]|0;
 $2619 = (___muldi3(($2609|0),($2612|0),($2615|0),($2618|0))|0);
 $2620 = (getTempRet0() | 0);
 $2621 = (_i64Add(($2605|0),($2606|0),($2619|0),($2620|0))|0);
 $2622 = (getTempRet0() | 0);
 $2623 = $17;
 $2624 = $2623;
 $2625 = HEAP32[$2624>>2]|0;
 $2626 = (($2623) + 4)|0;
 $2627 = $2626;
 $2628 = HEAP32[$2627>>2]|0;
 $2629 = $28;
 $2630 = $2629;
 $2631 = HEAP32[$2630>>2]|0;
 $2632 = (($2629) + 4)|0;
 $2633 = $2632;
 $2634 = HEAP32[$2633>>2]|0;
 $2635 = (___muldi3(($2625|0),($2628|0),($2631|0),($2634|0))|0);
 $2636 = (getTempRet0() | 0);
 $2637 = (_i64Add(($2621|0),($2622|0),($2635|0),($2636|0))|0);
 $2638 = (getTempRet0() | 0);
 $2639 = $18;
 $2640 = $2639;
 $2641 = HEAP32[$2640>>2]|0;
 $2642 = (($2639) + 4)|0;
 $2643 = $2642;
 $2644 = HEAP32[$2643>>2]|0;
 $2645 = $27;
 $2646 = $2645;
 $2647 = HEAP32[$2646>>2]|0;
 $2648 = (($2645) + 4)|0;
 $2649 = $2648;
 $2650 = HEAP32[$2649>>2]|0;
 $2651 = (___muldi3(($2641|0),($2644|0),($2647|0),($2650|0))|0);
 $2652 = (getTempRet0() | 0);
 $2653 = (_i64Add(($2637|0),($2638|0),($2651|0),($2652|0))|0);
 $2654 = (getTempRet0() | 0);
 $2655 = $19;
 $2656 = $2655;
 $2657 = HEAP32[$2656>>2]|0;
 $2658 = (($2655) + 4)|0;
 $2659 = $2658;
 $2660 = HEAP32[$2659>>2]|0;
 $2661 = $26;
 $2662 = $2661;
 $2663 = HEAP32[$2662>>2]|0;
 $2664 = (($2661) + 4)|0;
 $2665 = $2664;
 $2666 = HEAP32[$2665>>2]|0;
 $2667 = (___muldi3(($2657|0),($2660|0),($2663|0),($2666|0))|0);
 $2668 = (getTempRet0() | 0);
 $2669 = (_i64Add(($2653|0),($2654|0),($2667|0),($2668|0))|0);
 $2670 = (getTempRet0() | 0);
 $2671 = (_i64Subtract(0,0,($2669|0),($2670|0))|0);
 $2672 = (getTempRet0() | 0);
 $2673 = $61;
 $2674 = $2673;
 HEAP32[$2674>>2] = $2671;
 $2675 = (($2673) + 4)|0;
 $2676 = $2675;
 HEAP32[$2676>>2] = $2672;
 $2677 = $15;
 $2678 = $2677;
 $2679 = HEAP32[$2678>>2]|0;
 $2680 = (($2677) + 4)|0;
 $2681 = $2680;
 $2682 = HEAP32[$2681>>2]|0;
 $2683 = $31;
 $2684 = $2683;
 $2685 = HEAP32[$2684>>2]|0;
 $2686 = (($2683) + 4)|0;
 $2687 = $2686;
 $2688 = HEAP32[$2687>>2]|0;
 $2689 = (___muldi3(($2679|0),($2682|0),($2685|0),($2688|0))|0);
 $2690 = (getTempRet0() | 0);
 $2691 = $16;
 $2692 = $2691;
 $2693 = HEAP32[$2692>>2]|0;
 $2694 = (($2691) + 4)|0;
 $2695 = $2694;
 $2696 = HEAP32[$2695>>2]|0;
 $2697 = $30;
 $2698 = $2697;
 $2699 = HEAP32[$2698>>2]|0;
 $2700 = (($2697) + 4)|0;
 $2701 = $2700;
 $2702 = HEAP32[$2701>>2]|0;
 $2703 = (___muldi3(($2693|0),($2696|0),($2699|0),($2702|0))|0);
 $2704 = (getTempRet0() | 0);
 $2705 = (_i64Add(($2689|0),($2690|0),($2703|0),($2704|0))|0);
 $2706 = (getTempRet0() | 0);
 $2707 = $17;
 $2708 = $2707;
 $2709 = HEAP32[$2708>>2]|0;
 $2710 = (($2707) + 4)|0;
 $2711 = $2710;
 $2712 = HEAP32[$2711>>2]|0;
 $2713 = $29;
 $2714 = $2713;
 $2715 = HEAP32[$2714>>2]|0;
 $2716 = (($2713) + 4)|0;
 $2717 = $2716;
 $2718 = HEAP32[$2717>>2]|0;
 $2719 = (___muldi3(($2709|0),($2712|0),($2715|0),($2718|0))|0);
 $2720 = (getTempRet0() | 0);
 $2721 = (_i64Add(($2705|0),($2706|0),($2719|0),($2720|0))|0);
 $2722 = (getTempRet0() | 0);
 $2723 = $18;
 $2724 = $2723;
 $2725 = HEAP32[$2724>>2]|0;
 $2726 = (($2723) + 4)|0;
 $2727 = $2726;
 $2728 = HEAP32[$2727>>2]|0;
 $2729 = $28;
 $2730 = $2729;
 $2731 = HEAP32[$2730>>2]|0;
 $2732 = (($2729) + 4)|0;
 $2733 = $2732;
 $2734 = HEAP32[$2733>>2]|0;
 $2735 = (___muldi3(($2725|0),($2728|0),($2731|0),($2734|0))|0);
 $2736 = (getTempRet0() | 0);
 $2737 = (_i64Add(($2721|0),($2722|0),($2735|0),($2736|0))|0);
 $2738 = (getTempRet0() | 0);
 $2739 = $19;
 $2740 = $2739;
 $2741 = HEAP32[$2740>>2]|0;
 $2742 = (($2739) + 4)|0;
 $2743 = $2742;
 $2744 = HEAP32[$2743>>2]|0;
 $2745 = $27;
 $2746 = $2745;
 $2747 = HEAP32[$2746>>2]|0;
 $2748 = (($2745) + 4)|0;
 $2749 = $2748;
 $2750 = HEAP32[$2749>>2]|0;
 $2751 = (___muldi3(($2741|0),($2744|0),($2747|0),($2750|0))|0);
 $2752 = (getTempRet0() | 0);
 $2753 = (_i64Add(($2737|0),($2738|0),($2751|0),($2752|0))|0);
 $2754 = (getTempRet0() | 0);
 $2755 = (_i64Subtract(0,0,($2753|0),($2754|0))|0);
 $2756 = (getTempRet0() | 0);
 $2757 = $62;
 $2758 = $2757;
 HEAP32[$2758>>2] = $2755;
 $2759 = (($2757) + 4)|0;
 $2760 = $2759;
 HEAP32[$2760>>2] = $2756;
 $2761 = $16;
 $2762 = $2761;
 $2763 = HEAP32[$2762>>2]|0;
 $2764 = (($2761) + 4)|0;
 $2765 = $2764;
 $2766 = HEAP32[$2765>>2]|0;
 $2767 = $31;
 $2768 = $2767;
 $2769 = HEAP32[$2768>>2]|0;
 $2770 = (($2767) + 4)|0;
 $2771 = $2770;
 $2772 = HEAP32[$2771>>2]|0;
 $2773 = (___muldi3(($2763|0),($2766|0),($2769|0),($2772|0))|0);
 $2774 = (getTempRet0() | 0);
 $2775 = $17;
 $2776 = $2775;
 $2777 = HEAP32[$2776>>2]|0;
 $2778 = (($2775) + 4)|0;
 $2779 = $2778;
 $2780 = HEAP32[$2779>>2]|0;
 $2781 = $30;
 $2782 = $2781;
 $2783 = HEAP32[$2782>>2]|0;
 $2784 = (($2781) + 4)|0;
 $2785 = $2784;
 $2786 = HEAP32[$2785>>2]|0;
 $2787 = (___muldi3(($2777|0),($2780|0),($2783|0),($2786|0))|0);
 $2788 = (getTempRet0() | 0);
 $2789 = (_i64Add(($2773|0),($2774|0),($2787|0),($2788|0))|0);
 $2790 = (getTempRet0() | 0);
 $2791 = $18;
 $2792 = $2791;
 $2793 = HEAP32[$2792>>2]|0;
 $2794 = (($2791) + 4)|0;
 $2795 = $2794;
 $2796 = HEAP32[$2795>>2]|0;
 $2797 = $29;
 $2798 = $2797;
 $2799 = HEAP32[$2798>>2]|0;
 $2800 = (($2797) + 4)|0;
 $2801 = $2800;
 $2802 = HEAP32[$2801>>2]|0;
 $2803 = (___muldi3(($2793|0),($2796|0),($2799|0),($2802|0))|0);
 $2804 = (getTempRet0() | 0);
 $2805 = (_i64Add(($2789|0),($2790|0),($2803|0),($2804|0))|0);
 $2806 = (getTempRet0() | 0);
 $2807 = $19;
 $2808 = $2807;
 $2809 = HEAP32[$2808>>2]|0;
 $2810 = (($2807) + 4)|0;
 $2811 = $2810;
 $2812 = HEAP32[$2811>>2]|0;
 $2813 = $28;
 $2814 = $2813;
 $2815 = HEAP32[$2814>>2]|0;
 $2816 = (($2813) + 4)|0;
 $2817 = $2816;
 $2818 = HEAP32[$2817>>2]|0;
 $2819 = (___muldi3(($2809|0),($2812|0),($2815|0),($2818|0))|0);
 $2820 = (getTempRet0() | 0);
 $2821 = (_i64Add(($2805|0),($2806|0),($2819|0),($2820|0))|0);
 $2822 = (getTempRet0() | 0);
 $2823 = (_i64Subtract(0,0,($2821|0),($2822|0))|0);
 $2824 = (getTempRet0() | 0);
 $2825 = $63;
 $2826 = $2825;
 HEAP32[$2826>>2] = $2823;
 $2827 = (($2825) + 4)|0;
 $2828 = $2827;
 HEAP32[$2828>>2] = $2824;
 $2829 = $17;
 $2830 = $2829;
 $2831 = HEAP32[$2830>>2]|0;
 $2832 = (($2829) + 4)|0;
 $2833 = $2832;
 $2834 = HEAP32[$2833>>2]|0;
 $2835 = $31;
 $2836 = $2835;
 $2837 = HEAP32[$2836>>2]|0;
 $2838 = (($2835) + 4)|0;
 $2839 = $2838;
 $2840 = HEAP32[$2839>>2]|0;
 $2841 = (___muldi3(($2831|0),($2834|0),($2837|0),($2840|0))|0);
 $2842 = (getTempRet0() | 0);
 $2843 = $18;
 $2844 = $2843;
 $2845 = HEAP32[$2844>>2]|0;
 $2846 = (($2843) + 4)|0;
 $2847 = $2846;
 $2848 = HEAP32[$2847>>2]|0;
 $2849 = $30;
 $2850 = $2849;
 $2851 = HEAP32[$2850>>2]|0;
 $2852 = (($2849) + 4)|0;
 $2853 = $2852;
 $2854 = HEAP32[$2853>>2]|0;
 $2855 = (___muldi3(($2845|0),($2848|0),($2851|0),($2854|0))|0);
 $2856 = (getTempRet0() | 0);
 $2857 = (_i64Add(($2841|0),($2842|0),($2855|0),($2856|0))|0);
 $2858 = (getTempRet0() | 0);
 $2859 = $19;
 $2860 = $2859;
 $2861 = HEAP32[$2860>>2]|0;
 $2862 = (($2859) + 4)|0;
 $2863 = $2862;
 $2864 = HEAP32[$2863>>2]|0;
 $2865 = $29;
 $2866 = $2865;
 $2867 = HEAP32[$2866>>2]|0;
 $2868 = (($2865) + 4)|0;
 $2869 = $2868;
 $2870 = HEAP32[$2869>>2]|0;
 $2871 = (___muldi3(($2861|0),($2864|0),($2867|0),($2870|0))|0);
 $2872 = (getTempRet0() | 0);
 $2873 = (_i64Add(($2857|0),($2858|0),($2871|0),($2872|0))|0);
 $2874 = (getTempRet0() | 0);
 $2875 = (_i64Subtract(0,0,($2873|0),($2874|0))|0);
 $2876 = (getTempRet0() | 0);
 $2877 = $64;
 $2878 = $2877;
 HEAP32[$2878>>2] = $2875;
 $2879 = (($2877) + 4)|0;
 $2880 = $2879;
 HEAP32[$2880>>2] = $2876;
 $2881 = $18;
 $2882 = $2881;
 $2883 = HEAP32[$2882>>2]|0;
 $2884 = (($2881) + 4)|0;
 $2885 = $2884;
 $2886 = HEAP32[$2885>>2]|0;
 $2887 = $31;
 $2888 = $2887;
 $2889 = HEAP32[$2888>>2]|0;
 $2890 = (($2887) + 4)|0;
 $2891 = $2890;
 $2892 = HEAP32[$2891>>2]|0;
 $2893 = (___muldi3(($2883|0),($2886|0),($2889|0),($2892|0))|0);
 $2894 = (getTempRet0() | 0);
 $2895 = $19;
 $2896 = $2895;
 $2897 = HEAP32[$2896>>2]|0;
 $2898 = (($2895) + 4)|0;
 $2899 = $2898;
 $2900 = HEAP32[$2899>>2]|0;
 $2901 = $30;
 $2902 = $2901;
 $2903 = HEAP32[$2902>>2]|0;
 $2904 = (($2901) + 4)|0;
 $2905 = $2904;
 $2906 = HEAP32[$2905>>2]|0;
 $2907 = (___muldi3(($2897|0),($2900|0),($2903|0),($2906|0))|0);
 $2908 = (getTempRet0() | 0);
 $2909 = (_i64Add(($2893|0),($2894|0),($2907|0),($2908|0))|0);
 $2910 = (getTempRet0() | 0);
 $2911 = (_i64Subtract(0,0,($2909|0),($2910|0))|0);
 $2912 = (getTempRet0() | 0);
 $2913 = $65;
 $2914 = $2913;
 HEAP32[$2914>>2] = $2911;
 $2915 = (($2913) + 4)|0;
 $2916 = $2915;
 HEAP32[$2916>>2] = $2912;
 $2917 = $19;
 $2918 = $2917;
 $2919 = HEAP32[$2918>>2]|0;
 $2920 = (($2917) + 4)|0;
 $2921 = $2920;
 $2922 = HEAP32[$2921>>2]|0;
 $2923 = (_i64Subtract(0,0,($2919|0),($2922|0))|0);
 $2924 = (getTempRet0() | 0);
 $2925 = $31;
 $2926 = $2925;
 $2927 = HEAP32[$2926>>2]|0;
 $2928 = (($2925) + 4)|0;
 $2929 = $2928;
 $2930 = HEAP32[$2929>>2]|0;
 $2931 = (___muldi3(($2923|0),($2924|0),($2927|0),($2930|0))|0);
 $2932 = (getTempRet0() | 0);
 $2933 = $66;
 $2934 = $2933;
 HEAP32[$2934>>2] = $2931;
 $2935 = (($2933) + 4)|0;
 $2936 = $2935;
 HEAP32[$2936>>2] = $2932;
 $2937 = $67;
 $2938 = $2937;
 HEAP32[$2938>>2] = 0;
 $2939 = (($2937) + 4)|0;
 $2940 = $2939;
 HEAP32[$2940>>2] = 0;
 $2941 = $44;
 $2942 = $2941;
 $2943 = HEAP32[$2942>>2]|0;
 $2944 = (($2941) + 4)|0;
 $2945 = $2944;
 $2946 = HEAP32[$2945>>2]|0;
 $2947 = (_i64Add(($2943|0),($2946|0),1048576,0)|0);
 $2948 = (getTempRet0() | 0);
 $2949 = (_bitshift64Ashr(($2947|0),($2948|0),21)|0);
 $2950 = (getTempRet0() | 0);
 $2951 = $68;
 $2952 = $2951;
 HEAP32[$2952>>2] = $2949;
 $2953 = (($2951) + 4)|0;
 $2954 = $2953;
 HEAP32[$2954>>2] = $2950;
 $2955 = $68;
 $2956 = $2955;
 $2957 = HEAP32[$2956>>2]|0;
 $2958 = (($2955) + 4)|0;
 $2959 = $2958;
 $2960 = HEAP32[$2959>>2]|0;
 $2961 = $45;
 $2962 = $2961;
 $2963 = HEAP32[$2962>>2]|0;
 $2964 = (($2961) + 4)|0;
 $2965 = $2964;
 $2966 = HEAP32[$2965>>2]|0;
 $2967 = (_i64Add(($2963|0),($2966|0),($2957|0),($2960|0))|0);
 $2968 = (getTempRet0() | 0);
 $2969 = $45;
 $2970 = $2969;
 HEAP32[$2970>>2] = $2967;
 $2971 = (($2969) + 4)|0;
 $2972 = $2971;
 HEAP32[$2972>>2] = $2968;
 $2973 = $68;
 $2974 = $2973;
 $2975 = HEAP32[$2974>>2]|0;
 $2976 = (($2973) + 4)|0;
 $2977 = $2976;
 $2978 = HEAP32[$2977>>2]|0;
 $2979 = (_bitshift64Shl(($2975|0),($2978|0),21)|0);
 $2980 = (getTempRet0() | 0);
 $2981 = $44;
 $2982 = $2981;
 $2983 = HEAP32[$2982>>2]|0;
 $2984 = (($2981) + 4)|0;
 $2985 = $2984;
 $2986 = HEAP32[$2985>>2]|0;
 $2987 = (_i64Subtract(($2983|0),($2986|0),($2979|0),($2980|0))|0);
 $2988 = (getTempRet0() | 0);
 $2989 = $44;
 $2990 = $2989;
 HEAP32[$2990>>2] = $2987;
 $2991 = (($2989) + 4)|0;
 $2992 = $2991;
 HEAP32[$2992>>2] = $2988;
 $2993 = $46;
 $2994 = $2993;
 $2995 = HEAP32[$2994>>2]|0;
 $2996 = (($2993) + 4)|0;
 $2997 = $2996;
 $2998 = HEAP32[$2997>>2]|0;
 $2999 = (_i64Add(($2995|0),($2998|0),1048576,0)|0);
 $3000 = (getTempRet0() | 0);
 $3001 = (_bitshift64Ashr(($2999|0),($3000|0),21)|0);
 $3002 = (getTempRet0() | 0);
 $3003 = $70;
 $3004 = $3003;
 HEAP32[$3004>>2] = $3001;
 $3005 = (($3003) + 4)|0;
 $3006 = $3005;
 HEAP32[$3006>>2] = $3002;
 $3007 = $70;
 $3008 = $3007;
 $3009 = HEAP32[$3008>>2]|0;
 $3010 = (($3007) + 4)|0;
 $3011 = $3010;
 $3012 = HEAP32[$3011>>2]|0;
 $3013 = $47;
 $3014 = $3013;
 $3015 = HEAP32[$3014>>2]|0;
 $3016 = (($3013) + 4)|0;
 $3017 = $3016;
 $3018 = HEAP32[$3017>>2]|0;
 $3019 = (_i64Add(($3015|0),($3018|0),($3009|0),($3012|0))|0);
 $3020 = (getTempRet0() | 0);
 $3021 = $47;
 $3022 = $3021;
 HEAP32[$3022>>2] = $3019;
 $3023 = (($3021) + 4)|0;
 $3024 = $3023;
 HEAP32[$3024>>2] = $3020;
 $3025 = $70;
 $3026 = $3025;
 $3027 = HEAP32[$3026>>2]|0;
 $3028 = (($3025) + 4)|0;
 $3029 = $3028;
 $3030 = HEAP32[$3029>>2]|0;
 $3031 = (_bitshift64Shl(($3027|0),($3030|0),21)|0);
 $3032 = (getTempRet0() | 0);
 $3033 = $46;
 $3034 = $3033;
 $3035 = HEAP32[$3034>>2]|0;
 $3036 = (($3033) + 4)|0;
 $3037 = $3036;
 $3038 = HEAP32[$3037>>2]|0;
 $3039 = (_i64Subtract(($3035|0),($3038|0),($3031|0),($3032|0))|0);
 $3040 = (getTempRet0() | 0);
 $3041 = $46;
 $3042 = $3041;
 HEAP32[$3042>>2] = $3039;
 $3043 = (($3041) + 4)|0;
 $3044 = $3043;
 HEAP32[$3044>>2] = $3040;
 $3045 = $48;
 $3046 = $3045;
 $3047 = HEAP32[$3046>>2]|0;
 $3048 = (($3045) + 4)|0;
 $3049 = $3048;
 $3050 = HEAP32[$3049>>2]|0;
 $3051 = (_i64Add(($3047|0),($3050|0),1048576,0)|0);
 $3052 = (getTempRet0() | 0);
 $3053 = (_bitshift64Ashr(($3051|0),($3052|0),21)|0);
 $3054 = (getTempRet0() | 0);
 $3055 = $72;
 $3056 = $3055;
 HEAP32[$3056>>2] = $3053;
 $3057 = (($3055) + 4)|0;
 $3058 = $3057;
 HEAP32[$3058>>2] = $3054;
 $3059 = $72;
 $3060 = $3059;
 $3061 = HEAP32[$3060>>2]|0;
 $3062 = (($3059) + 4)|0;
 $3063 = $3062;
 $3064 = HEAP32[$3063>>2]|0;
 $3065 = $49;
 $3066 = $3065;
 $3067 = HEAP32[$3066>>2]|0;
 $3068 = (($3065) + 4)|0;
 $3069 = $3068;
 $3070 = HEAP32[$3069>>2]|0;
 $3071 = (_i64Add(($3067|0),($3070|0),($3061|0),($3064|0))|0);
 $3072 = (getTempRet0() | 0);
 $3073 = $49;
 $3074 = $3073;
 HEAP32[$3074>>2] = $3071;
 $3075 = (($3073) + 4)|0;
 $3076 = $3075;
 HEAP32[$3076>>2] = $3072;
 $3077 = $72;
 $3078 = $3077;
 $3079 = HEAP32[$3078>>2]|0;
 $3080 = (($3077) + 4)|0;
 $3081 = $3080;
 $3082 = HEAP32[$3081>>2]|0;
 $3083 = (_bitshift64Shl(($3079|0),($3082|0),21)|0);
 $3084 = (getTempRet0() | 0);
 $3085 = $48;
 $3086 = $3085;
 $3087 = HEAP32[$3086>>2]|0;
 $3088 = (($3085) + 4)|0;
 $3089 = $3088;
 $3090 = HEAP32[$3089>>2]|0;
 $3091 = (_i64Subtract(($3087|0),($3090|0),($3083|0),($3084|0))|0);
 $3092 = (getTempRet0() | 0);
 $3093 = $48;
 $3094 = $3093;
 HEAP32[$3094>>2] = $3091;
 $3095 = (($3093) + 4)|0;
 $3096 = $3095;
 HEAP32[$3096>>2] = $3092;
 $3097 = $50;
 $3098 = $3097;
 $3099 = HEAP32[$3098>>2]|0;
 $3100 = (($3097) + 4)|0;
 $3101 = $3100;
 $3102 = HEAP32[$3101>>2]|0;
 $3103 = (_i64Add(($3099|0),($3102|0),1048576,0)|0);
 $3104 = (getTempRet0() | 0);
 $3105 = (_bitshift64Ashr(($3103|0),($3104|0),21)|0);
 $3106 = (getTempRet0() | 0);
 $3107 = $74;
 $3108 = $3107;
 HEAP32[$3108>>2] = $3105;
 $3109 = (($3107) + 4)|0;
 $3110 = $3109;
 HEAP32[$3110>>2] = $3106;
 $3111 = $74;
 $3112 = $3111;
 $3113 = HEAP32[$3112>>2]|0;
 $3114 = (($3111) + 4)|0;
 $3115 = $3114;
 $3116 = HEAP32[$3115>>2]|0;
 $3117 = $51;
 $3118 = $3117;
 $3119 = HEAP32[$3118>>2]|0;
 $3120 = (($3117) + 4)|0;
 $3121 = $3120;
 $3122 = HEAP32[$3121>>2]|0;
 $3123 = (_i64Add(($3119|0),($3122|0),($3113|0),($3116|0))|0);
 $3124 = (getTempRet0() | 0);
 $3125 = $51;
 $3126 = $3125;
 HEAP32[$3126>>2] = $3123;
 $3127 = (($3125) + 4)|0;
 $3128 = $3127;
 HEAP32[$3128>>2] = $3124;
 $3129 = $74;
 $3130 = $3129;
 $3131 = HEAP32[$3130>>2]|0;
 $3132 = (($3129) + 4)|0;
 $3133 = $3132;
 $3134 = HEAP32[$3133>>2]|0;
 $3135 = (_bitshift64Shl(($3131|0),($3134|0),21)|0);
 $3136 = (getTempRet0() | 0);
 $3137 = $50;
 $3138 = $3137;
 $3139 = HEAP32[$3138>>2]|0;
 $3140 = (($3137) + 4)|0;
 $3141 = $3140;
 $3142 = HEAP32[$3141>>2]|0;
 $3143 = (_i64Subtract(($3139|0),($3142|0),($3135|0),($3136|0))|0);
 $3144 = (getTempRet0() | 0);
 $3145 = $50;
 $3146 = $3145;
 HEAP32[$3146>>2] = $3143;
 $3147 = (($3145) + 4)|0;
 $3148 = $3147;
 HEAP32[$3148>>2] = $3144;
 $3149 = $52;
 $3150 = $3149;
 $3151 = HEAP32[$3150>>2]|0;
 $3152 = (($3149) + 4)|0;
 $3153 = $3152;
 $3154 = HEAP32[$3153>>2]|0;
 $3155 = (_i64Add(($3151|0),($3154|0),1048576,0)|0);
 $3156 = (getTempRet0() | 0);
 $3157 = (_bitshift64Ashr(($3155|0),($3156|0),21)|0);
 $3158 = (getTempRet0() | 0);
 $3159 = $76;
 $3160 = $3159;
 HEAP32[$3160>>2] = $3157;
 $3161 = (($3159) + 4)|0;
 $3162 = $3161;
 HEAP32[$3162>>2] = $3158;
 $3163 = $76;
 $3164 = $3163;
 $3165 = HEAP32[$3164>>2]|0;
 $3166 = (($3163) + 4)|0;
 $3167 = $3166;
 $3168 = HEAP32[$3167>>2]|0;
 $3169 = $53;
 $3170 = $3169;
 $3171 = HEAP32[$3170>>2]|0;
 $3172 = (($3169) + 4)|0;
 $3173 = $3172;
 $3174 = HEAP32[$3173>>2]|0;
 $3175 = (_i64Add(($3171|0),($3174|0),($3165|0),($3168|0))|0);
 $3176 = (getTempRet0() | 0);
 $3177 = $53;
 $3178 = $3177;
 HEAP32[$3178>>2] = $3175;
 $3179 = (($3177) + 4)|0;
 $3180 = $3179;
 HEAP32[$3180>>2] = $3176;
 $3181 = $76;
 $3182 = $3181;
 $3183 = HEAP32[$3182>>2]|0;
 $3184 = (($3181) + 4)|0;
 $3185 = $3184;
 $3186 = HEAP32[$3185>>2]|0;
 $3187 = (_bitshift64Shl(($3183|0),($3186|0),21)|0);
 $3188 = (getTempRet0() | 0);
 $3189 = $52;
 $3190 = $3189;
 $3191 = HEAP32[$3190>>2]|0;
 $3192 = (($3189) + 4)|0;
 $3193 = $3192;
 $3194 = HEAP32[$3193>>2]|0;
 $3195 = (_i64Subtract(($3191|0),($3194|0),($3187|0),($3188|0))|0);
 $3196 = (getTempRet0() | 0);
 $3197 = $52;
 $3198 = $3197;
 HEAP32[$3198>>2] = $3195;
 $3199 = (($3197) + 4)|0;
 $3200 = $3199;
 HEAP32[$3200>>2] = $3196;
 $3201 = $54;
 $3202 = $3201;
 $3203 = HEAP32[$3202>>2]|0;
 $3204 = (($3201) + 4)|0;
 $3205 = $3204;
 $3206 = HEAP32[$3205>>2]|0;
 $3207 = (_i64Add(($3203|0),($3206|0),1048576,0)|0);
 $3208 = (getTempRet0() | 0);
 $3209 = (_bitshift64Ashr(($3207|0),($3208|0),21)|0);
 $3210 = (getTempRet0() | 0);
 $3211 = $78;
 $3212 = $3211;
 HEAP32[$3212>>2] = $3209;
 $3213 = (($3211) + 4)|0;
 $3214 = $3213;
 HEAP32[$3214>>2] = $3210;
 $3215 = $78;
 $3216 = $3215;
 $3217 = HEAP32[$3216>>2]|0;
 $3218 = (($3215) + 4)|0;
 $3219 = $3218;
 $3220 = HEAP32[$3219>>2]|0;
 $3221 = $55;
 $3222 = $3221;
 $3223 = HEAP32[$3222>>2]|0;
 $3224 = (($3221) + 4)|0;
 $3225 = $3224;
 $3226 = HEAP32[$3225>>2]|0;
 $3227 = (_i64Add(($3223|0),($3226|0),($3217|0),($3220|0))|0);
 $3228 = (getTempRet0() | 0);
 $3229 = $55;
 $3230 = $3229;
 HEAP32[$3230>>2] = $3227;
 $3231 = (($3229) + 4)|0;
 $3232 = $3231;
 HEAP32[$3232>>2] = $3228;
 $3233 = $78;
 $3234 = $3233;
 $3235 = HEAP32[$3234>>2]|0;
 $3236 = (($3233) + 4)|0;
 $3237 = $3236;
 $3238 = HEAP32[$3237>>2]|0;
 $3239 = (_bitshift64Shl(($3235|0),($3238|0),21)|0);
 $3240 = (getTempRet0() | 0);
 $3241 = $54;
 $3242 = $3241;
 $3243 = HEAP32[$3242>>2]|0;
 $3244 = (($3241) + 4)|0;
 $3245 = $3244;
 $3246 = HEAP32[$3245>>2]|0;
 $3247 = (_i64Subtract(($3243|0),($3246|0),($3239|0),($3240|0))|0);
 $3248 = (getTempRet0() | 0);
 $3249 = $54;
 $3250 = $3249;
 HEAP32[$3250>>2] = $3247;
 $3251 = (($3249) + 4)|0;
 $3252 = $3251;
 HEAP32[$3252>>2] = $3248;
 $3253 = $56;
 $3254 = $3253;
 $3255 = HEAP32[$3254>>2]|0;
 $3256 = (($3253) + 4)|0;
 $3257 = $3256;
 $3258 = HEAP32[$3257>>2]|0;
 $3259 = (_i64Add(($3255|0),($3258|0),1048576,0)|0);
 $3260 = (getTempRet0() | 0);
 $3261 = (_bitshift64Ashr(($3259|0),($3260|0),21)|0);
 $3262 = (getTempRet0() | 0);
 $3263 = $80;
 $3264 = $3263;
 HEAP32[$3264>>2] = $3261;
 $3265 = (($3263) + 4)|0;
 $3266 = $3265;
 HEAP32[$3266>>2] = $3262;
 $3267 = $80;
 $3268 = $3267;
 $3269 = HEAP32[$3268>>2]|0;
 $3270 = (($3267) + 4)|0;
 $3271 = $3270;
 $3272 = HEAP32[$3271>>2]|0;
 $3273 = $57;
 $3274 = $3273;
 $3275 = HEAP32[$3274>>2]|0;
 $3276 = (($3273) + 4)|0;
 $3277 = $3276;
 $3278 = HEAP32[$3277>>2]|0;
 $3279 = (_i64Add(($3275|0),($3278|0),($3269|0),($3272|0))|0);
 $3280 = (getTempRet0() | 0);
 $3281 = $57;
 $3282 = $3281;
 HEAP32[$3282>>2] = $3279;
 $3283 = (($3281) + 4)|0;
 $3284 = $3283;
 HEAP32[$3284>>2] = $3280;
 $3285 = $80;
 $3286 = $3285;
 $3287 = HEAP32[$3286>>2]|0;
 $3288 = (($3285) + 4)|0;
 $3289 = $3288;
 $3290 = HEAP32[$3289>>2]|0;
 $3291 = (_bitshift64Shl(($3287|0),($3290|0),21)|0);
 $3292 = (getTempRet0() | 0);
 $3293 = $56;
 $3294 = $3293;
 $3295 = HEAP32[$3294>>2]|0;
 $3296 = (($3293) + 4)|0;
 $3297 = $3296;
 $3298 = HEAP32[$3297>>2]|0;
 $3299 = (_i64Subtract(($3295|0),($3298|0),($3291|0),($3292|0))|0);
 $3300 = (getTempRet0() | 0);
 $3301 = $56;
 $3302 = $3301;
 HEAP32[$3302>>2] = $3299;
 $3303 = (($3301) + 4)|0;
 $3304 = $3303;
 HEAP32[$3304>>2] = $3300;
 $3305 = $58;
 $3306 = $3305;
 $3307 = HEAP32[$3306>>2]|0;
 $3308 = (($3305) + 4)|0;
 $3309 = $3308;
 $3310 = HEAP32[$3309>>2]|0;
 $3311 = (_i64Add(($3307|0),($3310|0),1048576,0)|0);
 $3312 = (getTempRet0() | 0);
 $3313 = (_bitshift64Ashr(($3311|0),($3312|0),21)|0);
 $3314 = (getTempRet0() | 0);
 $3315 = $82;
 $3316 = $3315;
 HEAP32[$3316>>2] = $3313;
 $3317 = (($3315) + 4)|0;
 $3318 = $3317;
 HEAP32[$3318>>2] = $3314;
 $3319 = $82;
 $3320 = $3319;
 $3321 = HEAP32[$3320>>2]|0;
 $3322 = (($3319) + 4)|0;
 $3323 = $3322;
 $3324 = HEAP32[$3323>>2]|0;
 $3325 = $59;
 $3326 = $3325;
 $3327 = HEAP32[$3326>>2]|0;
 $3328 = (($3325) + 4)|0;
 $3329 = $3328;
 $3330 = HEAP32[$3329>>2]|0;
 $3331 = (_i64Add(($3327|0),($3330|0),($3321|0),($3324|0))|0);
 $3332 = (getTempRet0() | 0);
 $3333 = $59;
 $3334 = $3333;
 HEAP32[$3334>>2] = $3331;
 $3335 = (($3333) + 4)|0;
 $3336 = $3335;
 HEAP32[$3336>>2] = $3332;
 $3337 = $82;
 $3338 = $3337;
 $3339 = HEAP32[$3338>>2]|0;
 $3340 = (($3337) + 4)|0;
 $3341 = $3340;
 $3342 = HEAP32[$3341>>2]|0;
 $3343 = (_bitshift64Shl(($3339|0),($3342|0),21)|0);
 $3344 = (getTempRet0() | 0);
 $3345 = $58;
 $3346 = $3345;
 $3347 = HEAP32[$3346>>2]|0;
 $3348 = (($3345) + 4)|0;
 $3349 = $3348;
 $3350 = HEAP32[$3349>>2]|0;
 $3351 = (_i64Subtract(($3347|0),($3350|0),($3343|0),($3344|0))|0);
 $3352 = (getTempRet0() | 0);
 $3353 = $58;
 $3354 = $3353;
 HEAP32[$3354>>2] = $3351;
 $3355 = (($3353) + 4)|0;
 $3356 = $3355;
 HEAP32[$3356>>2] = $3352;
 $3357 = $60;
 $3358 = $3357;
 $3359 = HEAP32[$3358>>2]|0;
 $3360 = (($3357) + 4)|0;
 $3361 = $3360;
 $3362 = HEAP32[$3361>>2]|0;
 $3363 = (_i64Add(($3359|0),($3362|0),1048576,0)|0);
 $3364 = (getTempRet0() | 0);
 $3365 = (_bitshift64Ashr(($3363|0),($3364|0),21)|0);
 $3366 = (getTempRet0() | 0);
 $3367 = $84;
 $3368 = $3367;
 HEAP32[$3368>>2] = $3365;
 $3369 = (($3367) + 4)|0;
 $3370 = $3369;
 HEAP32[$3370>>2] = $3366;
 $3371 = $84;
 $3372 = $3371;
 $3373 = HEAP32[$3372>>2]|0;
 $3374 = (($3371) + 4)|0;
 $3375 = $3374;
 $3376 = HEAP32[$3375>>2]|0;
 $3377 = $61;
 $3378 = $3377;
 $3379 = HEAP32[$3378>>2]|0;
 $3380 = (($3377) + 4)|0;
 $3381 = $3380;
 $3382 = HEAP32[$3381>>2]|0;
 $3383 = (_i64Add(($3379|0),($3382|0),($3373|0),($3376|0))|0);
 $3384 = (getTempRet0() | 0);
 $3385 = $61;
 $3386 = $3385;
 HEAP32[$3386>>2] = $3383;
 $3387 = (($3385) + 4)|0;
 $3388 = $3387;
 HEAP32[$3388>>2] = $3384;
 $3389 = $84;
 $3390 = $3389;
 $3391 = HEAP32[$3390>>2]|0;
 $3392 = (($3389) + 4)|0;
 $3393 = $3392;
 $3394 = HEAP32[$3393>>2]|0;
 $3395 = (_bitshift64Shl(($3391|0),($3394|0),21)|0);
 $3396 = (getTempRet0() | 0);
 $3397 = $60;
 $3398 = $3397;
 $3399 = HEAP32[$3398>>2]|0;
 $3400 = (($3397) + 4)|0;
 $3401 = $3400;
 $3402 = HEAP32[$3401>>2]|0;
 $3403 = (_i64Subtract(($3399|0),($3402|0),($3395|0),($3396|0))|0);
 $3404 = (getTempRet0() | 0);
 $3405 = $60;
 $3406 = $3405;
 HEAP32[$3406>>2] = $3403;
 $3407 = (($3405) + 4)|0;
 $3408 = $3407;
 HEAP32[$3408>>2] = $3404;
 $3409 = $62;
 $3410 = $3409;
 $3411 = HEAP32[$3410>>2]|0;
 $3412 = (($3409) + 4)|0;
 $3413 = $3412;
 $3414 = HEAP32[$3413>>2]|0;
 $3415 = (_i64Add(($3411|0),($3414|0),1048576,0)|0);
 $3416 = (getTempRet0() | 0);
 $3417 = (_bitshift64Ashr(($3415|0),($3416|0),21)|0);
 $3418 = (getTempRet0() | 0);
 $3419 = $86;
 $3420 = $3419;
 HEAP32[$3420>>2] = $3417;
 $3421 = (($3419) + 4)|0;
 $3422 = $3421;
 HEAP32[$3422>>2] = $3418;
 $3423 = $86;
 $3424 = $3423;
 $3425 = HEAP32[$3424>>2]|0;
 $3426 = (($3423) + 4)|0;
 $3427 = $3426;
 $3428 = HEAP32[$3427>>2]|0;
 $3429 = $63;
 $3430 = $3429;
 $3431 = HEAP32[$3430>>2]|0;
 $3432 = (($3429) + 4)|0;
 $3433 = $3432;
 $3434 = HEAP32[$3433>>2]|0;
 $3435 = (_i64Add(($3431|0),($3434|0),($3425|0),($3428|0))|0);
 $3436 = (getTempRet0() | 0);
 $3437 = $63;
 $3438 = $3437;
 HEAP32[$3438>>2] = $3435;
 $3439 = (($3437) + 4)|0;
 $3440 = $3439;
 HEAP32[$3440>>2] = $3436;
 $3441 = $86;
 $3442 = $3441;
 $3443 = HEAP32[$3442>>2]|0;
 $3444 = (($3441) + 4)|0;
 $3445 = $3444;
 $3446 = HEAP32[$3445>>2]|0;
 $3447 = (_bitshift64Shl(($3443|0),($3446|0),21)|0);
 $3448 = (getTempRet0() | 0);
 $3449 = $62;
 $3450 = $3449;
 $3451 = HEAP32[$3450>>2]|0;
 $3452 = (($3449) + 4)|0;
 $3453 = $3452;
 $3454 = HEAP32[$3453>>2]|0;
 $3455 = (_i64Subtract(($3451|0),($3454|0),($3447|0),($3448|0))|0);
 $3456 = (getTempRet0() | 0);
 $3457 = $62;
 $3458 = $3457;
 HEAP32[$3458>>2] = $3455;
 $3459 = (($3457) + 4)|0;
 $3460 = $3459;
 HEAP32[$3460>>2] = $3456;
 $3461 = $64;
 $3462 = $3461;
 $3463 = HEAP32[$3462>>2]|0;
 $3464 = (($3461) + 4)|0;
 $3465 = $3464;
 $3466 = HEAP32[$3465>>2]|0;
 $3467 = (_i64Add(($3463|0),($3466|0),1048576,0)|0);
 $3468 = (getTempRet0() | 0);
 $3469 = (_bitshift64Ashr(($3467|0),($3468|0),21)|0);
 $3470 = (getTempRet0() | 0);
 $3471 = $88;
 $3472 = $3471;
 HEAP32[$3472>>2] = $3469;
 $3473 = (($3471) + 4)|0;
 $3474 = $3473;
 HEAP32[$3474>>2] = $3470;
 $3475 = $88;
 $3476 = $3475;
 $3477 = HEAP32[$3476>>2]|0;
 $3478 = (($3475) + 4)|0;
 $3479 = $3478;
 $3480 = HEAP32[$3479>>2]|0;
 $3481 = $65;
 $3482 = $3481;
 $3483 = HEAP32[$3482>>2]|0;
 $3484 = (($3481) + 4)|0;
 $3485 = $3484;
 $3486 = HEAP32[$3485>>2]|0;
 $3487 = (_i64Add(($3483|0),($3486|0),($3477|0),($3480|0))|0);
 $3488 = (getTempRet0() | 0);
 $3489 = $65;
 $3490 = $3489;
 HEAP32[$3490>>2] = $3487;
 $3491 = (($3489) + 4)|0;
 $3492 = $3491;
 HEAP32[$3492>>2] = $3488;
 $3493 = $88;
 $3494 = $3493;
 $3495 = HEAP32[$3494>>2]|0;
 $3496 = (($3493) + 4)|0;
 $3497 = $3496;
 $3498 = HEAP32[$3497>>2]|0;
 $3499 = (_bitshift64Shl(($3495|0),($3498|0),21)|0);
 $3500 = (getTempRet0() | 0);
 $3501 = $64;
 $3502 = $3501;
 $3503 = HEAP32[$3502>>2]|0;
 $3504 = (($3501) + 4)|0;
 $3505 = $3504;
 $3506 = HEAP32[$3505>>2]|0;
 $3507 = (_i64Subtract(($3503|0),($3506|0),($3499|0),($3500|0))|0);
 $3508 = (getTempRet0() | 0);
 $3509 = $64;
 $3510 = $3509;
 HEAP32[$3510>>2] = $3507;
 $3511 = (($3509) + 4)|0;
 $3512 = $3511;
 HEAP32[$3512>>2] = $3508;
 $3513 = $66;
 $3514 = $3513;
 $3515 = HEAP32[$3514>>2]|0;
 $3516 = (($3513) + 4)|0;
 $3517 = $3516;
 $3518 = HEAP32[$3517>>2]|0;
 $3519 = (_i64Add(($3515|0),($3518|0),1048576,0)|0);
 $3520 = (getTempRet0() | 0);
 $3521 = (_bitshift64Ashr(($3519|0),($3520|0),21)|0);
 $3522 = (getTempRet0() | 0);
 $3523 = $90;
 $3524 = $3523;
 HEAP32[$3524>>2] = $3521;
 $3525 = (($3523) + 4)|0;
 $3526 = $3525;
 HEAP32[$3526>>2] = $3522;
 $3527 = $90;
 $3528 = $3527;
 $3529 = HEAP32[$3528>>2]|0;
 $3530 = (($3527) + 4)|0;
 $3531 = $3530;
 $3532 = HEAP32[$3531>>2]|0;
 $3533 = $67;
 $3534 = $3533;
 $3535 = HEAP32[$3534>>2]|0;
 $3536 = (($3533) + 4)|0;
 $3537 = $3536;
 $3538 = HEAP32[$3537>>2]|0;
 $3539 = (_i64Add(($3535|0),($3538|0),($3529|0),($3532|0))|0);
 $3540 = (getTempRet0() | 0);
 $3541 = $67;
 $3542 = $3541;
 HEAP32[$3542>>2] = $3539;
 $3543 = (($3541) + 4)|0;
 $3544 = $3543;
 HEAP32[$3544>>2] = $3540;
 $3545 = $90;
 $3546 = $3545;
 $3547 = HEAP32[$3546>>2]|0;
 $3548 = (($3545) + 4)|0;
 $3549 = $3548;
 $3550 = HEAP32[$3549>>2]|0;
 $3551 = (_bitshift64Shl(($3547|0),($3550|0),21)|0);
 $3552 = (getTempRet0() | 0);
 $3553 = $66;
 $3554 = $3553;
 $3555 = HEAP32[$3554>>2]|0;
 $3556 = (($3553) + 4)|0;
 $3557 = $3556;
 $3558 = HEAP32[$3557>>2]|0;
 $3559 = (_i64Subtract(($3555|0),($3558|0),($3551|0),($3552|0))|0);
 $3560 = (getTempRet0() | 0);
 $3561 = $66;
 $3562 = $3561;
 HEAP32[$3562>>2] = $3559;
 $3563 = (($3561) + 4)|0;
 $3564 = $3563;
 HEAP32[$3564>>2] = $3560;
 $3565 = $45;
 $3566 = $3565;
 $3567 = HEAP32[$3566>>2]|0;
 $3568 = (($3565) + 4)|0;
 $3569 = $3568;
 $3570 = HEAP32[$3569>>2]|0;
 $3571 = (_i64Add(($3567|0),($3570|0),1048576,0)|0);
 $3572 = (getTempRet0() | 0);
 $3573 = (_bitshift64Ashr(($3571|0),($3572|0),21)|0);
 $3574 = (getTempRet0() | 0);
 $3575 = $69;
 $3576 = $3575;
 HEAP32[$3576>>2] = $3573;
 $3577 = (($3575) + 4)|0;
 $3578 = $3577;
 HEAP32[$3578>>2] = $3574;
 $3579 = $69;
 $3580 = $3579;
 $3581 = HEAP32[$3580>>2]|0;
 $3582 = (($3579) + 4)|0;
 $3583 = $3582;
 $3584 = HEAP32[$3583>>2]|0;
 $3585 = $46;
 $3586 = $3585;
 $3587 = HEAP32[$3586>>2]|0;
 $3588 = (($3585) + 4)|0;
 $3589 = $3588;
 $3590 = HEAP32[$3589>>2]|0;
 $3591 = (_i64Add(($3587|0),($3590|0),($3581|0),($3584|0))|0);
 $3592 = (getTempRet0() | 0);
 $3593 = $46;
 $3594 = $3593;
 HEAP32[$3594>>2] = $3591;
 $3595 = (($3593) + 4)|0;
 $3596 = $3595;
 HEAP32[$3596>>2] = $3592;
 $3597 = $69;
 $3598 = $3597;
 $3599 = HEAP32[$3598>>2]|0;
 $3600 = (($3597) + 4)|0;
 $3601 = $3600;
 $3602 = HEAP32[$3601>>2]|0;
 $3603 = (_bitshift64Shl(($3599|0),($3602|0),21)|0);
 $3604 = (getTempRet0() | 0);
 $3605 = $45;
 $3606 = $3605;
 $3607 = HEAP32[$3606>>2]|0;
 $3608 = (($3605) + 4)|0;
 $3609 = $3608;
 $3610 = HEAP32[$3609>>2]|0;
 $3611 = (_i64Subtract(($3607|0),($3610|0),($3603|0),($3604|0))|0);
 $3612 = (getTempRet0() | 0);
 $3613 = $45;
 $3614 = $3613;
 HEAP32[$3614>>2] = $3611;
 $3615 = (($3613) + 4)|0;
 $3616 = $3615;
 HEAP32[$3616>>2] = $3612;
 $3617 = $47;
 $3618 = $3617;
 $3619 = HEAP32[$3618>>2]|0;
 $3620 = (($3617) + 4)|0;
 $3621 = $3620;
 $3622 = HEAP32[$3621>>2]|0;
 $3623 = (_i64Add(($3619|0),($3622|0),1048576,0)|0);
 $3624 = (getTempRet0() | 0);
 $3625 = (_bitshift64Ashr(($3623|0),($3624|0),21)|0);
 $3626 = (getTempRet0() | 0);
 $3627 = $71;
 $3628 = $3627;
 HEAP32[$3628>>2] = $3625;
 $3629 = (($3627) + 4)|0;
 $3630 = $3629;
 HEAP32[$3630>>2] = $3626;
 $3631 = $71;
 $3632 = $3631;
 $3633 = HEAP32[$3632>>2]|0;
 $3634 = (($3631) + 4)|0;
 $3635 = $3634;
 $3636 = HEAP32[$3635>>2]|0;
 $3637 = $48;
 $3638 = $3637;
 $3639 = HEAP32[$3638>>2]|0;
 $3640 = (($3637) + 4)|0;
 $3641 = $3640;
 $3642 = HEAP32[$3641>>2]|0;
 $3643 = (_i64Add(($3639|0),($3642|0),($3633|0),($3636|0))|0);
 $3644 = (getTempRet0() | 0);
 $3645 = $48;
 $3646 = $3645;
 HEAP32[$3646>>2] = $3643;
 $3647 = (($3645) + 4)|0;
 $3648 = $3647;
 HEAP32[$3648>>2] = $3644;
 $3649 = $71;
 $3650 = $3649;
 $3651 = HEAP32[$3650>>2]|0;
 $3652 = (($3649) + 4)|0;
 $3653 = $3652;
 $3654 = HEAP32[$3653>>2]|0;
 $3655 = (_bitshift64Shl(($3651|0),($3654|0),21)|0);
 $3656 = (getTempRet0() | 0);
 $3657 = $47;
 $3658 = $3657;
 $3659 = HEAP32[$3658>>2]|0;
 $3660 = (($3657) + 4)|0;
 $3661 = $3660;
 $3662 = HEAP32[$3661>>2]|0;
 $3663 = (_i64Subtract(($3659|0),($3662|0),($3655|0),($3656|0))|0);
 $3664 = (getTempRet0() | 0);
 $3665 = $47;
 $3666 = $3665;
 HEAP32[$3666>>2] = $3663;
 $3667 = (($3665) + 4)|0;
 $3668 = $3667;
 HEAP32[$3668>>2] = $3664;
 $3669 = $49;
 $3670 = $3669;
 $3671 = HEAP32[$3670>>2]|0;
 $3672 = (($3669) + 4)|0;
 $3673 = $3672;
 $3674 = HEAP32[$3673>>2]|0;
 $3675 = (_i64Add(($3671|0),($3674|0),1048576,0)|0);
 $3676 = (getTempRet0() | 0);
 $3677 = (_bitshift64Ashr(($3675|0),($3676|0),21)|0);
 $3678 = (getTempRet0() | 0);
 $3679 = $73;
 $3680 = $3679;
 HEAP32[$3680>>2] = $3677;
 $3681 = (($3679) + 4)|0;
 $3682 = $3681;
 HEAP32[$3682>>2] = $3678;
 $3683 = $73;
 $3684 = $3683;
 $3685 = HEAP32[$3684>>2]|0;
 $3686 = (($3683) + 4)|0;
 $3687 = $3686;
 $3688 = HEAP32[$3687>>2]|0;
 $3689 = $50;
 $3690 = $3689;
 $3691 = HEAP32[$3690>>2]|0;
 $3692 = (($3689) + 4)|0;
 $3693 = $3692;
 $3694 = HEAP32[$3693>>2]|0;
 $3695 = (_i64Add(($3691|0),($3694|0),($3685|0),($3688|0))|0);
 $3696 = (getTempRet0() | 0);
 $3697 = $50;
 $3698 = $3697;
 HEAP32[$3698>>2] = $3695;
 $3699 = (($3697) + 4)|0;
 $3700 = $3699;
 HEAP32[$3700>>2] = $3696;
 $3701 = $73;
 $3702 = $3701;
 $3703 = HEAP32[$3702>>2]|0;
 $3704 = (($3701) + 4)|0;
 $3705 = $3704;
 $3706 = HEAP32[$3705>>2]|0;
 $3707 = (_bitshift64Shl(($3703|0),($3706|0),21)|0);
 $3708 = (getTempRet0() | 0);
 $3709 = $49;
 $3710 = $3709;
 $3711 = HEAP32[$3710>>2]|0;
 $3712 = (($3709) + 4)|0;
 $3713 = $3712;
 $3714 = HEAP32[$3713>>2]|0;
 $3715 = (_i64Subtract(($3711|0),($3714|0),($3707|0),($3708|0))|0);
 $3716 = (getTempRet0() | 0);
 $3717 = $49;
 $3718 = $3717;
 HEAP32[$3718>>2] = $3715;
 $3719 = (($3717) + 4)|0;
 $3720 = $3719;
 HEAP32[$3720>>2] = $3716;
 $3721 = $51;
 $3722 = $3721;
 $3723 = HEAP32[$3722>>2]|0;
 $3724 = (($3721) + 4)|0;
 $3725 = $3724;
 $3726 = HEAP32[$3725>>2]|0;
 $3727 = (_i64Add(($3723|0),($3726|0),1048576,0)|0);
 $3728 = (getTempRet0() | 0);
 $3729 = (_bitshift64Ashr(($3727|0),($3728|0),21)|0);
 $3730 = (getTempRet0() | 0);
 $3731 = $75;
 $3732 = $3731;
 HEAP32[$3732>>2] = $3729;
 $3733 = (($3731) + 4)|0;
 $3734 = $3733;
 HEAP32[$3734>>2] = $3730;
 $3735 = $75;
 $3736 = $3735;
 $3737 = HEAP32[$3736>>2]|0;
 $3738 = (($3735) + 4)|0;
 $3739 = $3738;
 $3740 = HEAP32[$3739>>2]|0;
 $3741 = $52;
 $3742 = $3741;
 $3743 = HEAP32[$3742>>2]|0;
 $3744 = (($3741) + 4)|0;
 $3745 = $3744;
 $3746 = HEAP32[$3745>>2]|0;
 $3747 = (_i64Add(($3743|0),($3746|0),($3737|0),($3740|0))|0);
 $3748 = (getTempRet0() | 0);
 $3749 = $52;
 $3750 = $3749;
 HEAP32[$3750>>2] = $3747;
 $3751 = (($3749) + 4)|0;
 $3752 = $3751;
 HEAP32[$3752>>2] = $3748;
 $3753 = $75;
 $3754 = $3753;
 $3755 = HEAP32[$3754>>2]|0;
 $3756 = (($3753) + 4)|0;
 $3757 = $3756;
 $3758 = HEAP32[$3757>>2]|0;
 $3759 = (_bitshift64Shl(($3755|0),($3758|0),21)|0);
 $3760 = (getTempRet0() | 0);
 $3761 = $51;
 $3762 = $3761;
 $3763 = HEAP32[$3762>>2]|0;
 $3764 = (($3761) + 4)|0;
 $3765 = $3764;
 $3766 = HEAP32[$3765>>2]|0;
 $3767 = (_i64Subtract(($3763|0),($3766|0),($3759|0),($3760|0))|0);
 $3768 = (getTempRet0() | 0);
 $3769 = $51;
 $3770 = $3769;
 HEAP32[$3770>>2] = $3767;
 $3771 = (($3769) + 4)|0;
 $3772 = $3771;
 HEAP32[$3772>>2] = $3768;
 $3773 = $53;
 $3774 = $3773;
 $3775 = HEAP32[$3774>>2]|0;
 $3776 = (($3773) + 4)|0;
 $3777 = $3776;
 $3778 = HEAP32[$3777>>2]|0;
 $3779 = (_i64Add(($3775|0),($3778|0),1048576,0)|0);
 $3780 = (getTempRet0() | 0);
 $3781 = (_bitshift64Ashr(($3779|0),($3780|0),21)|0);
 $3782 = (getTempRet0() | 0);
 $3783 = $77;
 $3784 = $3783;
 HEAP32[$3784>>2] = $3781;
 $3785 = (($3783) + 4)|0;
 $3786 = $3785;
 HEAP32[$3786>>2] = $3782;
 $3787 = $77;
 $3788 = $3787;
 $3789 = HEAP32[$3788>>2]|0;
 $3790 = (($3787) + 4)|0;
 $3791 = $3790;
 $3792 = HEAP32[$3791>>2]|0;
 $3793 = $54;
 $3794 = $3793;
 $3795 = HEAP32[$3794>>2]|0;
 $3796 = (($3793) + 4)|0;
 $3797 = $3796;
 $3798 = HEAP32[$3797>>2]|0;
 $3799 = (_i64Add(($3795|0),($3798|0),($3789|0),($3792|0))|0);
 $3800 = (getTempRet0() | 0);
 $3801 = $54;
 $3802 = $3801;
 HEAP32[$3802>>2] = $3799;
 $3803 = (($3801) + 4)|0;
 $3804 = $3803;
 HEAP32[$3804>>2] = $3800;
 $3805 = $77;
 $3806 = $3805;
 $3807 = HEAP32[$3806>>2]|0;
 $3808 = (($3805) + 4)|0;
 $3809 = $3808;
 $3810 = HEAP32[$3809>>2]|0;
 $3811 = (_bitshift64Shl(($3807|0),($3810|0),21)|0);
 $3812 = (getTempRet0() | 0);
 $3813 = $53;
 $3814 = $3813;
 $3815 = HEAP32[$3814>>2]|0;
 $3816 = (($3813) + 4)|0;
 $3817 = $3816;
 $3818 = HEAP32[$3817>>2]|0;
 $3819 = (_i64Subtract(($3815|0),($3818|0),($3811|0),($3812|0))|0);
 $3820 = (getTempRet0() | 0);
 $3821 = $53;
 $3822 = $3821;
 HEAP32[$3822>>2] = $3819;
 $3823 = (($3821) + 4)|0;
 $3824 = $3823;
 HEAP32[$3824>>2] = $3820;
 $3825 = $55;
 $3826 = $3825;
 $3827 = HEAP32[$3826>>2]|0;
 $3828 = (($3825) + 4)|0;
 $3829 = $3828;
 $3830 = HEAP32[$3829>>2]|0;
 $3831 = (_i64Add(($3827|0),($3830|0),1048576,0)|0);
 $3832 = (getTempRet0() | 0);
 $3833 = (_bitshift64Ashr(($3831|0),($3832|0),21)|0);
 $3834 = (getTempRet0() | 0);
 $3835 = $79;
 $3836 = $3835;
 HEAP32[$3836>>2] = $3833;
 $3837 = (($3835) + 4)|0;
 $3838 = $3837;
 HEAP32[$3838>>2] = $3834;
 $3839 = $79;
 $3840 = $3839;
 $3841 = HEAP32[$3840>>2]|0;
 $3842 = (($3839) + 4)|0;
 $3843 = $3842;
 $3844 = HEAP32[$3843>>2]|0;
 $3845 = $56;
 $3846 = $3845;
 $3847 = HEAP32[$3846>>2]|0;
 $3848 = (($3845) + 4)|0;
 $3849 = $3848;
 $3850 = HEAP32[$3849>>2]|0;
 $3851 = (_i64Add(($3847|0),($3850|0),($3841|0),($3844|0))|0);
 $3852 = (getTempRet0() | 0);
 $3853 = $56;
 $3854 = $3853;
 HEAP32[$3854>>2] = $3851;
 $3855 = (($3853) + 4)|0;
 $3856 = $3855;
 HEAP32[$3856>>2] = $3852;
 $3857 = $79;
 $3858 = $3857;
 $3859 = HEAP32[$3858>>2]|0;
 $3860 = (($3857) + 4)|0;
 $3861 = $3860;
 $3862 = HEAP32[$3861>>2]|0;
 $3863 = (_bitshift64Shl(($3859|0),($3862|0),21)|0);
 $3864 = (getTempRet0() | 0);
 $3865 = $55;
 $3866 = $3865;
 $3867 = HEAP32[$3866>>2]|0;
 $3868 = (($3865) + 4)|0;
 $3869 = $3868;
 $3870 = HEAP32[$3869>>2]|0;
 $3871 = (_i64Subtract(($3867|0),($3870|0),($3863|0),($3864|0))|0);
 $3872 = (getTempRet0() | 0);
 $3873 = $55;
 $3874 = $3873;
 HEAP32[$3874>>2] = $3871;
 $3875 = (($3873) + 4)|0;
 $3876 = $3875;
 HEAP32[$3876>>2] = $3872;
 $3877 = $57;
 $3878 = $3877;
 $3879 = HEAP32[$3878>>2]|0;
 $3880 = (($3877) + 4)|0;
 $3881 = $3880;
 $3882 = HEAP32[$3881>>2]|0;
 $3883 = (_i64Add(($3879|0),($3882|0),1048576,0)|0);
 $3884 = (getTempRet0() | 0);
 $3885 = (_bitshift64Ashr(($3883|0),($3884|0),21)|0);
 $3886 = (getTempRet0() | 0);
 $3887 = $81;
 $3888 = $3887;
 HEAP32[$3888>>2] = $3885;
 $3889 = (($3887) + 4)|0;
 $3890 = $3889;
 HEAP32[$3890>>2] = $3886;
 $3891 = $81;
 $3892 = $3891;
 $3893 = HEAP32[$3892>>2]|0;
 $3894 = (($3891) + 4)|0;
 $3895 = $3894;
 $3896 = HEAP32[$3895>>2]|0;
 $3897 = $58;
 $3898 = $3897;
 $3899 = HEAP32[$3898>>2]|0;
 $3900 = (($3897) + 4)|0;
 $3901 = $3900;
 $3902 = HEAP32[$3901>>2]|0;
 $3903 = (_i64Add(($3899|0),($3902|0),($3893|0),($3896|0))|0);
 $3904 = (getTempRet0() | 0);
 $3905 = $58;
 $3906 = $3905;
 HEAP32[$3906>>2] = $3903;
 $3907 = (($3905) + 4)|0;
 $3908 = $3907;
 HEAP32[$3908>>2] = $3904;
 $3909 = $81;
 $3910 = $3909;
 $3911 = HEAP32[$3910>>2]|0;
 $3912 = (($3909) + 4)|0;
 $3913 = $3912;
 $3914 = HEAP32[$3913>>2]|0;
 $3915 = (_bitshift64Shl(($3911|0),($3914|0),21)|0);
 $3916 = (getTempRet0() | 0);
 $3917 = $57;
 $3918 = $3917;
 $3919 = HEAP32[$3918>>2]|0;
 $3920 = (($3917) + 4)|0;
 $3921 = $3920;
 $3922 = HEAP32[$3921>>2]|0;
 $3923 = (_i64Subtract(($3919|0),($3922|0),($3915|0),($3916|0))|0);
 $3924 = (getTempRet0() | 0);
 $3925 = $57;
 $3926 = $3925;
 HEAP32[$3926>>2] = $3923;
 $3927 = (($3925) + 4)|0;
 $3928 = $3927;
 HEAP32[$3928>>2] = $3924;
 $3929 = $59;
 $3930 = $3929;
 $3931 = HEAP32[$3930>>2]|0;
 $3932 = (($3929) + 4)|0;
 $3933 = $3932;
 $3934 = HEAP32[$3933>>2]|0;
 $3935 = (_i64Add(($3931|0),($3934|0),1048576,0)|0);
 $3936 = (getTempRet0() | 0);
 $3937 = (_bitshift64Ashr(($3935|0),($3936|0),21)|0);
 $3938 = (getTempRet0() | 0);
 $3939 = $83;
 $3940 = $3939;
 HEAP32[$3940>>2] = $3937;
 $3941 = (($3939) + 4)|0;
 $3942 = $3941;
 HEAP32[$3942>>2] = $3938;
 $3943 = $83;
 $3944 = $3943;
 $3945 = HEAP32[$3944>>2]|0;
 $3946 = (($3943) + 4)|0;
 $3947 = $3946;
 $3948 = HEAP32[$3947>>2]|0;
 $3949 = $60;
 $3950 = $3949;
 $3951 = HEAP32[$3950>>2]|0;
 $3952 = (($3949) + 4)|0;
 $3953 = $3952;
 $3954 = HEAP32[$3953>>2]|0;
 $3955 = (_i64Add(($3951|0),($3954|0),($3945|0),($3948|0))|0);
 $3956 = (getTempRet0() | 0);
 $3957 = $60;
 $3958 = $3957;
 HEAP32[$3958>>2] = $3955;
 $3959 = (($3957) + 4)|0;
 $3960 = $3959;
 HEAP32[$3960>>2] = $3956;
 $3961 = $83;
 $3962 = $3961;
 $3963 = HEAP32[$3962>>2]|0;
 $3964 = (($3961) + 4)|0;
 $3965 = $3964;
 $3966 = HEAP32[$3965>>2]|0;
 $3967 = (_bitshift64Shl(($3963|0),($3966|0),21)|0);
 $3968 = (getTempRet0() | 0);
 $3969 = $59;
 $3970 = $3969;
 $3971 = HEAP32[$3970>>2]|0;
 $3972 = (($3969) + 4)|0;
 $3973 = $3972;
 $3974 = HEAP32[$3973>>2]|0;
 $3975 = (_i64Subtract(($3971|0),($3974|0),($3967|0),($3968|0))|0);
 $3976 = (getTempRet0() | 0);
 $3977 = $59;
 $3978 = $3977;
 HEAP32[$3978>>2] = $3975;
 $3979 = (($3977) + 4)|0;
 $3980 = $3979;
 HEAP32[$3980>>2] = $3976;
 $3981 = $61;
 $3982 = $3981;
 $3983 = HEAP32[$3982>>2]|0;
 $3984 = (($3981) + 4)|0;
 $3985 = $3984;
 $3986 = HEAP32[$3985>>2]|0;
 $3987 = (_i64Add(($3983|0),($3986|0),1048576,0)|0);
 $3988 = (getTempRet0() | 0);
 $3989 = (_bitshift64Ashr(($3987|0),($3988|0),21)|0);
 $3990 = (getTempRet0() | 0);
 $3991 = $85;
 $3992 = $3991;
 HEAP32[$3992>>2] = $3989;
 $3993 = (($3991) + 4)|0;
 $3994 = $3993;
 HEAP32[$3994>>2] = $3990;
 $3995 = $85;
 $3996 = $3995;
 $3997 = HEAP32[$3996>>2]|0;
 $3998 = (($3995) + 4)|0;
 $3999 = $3998;
 $4000 = HEAP32[$3999>>2]|0;
 $4001 = $62;
 $4002 = $4001;
 $4003 = HEAP32[$4002>>2]|0;
 $4004 = (($4001) + 4)|0;
 $4005 = $4004;
 $4006 = HEAP32[$4005>>2]|0;
 $4007 = (_i64Add(($4003|0),($4006|0),($3997|0),($4000|0))|0);
 $4008 = (getTempRet0() | 0);
 $4009 = $62;
 $4010 = $4009;
 HEAP32[$4010>>2] = $4007;
 $4011 = (($4009) + 4)|0;
 $4012 = $4011;
 HEAP32[$4012>>2] = $4008;
 $4013 = $85;
 $4014 = $4013;
 $4015 = HEAP32[$4014>>2]|0;
 $4016 = (($4013) + 4)|0;
 $4017 = $4016;
 $4018 = HEAP32[$4017>>2]|0;
 $4019 = (_bitshift64Shl(($4015|0),($4018|0),21)|0);
 $4020 = (getTempRet0() | 0);
 $4021 = $61;
 $4022 = $4021;
 $4023 = HEAP32[$4022>>2]|0;
 $4024 = (($4021) + 4)|0;
 $4025 = $4024;
 $4026 = HEAP32[$4025>>2]|0;
 $4027 = (_i64Subtract(($4023|0),($4026|0),($4019|0),($4020|0))|0);
 $4028 = (getTempRet0() | 0);
 $4029 = $61;
 $4030 = $4029;
 HEAP32[$4030>>2] = $4027;
 $4031 = (($4029) + 4)|0;
 $4032 = $4031;
 HEAP32[$4032>>2] = $4028;
 $4033 = $63;
 $4034 = $4033;
 $4035 = HEAP32[$4034>>2]|0;
 $4036 = (($4033) + 4)|0;
 $4037 = $4036;
 $4038 = HEAP32[$4037>>2]|0;
 $4039 = (_i64Add(($4035|0),($4038|0),1048576,0)|0);
 $4040 = (getTempRet0() | 0);
 $4041 = (_bitshift64Ashr(($4039|0),($4040|0),21)|0);
 $4042 = (getTempRet0() | 0);
 $4043 = $87;
 $4044 = $4043;
 HEAP32[$4044>>2] = $4041;
 $4045 = (($4043) + 4)|0;
 $4046 = $4045;
 HEAP32[$4046>>2] = $4042;
 $4047 = $87;
 $4048 = $4047;
 $4049 = HEAP32[$4048>>2]|0;
 $4050 = (($4047) + 4)|0;
 $4051 = $4050;
 $4052 = HEAP32[$4051>>2]|0;
 $4053 = $64;
 $4054 = $4053;
 $4055 = HEAP32[$4054>>2]|0;
 $4056 = (($4053) + 4)|0;
 $4057 = $4056;
 $4058 = HEAP32[$4057>>2]|0;
 $4059 = (_i64Add(($4055|0),($4058|0),($4049|0),($4052|0))|0);
 $4060 = (getTempRet0() | 0);
 $4061 = $64;
 $4062 = $4061;
 HEAP32[$4062>>2] = $4059;
 $4063 = (($4061) + 4)|0;
 $4064 = $4063;
 HEAP32[$4064>>2] = $4060;
 $4065 = $87;
 $4066 = $4065;
 $4067 = HEAP32[$4066>>2]|0;
 $4068 = (($4065) + 4)|0;
 $4069 = $4068;
 $4070 = HEAP32[$4069>>2]|0;
 $4071 = (_bitshift64Shl(($4067|0),($4070|0),21)|0);
 $4072 = (getTempRet0() | 0);
 $4073 = $63;
 $4074 = $4073;
 $4075 = HEAP32[$4074>>2]|0;
 $4076 = (($4073) + 4)|0;
 $4077 = $4076;
 $4078 = HEAP32[$4077>>2]|0;
 $4079 = (_i64Subtract(($4075|0),($4078|0),($4071|0),($4072|0))|0);
 $4080 = (getTempRet0() | 0);
 $4081 = $63;
 $4082 = $4081;
 HEAP32[$4082>>2] = $4079;
 $4083 = (($4081) + 4)|0;
 $4084 = $4083;
 HEAP32[$4084>>2] = $4080;
 $4085 = $65;
 $4086 = $4085;
 $4087 = HEAP32[$4086>>2]|0;
 $4088 = (($4085) + 4)|0;
 $4089 = $4088;
 $4090 = HEAP32[$4089>>2]|0;
 $4091 = (_i64Add(($4087|0),($4090|0),1048576,0)|0);
 $4092 = (getTempRet0() | 0);
 $4093 = (_bitshift64Ashr(($4091|0),($4092|0),21)|0);
 $4094 = (getTempRet0() | 0);
 $4095 = $89;
 $4096 = $4095;
 HEAP32[$4096>>2] = $4093;
 $4097 = (($4095) + 4)|0;
 $4098 = $4097;
 HEAP32[$4098>>2] = $4094;
 $4099 = $89;
 $4100 = $4099;
 $4101 = HEAP32[$4100>>2]|0;
 $4102 = (($4099) + 4)|0;
 $4103 = $4102;
 $4104 = HEAP32[$4103>>2]|0;
 $4105 = $66;
 $4106 = $4105;
 $4107 = HEAP32[$4106>>2]|0;
 $4108 = (($4105) + 4)|0;
 $4109 = $4108;
 $4110 = HEAP32[$4109>>2]|0;
 $4111 = (_i64Add(($4107|0),($4110|0),($4101|0),($4104|0))|0);
 $4112 = (getTempRet0() | 0);
 $4113 = $66;
 $4114 = $4113;
 HEAP32[$4114>>2] = $4111;
 $4115 = (($4113) + 4)|0;
 $4116 = $4115;
 HEAP32[$4116>>2] = $4112;
 $4117 = $89;
 $4118 = $4117;
 $4119 = HEAP32[$4118>>2]|0;
 $4120 = (($4117) + 4)|0;
 $4121 = $4120;
 $4122 = HEAP32[$4121>>2]|0;
 $4123 = (_bitshift64Shl(($4119|0),($4122|0),21)|0);
 $4124 = (getTempRet0() | 0);
 $4125 = $65;
 $4126 = $4125;
 $4127 = HEAP32[$4126>>2]|0;
 $4128 = (($4125) + 4)|0;
 $4129 = $4128;
 $4130 = HEAP32[$4129>>2]|0;
 $4131 = (_i64Subtract(($4127|0),($4130|0),($4123|0),($4124|0))|0);
 $4132 = (getTempRet0() | 0);
 $4133 = $65;
 $4134 = $4133;
 HEAP32[$4134>>2] = $4131;
 $4135 = (($4133) + 4)|0;
 $4136 = $4135;
 HEAP32[$4136>>2] = $4132;
 $4137 = $67;
 $4138 = $4137;
 $4139 = HEAP32[$4138>>2]|0;
 $4140 = (($4137) + 4)|0;
 $4141 = $4140;
 $4142 = HEAP32[$4141>>2]|0;
 $4143 = (___muldi3(($4139|0),($4142|0),666643,0)|0);
 $4144 = (getTempRet0() | 0);
 $4145 = $55;
 $4146 = $4145;
 $4147 = HEAP32[$4146>>2]|0;
 $4148 = (($4145) + 4)|0;
 $4149 = $4148;
 $4150 = HEAP32[$4149>>2]|0;
 $4151 = (_i64Add(($4147|0),($4150|0),($4143|0),($4144|0))|0);
 $4152 = (getTempRet0() | 0);
 $4153 = $55;
 $4154 = $4153;
 HEAP32[$4154>>2] = $4151;
 $4155 = (($4153) + 4)|0;
 $4156 = $4155;
 HEAP32[$4156>>2] = $4152;
 $4157 = $67;
 $4158 = $4157;
 $4159 = HEAP32[$4158>>2]|0;
 $4160 = (($4157) + 4)|0;
 $4161 = $4160;
 $4162 = HEAP32[$4161>>2]|0;
 $4163 = (___muldi3(($4159|0),($4162|0),470296,0)|0);
 $4164 = (getTempRet0() | 0);
 $4165 = $56;
 $4166 = $4165;
 $4167 = HEAP32[$4166>>2]|0;
 $4168 = (($4165) + 4)|0;
 $4169 = $4168;
 $4170 = HEAP32[$4169>>2]|0;
 $4171 = (_i64Add(($4167|0),($4170|0),($4163|0),($4164|0))|0);
 $4172 = (getTempRet0() | 0);
 $4173 = $56;
 $4174 = $4173;
 HEAP32[$4174>>2] = $4171;
 $4175 = (($4173) + 4)|0;
 $4176 = $4175;
 HEAP32[$4176>>2] = $4172;
 $4177 = $67;
 $4178 = $4177;
 $4179 = HEAP32[$4178>>2]|0;
 $4180 = (($4177) + 4)|0;
 $4181 = $4180;
 $4182 = HEAP32[$4181>>2]|0;
 $4183 = (___muldi3(($4179|0),($4182|0),654183,0)|0);
 $4184 = (getTempRet0() | 0);
 $4185 = $57;
 $4186 = $4185;
 $4187 = HEAP32[$4186>>2]|0;
 $4188 = (($4185) + 4)|0;
 $4189 = $4188;
 $4190 = HEAP32[$4189>>2]|0;
 $4191 = (_i64Add(($4187|0),($4190|0),($4183|0),($4184|0))|0);
 $4192 = (getTempRet0() | 0);
 $4193 = $57;
 $4194 = $4193;
 HEAP32[$4194>>2] = $4191;
 $4195 = (($4193) + 4)|0;
 $4196 = $4195;
 HEAP32[$4196>>2] = $4192;
 $4197 = $67;
 $4198 = $4197;
 $4199 = HEAP32[$4198>>2]|0;
 $4200 = (($4197) + 4)|0;
 $4201 = $4200;
 $4202 = HEAP32[$4201>>2]|0;
 $4203 = (___muldi3(($4199|0),($4202|0),997805,0)|0);
 $4204 = (getTempRet0() | 0);
 $4205 = $58;
 $4206 = $4205;
 $4207 = HEAP32[$4206>>2]|0;
 $4208 = (($4205) + 4)|0;
 $4209 = $4208;
 $4210 = HEAP32[$4209>>2]|0;
 $4211 = (_i64Subtract(($4207|0),($4210|0),($4203|0),($4204|0))|0);
 $4212 = (getTempRet0() | 0);
 $4213 = $58;
 $4214 = $4213;
 HEAP32[$4214>>2] = $4211;
 $4215 = (($4213) + 4)|0;
 $4216 = $4215;
 HEAP32[$4216>>2] = $4212;
 $4217 = $67;
 $4218 = $4217;
 $4219 = HEAP32[$4218>>2]|0;
 $4220 = (($4217) + 4)|0;
 $4221 = $4220;
 $4222 = HEAP32[$4221>>2]|0;
 $4223 = (___muldi3(($4219|0),($4222|0),136657,0)|0);
 $4224 = (getTempRet0() | 0);
 $4225 = $59;
 $4226 = $4225;
 $4227 = HEAP32[$4226>>2]|0;
 $4228 = (($4225) + 4)|0;
 $4229 = $4228;
 $4230 = HEAP32[$4229>>2]|0;
 $4231 = (_i64Add(($4227|0),($4230|0),($4223|0),($4224|0))|0);
 $4232 = (getTempRet0() | 0);
 $4233 = $59;
 $4234 = $4233;
 HEAP32[$4234>>2] = $4231;
 $4235 = (($4233) + 4)|0;
 $4236 = $4235;
 HEAP32[$4236>>2] = $4232;
 $4237 = $67;
 $4238 = $4237;
 $4239 = HEAP32[$4238>>2]|0;
 $4240 = (($4237) + 4)|0;
 $4241 = $4240;
 $4242 = HEAP32[$4241>>2]|0;
 $4243 = (___muldi3(($4239|0),($4242|0),683901,0)|0);
 $4244 = (getTempRet0() | 0);
 $4245 = $60;
 $4246 = $4245;
 $4247 = HEAP32[$4246>>2]|0;
 $4248 = (($4245) + 4)|0;
 $4249 = $4248;
 $4250 = HEAP32[$4249>>2]|0;
 $4251 = (_i64Subtract(($4247|0),($4250|0),($4243|0),($4244|0))|0);
 $4252 = (getTempRet0() | 0);
 $4253 = $60;
 $4254 = $4253;
 HEAP32[$4254>>2] = $4251;
 $4255 = (($4253) + 4)|0;
 $4256 = $4255;
 HEAP32[$4256>>2] = $4252;
 $4257 = $66;
 $4258 = $4257;
 $4259 = HEAP32[$4258>>2]|0;
 $4260 = (($4257) + 4)|0;
 $4261 = $4260;
 $4262 = HEAP32[$4261>>2]|0;
 $4263 = (___muldi3(($4259|0),($4262|0),666643,0)|0);
 $4264 = (getTempRet0() | 0);
 $4265 = $54;
 $4266 = $4265;
 $4267 = HEAP32[$4266>>2]|0;
 $4268 = (($4265) + 4)|0;
 $4269 = $4268;
 $4270 = HEAP32[$4269>>2]|0;
 $4271 = (_i64Add(($4267|0),($4270|0),($4263|0),($4264|0))|0);
 $4272 = (getTempRet0() | 0);
 $4273 = $54;
 $4274 = $4273;
 HEAP32[$4274>>2] = $4271;
 $4275 = (($4273) + 4)|0;
 $4276 = $4275;
 HEAP32[$4276>>2] = $4272;
 $4277 = $66;
 $4278 = $4277;
 $4279 = HEAP32[$4278>>2]|0;
 $4280 = (($4277) + 4)|0;
 $4281 = $4280;
 $4282 = HEAP32[$4281>>2]|0;
 $4283 = (___muldi3(($4279|0),($4282|0),470296,0)|0);
 $4284 = (getTempRet0() | 0);
 $4285 = $55;
 $4286 = $4285;
 $4287 = HEAP32[$4286>>2]|0;
 $4288 = (($4285) + 4)|0;
 $4289 = $4288;
 $4290 = HEAP32[$4289>>2]|0;
 $4291 = (_i64Add(($4287|0),($4290|0),($4283|0),($4284|0))|0);
 $4292 = (getTempRet0() | 0);
 $4293 = $55;
 $4294 = $4293;
 HEAP32[$4294>>2] = $4291;
 $4295 = (($4293) + 4)|0;
 $4296 = $4295;
 HEAP32[$4296>>2] = $4292;
 $4297 = $66;
 $4298 = $4297;
 $4299 = HEAP32[$4298>>2]|0;
 $4300 = (($4297) + 4)|0;
 $4301 = $4300;
 $4302 = HEAP32[$4301>>2]|0;
 $4303 = (___muldi3(($4299|0),($4302|0),654183,0)|0);
 $4304 = (getTempRet0() | 0);
 $4305 = $56;
 $4306 = $4305;
 $4307 = HEAP32[$4306>>2]|0;
 $4308 = (($4305) + 4)|0;
 $4309 = $4308;
 $4310 = HEAP32[$4309>>2]|0;
 $4311 = (_i64Add(($4307|0),($4310|0),($4303|0),($4304|0))|0);
 $4312 = (getTempRet0() | 0);
 $4313 = $56;
 $4314 = $4313;
 HEAP32[$4314>>2] = $4311;
 $4315 = (($4313) + 4)|0;
 $4316 = $4315;
 HEAP32[$4316>>2] = $4312;
 $4317 = $66;
 $4318 = $4317;
 $4319 = HEAP32[$4318>>2]|0;
 $4320 = (($4317) + 4)|0;
 $4321 = $4320;
 $4322 = HEAP32[$4321>>2]|0;
 $4323 = (___muldi3(($4319|0),($4322|0),997805,0)|0);
 $4324 = (getTempRet0() | 0);
 $4325 = $57;
 $4326 = $4325;
 $4327 = HEAP32[$4326>>2]|0;
 $4328 = (($4325) + 4)|0;
 $4329 = $4328;
 $4330 = HEAP32[$4329>>2]|0;
 $4331 = (_i64Subtract(($4327|0),($4330|0),($4323|0),($4324|0))|0);
 $4332 = (getTempRet0() | 0);
 $4333 = $57;
 $4334 = $4333;
 HEAP32[$4334>>2] = $4331;
 $4335 = (($4333) + 4)|0;
 $4336 = $4335;
 HEAP32[$4336>>2] = $4332;
 $4337 = $66;
 $4338 = $4337;
 $4339 = HEAP32[$4338>>2]|0;
 $4340 = (($4337) + 4)|0;
 $4341 = $4340;
 $4342 = HEAP32[$4341>>2]|0;
 $4343 = (___muldi3(($4339|0),($4342|0),136657,0)|0);
 $4344 = (getTempRet0() | 0);
 $4345 = $58;
 $4346 = $4345;
 $4347 = HEAP32[$4346>>2]|0;
 $4348 = (($4345) + 4)|0;
 $4349 = $4348;
 $4350 = HEAP32[$4349>>2]|0;
 $4351 = (_i64Add(($4347|0),($4350|0),($4343|0),($4344|0))|0);
 $4352 = (getTempRet0() | 0);
 $4353 = $58;
 $4354 = $4353;
 HEAP32[$4354>>2] = $4351;
 $4355 = (($4353) + 4)|0;
 $4356 = $4355;
 HEAP32[$4356>>2] = $4352;
 $4357 = $66;
 $4358 = $4357;
 $4359 = HEAP32[$4358>>2]|0;
 $4360 = (($4357) + 4)|0;
 $4361 = $4360;
 $4362 = HEAP32[$4361>>2]|0;
 $4363 = (___muldi3(($4359|0),($4362|0),683901,0)|0);
 $4364 = (getTempRet0() | 0);
 $4365 = $59;
 $4366 = $4365;
 $4367 = HEAP32[$4366>>2]|0;
 $4368 = (($4365) + 4)|0;
 $4369 = $4368;
 $4370 = HEAP32[$4369>>2]|0;
 $4371 = (_i64Subtract(($4367|0),($4370|0),($4363|0),($4364|0))|0);
 $4372 = (getTempRet0() | 0);
 $4373 = $59;
 $4374 = $4373;
 HEAP32[$4374>>2] = $4371;
 $4375 = (($4373) + 4)|0;
 $4376 = $4375;
 HEAP32[$4376>>2] = $4372;
 $4377 = $65;
 $4378 = $4377;
 $4379 = HEAP32[$4378>>2]|0;
 $4380 = (($4377) + 4)|0;
 $4381 = $4380;
 $4382 = HEAP32[$4381>>2]|0;
 $4383 = (___muldi3(($4379|0),($4382|0),666643,0)|0);
 $4384 = (getTempRet0() | 0);
 $4385 = $53;
 $4386 = $4385;
 $4387 = HEAP32[$4386>>2]|0;
 $4388 = (($4385) + 4)|0;
 $4389 = $4388;
 $4390 = HEAP32[$4389>>2]|0;
 $4391 = (_i64Add(($4387|0),($4390|0),($4383|0),($4384|0))|0);
 $4392 = (getTempRet0() | 0);
 $4393 = $53;
 $4394 = $4393;
 HEAP32[$4394>>2] = $4391;
 $4395 = (($4393) + 4)|0;
 $4396 = $4395;
 HEAP32[$4396>>2] = $4392;
 $4397 = $65;
 $4398 = $4397;
 $4399 = HEAP32[$4398>>2]|0;
 $4400 = (($4397) + 4)|0;
 $4401 = $4400;
 $4402 = HEAP32[$4401>>2]|0;
 $4403 = (___muldi3(($4399|0),($4402|0),470296,0)|0);
 $4404 = (getTempRet0() | 0);
 $4405 = $54;
 $4406 = $4405;
 $4407 = HEAP32[$4406>>2]|0;
 $4408 = (($4405) + 4)|0;
 $4409 = $4408;
 $4410 = HEAP32[$4409>>2]|0;
 $4411 = (_i64Add(($4407|0),($4410|0),($4403|0),($4404|0))|0);
 $4412 = (getTempRet0() | 0);
 $4413 = $54;
 $4414 = $4413;
 HEAP32[$4414>>2] = $4411;
 $4415 = (($4413) + 4)|0;
 $4416 = $4415;
 HEAP32[$4416>>2] = $4412;
 $4417 = $65;
 $4418 = $4417;
 $4419 = HEAP32[$4418>>2]|0;
 $4420 = (($4417) + 4)|0;
 $4421 = $4420;
 $4422 = HEAP32[$4421>>2]|0;
 $4423 = (___muldi3(($4419|0),($4422|0),654183,0)|0);
 $4424 = (getTempRet0() | 0);
 $4425 = $55;
 $4426 = $4425;
 $4427 = HEAP32[$4426>>2]|0;
 $4428 = (($4425) + 4)|0;
 $4429 = $4428;
 $4430 = HEAP32[$4429>>2]|0;
 $4431 = (_i64Add(($4427|0),($4430|0),($4423|0),($4424|0))|0);
 $4432 = (getTempRet0() | 0);
 $4433 = $55;
 $4434 = $4433;
 HEAP32[$4434>>2] = $4431;
 $4435 = (($4433) + 4)|0;
 $4436 = $4435;
 HEAP32[$4436>>2] = $4432;
 $4437 = $65;
 $4438 = $4437;
 $4439 = HEAP32[$4438>>2]|0;
 $4440 = (($4437) + 4)|0;
 $4441 = $4440;
 $4442 = HEAP32[$4441>>2]|0;
 $4443 = (___muldi3(($4439|0),($4442|0),997805,0)|0);
 $4444 = (getTempRet0() | 0);
 $4445 = $56;
 $4446 = $4445;
 $4447 = HEAP32[$4446>>2]|0;
 $4448 = (($4445) + 4)|0;
 $4449 = $4448;
 $4450 = HEAP32[$4449>>2]|0;
 $4451 = (_i64Subtract(($4447|0),($4450|0),($4443|0),($4444|0))|0);
 $4452 = (getTempRet0() | 0);
 $4453 = $56;
 $4454 = $4453;
 HEAP32[$4454>>2] = $4451;
 $4455 = (($4453) + 4)|0;
 $4456 = $4455;
 HEAP32[$4456>>2] = $4452;
 $4457 = $65;
 $4458 = $4457;
 $4459 = HEAP32[$4458>>2]|0;
 $4460 = (($4457) + 4)|0;
 $4461 = $4460;
 $4462 = HEAP32[$4461>>2]|0;
 $4463 = (___muldi3(($4459|0),($4462|0),136657,0)|0);
 $4464 = (getTempRet0() | 0);
 $4465 = $57;
 $4466 = $4465;
 $4467 = HEAP32[$4466>>2]|0;
 $4468 = (($4465) + 4)|0;
 $4469 = $4468;
 $4470 = HEAP32[$4469>>2]|0;
 $4471 = (_i64Add(($4467|0),($4470|0),($4463|0),($4464|0))|0);
 $4472 = (getTempRet0() | 0);
 $4473 = $57;
 $4474 = $4473;
 HEAP32[$4474>>2] = $4471;
 $4475 = (($4473) + 4)|0;
 $4476 = $4475;
 HEAP32[$4476>>2] = $4472;
 $4477 = $65;
 $4478 = $4477;
 $4479 = HEAP32[$4478>>2]|0;
 $4480 = (($4477) + 4)|0;
 $4481 = $4480;
 $4482 = HEAP32[$4481>>2]|0;
 $4483 = (___muldi3(($4479|0),($4482|0),683901,0)|0);
 $4484 = (getTempRet0() | 0);
 $4485 = $58;
 $4486 = $4485;
 $4487 = HEAP32[$4486>>2]|0;
 $4488 = (($4485) + 4)|0;
 $4489 = $4488;
 $4490 = HEAP32[$4489>>2]|0;
 $4491 = (_i64Subtract(($4487|0),($4490|0),($4483|0),($4484|0))|0);
 $4492 = (getTempRet0() | 0);
 $4493 = $58;
 $4494 = $4493;
 HEAP32[$4494>>2] = $4491;
 $4495 = (($4493) + 4)|0;
 $4496 = $4495;
 HEAP32[$4496>>2] = $4492;
 $4497 = $64;
 $4498 = $4497;
 $4499 = HEAP32[$4498>>2]|0;
 $4500 = (($4497) + 4)|0;
 $4501 = $4500;
 $4502 = HEAP32[$4501>>2]|0;
 $4503 = (___muldi3(($4499|0),($4502|0),666643,0)|0);
 $4504 = (getTempRet0() | 0);
 $4505 = $52;
 $4506 = $4505;
 $4507 = HEAP32[$4506>>2]|0;
 $4508 = (($4505) + 4)|0;
 $4509 = $4508;
 $4510 = HEAP32[$4509>>2]|0;
 $4511 = (_i64Add(($4507|0),($4510|0),($4503|0),($4504|0))|0);
 $4512 = (getTempRet0() | 0);
 $4513 = $52;
 $4514 = $4513;
 HEAP32[$4514>>2] = $4511;
 $4515 = (($4513) + 4)|0;
 $4516 = $4515;
 HEAP32[$4516>>2] = $4512;
 $4517 = $64;
 $4518 = $4517;
 $4519 = HEAP32[$4518>>2]|0;
 $4520 = (($4517) + 4)|0;
 $4521 = $4520;
 $4522 = HEAP32[$4521>>2]|0;
 $4523 = (___muldi3(($4519|0),($4522|0),470296,0)|0);
 $4524 = (getTempRet0() | 0);
 $4525 = $53;
 $4526 = $4525;
 $4527 = HEAP32[$4526>>2]|0;
 $4528 = (($4525) + 4)|0;
 $4529 = $4528;
 $4530 = HEAP32[$4529>>2]|0;
 $4531 = (_i64Add(($4527|0),($4530|0),($4523|0),($4524|0))|0);
 $4532 = (getTempRet0() | 0);
 $4533 = $53;
 $4534 = $4533;
 HEAP32[$4534>>2] = $4531;
 $4535 = (($4533) + 4)|0;
 $4536 = $4535;
 HEAP32[$4536>>2] = $4532;
 $4537 = $64;
 $4538 = $4537;
 $4539 = HEAP32[$4538>>2]|0;
 $4540 = (($4537) + 4)|0;
 $4541 = $4540;
 $4542 = HEAP32[$4541>>2]|0;
 $4543 = (___muldi3(($4539|0),($4542|0),654183,0)|0);
 $4544 = (getTempRet0() | 0);
 $4545 = $54;
 $4546 = $4545;
 $4547 = HEAP32[$4546>>2]|0;
 $4548 = (($4545) + 4)|0;
 $4549 = $4548;
 $4550 = HEAP32[$4549>>2]|0;
 $4551 = (_i64Add(($4547|0),($4550|0),($4543|0),($4544|0))|0);
 $4552 = (getTempRet0() | 0);
 $4553 = $54;
 $4554 = $4553;
 HEAP32[$4554>>2] = $4551;
 $4555 = (($4553) + 4)|0;
 $4556 = $4555;
 HEAP32[$4556>>2] = $4552;
 $4557 = $64;
 $4558 = $4557;
 $4559 = HEAP32[$4558>>2]|0;
 $4560 = (($4557) + 4)|0;
 $4561 = $4560;
 $4562 = HEAP32[$4561>>2]|0;
 $4563 = (___muldi3(($4559|0),($4562|0),997805,0)|0);
 $4564 = (getTempRet0() | 0);
 $4565 = $55;
 $4566 = $4565;
 $4567 = HEAP32[$4566>>2]|0;
 $4568 = (($4565) + 4)|0;
 $4569 = $4568;
 $4570 = HEAP32[$4569>>2]|0;
 $4571 = (_i64Subtract(($4567|0),($4570|0),($4563|0),($4564|0))|0);
 $4572 = (getTempRet0() | 0);
 $4573 = $55;
 $4574 = $4573;
 HEAP32[$4574>>2] = $4571;
 $4575 = (($4573) + 4)|0;
 $4576 = $4575;
 HEAP32[$4576>>2] = $4572;
 $4577 = $64;
 $4578 = $4577;
 $4579 = HEAP32[$4578>>2]|0;
 $4580 = (($4577) + 4)|0;
 $4581 = $4580;
 $4582 = HEAP32[$4581>>2]|0;
 $4583 = (___muldi3(($4579|0),($4582|0),136657,0)|0);
 $4584 = (getTempRet0() | 0);
 $4585 = $56;
 $4586 = $4585;
 $4587 = HEAP32[$4586>>2]|0;
 $4588 = (($4585) + 4)|0;
 $4589 = $4588;
 $4590 = HEAP32[$4589>>2]|0;
 $4591 = (_i64Add(($4587|0),($4590|0),($4583|0),($4584|0))|0);
 $4592 = (getTempRet0() | 0);
 $4593 = $56;
 $4594 = $4593;
 HEAP32[$4594>>2] = $4591;
 $4595 = (($4593) + 4)|0;
 $4596 = $4595;
 HEAP32[$4596>>2] = $4592;
 $4597 = $64;
 $4598 = $4597;
 $4599 = HEAP32[$4598>>2]|0;
 $4600 = (($4597) + 4)|0;
 $4601 = $4600;
 $4602 = HEAP32[$4601>>2]|0;
 $4603 = (___muldi3(($4599|0),($4602|0),683901,0)|0);
 $4604 = (getTempRet0() | 0);
 $4605 = $57;
 $4606 = $4605;
 $4607 = HEAP32[$4606>>2]|0;
 $4608 = (($4605) + 4)|0;
 $4609 = $4608;
 $4610 = HEAP32[$4609>>2]|0;
 $4611 = (_i64Subtract(($4607|0),($4610|0),($4603|0),($4604|0))|0);
 $4612 = (getTempRet0() | 0);
 $4613 = $57;
 $4614 = $4613;
 HEAP32[$4614>>2] = $4611;
 $4615 = (($4613) + 4)|0;
 $4616 = $4615;
 HEAP32[$4616>>2] = $4612;
 $4617 = $63;
 $4618 = $4617;
 $4619 = HEAP32[$4618>>2]|0;
 $4620 = (($4617) + 4)|0;
 $4621 = $4620;
 $4622 = HEAP32[$4621>>2]|0;
 $4623 = (___muldi3(($4619|0),($4622|0),666643,0)|0);
 $4624 = (getTempRet0() | 0);
 $4625 = $51;
 $4626 = $4625;
 $4627 = HEAP32[$4626>>2]|0;
 $4628 = (($4625) + 4)|0;
 $4629 = $4628;
 $4630 = HEAP32[$4629>>2]|0;
 $4631 = (_i64Add(($4627|0),($4630|0),($4623|0),($4624|0))|0);
 $4632 = (getTempRet0() | 0);
 $4633 = $51;
 $4634 = $4633;
 HEAP32[$4634>>2] = $4631;
 $4635 = (($4633) + 4)|0;
 $4636 = $4635;
 HEAP32[$4636>>2] = $4632;
 $4637 = $63;
 $4638 = $4637;
 $4639 = HEAP32[$4638>>2]|0;
 $4640 = (($4637) + 4)|0;
 $4641 = $4640;
 $4642 = HEAP32[$4641>>2]|0;
 $4643 = (___muldi3(($4639|0),($4642|0),470296,0)|0);
 $4644 = (getTempRet0() | 0);
 $4645 = $52;
 $4646 = $4645;
 $4647 = HEAP32[$4646>>2]|0;
 $4648 = (($4645) + 4)|0;
 $4649 = $4648;
 $4650 = HEAP32[$4649>>2]|0;
 $4651 = (_i64Add(($4647|0),($4650|0),($4643|0),($4644|0))|0);
 $4652 = (getTempRet0() | 0);
 $4653 = $52;
 $4654 = $4653;
 HEAP32[$4654>>2] = $4651;
 $4655 = (($4653) + 4)|0;
 $4656 = $4655;
 HEAP32[$4656>>2] = $4652;
 $4657 = $63;
 $4658 = $4657;
 $4659 = HEAP32[$4658>>2]|0;
 $4660 = (($4657) + 4)|0;
 $4661 = $4660;
 $4662 = HEAP32[$4661>>2]|0;
 $4663 = (___muldi3(($4659|0),($4662|0),654183,0)|0);
 $4664 = (getTempRet0() | 0);
 $4665 = $53;
 $4666 = $4665;
 $4667 = HEAP32[$4666>>2]|0;
 $4668 = (($4665) + 4)|0;
 $4669 = $4668;
 $4670 = HEAP32[$4669>>2]|0;
 $4671 = (_i64Add(($4667|0),($4670|0),($4663|0),($4664|0))|0);
 $4672 = (getTempRet0() | 0);
 $4673 = $53;
 $4674 = $4673;
 HEAP32[$4674>>2] = $4671;
 $4675 = (($4673) + 4)|0;
 $4676 = $4675;
 HEAP32[$4676>>2] = $4672;
 $4677 = $63;
 $4678 = $4677;
 $4679 = HEAP32[$4678>>2]|0;
 $4680 = (($4677) + 4)|0;
 $4681 = $4680;
 $4682 = HEAP32[$4681>>2]|0;
 $4683 = (___muldi3(($4679|0),($4682|0),997805,0)|0);
 $4684 = (getTempRet0() | 0);
 $4685 = $54;
 $4686 = $4685;
 $4687 = HEAP32[$4686>>2]|0;
 $4688 = (($4685) + 4)|0;
 $4689 = $4688;
 $4690 = HEAP32[$4689>>2]|0;
 $4691 = (_i64Subtract(($4687|0),($4690|0),($4683|0),($4684|0))|0);
 $4692 = (getTempRet0() | 0);
 $4693 = $54;
 $4694 = $4693;
 HEAP32[$4694>>2] = $4691;
 $4695 = (($4693) + 4)|0;
 $4696 = $4695;
 HEAP32[$4696>>2] = $4692;
 $4697 = $63;
 $4698 = $4697;
 $4699 = HEAP32[$4698>>2]|0;
 $4700 = (($4697) + 4)|0;
 $4701 = $4700;
 $4702 = HEAP32[$4701>>2]|0;
 $4703 = (___muldi3(($4699|0),($4702|0),136657,0)|0);
 $4704 = (getTempRet0() | 0);
 $4705 = $55;
 $4706 = $4705;
 $4707 = HEAP32[$4706>>2]|0;
 $4708 = (($4705) + 4)|0;
 $4709 = $4708;
 $4710 = HEAP32[$4709>>2]|0;
 $4711 = (_i64Add(($4707|0),($4710|0),($4703|0),($4704|0))|0);
 $4712 = (getTempRet0() | 0);
 $4713 = $55;
 $4714 = $4713;
 HEAP32[$4714>>2] = $4711;
 $4715 = (($4713) + 4)|0;
 $4716 = $4715;
 HEAP32[$4716>>2] = $4712;
 $4717 = $63;
 $4718 = $4717;
 $4719 = HEAP32[$4718>>2]|0;
 $4720 = (($4717) + 4)|0;
 $4721 = $4720;
 $4722 = HEAP32[$4721>>2]|0;
 $4723 = (___muldi3(($4719|0),($4722|0),683901,0)|0);
 $4724 = (getTempRet0() | 0);
 $4725 = $56;
 $4726 = $4725;
 $4727 = HEAP32[$4726>>2]|0;
 $4728 = (($4725) + 4)|0;
 $4729 = $4728;
 $4730 = HEAP32[$4729>>2]|0;
 $4731 = (_i64Subtract(($4727|0),($4730|0),($4723|0),($4724|0))|0);
 $4732 = (getTempRet0() | 0);
 $4733 = $56;
 $4734 = $4733;
 HEAP32[$4734>>2] = $4731;
 $4735 = (($4733) + 4)|0;
 $4736 = $4735;
 HEAP32[$4736>>2] = $4732;
 $4737 = $62;
 $4738 = $4737;
 $4739 = HEAP32[$4738>>2]|0;
 $4740 = (($4737) + 4)|0;
 $4741 = $4740;
 $4742 = HEAP32[$4741>>2]|0;
 $4743 = (___muldi3(($4739|0),($4742|0),666643,0)|0);
 $4744 = (getTempRet0() | 0);
 $4745 = $50;
 $4746 = $4745;
 $4747 = HEAP32[$4746>>2]|0;
 $4748 = (($4745) + 4)|0;
 $4749 = $4748;
 $4750 = HEAP32[$4749>>2]|0;
 $4751 = (_i64Add(($4747|0),($4750|0),($4743|0),($4744|0))|0);
 $4752 = (getTempRet0() | 0);
 $4753 = $50;
 $4754 = $4753;
 HEAP32[$4754>>2] = $4751;
 $4755 = (($4753) + 4)|0;
 $4756 = $4755;
 HEAP32[$4756>>2] = $4752;
 $4757 = $62;
 $4758 = $4757;
 $4759 = HEAP32[$4758>>2]|0;
 $4760 = (($4757) + 4)|0;
 $4761 = $4760;
 $4762 = HEAP32[$4761>>2]|0;
 $4763 = (___muldi3(($4759|0),($4762|0),470296,0)|0);
 $4764 = (getTempRet0() | 0);
 $4765 = $51;
 $4766 = $4765;
 $4767 = HEAP32[$4766>>2]|0;
 $4768 = (($4765) + 4)|0;
 $4769 = $4768;
 $4770 = HEAP32[$4769>>2]|0;
 $4771 = (_i64Add(($4767|0),($4770|0),($4763|0),($4764|0))|0);
 $4772 = (getTempRet0() | 0);
 $4773 = $51;
 $4774 = $4773;
 HEAP32[$4774>>2] = $4771;
 $4775 = (($4773) + 4)|0;
 $4776 = $4775;
 HEAP32[$4776>>2] = $4772;
 $4777 = $62;
 $4778 = $4777;
 $4779 = HEAP32[$4778>>2]|0;
 $4780 = (($4777) + 4)|0;
 $4781 = $4780;
 $4782 = HEAP32[$4781>>2]|0;
 $4783 = (___muldi3(($4779|0),($4782|0),654183,0)|0);
 $4784 = (getTempRet0() | 0);
 $4785 = $52;
 $4786 = $4785;
 $4787 = HEAP32[$4786>>2]|0;
 $4788 = (($4785) + 4)|0;
 $4789 = $4788;
 $4790 = HEAP32[$4789>>2]|0;
 $4791 = (_i64Add(($4787|0),($4790|0),($4783|0),($4784|0))|0);
 $4792 = (getTempRet0() | 0);
 $4793 = $52;
 $4794 = $4793;
 HEAP32[$4794>>2] = $4791;
 $4795 = (($4793) + 4)|0;
 $4796 = $4795;
 HEAP32[$4796>>2] = $4792;
 $4797 = $62;
 $4798 = $4797;
 $4799 = HEAP32[$4798>>2]|0;
 $4800 = (($4797) + 4)|0;
 $4801 = $4800;
 $4802 = HEAP32[$4801>>2]|0;
 $4803 = (___muldi3(($4799|0),($4802|0),997805,0)|0);
 $4804 = (getTempRet0() | 0);
 $4805 = $53;
 $4806 = $4805;
 $4807 = HEAP32[$4806>>2]|0;
 $4808 = (($4805) + 4)|0;
 $4809 = $4808;
 $4810 = HEAP32[$4809>>2]|0;
 $4811 = (_i64Subtract(($4807|0),($4810|0),($4803|0),($4804|0))|0);
 $4812 = (getTempRet0() | 0);
 $4813 = $53;
 $4814 = $4813;
 HEAP32[$4814>>2] = $4811;
 $4815 = (($4813) + 4)|0;
 $4816 = $4815;
 HEAP32[$4816>>2] = $4812;
 $4817 = $62;
 $4818 = $4817;
 $4819 = HEAP32[$4818>>2]|0;
 $4820 = (($4817) + 4)|0;
 $4821 = $4820;
 $4822 = HEAP32[$4821>>2]|0;
 $4823 = (___muldi3(($4819|0),($4822|0),136657,0)|0);
 $4824 = (getTempRet0() | 0);
 $4825 = $54;
 $4826 = $4825;
 $4827 = HEAP32[$4826>>2]|0;
 $4828 = (($4825) + 4)|0;
 $4829 = $4828;
 $4830 = HEAP32[$4829>>2]|0;
 $4831 = (_i64Add(($4827|0),($4830|0),($4823|0),($4824|0))|0);
 $4832 = (getTempRet0() | 0);
 $4833 = $54;
 $4834 = $4833;
 HEAP32[$4834>>2] = $4831;
 $4835 = (($4833) + 4)|0;
 $4836 = $4835;
 HEAP32[$4836>>2] = $4832;
 $4837 = $62;
 $4838 = $4837;
 $4839 = HEAP32[$4838>>2]|0;
 $4840 = (($4837) + 4)|0;
 $4841 = $4840;
 $4842 = HEAP32[$4841>>2]|0;
 $4843 = (___muldi3(($4839|0),($4842|0),683901,0)|0);
 $4844 = (getTempRet0() | 0);
 $4845 = $55;
 $4846 = $4845;
 $4847 = HEAP32[$4846>>2]|0;
 $4848 = (($4845) + 4)|0;
 $4849 = $4848;
 $4850 = HEAP32[$4849>>2]|0;
 $4851 = (_i64Subtract(($4847|0),($4850|0),($4843|0),($4844|0))|0);
 $4852 = (getTempRet0() | 0);
 $4853 = $55;
 $4854 = $4853;
 HEAP32[$4854>>2] = $4851;
 $4855 = (($4853) + 4)|0;
 $4856 = $4855;
 HEAP32[$4856>>2] = $4852;
 $4857 = $50;
 $4858 = $4857;
 $4859 = HEAP32[$4858>>2]|0;
 $4860 = (($4857) + 4)|0;
 $4861 = $4860;
 $4862 = HEAP32[$4861>>2]|0;
 $4863 = (_i64Add(($4859|0),($4862|0),1048576,0)|0);
 $4864 = (getTempRet0() | 0);
 $4865 = (_bitshift64Ashr(($4863|0),($4864|0),21)|0);
 $4866 = (getTempRet0() | 0);
 $4867 = $74;
 $4868 = $4867;
 HEAP32[$4868>>2] = $4865;
 $4869 = (($4867) + 4)|0;
 $4870 = $4869;
 HEAP32[$4870>>2] = $4866;
 $4871 = $74;
 $4872 = $4871;
 $4873 = HEAP32[$4872>>2]|0;
 $4874 = (($4871) + 4)|0;
 $4875 = $4874;
 $4876 = HEAP32[$4875>>2]|0;
 $4877 = $51;
 $4878 = $4877;
 $4879 = HEAP32[$4878>>2]|0;
 $4880 = (($4877) + 4)|0;
 $4881 = $4880;
 $4882 = HEAP32[$4881>>2]|0;
 $4883 = (_i64Add(($4879|0),($4882|0),($4873|0),($4876|0))|0);
 $4884 = (getTempRet0() | 0);
 $4885 = $51;
 $4886 = $4885;
 HEAP32[$4886>>2] = $4883;
 $4887 = (($4885) + 4)|0;
 $4888 = $4887;
 HEAP32[$4888>>2] = $4884;
 $4889 = $74;
 $4890 = $4889;
 $4891 = HEAP32[$4890>>2]|0;
 $4892 = (($4889) + 4)|0;
 $4893 = $4892;
 $4894 = HEAP32[$4893>>2]|0;
 $4895 = (_bitshift64Shl(($4891|0),($4894|0),21)|0);
 $4896 = (getTempRet0() | 0);
 $4897 = $50;
 $4898 = $4897;
 $4899 = HEAP32[$4898>>2]|0;
 $4900 = (($4897) + 4)|0;
 $4901 = $4900;
 $4902 = HEAP32[$4901>>2]|0;
 $4903 = (_i64Subtract(($4899|0),($4902|0),($4895|0),($4896|0))|0);
 $4904 = (getTempRet0() | 0);
 $4905 = $50;
 $4906 = $4905;
 HEAP32[$4906>>2] = $4903;
 $4907 = (($4905) + 4)|0;
 $4908 = $4907;
 HEAP32[$4908>>2] = $4904;
 $4909 = $52;
 $4910 = $4909;
 $4911 = HEAP32[$4910>>2]|0;
 $4912 = (($4909) + 4)|0;
 $4913 = $4912;
 $4914 = HEAP32[$4913>>2]|0;
 $4915 = (_i64Add(($4911|0),($4914|0),1048576,0)|0);
 $4916 = (getTempRet0() | 0);
 $4917 = (_bitshift64Ashr(($4915|0),($4916|0),21)|0);
 $4918 = (getTempRet0() | 0);
 $4919 = $76;
 $4920 = $4919;
 HEAP32[$4920>>2] = $4917;
 $4921 = (($4919) + 4)|0;
 $4922 = $4921;
 HEAP32[$4922>>2] = $4918;
 $4923 = $76;
 $4924 = $4923;
 $4925 = HEAP32[$4924>>2]|0;
 $4926 = (($4923) + 4)|0;
 $4927 = $4926;
 $4928 = HEAP32[$4927>>2]|0;
 $4929 = $53;
 $4930 = $4929;
 $4931 = HEAP32[$4930>>2]|0;
 $4932 = (($4929) + 4)|0;
 $4933 = $4932;
 $4934 = HEAP32[$4933>>2]|0;
 $4935 = (_i64Add(($4931|0),($4934|0),($4925|0),($4928|0))|0);
 $4936 = (getTempRet0() | 0);
 $4937 = $53;
 $4938 = $4937;
 HEAP32[$4938>>2] = $4935;
 $4939 = (($4937) + 4)|0;
 $4940 = $4939;
 HEAP32[$4940>>2] = $4936;
 $4941 = $76;
 $4942 = $4941;
 $4943 = HEAP32[$4942>>2]|0;
 $4944 = (($4941) + 4)|0;
 $4945 = $4944;
 $4946 = HEAP32[$4945>>2]|0;
 $4947 = (_bitshift64Shl(($4943|0),($4946|0),21)|0);
 $4948 = (getTempRet0() | 0);
 $4949 = $52;
 $4950 = $4949;
 $4951 = HEAP32[$4950>>2]|0;
 $4952 = (($4949) + 4)|0;
 $4953 = $4952;
 $4954 = HEAP32[$4953>>2]|0;
 $4955 = (_i64Subtract(($4951|0),($4954|0),($4947|0),($4948|0))|0);
 $4956 = (getTempRet0() | 0);
 $4957 = $52;
 $4958 = $4957;
 HEAP32[$4958>>2] = $4955;
 $4959 = (($4957) + 4)|0;
 $4960 = $4959;
 HEAP32[$4960>>2] = $4956;
 $4961 = $54;
 $4962 = $4961;
 $4963 = HEAP32[$4962>>2]|0;
 $4964 = (($4961) + 4)|0;
 $4965 = $4964;
 $4966 = HEAP32[$4965>>2]|0;
 $4967 = (_i64Add(($4963|0),($4966|0),1048576,0)|0);
 $4968 = (getTempRet0() | 0);
 $4969 = (_bitshift64Ashr(($4967|0),($4968|0),21)|0);
 $4970 = (getTempRet0() | 0);
 $4971 = $78;
 $4972 = $4971;
 HEAP32[$4972>>2] = $4969;
 $4973 = (($4971) + 4)|0;
 $4974 = $4973;
 HEAP32[$4974>>2] = $4970;
 $4975 = $78;
 $4976 = $4975;
 $4977 = HEAP32[$4976>>2]|0;
 $4978 = (($4975) + 4)|0;
 $4979 = $4978;
 $4980 = HEAP32[$4979>>2]|0;
 $4981 = $55;
 $4982 = $4981;
 $4983 = HEAP32[$4982>>2]|0;
 $4984 = (($4981) + 4)|0;
 $4985 = $4984;
 $4986 = HEAP32[$4985>>2]|0;
 $4987 = (_i64Add(($4983|0),($4986|0),($4977|0),($4980|0))|0);
 $4988 = (getTempRet0() | 0);
 $4989 = $55;
 $4990 = $4989;
 HEAP32[$4990>>2] = $4987;
 $4991 = (($4989) + 4)|0;
 $4992 = $4991;
 HEAP32[$4992>>2] = $4988;
 $4993 = $78;
 $4994 = $4993;
 $4995 = HEAP32[$4994>>2]|0;
 $4996 = (($4993) + 4)|0;
 $4997 = $4996;
 $4998 = HEAP32[$4997>>2]|0;
 $4999 = (_bitshift64Shl(($4995|0),($4998|0),21)|0);
 $5000 = (getTempRet0() | 0);
 $5001 = $54;
 $5002 = $5001;
 $5003 = HEAP32[$5002>>2]|0;
 $5004 = (($5001) + 4)|0;
 $5005 = $5004;
 $5006 = HEAP32[$5005>>2]|0;
 $5007 = (_i64Subtract(($5003|0),($5006|0),($4999|0),($5000|0))|0);
 $5008 = (getTempRet0() | 0);
 $5009 = $54;
 $5010 = $5009;
 HEAP32[$5010>>2] = $5007;
 $5011 = (($5009) + 4)|0;
 $5012 = $5011;
 HEAP32[$5012>>2] = $5008;
 $5013 = $56;
 $5014 = $5013;
 $5015 = HEAP32[$5014>>2]|0;
 $5016 = (($5013) + 4)|0;
 $5017 = $5016;
 $5018 = HEAP32[$5017>>2]|0;
 $5019 = (_i64Add(($5015|0),($5018|0),1048576,0)|0);
 $5020 = (getTempRet0() | 0);
 $5021 = (_bitshift64Ashr(($5019|0),($5020|0),21)|0);
 $5022 = (getTempRet0() | 0);
 $5023 = $80;
 $5024 = $5023;
 HEAP32[$5024>>2] = $5021;
 $5025 = (($5023) + 4)|0;
 $5026 = $5025;
 HEAP32[$5026>>2] = $5022;
 $5027 = $80;
 $5028 = $5027;
 $5029 = HEAP32[$5028>>2]|0;
 $5030 = (($5027) + 4)|0;
 $5031 = $5030;
 $5032 = HEAP32[$5031>>2]|0;
 $5033 = $57;
 $5034 = $5033;
 $5035 = HEAP32[$5034>>2]|0;
 $5036 = (($5033) + 4)|0;
 $5037 = $5036;
 $5038 = HEAP32[$5037>>2]|0;
 $5039 = (_i64Add(($5035|0),($5038|0),($5029|0),($5032|0))|0);
 $5040 = (getTempRet0() | 0);
 $5041 = $57;
 $5042 = $5041;
 HEAP32[$5042>>2] = $5039;
 $5043 = (($5041) + 4)|0;
 $5044 = $5043;
 HEAP32[$5044>>2] = $5040;
 $5045 = $80;
 $5046 = $5045;
 $5047 = HEAP32[$5046>>2]|0;
 $5048 = (($5045) + 4)|0;
 $5049 = $5048;
 $5050 = HEAP32[$5049>>2]|0;
 $5051 = (_bitshift64Shl(($5047|0),($5050|0),21)|0);
 $5052 = (getTempRet0() | 0);
 $5053 = $56;
 $5054 = $5053;
 $5055 = HEAP32[$5054>>2]|0;
 $5056 = (($5053) + 4)|0;
 $5057 = $5056;
 $5058 = HEAP32[$5057>>2]|0;
 $5059 = (_i64Subtract(($5055|0),($5058|0),($5051|0),($5052|0))|0);
 $5060 = (getTempRet0() | 0);
 $5061 = $56;
 $5062 = $5061;
 HEAP32[$5062>>2] = $5059;
 $5063 = (($5061) + 4)|0;
 $5064 = $5063;
 HEAP32[$5064>>2] = $5060;
 $5065 = $58;
 $5066 = $5065;
 $5067 = HEAP32[$5066>>2]|0;
 $5068 = (($5065) + 4)|0;
 $5069 = $5068;
 $5070 = HEAP32[$5069>>2]|0;
 $5071 = (_i64Add(($5067|0),($5070|0),1048576,0)|0);
 $5072 = (getTempRet0() | 0);
 $5073 = (_bitshift64Ashr(($5071|0),($5072|0),21)|0);
 $5074 = (getTempRet0() | 0);
 $5075 = $82;
 $5076 = $5075;
 HEAP32[$5076>>2] = $5073;
 $5077 = (($5075) + 4)|0;
 $5078 = $5077;
 HEAP32[$5078>>2] = $5074;
 $5079 = $82;
 $5080 = $5079;
 $5081 = HEAP32[$5080>>2]|0;
 $5082 = (($5079) + 4)|0;
 $5083 = $5082;
 $5084 = HEAP32[$5083>>2]|0;
 $5085 = $59;
 $5086 = $5085;
 $5087 = HEAP32[$5086>>2]|0;
 $5088 = (($5085) + 4)|0;
 $5089 = $5088;
 $5090 = HEAP32[$5089>>2]|0;
 $5091 = (_i64Add(($5087|0),($5090|0),($5081|0),($5084|0))|0);
 $5092 = (getTempRet0() | 0);
 $5093 = $59;
 $5094 = $5093;
 HEAP32[$5094>>2] = $5091;
 $5095 = (($5093) + 4)|0;
 $5096 = $5095;
 HEAP32[$5096>>2] = $5092;
 $5097 = $82;
 $5098 = $5097;
 $5099 = HEAP32[$5098>>2]|0;
 $5100 = (($5097) + 4)|0;
 $5101 = $5100;
 $5102 = HEAP32[$5101>>2]|0;
 $5103 = (_bitshift64Shl(($5099|0),($5102|0),21)|0);
 $5104 = (getTempRet0() | 0);
 $5105 = $58;
 $5106 = $5105;
 $5107 = HEAP32[$5106>>2]|0;
 $5108 = (($5105) + 4)|0;
 $5109 = $5108;
 $5110 = HEAP32[$5109>>2]|0;
 $5111 = (_i64Subtract(($5107|0),($5110|0),($5103|0),($5104|0))|0);
 $5112 = (getTempRet0() | 0);
 $5113 = $58;
 $5114 = $5113;
 HEAP32[$5114>>2] = $5111;
 $5115 = (($5113) + 4)|0;
 $5116 = $5115;
 HEAP32[$5116>>2] = $5112;
 $5117 = $60;
 $5118 = $5117;
 $5119 = HEAP32[$5118>>2]|0;
 $5120 = (($5117) + 4)|0;
 $5121 = $5120;
 $5122 = HEAP32[$5121>>2]|0;
 $5123 = (_i64Add(($5119|0),($5122|0),1048576,0)|0);
 $5124 = (getTempRet0() | 0);
 $5125 = (_bitshift64Ashr(($5123|0),($5124|0),21)|0);
 $5126 = (getTempRet0() | 0);
 $5127 = $84;
 $5128 = $5127;
 HEAP32[$5128>>2] = $5125;
 $5129 = (($5127) + 4)|0;
 $5130 = $5129;
 HEAP32[$5130>>2] = $5126;
 $5131 = $84;
 $5132 = $5131;
 $5133 = HEAP32[$5132>>2]|0;
 $5134 = (($5131) + 4)|0;
 $5135 = $5134;
 $5136 = HEAP32[$5135>>2]|0;
 $5137 = $61;
 $5138 = $5137;
 $5139 = HEAP32[$5138>>2]|0;
 $5140 = (($5137) + 4)|0;
 $5141 = $5140;
 $5142 = HEAP32[$5141>>2]|0;
 $5143 = (_i64Add(($5139|0),($5142|0),($5133|0),($5136|0))|0);
 $5144 = (getTempRet0() | 0);
 $5145 = $61;
 $5146 = $5145;
 HEAP32[$5146>>2] = $5143;
 $5147 = (($5145) + 4)|0;
 $5148 = $5147;
 HEAP32[$5148>>2] = $5144;
 $5149 = $84;
 $5150 = $5149;
 $5151 = HEAP32[$5150>>2]|0;
 $5152 = (($5149) + 4)|0;
 $5153 = $5152;
 $5154 = HEAP32[$5153>>2]|0;
 $5155 = (_bitshift64Shl(($5151|0),($5154|0),21)|0);
 $5156 = (getTempRet0() | 0);
 $5157 = $60;
 $5158 = $5157;
 $5159 = HEAP32[$5158>>2]|0;
 $5160 = (($5157) + 4)|0;
 $5161 = $5160;
 $5162 = HEAP32[$5161>>2]|0;
 $5163 = (_i64Subtract(($5159|0),($5162|0),($5155|0),($5156|0))|0);
 $5164 = (getTempRet0() | 0);
 $5165 = $60;
 $5166 = $5165;
 HEAP32[$5166>>2] = $5163;
 $5167 = (($5165) + 4)|0;
 $5168 = $5167;
 HEAP32[$5168>>2] = $5164;
 $5169 = $51;
 $5170 = $5169;
 $5171 = HEAP32[$5170>>2]|0;
 $5172 = (($5169) + 4)|0;
 $5173 = $5172;
 $5174 = HEAP32[$5173>>2]|0;
 $5175 = (_i64Add(($5171|0),($5174|0),1048576,0)|0);
 $5176 = (getTempRet0() | 0);
 $5177 = (_bitshift64Ashr(($5175|0),($5176|0),21)|0);
 $5178 = (getTempRet0() | 0);
 $5179 = $75;
 $5180 = $5179;
 HEAP32[$5180>>2] = $5177;
 $5181 = (($5179) + 4)|0;
 $5182 = $5181;
 HEAP32[$5182>>2] = $5178;
 $5183 = $75;
 $5184 = $5183;
 $5185 = HEAP32[$5184>>2]|0;
 $5186 = (($5183) + 4)|0;
 $5187 = $5186;
 $5188 = HEAP32[$5187>>2]|0;
 $5189 = $52;
 $5190 = $5189;
 $5191 = HEAP32[$5190>>2]|0;
 $5192 = (($5189) + 4)|0;
 $5193 = $5192;
 $5194 = HEAP32[$5193>>2]|0;
 $5195 = (_i64Add(($5191|0),($5194|0),($5185|0),($5188|0))|0);
 $5196 = (getTempRet0() | 0);
 $5197 = $52;
 $5198 = $5197;
 HEAP32[$5198>>2] = $5195;
 $5199 = (($5197) + 4)|0;
 $5200 = $5199;
 HEAP32[$5200>>2] = $5196;
 $5201 = $75;
 $5202 = $5201;
 $5203 = HEAP32[$5202>>2]|0;
 $5204 = (($5201) + 4)|0;
 $5205 = $5204;
 $5206 = HEAP32[$5205>>2]|0;
 $5207 = (_bitshift64Shl(($5203|0),($5206|0),21)|0);
 $5208 = (getTempRet0() | 0);
 $5209 = $51;
 $5210 = $5209;
 $5211 = HEAP32[$5210>>2]|0;
 $5212 = (($5209) + 4)|0;
 $5213 = $5212;
 $5214 = HEAP32[$5213>>2]|0;
 $5215 = (_i64Subtract(($5211|0),($5214|0),($5207|0),($5208|0))|0);
 $5216 = (getTempRet0() | 0);
 $5217 = $51;
 $5218 = $5217;
 HEAP32[$5218>>2] = $5215;
 $5219 = (($5217) + 4)|0;
 $5220 = $5219;
 HEAP32[$5220>>2] = $5216;
 $5221 = $53;
 $5222 = $5221;
 $5223 = HEAP32[$5222>>2]|0;
 $5224 = (($5221) + 4)|0;
 $5225 = $5224;
 $5226 = HEAP32[$5225>>2]|0;
 $5227 = (_i64Add(($5223|0),($5226|0),1048576,0)|0);
 $5228 = (getTempRet0() | 0);
 $5229 = (_bitshift64Ashr(($5227|0),($5228|0),21)|0);
 $5230 = (getTempRet0() | 0);
 $5231 = $77;
 $5232 = $5231;
 HEAP32[$5232>>2] = $5229;
 $5233 = (($5231) + 4)|0;
 $5234 = $5233;
 HEAP32[$5234>>2] = $5230;
 $5235 = $77;
 $5236 = $5235;
 $5237 = HEAP32[$5236>>2]|0;
 $5238 = (($5235) + 4)|0;
 $5239 = $5238;
 $5240 = HEAP32[$5239>>2]|0;
 $5241 = $54;
 $5242 = $5241;
 $5243 = HEAP32[$5242>>2]|0;
 $5244 = (($5241) + 4)|0;
 $5245 = $5244;
 $5246 = HEAP32[$5245>>2]|0;
 $5247 = (_i64Add(($5243|0),($5246|0),($5237|0),($5240|0))|0);
 $5248 = (getTempRet0() | 0);
 $5249 = $54;
 $5250 = $5249;
 HEAP32[$5250>>2] = $5247;
 $5251 = (($5249) + 4)|0;
 $5252 = $5251;
 HEAP32[$5252>>2] = $5248;
 $5253 = $77;
 $5254 = $5253;
 $5255 = HEAP32[$5254>>2]|0;
 $5256 = (($5253) + 4)|0;
 $5257 = $5256;
 $5258 = HEAP32[$5257>>2]|0;
 $5259 = (_bitshift64Shl(($5255|0),($5258|0),21)|0);
 $5260 = (getTempRet0() | 0);
 $5261 = $53;
 $5262 = $5261;
 $5263 = HEAP32[$5262>>2]|0;
 $5264 = (($5261) + 4)|0;
 $5265 = $5264;
 $5266 = HEAP32[$5265>>2]|0;
 $5267 = (_i64Subtract(($5263|0),($5266|0),($5259|0),($5260|0))|0);
 $5268 = (getTempRet0() | 0);
 $5269 = $53;
 $5270 = $5269;
 HEAP32[$5270>>2] = $5267;
 $5271 = (($5269) + 4)|0;
 $5272 = $5271;
 HEAP32[$5272>>2] = $5268;
 $5273 = $55;
 $5274 = $5273;
 $5275 = HEAP32[$5274>>2]|0;
 $5276 = (($5273) + 4)|0;
 $5277 = $5276;
 $5278 = HEAP32[$5277>>2]|0;
 $5279 = (_i64Add(($5275|0),($5278|0),1048576,0)|0);
 $5280 = (getTempRet0() | 0);
 $5281 = (_bitshift64Ashr(($5279|0),($5280|0),21)|0);
 $5282 = (getTempRet0() | 0);
 $5283 = $79;
 $5284 = $5283;
 HEAP32[$5284>>2] = $5281;
 $5285 = (($5283) + 4)|0;
 $5286 = $5285;
 HEAP32[$5286>>2] = $5282;
 $5287 = $79;
 $5288 = $5287;
 $5289 = HEAP32[$5288>>2]|0;
 $5290 = (($5287) + 4)|0;
 $5291 = $5290;
 $5292 = HEAP32[$5291>>2]|0;
 $5293 = $56;
 $5294 = $5293;
 $5295 = HEAP32[$5294>>2]|0;
 $5296 = (($5293) + 4)|0;
 $5297 = $5296;
 $5298 = HEAP32[$5297>>2]|0;
 $5299 = (_i64Add(($5295|0),($5298|0),($5289|0),($5292|0))|0);
 $5300 = (getTempRet0() | 0);
 $5301 = $56;
 $5302 = $5301;
 HEAP32[$5302>>2] = $5299;
 $5303 = (($5301) + 4)|0;
 $5304 = $5303;
 HEAP32[$5304>>2] = $5300;
 $5305 = $79;
 $5306 = $5305;
 $5307 = HEAP32[$5306>>2]|0;
 $5308 = (($5305) + 4)|0;
 $5309 = $5308;
 $5310 = HEAP32[$5309>>2]|0;
 $5311 = (_bitshift64Shl(($5307|0),($5310|0),21)|0);
 $5312 = (getTempRet0() | 0);
 $5313 = $55;
 $5314 = $5313;
 $5315 = HEAP32[$5314>>2]|0;
 $5316 = (($5313) + 4)|0;
 $5317 = $5316;
 $5318 = HEAP32[$5317>>2]|0;
 $5319 = (_i64Subtract(($5315|0),($5318|0),($5311|0),($5312|0))|0);
 $5320 = (getTempRet0() | 0);
 $5321 = $55;
 $5322 = $5321;
 HEAP32[$5322>>2] = $5319;
 $5323 = (($5321) + 4)|0;
 $5324 = $5323;
 HEAP32[$5324>>2] = $5320;
 $5325 = $57;
 $5326 = $5325;
 $5327 = HEAP32[$5326>>2]|0;
 $5328 = (($5325) + 4)|0;
 $5329 = $5328;
 $5330 = HEAP32[$5329>>2]|0;
 $5331 = (_i64Add(($5327|0),($5330|0),1048576,0)|0);
 $5332 = (getTempRet0() | 0);
 $5333 = (_bitshift64Ashr(($5331|0),($5332|0),21)|0);
 $5334 = (getTempRet0() | 0);
 $5335 = $81;
 $5336 = $5335;
 HEAP32[$5336>>2] = $5333;
 $5337 = (($5335) + 4)|0;
 $5338 = $5337;
 HEAP32[$5338>>2] = $5334;
 $5339 = $81;
 $5340 = $5339;
 $5341 = HEAP32[$5340>>2]|0;
 $5342 = (($5339) + 4)|0;
 $5343 = $5342;
 $5344 = HEAP32[$5343>>2]|0;
 $5345 = $58;
 $5346 = $5345;
 $5347 = HEAP32[$5346>>2]|0;
 $5348 = (($5345) + 4)|0;
 $5349 = $5348;
 $5350 = HEAP32[$5349>>2]|0;
 $5351 = (_i64Add(($5347|0),($5350|0),($5341|0),($5344|0))|0);
 $5352 = (getTempRet0() | 0);
 $5353 = $58;
 $5354 = $5353;
 HEAP32[$5354>>2] = $5351;
 $5355 = (($5353) + 4)|0;
 $5356 = $5355;
 HEAP32[$5356>>2] = $5352;
 $5357 = $81;
 $5358 = $5357;
 $5359 = HEAP32[$5358>>2]|0;
 $5360 = (($5357) + 4)|0;
 $5361 = $5360;
 $5362 = HEAP32[$5361>>2]|0;
 $5363 = (_bitshift64Shl(($5359|0),($5362|0),21)|0);
 $5364 = (getTempRet0() | 0);
 $5365 = $57;
 $5366 = $5365;
 $5367 = HEAP32[$5366>>2]|0;
 $5368 = (($5365) + 4)|0;
 $5369 = $5368;
 $5370 = HEAP32[$5369>>2]|0;
 $5371 = (_i64Subtract(($5367|0),($5370|0),($5363|0),($5364|0))|0);
 $5372 = (getTempRet0() | 0);
 $5373 = $57;
 $5374 = $5373;
 HEAP32[$5374>>2] = $5371;
 $5375 = (($5373) + 4)|0;
 $5376 = $5375;
 HEAP32[$5376>>2] = $5372;
 $5377 = $59;
 $5378 = $5377;
 $5379 = HEAP32[$5378>>2]|0;
 $5380 = (($5377) + 4)|0;
 $5381 = $5380;
 $5382 = HEAP32[$5381>>2]|0;
 $5383 = (_i64Add(($5379|0),($5382|0),1048576,0)|0);
 $5384 = (getTempRet0() | 0);
 $5385 = (_bitshift64Ashr(($5383|0),($5384|0),21)|0);
 $5386 = (getTempRet0() | 0);
 $5387 = $83;
 $5388 = $5387;
 HEAP32[$5388>>2] = $5385;
 $5389 = (($5387) + 4)|0;
 $5390 = $5389;
 HEAP32[$5390>>2] = $5386;
 $5391 = $83;
 $5392 = $5391;
 $5393 = HEAP32[$5392>>2]|0;
 $5394 = (($5391) + 4)|0;
 $5395 = $5394;
 $5396 = HEAP32[$5395>>2]|0;
 $5397 = $60;
 $5398 = $5397;
 $5399 = HEAP32[$5398>>2]|0;
 $5400 = (($5397) + 4)|0;
 $5401 = $5400;
 $5402 = HEAP32[$5401>>2]|0;
 $5403 = (_i64Add(($5399|0),($5402|0),($5393|0),($5396|0))|0);
 $5404 = (getTempRet0() | 0);
 $5405 = $60;
 $5406 = $5405;
 HEAP32[$5406>>2] = $5403;
 $5407 = (($5405) + 4)|0;
 $5408 = $5407;
 HEAP32[$5408>>2] = $5404;
 $5409 = $83;
 $5410 = $5409;
 $5411 = HEAP32[$5410>>2]|0;
 $5412 = (($5409) + 4)|0;
 $5413 = $5412;
 $5414 = HEAP32[$5413>>2]|0;
 $5415 = (_bitshift64Shl(($5411|0),($5414|0),21)|0);
 $5416 = (getTempRet0() | 0);
 $5417 = $59;
 $5418 = $5417;
 $5419 = HEAP32[$5418>>2]|0;
 $5420 = (($5417) + 4)|0;
 $5421 = $5420;
 $5422 = HEAP32[$5421>>2]|0;
 $5423 = (_i64Subtract(($5419|0),($5422|0),($5415|0),($5416|0))|0);
 $5424 = (getTempRet0() | 0);
 $5425 = $59;
 $5426 = $5425;
 HEAP32[$5426>>2] = $5423;
 $5427 = (($5425) + 4)|0;
 $5428 = $5427;
 HEAP32[$5428>>2] = $5424;
 $5429 = $61;
 $5430 = $5429;
 $5431 = HEAP32[$5430>>2]|0;
 $5432 = (($5429) + 4)|0;
 $5433 = $5432;
 $5434 = HEAP32[$5433>>2]|0;
 $5435 = (___muldi3(($5431|0),($5434|0),666643,0)|0);
 $5436 = (getTempRet0() | 0);
 $5437 = $49;
 $5438 = $5437;
 $5439 = HEAP32[$5438>>2]|0;
 $5440 = (($5437) + 4)|0;
 $5441 = $5440;
 $5442 = HEAP32[$5441>>2]|0;
 $5443 = (_i64Add(($5439|0),($5442|0),($5435|0),($5436|0))|0);
 $5444 = (getTempRet0() | 0);
 $5445 = $49;
 $5446 = $5445;
 HEAP32[$5446>>2] = $5443;
 $5447 = (($5445) + 4)|0;
 $5448 = $5447;
 HEAP32[$5448>>2] = $5444;
 $5449 = $61;
 $5450 = $5449;
 $5451 = HEAP32[$5450>>2]|0;
 $5452 = (($5449) + 4)|0;
 $5453 = $5452;
 $5454 = HEAP32[$5453>>2]|0;
 $5455 = (___muldi3(($5451|0),($5454|0),470296,0)|0);
 $5456 = (getTempRet0() | 0);
 $5457 = $50;
 $5458 = $5457;
 $5459 = HEAP32[$5458>>2]|0;
 $5460 = (($5457) + 4)|0;
 $5461 = $5460;
 $5462 = HEAP32[$5461>>2]|0;
 $5463 = (_i64Add(($5459|0),($5462|0),($5455|0),($5456|0))|0);
 $5464 = (getTempRet0() | 0);
 $5465 = $50;
 $5466 = $5465;
 HEAP32[$5466>>2] = $5463;
 $5467 = (($5465) + 4)|0;
 $5468 = $5467;
 HEAP32[$5468>>2] = $5464;
 $5469 = $61;
 $5470 = $5469;
 $5471 = HEAP32[$5470>>2]|0;
 $5472 = (($5469) + 4)|0;
 $5473 = $5472;
 $5474 = HEAP32[$5473>>2]|0;
 $5475 = (___muldi3(($5471|0),($5474|0),654183,0)|0);
 $5476 = (getTempRet0() | 0);
 $5477 = $51;
 $5478 = $5477;
 $5479 = HEAP32[$5478>>2]|0;
 $5480 = (($5477) + 4)|0;
 $5481 = $5480;
 $5482 = HEAP32[$5481>>2]|0;
 $5483 = (_i64Add(($5479|0),($5482|0),($5475|0),($5476|0))|0);
 $5484 = (getTempRet0() | 0);
 $5485 = $51;
 $5486 = $5485;
 HEAP32[$5486>>2] = $5483;
 $5487 = (($5485) + 4)|0;
 $5488 = $5487;
 HEAP32[$5488>>2] = $5484;
 $5489 = $61;
 $5490 = $5489;
 $5491 = HEAP32[$5490>>2]|0;
 $5492 = (($5489) + 4)|0;
 $5493 = $5492;
 $5494 = HEAP32[$5493>>2]|0;
 $5495 = (___muldi3(($5491|0),($5494|0),997805,0)|0);
 $5496 = (getTempRet0() | 0);
 $5497 = $52;
 $5498 = $5497;
 $5499 = HEAP32[$5498>>2]|0;
 $5500 = (($5497) + 4)|0;
 $5501 = $5500;
 $5502 = HEAP32[$5501>>2]|0;
 $5503 = (_i64Subtract(($5499|0),($5502|0),($5495|0),($5496|0))|0);
 $5504 = (getTempRet0() | 0);
 $5505 = $52;
 $5506 = $5505;
 HEAP32[$5506>>2] = $5503;
 $5507 = (($5505) + 4)|0;
 $5508 = $5507;
 HEAP32[$5508>>2] = $5504;
 $5509 = $61;
 $5510 = $5509;
 $5511 = HEAP32[$5510>>2]|0;
 $5512 = (($5509) + 4)|0;
 $5513 = $5512;
 $5514 = HEAP32[$5513>>2]|0;
 $5515 = (___muldi3(($5511|0),($5514|0),136657,0)|0);
 $5516 = (getTempRet0() | 0);
 $5517 = $53;
 $5518 = $5517;
 $5519 = HEAP32[$5518>>2]|0;
 $5520 = (($5517) + 4)|0;
 $5521 = $5520;
 $5522 = HEAP32[$5521>>2]|0;
 $5523 = (_i64Add(($5519|0),($5522|0),($5515|0),($5516|0))|0);
 $5524 = (getTempRet0() | 0);
 $5525 = $53;
 $5526 = $5525;
 HEAP32[$5526>>2] = $5523;
 $5527 = (($5525) + 4)|0;
 $5528 = $5527;
 HEAP32[$5528>>2] = $5524;
 $5529 = $61;
 $5530 = $5529;
 $5531 = HEAP32[$5530>>2]|0;
 $5532 = (($5529) + 4)|0;
 $5533 = $5532;
 $5534 = HEAP32[$5533>>2]|0;
 $5535 = (___muldi3(($5531|0),($5534|0),683901,0)|0);
 $5536 = (getTempRet0() | 0);
 $5537 = $54;
 $5538 = $5537;
 $5539 = HEAP32[$5538>>2]|0;
 $5540 = (($5537) + 4)|0;
 $5541 = $5540;
 $5542 = HEAP32[$5541>>2]|0;
 $5543 = (_i64Subtract(($5539|0),($5542|0),($5535|0),($5536|0))|0);
 $5544 = (getTempRet0() | 0);
 $5545 = $54;
 $5546 = $5545;
 HEAP32[$5546>>2] = $5543;
 $5547 = (($5545) + 4)|0;
 $5548 = $5547;
 HEAP32[$5548>>2] = $5544;
 $5549 = $60;
 $5550 = $5549;
 $5551 = HEAP32[$5550>>2]|0;
 $5552 = (($5549) + 4)|0;
 $5553 = $5552;
 $5554 = HEAP32[$5553>>2]|0;
 $5555 = (___muldi3(($5551|0),($5554|0),666643,0)|0);
 $5556 = (getTempRet0() | 0);
 $5557 = $48;
 $5558 = $5557;
 $5559 = HEAP32[$5558>>2]|0;
 $5560 = (($5557) + 4)|0;
 $5561 = $5560;
 $5562 = HEAP32[$5561>>2]|0;
 $5563 = (_i64Add(($5559|0),($5562|0),($5555|0),($5556|0))|0);
 $5564 = (getTempRet0() | 0);
 $5565 = $48;
 $5566 = $5565;
 HEAP32[$5566>>2] = $5563;
 $5567 = (($5565) + 4)|0;
 $5568 = $5567;
 HEAP32[$5568>>2] = $5564;
 $5569 = $60;
 $5570 = $5569;
 $5571 = HEAP32[$5570>>2]|0;
 $5572 = (($5569) + 4)|0;
 $5573 = $5572;
 $5574 = HEAP32[$5573>>2]|0;
 $5575 = (___muldi3(($5571|0),($5574|0),470296,0)|0);
 $5576 = (getTempRet0() | 0);
 $5577 = $49;
 $5578 = $5577;
 $5579 = HEAP32[$5578>>2]|0;
 $5580 = (($5577) + 4)|0;
 $5581 = $5580;
 $5582 = HEAP32[$5581>>2]|0;
 $5583 = (_i64Add(($5579|0),($5582|0),($5575|0),($5576|0))|0);
 $5584 = (getTempRet0() | 0);
 $5585 = $49;
 $5586 = $5585;
 HEAP32[$5586>>2] = $5583;
 $5587 = (($5585) + 4)|0;
 $5588 = $5587;
 HEAP32[$5588>>2] = $5584;
 $5589 = $60;
 $5590 = $5589;
 $5591 = HEAP32[$5590>>2]|0;
 $5592 = (($5589) + 4)|0;
 $5593 = $5592;
 $5594 = HEAP32[$5593>>2]|0;
 $5595 = (___muldi3(($5591|0),($5594|0),654183,0)|0);
 $5596 = (getTempRet0() | 0);
 $5597 = $50;
 $5598 = $5597;
 $5599 = HEAP32[$5598>>2]|0;
 $5600 = (($5597) + 4)|0;
 $5601 = $5600;
 $5602 = HEAP32[$5601>>2]|0;
 $5603 = (_i64Add(($5599|0),($5602|0),($5595|0),($5596|0))|0);
 $5604 = (getTempRet0() | 0);
 $5605 = $50;
 $5606 = $5605;
 HEAP32[$5606>>2] = $5603;
 $5607 = (($5605) + 4)|0;
 $5608 = $5607;
 HEAP32[$5608>>2] = $5604;
 $5609 = $60;
 $5610 = $5609;
 $5611 = HEAP32[$5610>>2]|0;
 $5612 = (($5609) + 4)|0;
 $5613 = $5612;
 $5614 = HEAP32[$5613>>2]|0;
 $5615 = (___muldi3(($5611|0),($5614|0),997805,0)|0);
 $5616 = (getTempRet0() | 0);
 $5617 = $51;
 $5618 = $5617;
 $5619 = HEAP32[$5618>>2]|0;
 $5620 = (($5617) + 4)|0;
 $5621 = $5620;
 $5622 = HEAP32[$5621>>2]|0;
 $5623 = (_i64Subtract(($5619|0),($5622|0),($5615|0),($5616|0))|0);
 $5624 = (getTempRet0() | 0);
 $5625 = $51;
 $5626 = $5625;
 HEAP32[$5626>>2] = $5623;
 $5627 = (($5625) + 4)|0;
 $5628 = $5627;
 HEAP32[$5628>>2] = $5624;
 $5629 = $60;
 $5630 = $5629;
 $5631 = HEAP32[$5630>>2]|0;
 $5632 = (($5629) + 4)|0;
 $5633 = $5632;
 $5634 = HEAP32[$5633>>2]|0;
 $5635 = (___muldi3(($5631|0),($5634|0),136657,0)|0);
 $5636 = (getTempRet0() | 0);
 $5637 = $52;
 $5638 = $5637;
 $5639 = HEAP32[$5638>>2]|0;
 $5640 = (($5637) + 4)|0;
 $5641 = $5640;
 $5642 = HEAP32[$5641>>2]|0;
 $5643 = (_i64Add(($5639|0),($5642|0),($5635|0),($5636|0))|0);
 $5644 = (getTempRet0() | 0);
 $5645 = $52;
 $5646 = $5645;
 HEAP32[$5646>>2] = $5643;
 $5647 = (($5645) + 4)|0;
 $5648 = $5647;
 HEAP32[$5648>>2] = $5644;
 $5649 = $60;
 $5650 = $5649;
 $5651 = HEAP32[$5650>>2]|0;
 $5652 = (($5649) + 4)|0;
 $5653 = $5652;
 $5654 = HEAP32[$5653>>2]|0;
 $5655 = (___muldi3(($5651|0),($5654|0),683901,0)|0);
 $5656 = (getTempRet0() | 0);
 $5657 = $53;
 $5658 = $5657;
 $5659 = HEAP32[$5658>>2]|0;
 $5660 = (($5657) + 4)|0;
 $5661 = $5660;
 $5662 = HEAP32[$5661>>2]|0;
 $5663 = (_i64Subtract(($5659|0),($5662|0),($5655|0),($5656|0))|0);
 $5664 = (getTempRet0() | 0);
 $5665 = $53;
 $5666 = $5665;
 HEAP32[$5666>>2] = $5663;
 $5667 = (($5665) + 4)|0;
 $5668 = $5667;
 HEAP32[$5668>>2] = $5664;
 $5669 = $59;
 $5670 = $5669;
 $5671 = HEAP32[$5670>>2]|0;
 $5672 = (($5669) + 4)|0;
 $5673 = $5672;
 $5674 = HEAP32[$5673>>2]|0;
 $5675 = (___muldi3(($5671|0),($5674|0),666643,0)|0);
 $5676 = (getTempRet0() | 0);
 $5677 = $47;
 $5678 = $5677;
 $5679 = HEAP32[$5678>>2]|0;
 $5680 = (($5677) + 4)|0;
 $5681 = $5680;
 $5682 = HEAP32[$5681>>2]|0;
 $5683 = (_i64Add(($5679|0),($5682|0),($5675|0),($5676|0))|0);
 $5684 = (getTempRet0() | 0);
 $5685 = $47;
 $5686 = $5685;
 HEAP32[$5686>>2] = $5683;
 $5687 = (($5685) + 4)|0;
 $5688 = $5687;
 HEAP32[$5688>>2] = $5684;
 $5689 = $59;
 $5690 = $5689;
 $5691 = HEAP32[$5690>>2]|0;
 $5692 = (($5689) + 4)|0;
 $5693 = $5692;
 $5694 = HEAP32[$5693>>2]|0;
 $5695 = (___muldi3(($5691|0),($5694|0),470296,0)|0);
 $5696 = (getTempRet0() | 0);
 $5697 = $48;
 $5698 = $5697;
 $5699 = HEAP32[$5698>>2]|0;
 $5700 = (($5697) + 4)|0;
 $5701 = $5700;
 $5702 = HEAP32[$5701>>2]|0;
 $5703 = (_i64Add(($5699|0),($5702|0),($5695|0),($5696|0))|0);
 $5704 = (getTempRet0() | 0);
 $5705 = $48;
 $5706 = $5705;
 HEAP32[$5706>>2] = $5703;
 $5707 = (($5705) + 4)|0;
 $5708 = $5707;
 HEAP32[$5708>>2] = $5704;
 $5709 = $59;
 $5710 = $5709;
 $5711 = HEAP32[$5710>>2]|0;
 $5712 = (($5709) + 4)|0;
 $5713 = $5712;
 $5714 = HEAP32[$5713>>2]|0;
 $5715 = (___muldi3(($5711|0),($5714|0),654183,0)|0);
 $5716 = (getTempRet0() | 0);
 $5717 = $49;
 $5718 = $5717;
 $5719 = HEAP32[$5718>>2]|0;
 $5720 = (($5717) + 4)|0;
 $5721 = $5720;
 $5722 = HEAP32[$5721>>2]|0;
 $5723 = (_i64Add(($5719|0),($5722|0),($5715|0),($5716|0))|0);
 $5724 = (getTempRet0() | 0);
 $5725 = $49;
 $5726 = $5725;
 HEAP32[$5726>>2] = $5723;
 $5727 = (($5725) + 4)|0;
 $5728 = $5727;
 HEAP32[$5728>>2] = $5724;
 $5729 = $59;
 $5730 = $5729;
 $5731 = HEAP32[$5730>>2]|0;
 $5732 = (($5729) + 4)|0;
 $5733 = $5732;
 $5734 = HEAP32[$5733>>2]|0;
 $5735 = (___muldi3(($5731|0),($5734|0),997805,0)|0);
 $5736 = (getTempRet0() | 0);
 $5737 = $50;
 $5738 = $5737;
 $5739 = HEAP32[$5738>>2]|0;
 $5740 = (($5737) + 4)|0;
 $5741 = $5740;
 $5742 = HEAP32[$5741>>2]|0;
 $5743 = (_i64Subtract(($5739|0),($5742|0),($5735|0),($5736|0))|0);
 $5744 = (getTempRet0() | 0);
 $5745 = $50;
 $5746 = $5745;
 HEAP32[$5746>>2] = $5743;
 $5747 = (($5745) + 4)|0;
 $5748 = $5747;
 HEAP32[$5748>>2] = $5744;
 $5749 = $59;
 $5750 = $5749;
 $5751 = HEAP32[$5750>>2]|0;
 $5752 = (($5749) + 4)|0;
 $5753 = $5752;
 $5754 = HEAP32[$5753>>2]|0;
 $5755 = (___muldi3(($5751|0),($5754|0),136657,0)|0);
 $5756 = (getTempRet0() | 0);
 $5757 = $51;
 $5758 = $5757;
 $5759 = HEAP32[$5758>>2]|0;
 $5760 = (($5757) + 4)|0;
 $5761 = $5760;
 $5762 = HEAP32[$5761>>2]|0;
 $5763 = (_i64Add(($5759|0),($5762|0),($5755|0),($5756|0))|0);
 $5764 = (getTempRet0() | 0);
 $5765 = $51;
 $5766 = $5765;
 HEAP32[$5766>>2] = $5763;
 $5767 = (($5765) + 4)|0;
 $5768 = $5767;
 HEAP32[$5768>>2] = $5764;
 $5769 = $59;
 $5770 = $5769;
 $5771 = HEAP32[$5770>>2]|0;
 $5772 = (($5769) + 4)|0;
 $5773 = $5772;
 $5774 = HEAP32[$5773>>2]|0;
 $5775 = (___muldi3(($5771|0),($5774|0),683901,0)|0);
 $5776 = (getTempRet0() | 0);
 $5777 = $52;
 $5778 = $5777;
 $5779 = HEAP32[$5778>>2]|0;
 $5780 = (($5777) + 4)|0;
 $5781 = $5780;
 $5782 = HEAP32[$5781>>2]|0;
 $5783 = (_i64Subtract(($5779|0),($5782|0),($5775|0),($5776|0))|0);
 $5784 = (getTempRet0() | 0);
 $5785 = $52;
 $5786 = $5785;
 HEAP32[$5786>>2] = $5783;
 $5787 = (($5785) + 4)|0;
 $5788 = $5787;
 HEAP32[$5788>>2] = $5784;
 $5789 = $58;
 $5790 = $5789;
 $5791 = HEAP32[$5790>>2]|0;
 $5792 = (($5789) + 4)|0;
 $5793 = $5792;
 $5794 = HEAP32[$5793>>2]|0;
 $5795 = (___muldi3(($5791|0),($5794|0),666643,0)|0);
 $5796 = (getTempRet0() | 0);
 $5797 = $46;
 $5798 = $5797;
 $5799 = HEAP32[$5798>>2]|0;
 $5800 = (($5797) + 4)|0;
 $5801 = $5800;
 $5802 = HEAP32[$5801>>2]|0;
 $5803 = (_i64Add(($5799|0),($5802|0),($5795|0),($5796|0))|0);
 $5804 = (getTempRet0() | 0);
 $5805 = $46;
 $5806 = $5805;
 HEAP32[$5806>>2] = $5803;
 $5807 = (($5805) + 4)|0;
 $5808 = $5807;
 HEAP32[$5808>>2] = $5804;
 $5809 = $58;
 $5810 = $5809;
 $5811 = HEAP32[$5810>>2]|0;
 $5812 = (($5809) + 4)|0;
 $5813 = $5812;
 $5814 = HEAP32[$5813>>2]|0;
 $5815 = (___muldi3(($5811|0),($5814|0),470296,0)|0);
 $5816 = (getTempRet0() | 0);
 $5817 = $47;
 $5818 = $5817;
 $5819 = HEAP32[$5818>>2]|0;
 $5820 = (($5817) + 4)|0;
 $5821 = $5820;
 $5822 = HEAP32[$5821>>2]|0;
 $5823 = (_i64Add(($5819|0),($5822|0),($5815|0),($5816|0))|0);
 $5824 = (getTempRet0() | 0);
 $5825 = $47;
 $5826 = $5825;
 HEAP32[$5826>>2] = $5823;
 $5827 = (($5825) + 4)|0;
 $5828 = $5827;
 HEAP32[$5828>>2] = $5824;
 $5829 = $58;
 $5830 = $5829;
 $5831 = HEAP32[$5830>>2]|0;
 $5832 = (($5829) + 4)|0;
 $5833 = $5832;
 $5834 = HEAP32[$5833>>2]|0;
 $5835 = (___muldi3(($5831|0),($5834|0),654183,0)|0);
 $5836 = (getTempRet0() | 0);
 $5837 = $48;
 $5838 = $5837;
 $5839 = HEAP32[$5838>>2]|0;
 $5840 = (($5837) + 4)|0;
 $5841 = $5840;
 $5842 = HEAP32[$5841>>2]|0;
 $5843 = (_i64Add(($5839|0),($5842|0),($5835|0),($5836|0))|0);
 $5844 = (getTempRet0() | 0);
 $5845 = $48;
 $5846 = $5845;
 HEAP32[$5846>>2] = $5843;
 $5847 = (($5845) + 4)|0;
 $5848 = $5847;
 HEAP32[$5848>>2] = $5844;
 $5849 = $58;
 $5850 = $5849;
 $5851 = HEAP32[$5850>>2]|0;
 $5852 = (($5849) + 4)|0;
 $5853 = $5852;
 $5854 = HEAP32[$5853>>2]|0;
 $5855 = (___muldi3(($5851|0),($5854|0),997805,0)|0);
 $5856 = (getTempRet0() | 0);
 $5857 = $49;
 $5858 = $5857;
 $5859 = HEAP32[$5858>>2]|0;
 $5860 = (($5857) + 4)|0;
 $5861 = $5860;
 $5862 = HEAP32[$5861>>2]|0;
 $5863 = (_i64Subtract(($5859|0),($5862|0),($5855|0),($5856|0))|0);
 $5864 = (getTempRet0() | 0);
 $5865 = $49;
 $5866 = $5865;
 HEAP32[$5866>>2] = $5863;
 $5867 = (($5865) + 4)|0;
 $5868 = $5867;
 HEAP32[$5868>>2] = $5864;
 $5869 = $58;
 $5870 = $5869;
 $5871 = HEAP32[$5870>>2]|0;
 $5872 = (($5869) + 4)|0;
 $5873 = $5872;
 $5874 = HEAP32[$5873>>2]|0;
 $5875 = (___muldi3(($5871|0),($5874|0),136657,0)|0);
 $5876 = (getTempRet0() | 0);
 $5877 = $50;
 $5878 = $5877;
 $5879 = HEAP32[$5878>>2]|0;
 $5880 = (($5877) + 4)|0;
 $5881 = $5880;
 $5882 = HEAP32[$5881>>2]|0;
 $5883 = (_i64Add(($5879|0),($5882|0),($5875|0),($5876|0))|0);
 $5884 = (getTempRet0() | 0);
 $5885 = $50;
 $5886 = $5885;
 HEAP32[$5886>>2] = $5883;
 $5887 = (($5885) + 4)|0;
 $5888 = $5887;
 HEAP32[$5888>>2] = $5884;
 $5889 = $58;
 $5890 = $5889;
 $5891 = HEAP32[$5890>>2]|0;
 $5892 = (($5889) + 4)|0;
 $5893 = $5892;
 $5894 = HEAP32[$5893>>2]|0;
 $5895 = (___muldi3(($5891|0),($5894|0),683901,0)|0);
 $5896 = (getTempRet0() | 0);
 $5897 = $51;
 $5898 = $5897;
 $5899 = HEAP32[$5898>>2]|0;
 $5900 = (($5897) + 4)|0;
 $5901 = $5900;
 $5902 = HEAP32[$5901>>2]|0;
 $5903 = (_i64Subtract(($5899|0),($5902|0),($5895|0),($5896|0))|0);
 $5904 = (getTempRet0() | 0);
 $5905 = $51;
 $5906 = $5905;
 HEAP32[$5906>>2] = $5903;
 $5907 = (($5905) + 4)|0;
 $5908 = $5907;
 HEAP32[$5908>>2] = $5904;
 $5909 = $57;
 $5910 = $5909;
 $5911 = HEAP32[$5910>>2]|0;
 $5912 = (($5909) + 4)|0;
 $5913 = $5912;
 $5914 = HEAP32[$5913>>2]|0;
 $5915 = (___muldi3(($5911|0),($5914|0),666643,0)|0);
 $5916 = (getTempRet0() | 0);
 $5917 = $45;
 $5918 = $5917;
 $5919 = HEAP32[$5918>>2]|0;
 $5920 = (($5917) + 4)|0;
 $5921 = $5920;
 $5922 = HEAP32[$5921>>2]|0;
 $5923 = (_i64Add(($5919|0),($5922|0),($5915|0),($5916|0))|0);
 $5924 = (getTempRet0() | 0);
 $5925 = $45;
 $5926 = $5925;
 HEAP32[$5926>>2] = $5923;
 $5927 = (($5925) + 4)|0;
 $5928 = $5927;
 HEAP32[$5928>>2] = $5924;
 $5929 = $57;
 $5930 = $5929;
 $5931 = HEAP32[$5930>>2]|0;
 $5932 = (($5929) + 4)|0;
 $5933 = $5932;
 $5934 = HEAP32[$5933>>2]|0;
 $5935 = (___muldi3(($5931|0),($5934|0),470296,0)|0);
 $5936 = (getTempRet0() | 0);
 $5937 = $46;
 $5938 = $5937;
 $5939 = HEAP32[$5938>>2]|0;
 $5940 = (($5937) + 4)|0;
 $5941 = $5940;
 $5942 = HEAP32[$5941>>2]|0;
 $5943 = (_i64Add(($5939|0),($5942|0),($5935|0),($5936|0))|0);
 $5944 = (getTempRet0() | 0);
 $5945 = $46;
 $5946 = $5945;
 HEAP32[$5946>>2] = $5943;
 $5947 = (($5945) + 4)|0;
 $5948 = $5947;
 HEAP32[$5948>>2] = $5944;
 $5949 = $57;
 $5950 = $5949;
 $5951 = HEAP32[$5950>>2]|0;
 $5952 = (($5949) + 4)|0;
 $5953 = $5952;
 $5954 = HEAP32[$5953>>2]|0;
 $5955 = (___muldi3(($5951|0),($5954|0),654183,0)|0);
 $5956 = (getTempRet0() | 0);
 $5957 = $47;
 $5958 = $5957;
 $5959 = HEAP32[$5958>>2]|0;
 $5960 = (($5957) + 4)|0;
 $5961 = $5960;
 $5962 = HEAP32[$5961>>2]|0;
 $5963 = (_i64Add(($5959|0),($5962|0),($5955|0),($5956|0))|0);
 $5964 = (getTempRet0() | 0);
 $5965 = $47;
 $5966 = $5965;
 HEAP32[$5966>>2] = $5963;
 $5967 = (($5965) + 4)|0;
 $5968 = $5967;
 HEAP32[$5968>>2] = $5964;
 $5969 = $57;
 $5970 = $5969;
 $5971 = HEAP32[$5970>>2]|0;
 $5972 = (($5969) + 4)|0;
 $5973 = $5972;
 $5974 = HEAP32[$5973>>2]|0;
 $5975 = (___muldi3(($5971|0),($5974|0),997805,0)|0);
 $5976 = (getTempRet0() | 0);
 $5977 = $48;
 $5978 = $5977;
 $5979 = HEAP32[$5978>>2]|0;
 $5980 = (($5977) + 4)|0;
 $5981 = $5980;
 $5982 = HEAP32[$5981>>2]|0;
 $5983 = (_i64Subtract(($5979|0),($5982|0),($5975|0),($5976|0))|0);
 $5984 = (getTempRet0() | 0);
 $5985 = $48;
 $5986 = $5985;
 HEAP32[$5986>>2] = $5983;
 $5987 = (($5985) + 4)|0;
 $5988 = $5987;
 HEAP32[$5988>>2] = $5984;
 $5989 = $57;
 $5990 = $5989;
 $5991 = HEAP32[$5990>>2]|0;
 $5992 = (($5989) + 4)|0;
 $5993 = $5992;
 $5994 = HEAP32[$5993>>2]|0;
 $5995 = (___muldi3(($5991|0),($5994|0),136657,0)|0);
 $5996 = (getTempRet0() | 0);
 $5997 = $49;
 $5998 = $5997;
 $5999 = HEAP32[$5998>>2]|0;
 $6000 = (($5997) + 4)|0;
 $6001 = $6000;
 $6002 = HEAP32[$6001>>2]|0;
 $6003 = (_i64Add(($5999|0),($6002|0),($5995|0),($5996|0))|0);
 $6004 = (getTempRet0() | 0);
 $6005 = $49;
 $6006 = $6005;
 HEAP32[$6006>>2] = $6003;
 $6007 = (($6005) + 4)|0;
 $6008 = $6007;
 HEAP32[$6008>>2] = $6004;
 $6009 = $57;
 $6010 = $6009;
 $6011 = HEAP32[$6010>>2]|0;
 $6012 = (($6009) + 4)|0;
 $6013 = $6012;
 $6014 = HEAP32[$6013>>2]|0;
 $6015 = (___muldi3(($6011|0),($6014|0),683901,0)|0);
 $6016 = (getTempRet0() | 0);
 $6017 = $50;
 $6018 = $6017;
 $6019 = HEAP32[$6018>>2]|0;
 $6020 = (($6017) + 4)|0;
 $6021 = $6020;
 $6022 = HEAP32[$6021>>2]|0;
 $6023 = (_i64Subtract(($6019|0),($6022|0),($6015|0),($6016|0))|0);
 $6024 = (getTempRet0() | 0);
 $6025 = $50;
 $6026 = $6025;
 HEAP32[$6026>>2] = $6023;
 $6027 = (($6025) + 4)|0;
 $6028 = $6027;
 HEAP32[$6028>>2] = $6024;
 $6029 = $56;
 $6030 = $6029;
 $6031 = HEAP32[$6030>>2]|0;
 $6032 = (($6029) + 4)|0;
 $6033 = $6032;
 $6034 = HEAP32[$6033>>2]|0;
 $6035 = (___muldi3(($6031|0),($6034|0),666643,0)|0);
 $6036 = (getTempRet0() | 0);
 $6037 = $44;
 $6038 = $6037;
 $6039 = HEAP32[$6038>>2]|0;
 $6040 = (($6037) + 4)|0;
 $6041 = $6040;
 $6042 = HEAP32[$6041>>2]|0;
 $6043 = (_i64Add(($6039|0),($6042|0),($6035|0),($6036|0))|0);
 $6044 = (getTempRet0() | 0);
 $6045 = $44;
 $6046 = $6045;
 HEAP32[$6046>>2] = $6043;
 $6047 = (($6045) + 4)|0;
 $6048 = $6047;
 HEAP32[$6048>>2] = $6044;
 $6049 = $56;
 $6050 = $6049;
 $6051 = HEAP32[$6050>>2]|0;
 $6052 = (($6049) + 4)|0;
 $6053 = $6052;
 $6054 = HEAP32[$6053>>2]|0;
 $6055 = (___muldi3(($6051|0),($6054|0),470296,0)|0);
 $6056 = (getTempRet0() | 0);
 $6057 = $45;
 $6058 = $6057;
 $6059 = HEAP32[$6058>>2]|0;
 $6060 = (($6057) + 4)|0;
 $6061 = $6060;
 $6062 = HEAP32[$6061>>2]|0;
 $6063 = (_i64Add(($6059|0),($6062|0),($6055|0),($6056|0))|0);
 $6064 = (getTempRet0() | 0);
 $6065 = $45;
 $6066 = $6065;
 HEAP32[$6066>>2] = $6063;
 $6067 = (($6065) + 4)|0;
 $6068 = $6067;
 HEAP32[$6068>>2] = $6064;
 $6069 = $56;
 $6070 = $6069;
 $6071 = HEAP32[$6070>>2]|0;
 $6072 = (($6069) + 4)|0;
 $6073 = $6072;
 $6074 = HEAP32[$6073>>2]|0;
 $6075 = (___muldi3(($6071|0),($6074|0),654183,0)|0);
 $6076 = (getTempRet0() | 0);
 $6077 = $46;
 $6078 = $6077;
 $6079 = HEAP32[$6078>>2]|0;
 $6080 = (($6077) + 4)|0;
 $6081 = $6080;
 $6082 = HEAP32[$6081>>2]|0;
 $6083 = (_i64Add(($6079|0),($6082|0),($6075|0),($6076|0))|0);
 $6084 = (getTempRet0() | 0);
 $6085 = $46;
 $6086 = $6085;
 HEAP32[$6086>>2] = $6083;
 $6087 = (($6085) + 4)|0;
 $6088 = $6087;
 HEAP32[$6088>>2] = $6084;
 $6089 = $56;
 $6090 = $6089;
 $6091 = HEAP32[$6090>>2]|0;
 $6092 = (($6089) + 4)|0;
 $6093 = $6092;
 $6094 = HEAP32[$6093>>2]|0;
 $6095 = (___muldi3(($6091|0),($6094|0),997805,0)|0);
 $6096 = (getTempRet0() | 0);
 $6097 = $47;
 $6098 = $6097;
 $6099 = HEAP32[$6098>>2]|0;
 $6100 = (($6097) + 4)|0;
 $6101 = $6100;
 $6102 = HEAP32[$6101>>2]|0;
 $6103 = (_i64Subtract(($6099|0),($6102|0),($6095|0),($6096|0))|0);
 $6104 = (getTempRet0() | 0);
 $6105 = $47;
 $6106 = $6105;
 HEAP32[$6106>>2] = $6103;
 $6107 = (($6105) + 4)|0;
 $6108 = $6107;
 HEAP32[$6108>>2] = $6104;
 $6109 = $56;
 $6110 = $6109;
 $6111 = HEAP32[$6110>>2]|0;
 $6112 = (($6109) + 4)|0;
 $6113 = $6112;
 $6114 = HEAP32[$6113>>2]|0;
 $6115 = (___muldi3(($6111|0),($6114|0),136657,0)|0);
 $6116 = (getTempRet0() | 0);
 $6117 = $48;
 $6118 = $6117;
 $6119 = HEAP32[$6118>>2]|0;
 $6120 = (($6117) + 4)|0;
 $6121 = $6120;
 $6122 = HEAP32[$6121>>2]|0;
 $6123 = (_i64Add(($6119|0),($6122|0),($6115|0),($6116|0))|0);
 $6124 = (getTempRet0() | 0);
 $6125 = $48;
 $6126 = $6125;
 HEAP32[$6126>>2] = $6123;
 $6127 = (($6125) + 4)|0;
 $6128 = $6127;
 HEAP32[$6128>>2] = $6124;
 $6129 = $56;
 $6130 = $6129;
 $6131 = HEAP32[$6130>>2]|0;
 $6132 = (($6129) + 4)|0;
 $6133 = $6132;
 $6134 = HEAP32[$6133>>2]|0;
 $6135 = (___muldi3(($6131|0),($6134|0),683901,0)|0);
 $6136 = (getTempRet0() | 0);
 $6137 = $49;
 $6138 = $6137;
 $6139 = HEAP32[$6138>>2]|0;
 $6140 = (($6137) + 4)|0;
 $6141 = $6140;
 $6142 = HEAP32[$6141>>2]|0;
 $6143 = (_i64Subtract(($6139|0),($6142|0),($6135|0),($6136|0))|0);
 $6144 = (getTempRet0() | 0);
 $6145 = $49;
 $6146 = $6145;
 HEAP32[$6146>>2] = $6143;
 $6147 = (($6145) + 4)|0;
 $6148 = $6147;
 HEAP32[$6148>>2] = $6144;
 $6149 = $56;
 $6150 = $6149;
 HEAP32[$6150>>2] = 0;
 $6151 = (($6149) + 4)|0;
 $6152 = $6151;
 HEAP32[$6152>>2] = 0;
 $6153 = $44;
 $6154 = $6153;
 $6155 = HEAP32[$6154>>2]|0;
 $6156 = (($6153) + 4)|0;
 $6157 = $6156;
 $6158 = HEAP32[$6157>>2]|0;
 $6159 = (_i64Add(($6155|0),($6158|0),1048576,0)|0);
 $6160 = (getTempRet0() | 0);
 $6161 = (_bitshift64Ashr(($6159|0),($6160|0),21)|0);
 $6162 = (getTempRet0() | 0);
 $6163 = $68;
 $6164 = $6163;
 HEAP32[$6164>>2] = $6161;
 $6165 = (($6163) + 4)|0;
 $6166 = $6165;
 HEAP32[$6166>>2] = $6162;
 $6167 = $68;
 $6168 = $6167;
 $6169 = HEAP32[$6168>>2]|0;
 $6170 = (($6167) + 4)|0;
 $6171 = $6170;
 $6172 = HEAP32[$6171>>2]|0;
 $6173 = $45;
 $6174 = $6173;
 $6175 = HEAP32[$6174>>2]|0;
 $6176 = (($6173) + 4)|0;
 $6177 = $6176;
 $6178 = HEAP32[$6177>>2]|0;
 $6179 = (_i64Add(($6175|0),($6178|0),($6169|0),($6172|0))|0);
 $6180 = (getTempRet0() | 0);
 $6181 = $45;
 $6182 = $6181;
 HEAP32[$6182>>2] = $6179;
 $6183 = (($6181) + 4)|0;
 $6184 = $6183;
 HEAP32[$6184>>2] = $6180;
 $6185 = $68;
 $6186 = $6185;
 $6187 = HEAP32[$6186>>2]|0;
 $6188 = (($6185) + 4)|0;
 $6189 = $6188;
 $6190 = HEAP32[$6189>>2]|0;
 $6191 = (_bitshift64Shl(($6187|0),($6190|0),21)|0);
 $6192 = (getTempRet0() | 0);
 $6193 = $44;
 $6194 = $6193;
 $6195 = HEAP32[$6194>>2]|0;
 $6196 = (($6193) + 4)|0;
 $6197 = $6196;
 $6198 = HEAP32[$6197>>2]|0;
 $6199 = (_i64Subtract(($6195|0),($6198|0),($6191|0),($6192|0))|0);
 $6200 = (getTempRet0() | 0);
 $6201 = $44;
 $6202 = $6201;
 HEAP32[$6202>>2] = $6199;
 $6203 = (($6201) + 4)|0;
 $6204 = $6203;
 HEAP32[$6204>>2] = $6200;
 $6205 = $46;
 $6206 = $6205;
 $6207 = HEAP32[$6206>>2]|0;
 $6208 = (($6205) + 4)|0;
 $6209 = $6208;
 $6210 = HEAP32[$6209>>2]|0;
 $6211 = (_i64Add(($6207|0),($6210|0),1048576,0)|0);
 $6212 = (getTempRet0() | 0);
 $6213 = (_bitshift64Ashr(($6211|0),($6212|0),21)|0);
 $6214 = (getTempRet0() | 0);
 $6215 = $70;
 $6216 = $6215;
 HEAP32[$6216>>2] = $6213;
 $6217 = (($6215) + 4)|0;
 $6218 = $6217;
 HEAP32[$6218>>2] = $6214;
 $6219 = $70;
 $6220 = $6219;
 $6221 = HEAP32[$6220>>2]|0;
 $6222 = (($6219) + 4)|0;
 $6223 = $6222;
 $6224 = HEAP32[$6223>>2]|0;
 $6225 = $47;
 $6226 = $6225;
 $6227 = HEAP32[$6226>>2]|0;
 $6228 = (($6225) + 4)|0;
 $6229 = $6228;
 $6230 = HEAP32[$6229>>2]|0;
 $6231 = (_i64Add(($6227|0),($6230|0),($6221|0),($6224|0))|0);
 $6232 = (getTempRet0() | 0);
 $6233 = $47;
 $6234 = $6233;
 HEAP32[$6234>>2] = $6231;
 $6235 = (($6233) + 4)|0;
 $6236 = $6235;
 HEAP32[$6236>>2] = $6232;
 $6237 = $70;
 $6238 = $6237;
 $6239 = HEAP32[$6238>>2]|0;
 $6240 = (($6237) + 4)|0;
 $6241 = $6240;
 $6242 = HEAP32[$6241>>2]|0;
 $6243 = (_bitshift64Shl(($6239|0),($6242|0),21)|0);
 $6244 = (getTempRet0() | 0);
 $6245 = $46;
 $6246 = $6245;
 $6247 = HEAP32[$6246>>2]|0;
 $6248 = (($6245) + 4)|0;
 $6249 = $6248;
 $6250 = HEAP32[$6249>>2]|0;
 $6251 = (_i64Subtract(($6247|0),($6250|0),($6243|0),($6244|0))|0);
 $6252 = (getTempRet0() | 0);
 $6253 = $46;
 $6254 = $6253;
 HEAP32[$6254>>2] = $6251;
 $6255 = (($6253) + 4)|0;
 $6256 = $6255;
 HEAP32[$6256>>2] = $6252;
 $6257 = $48;
 $6258 = $6257;
 $6259 = HEAP32[$6258>>2]|0;
 $6260 = (($6257) + 4)|0;
 $6261 = $6260;
 $6262 = HEAP32[$6261>>2]|0;
 $6263 = (_i64Add(($6259|0),($6262|0),1048576,0)|0);
 $6264 = (getTempRet0() | 0);
 $6265 = (_bitshift64Ashr(($6263|0),($6264|0),21)|0);
 $6266 = (getTempRet0() | 0);
 $6267 = $72;
 $6268 = $6267;
 HEAP32[$6268>>2] = $6265;
 $6269 = (($6267) + 4)|0;
 $6270 = $6269;
 HEAP32[$6270>>2] = $6266;
 $6271 = $72;
 $6272 = $6271;
 $6273 = HEAP32[$6272>>2]|0;
 $6274 = (($6271) + 4)|0;
 $6275 = $6274;
 $6276 = HEAP32[$6275>>2]|0;
 $6277 = $49;
 $6278 = $6277;
 $6279 = HEAP32[$6278>>2]|0;
 $6280 = (($6277) + 4)|0;
 $6281 = $6280;
 $6282 = HEAP32[$6281>>2]|0;
 $6283 = (_i64Add(($6279|0),($6282|0),($6273|0),($6276|0))|0);
 $6284 = (getTempRet0() | 0);
 $6285 = $49;
 $6286 = $6285;
 HEAP32[$6286>>2] = $6283;
 $6287 = (($6285) + 4)|0;
 $6288 = $6287;
 HEAP32[$6288>>2] = $6284;
 $6289 = $72;
 $6290 = $6289;
 $6291 = HEAP32[$6290>>2]|0;
 $6292 = (($6289) + 4)|0;
 $6293 = $6292;
 $6294 = HEAP32[$6293>>2]|0;
 $6295 = (_bitshift64Shl(($6291|0),($6294|0),21)|0);
 $6296 = (getTempRet0() | 0);
 $6297 = $48;
 $6298 = $6297;
 $6299 = HEAP32[$6298>>2]|0;
 $6300 = (($6297) + 4)|0;
 $6301 = $6300;
 $6302 = HEAP32[$6301>>2]|0;
 $6303 = (_i64Subtract(($6299|0),($6302|0),($6295|0),($6296|0))|0);
 $6304 = (getTempRet0() | 0);
 $6305 = $48;
 $6306 = $6305;
 HEAP32[$6306>>2] = $6303;
 $6307 = (($6305) + 4)|0;
 $6308 = $6307;
 HEAP32[$6308>>2] = $6304;
 $6309 = $50;
 $6310 = $6309;
 $6311 = HEAP32[$6310>>2]|0;
 $6312 = (($6309) + 4)|0;
 $6313 = $6312;
 $6314 = HEAP32[$6313>>2]|0;
 $6315 = (_i64Add(($6311|0),($6314|0),1048576,0)|0);
 $6316 = (getTempRet0() | 0);
 $6317 = (_bitshift64Ashr(($6315|0),($6316|0),21)|0);
 $6318 = (getTempRet0() | 0);
 $6319 = $74;
 $6320 = $6319;
 HEAP32[$6320>>2] = $6317;
 $6321 = (($6319) + 4)|0;
 $6322 = $6321;
 HEAP32[$6322>>2] = $6318;
 $6323 = $74;
 $6324 = $6323;
 $6325 = HEAP32[$6324>>2]|0;
 $6326 = (($6323) + 4)|0;
 $6327 = $6326;
 $6328 = HEAP32[$6327>>2]|0;
 $6329 = $51;
 $6330 = $6329;
 $6331 = HEAP32[$6330>>2]|0;
 $6332 = (($6329) + 4)|0;
 $6333 = $6332;
 $6334 = HEAP32[$6333>>2]|0;
 $6335 = (_i64Add(($6331|0),($6334|0),($6325|0),($6328|0))|0);
 $6336 = (getTempRet0() | 0);
 $6337 = $51;
 $6338 = $6337;
 HEAP32[$6338>>2] = $6335;
 $6339 = (($6337) + 4)|0;
 $6340 = $6339;
 HEAP32[$6340>>2] = $6336;
 $6341 = $74;
 $6342 = $6341;
 $6343 = HEAP32[$6342>>2]|0;
 $6344 = (($6341) + 4)|0;
 $6345 = $6344;
 $6346 = HEAP32[$6345>>2]|0;
 $6347 = (_bitshift64Shl(($6343|0),($6346|0),21)|0);
 $6348 = (getTempRet0() | 0);
 $6349 = $50;
 $6350 = $6349;
 $6351 = HEAP32[$6350>>2]|0;
 $6352 = (($6349) + 4)|0;
 $6353 = $6352;
 $6354 = HEAP32[$6353>>2]|0;
 $6355 = (_i64Subtract(($6351|0),($6354|0),($6347|0),($6348|0))|0);
 $6356 = (getTempRet0() | 0);
 $6357 = $50;
 $6358 = $6357;
 HEAP32[$6358>>2] = $6355;
 $6359 = (($6357) + 4)|0;
 $6360 = $6359;
 HEAP32[$6360>>2] = $6356;
 $6361 = $52;
 $6362 = $6361;
 $6363 = HEAP32[$6362>>2]|0;
 $6364 = (($6361) + 4)|0;
 $6365 = $6364;
 $6366 = HEAP32[$6365>>2]|0;
 $6367 = (_i64Add(($6363|0),($6366|0),1048576,0)|0);
 $6368 = (getTempRet0() | 0);
 $6369 = (_bitshift64Ashr(($6367|0),($6368|0),21)|0);
 $6370 = (getTempRet0() | 0);
 $6371 = $76;
 $6372 = $6371;
 HEAP32[$6372>>2] = $6369;
 $6373 = (($6371) + 4)|0;
 $6374 = $6373;
 HEAP32[$6374>>2] = $6370;
 $6375 = $76;
 $6376 = $6375;
 $6377 = HEAP32[$6376>>2]|0;
 $6378 = (($6375) + 4)|0;
 $6379 = $6378;
 $6380 = HEAP32[$6379>>2]|0;
 $6381 = $53;
 $6382 = $6381;
 $6383 = HEAP32[$6382>>2]|0;
 $6384 = (($6381) + 4)|0;
 $6385 = $6384;
 $6386 = HEAP32[$6385>>2]|0;
 $6387 = (_i64Add(($6383|0),($6386|0),($6377|0),($6380|0))|0);
 $6388 = (getTempRet0() | 0);
 $6389 = $53;
 $6390 = $6389;
 HEAP32[$6390>>2] = $6387;
 $6391 = (($6389) + 4)|0;
 $6392 = $6391;
 HEAP32[$6392>>2] = $6388;
 $6393 = $76;
 $6394 = $6393;
 $6395 = HEAP32[$6394>>2]|0;
 $6396 = (($6393) + 4)|0;
 $6397 = $6396;
 $6398 = HEAP32[$6397>>2]|0;
 $6399 = (_bitshift64Shl(($6395|0),($6398|0),21)|0);
 $6400 = (getTempRet0() | 0);
 $6401 = $52;
 $6402 = $6401;
 $6403 = HEAP32[$6402>>2]|0;
 $6404 = (($6401) + 4)|0;
 $6405 = $6404;
 $6406 = HEAP32[$6405>>2]|0;
 $6407 = (_i64Subtract(($6403|0),($6406|0),($6399|0),($6400|0))|0);
 $6408 = (getTempRet0() | 0);
 $6409 = $52;
 $6410 = $6409;
 HEAP32[$6410>>2] = $6407;
 $6411 = (($6409) + 4)|0;
 $6412 = $6411;
 HEAP32[$6412>>2] = $6408;
 $6413 = $54;
 $6414 = $6413;
 $6415 = HEAP32[$6414>>2]|0;
 $6416 = (($6413) + 4)|0;
 $6417 = $6416;
 $6418 = HEAP32[$6417>>2]|0;
 $6419 = (_i64Add(($6415|0),($6418|0),1048576,0)|0);
 $6420 = (getTempRet0() | 0);
 $6421 = (_bitshift64Ashr(($6419|0),($6420|0),21)|0);
 $6422 = (getTempRet0() | 0);
 $6423 = $78;
 $6424 = $6423;
 HEAP32[$6424>>2] = $6421;
 $6425 = (($6423) + 4)|0;
 $6426 = $6425;
 HEAP32[$6426>>2] = $6422;
 $6427 = $78;
 $6428 = $6427;
 $6429 = HEAP32[$6428>>2]|0;
 $6430 = (($6427) + 4)|0;
 $6431 = $6430;
 $6432 = HEAP32[$6431>>2]|0;
 $6433 = $55;
 $6434 = $6433;
 $6435 = HEAP32[$6434>>2]|0;
 $6436 = (($6433) + 4)|0;
 $6437 = $6436;
 $6438 = HEAP32[$6437>>2]|0;
 $6439 = (_i64Add(($6435|0),($6438|0),($6429|0),($6432|0))|0);
 $6440 = (getTempRet0() | 0);
 $6441 = $55;
 $6442 = $6441;
 HEAP32[$6442>>2] = $6439;
 $6443 = (($6441) + 4)|0;
 $6444 = $6443;
 HEAP32[$6444>>2] = $6440;
 $6445 = $78;
 $6446 = $6445;
 $6447 = HEAP32[$6446>>2]|0;
 $6448 = (($6445) + 4)|0;
 $6449 = $6448;
 $6450 = HEAP32[$6449>>2]|0;
 $6451 = (_bitshift64Shl(($6447|0),($6450|0),21)|0);
 $6452 = (getTempRet0() | 0);
 $6453 = $54;
 $6454 = $6453;
 $6455 = HEAP32[$6454>>2]|0;
 $6456 = (($6453) + 4)|0;
 $6457 = $6456;
 $6458 = HEAP32[$6457>>2]|0;
 $6459 = (_i64Subtract(($6455|0),($6458|0),($6451|0),($6452|0))|0);
 $6460 = (getTempRet0() | 0);
 $6461 = $54;
 $6462 = $6461;
 HEAP32[$6462>>2] = $6459;
 $6463 = (($6461) + 4)|0;
 $6464 = $6463;
 HEAP32[$6464>>2] = $6460;
 $6465 = $45;
 $6466 = $6465;
 $6467 = HEAP32[$6466>>2]|0;
 $6468 = (($6465) + 4)|0;
 $6469 = $6468;
 $6470 = HEAP32[$6469>>2]|0;
 $6471 = (_i64Add(($6467|0),($6470|0),1048576,0)|0);
 $6472 = (getTempRet0() | 0);
 $6473 = (_bitshift64Ashr(($6471|0),($6472|0),21)|0);
 $6474 = (getTempRet0() | 0);
 $6475 = $69;
 $6476 = $6475;
 HEAP32[$6476>>2] = $6473;
 $6477 = (($6475) + 4)|0;
 $6478 = $6477;
 HEAP32[$6478>>2] = $6474;
 $6479 = $69;
 $6480 = $6479;
 $6481 = HEAP32[$6480>>2]|0;
 $6482 = (($6479) + 4)|0;
 $6483 = $6482;
 $6484 = HEAP32[$6483>>2]|0;
 $6485 = $46;
 $6486 = $6485;
 $6487 = HEAP32[$6486>>2]|0;
 $6488 = (($6485) + 4)|0;
 $6489 = $6488;
 $6490 = HEAP32[$6489>>2]|0;
 $6491 = (_i64Add(($6487|0),($6490|0),($6481|0),($6484|0))|0);
 $6492 = (getTempRet0() | 0);
 $6493 = $46;
 $6494 = $6493;
 HEAP32[$6494>>2] = $6491;
 $6495 = (($6493) + 4)|0;
 $6496 = $6495;
 HEAP32[$6496>>2] = $6492;
 $6497 = $69;
 $6498 = $6497;
 $6499 = HEAP32[$6498>>2]|0;
 $6500 = (($6497) + 4)|0;
 $6501 = $6500;
 $6502 = HEAP32[$6501>>2]|0;
 $6503 = (_bitshift64Shl(($6499|0),($6502|0),21)|0);
 $6504 = (getTempRet0() | 0);
 $6505 = $45;
 $6506 = $6505;
 $6507 = HEAP32[$6506>>2]|0;
 $6508 = (($6505) + 4)|0;
 $6509 = $6508;
 $6510 = HEAP32[$6509>>2]|0;
 $6511 = (_i64Subtract(($6507|0),($6510|0),($6503|0),($6504|0))|0);
 $6512 = (getTempRet0() | 0);
 $6513 = $45;
 $6514 = $6513;
 HEAP32[$6514>>2] = $6511;
 $6515 = (($6513) + 4)|0;
 $6516 = $6515;
 HEAP32[$6516>>2] = $6512;
 $6517 = $47;
 $6518 = $6517;
 $6519 = HEAP32[$6518>>2]|0;
 $6520 = (($6517) + 4)|0;
 $6521 = $6520;
 $6522 = HEAP32[$6521>>2]|0;
 $6523 = (_i64Add(($6519|0),($6522|0),1048576,0)|0);
 $6524 = (getTempRet0() | 0);
 $6525 = (_bitshift64Ashr(($6523|0),($6524|0),21)|0);
 $6526 = (getTempRet0() | 0);
 $6527 = $71;
 $6528 = $6527;
 HEAP32[$6528>>2] = $6525;
 $6529 = (($6527) + 4)|0;
 $6530 = $6529;
 HEAP32[$6530>>2] = $6526;
 $6531 = $71;
 $6532 = $6531;
 $6533 = HEAP32[$6532>>2]|0;
 $6534 = (($6531) + 4)|0;
 $6535 = $6534;
 $6536 = HEAP32[$6535>>2]|0;
 $6537 = $48;
 $6538 = $6537;
 $6539 = HEAP32[$6538>>2]|0;
 $6540 = (($6537) + 4)|0;
 $6541 = $6540;
 $6542 = HEAP32[$6541>>2]|0;
 $6543 = (_i64Add(($6539|0),($6542|0),($6533|0),($6536|0))|0);
 $6544 = (getTempRet0() | 0);
 $6545 = $48;
 $6546 = $6545;
 HEAP32[$6546>>2] = $6543;
 $6547 = (($6545) + 4)|0;
 $6548 = $6547;
 HEAP32[$6548>>2] = $6544;
 $6549 = $71;
 $6550 = $6549;
 $6551 = HEAP32[$6550>>2]|0;
 $6552 = (($6549) + 4)|0;
 $6553 = $6552;
 $6554 = HEAP32[$6553>>2]|0;
 $6555 = (_bitshift64Shl(($6551|0),($6554|0),21)|0);
 $6556 = (getTempRet0() | 0);
 $6557 = $47;
 $6558 = $6557;
 $6559 = HEAP32[$6558>>2]|0;
 $6560 = (($6557) + 4)|0;
 $6561 = $6560;
 $6562 = HEAP32[$6561>>2]|0;
 $6563 = (_i64Subtract(($6559|0),($6562|0),($6555|0),($6556|0))|0);
 $6564 = (getTempRet0() | 0);
 $6565 = $47;
 $6566 = $6565;
 HEAP32[$6566>>2] = $6563;
 $6567 = (($6565) + 4)|0;
 $6568 = $6567;
 HEAP32[$6568>>2] = $6564;
 $6569 = $49;
 $6570 = $6569;
 $6571 = HEAP32[$6570>>2]|0;
 $6572 = (($6569) + 4)|0;
 $6573 = $6572;
 $6574 = HEAP32[$6573>>2]|0;
 $6575 = (_i64Add(($6571|0),($6574|0),1048576,0)|0);
 $6576 = (getTempRet0() | 0);
 $6577 = (_bitshift64Ashr(($6575|0),($6576|0),21)|0);
 $6578 = (getTempRet0() | 0);
 $6579 = $73;
 $6580 = $6579;
 HEAP32[$6580>>2] = $6577;
 $6581 = (($6579) + 4)|0;
 $6582 = $6581;
 HEAP32[$6582>>2] = $6578;
 $6583 = $73;
 $6584 = $6583;
 $6585 = HEAP32[$6584>>2]|0;
 $6586 = (($6583) + 4)|0;
 $6587 = $6586;
 $6588 = HEAP32[$6587>>2]|0;
 $6589 = $50;
 $6590 = $6589;
 $6591 = HEAP32[$6590>>2]|0;
 $6592 = (($6589) + 4)|0;
 $6593 = $6592;
 $6594 = HEAP32[$6593>>2]|0;
 $6595 = (_i64Add(($6591|0),($6594|0),($6585|0),($6588|0))|0);
 $6596 = (getTempRet0() | 0);
 $6597 = $50;
 $6598 = $6597;
 HEAP32[$6598>>2] = $6595;
 $6599 = (($6597) + 4)|0;
 $6600 = $6599;
 HEAP32[$6600>>2] = $6596;
 $6601 = $73;
 $6602 = $6601;
 $6603 = HEAP32[$6602>>2]|0;
 $6604 = (($6601) + 4)|0;
 $6605 = $6604;
 $6606 = HEAP32[$6605>>2]|0;
 $6607 = (_bitshift64Shl(($6603|0),($6606|0),21)|0);
 $6608 = (getTempRet0() | 0);
 $6609 = $49;
 $6610 = $6609;
 $6611 = HEAP32[$6610>>2]|0;
 $6612 = (($6609) + 4)|0;
 $6613 = $6612;
 $6614 = HEAP32[$6613>>2]|0;
 $6615 = (_i64Subtract(($6611|0),($6614|0),($6607|0),($6608|0))|0);
 $6616 = (getTempRet0() | 0);
 $6617 = $49;
 $6618 = $6617;
 HEAP32[$6618>>2] = $6615;
 $6619 = (($6617) + 4)|0;
 $6620 = $6619;
 HEAP32[$6620>>2] = $6616;
 $6621 = $51;
 $6622 = $6621;
 $6623 = HEAP32[$6622>>2]|0;
 $6624 = (($6621) + 4)|0;
 $6625 = $6624;
 $6626 = HEAP32[$6625>>2]|0;
 $6627 = (_i64Add(($6623|0),($6626|0),1048576,0)|0);
 $6628 = (getTempRet0() | 0);
 $6629 = (_bitshift64Ashr(($6627|0),($6628|0),21)|0);
 $6630 = (getTempRet0() | 0);
 $6631 = $75;
 $6632 = $6631;
 HEAP32[$6632>>2] = $6629;
 $6633 = (($6631) + 4)|0;
 $6634 = $6633;
 HEAP32[$6634>>2] = $6630;
 $6635 = $75;
 $6636 = $6635;
 $6637 = HEAP32[$6636>>2]|0;
 $6638 = (($6635) + 4)|0;
 $6639 = $6638;
 $6640 = HEAP32[$6639>>2]|0;
 $6641 = $52;
 $6642 = $6641;
 $6643 = HEAP32[$6642>>2]|0;
 $6644 = (($6641) + 4)|0;
 $6645 = $6644;
 $6646 = HEAP32[$6645>>2]|0;
 $6647 = (_i64Add(($6643|0),($6646|0),($6637|0),($6640|0))|0);
 $6648 = (getTempRet0() | 0);
 $6649 = $52;
 $6650 = $6649;
 HEAP32[$6650>>2] = $6647;
 $6651 = (($6649) + 4)|0;
 $6652 = $6651;
 HEAP32[$6652>>2] = $6648;
 $6653 = $75;
 $6654 = $6653;
 $6655 = HEAP32[$6654>>2]|0;
 $6656 = (($6653) + 4)|0;
 $6657 = $6656;
 $6658 = HEAP32[$6657>>2]|0;
 $6659 = (_bitshift64Shl(($6655|0),($6658|0),21)|0);
 $6660 = (getTempRet0() | 0);
 $6661 = $51;
 $6662 = $6661;
 $6663 = HEAP32[$6662>>2]|0;
 $6664 = (($6661) + 4)|0;
 $6665 = $6664;
 $6666 = HEAP32[$6665>>2]|0;
 $6667 = (_i64Subtract(($6663|0),($6666|0),($6659|0),($6660|0))|0);
 $6668 = (getTempRet0() | 0);
 $6669 = $51;
 $6670 = $6669;
 HEAP32[$6670>>2] = $6667;
 $6671 = (($6669) + 4)|0;
 $6672 = $6671;
 HEAP32[$6672>>2] = $6668;
 $6673 = $53;
 $6674 = $6673;
 $6675 = HEAP32[$6674>>2]|0;
 $6676 = (($6673) + 4)|0;
 $6677 = $6676;
 $6678 = HEAP32[$6677>>2]|0;
 $6679 = (_i64Add(($6675|0),($6678|0),1048576,0)|0);
 $6680 = (getTempRet0() | 0);
 $6681 = (_bitshift64Ashr(($6679|0),($6680|0),21)|0);
 $6682 = (getTempRet0() | 0);
 $6683 = $77;
 $6684 = $6683;
 HEAP32[$6684>>2] = $6681;
 $6685 = (($6683) + 4)|0;
 $6686 = $6685;
 HEAP32[$6686>>2] = $6682;
 $6687 = $77;
 $6688 = $6687;
 $6689 = HEAP32[$6688>>2]|0;
 $6690 = (($6687) + 4)|0;
 $6691 = $6690;
 $6692 = HEAP32[$6691>>2]|0;
 $6693 = $54;
 $6694 = $6693;
 $6695 = HEAP32[$6694>>2]|0;
 $6696 = (($6693) + 4)|0;
 $6697 = $6696;
 $6698 = HEAP32[$6697>>2]|0;
 $6699 = (_i64Add(($6695|0),($6698|0),($6689|0),($6692|0))|0);
 $6700 = (getTempRet0() | 0);
 $6701 = $54;
 $6702 = $6701;
 HEAP32[$6702>>2] = $6699;
 $6703 = (($6701) + 4)|0;
 $6704 = $6703;
 HEAP32[$6704>>2] = $6700;
 $6705 = $77;
 $6706 = $6705;
 $6707 = HEAP32[$6706>>2]|0;
 $6708 = (($6705) + 4)|0;
 $6709 = $6708;
 $6710 = HEAP32[$6709>>2]|0;
 $6711 = (_bitshift64Shl(($6707|0),($6710|0),21)|0);
 $6712 = (getTempRet0() | 0);
 $6713 = $53;
 $6714 = $6713;
 $6715 = HEAP32[$6714>>2]|0;
 $6716 = (($6713) + 4)|0;
 $6717 = $6716;
 $6718 = HEAP32[$6717>>2]|0;
 $6719 = (_i64Subtract(($6715|0),($6718|0),($6711|0),($6712|0))|0);
 $6720 = (getTempRet0() | 0);
 $6721 = $53;
 $6722 = $6721;
 HEAP32[$6722>>2] = $6719;
 $6723 = (($6721) + 4)|0;
 $6724 = $6723;
 HEAP32[$6724>>2] = $6720;
 $6725 = $55;
 $6726 = $6725;
 $6727 = HEAP32[$6726>>2]|0;
 $6728 = (($6725) + 4)|0;
 $6729 = $6728;
 $6730 = HEAP32[$6729>>2]|0;
 $6731 = (_i64Add(($6727|0),($6730|0),1048576,0)|0);
 $6732 = (getTempRet0() | 0);
 $6733 = (_bitshift64Ashr(($6731|0),($6732|0),21)|0);
 $6734 = (getTempRet0() | 0);
 $6735 = $79;
 $6736 = $6735;
 HEAP32[$6736>>2] = $6733;
 $6737 = (($6735) + 4)|0;
 $6738 = $6737;
 HEAP32[$6738>>2] = $6734;
 $6739 = $79;
 $6740 = $6739;
 $6741 = HEAP32[$6740>>2]|0;
 $6742 = (($6739) + 4)|0;
 $6743 = $6742;
 $6744 = HEAP32[$6743>>2]|0;
 $6745 = $56;
 $6746 = $6745;
 $6747 = HEAP32[$6746>>2]|0;
 $6748 = (($6745) + 4)|0;
 $6749 = $6748;
 $6750 = HEAP32[$6749>>2]|0;
 $6751 = (_i64Add(($6747|0),($6750|0),($6741|0),($6744|0))|0);
 $6752 = (getTempRet0() | 0);
 $6753 = $56;
 $6754 = $6753;
 HEAP32[$6754>>2] = $6751;
 $6755 = (($6753) + 4)|0;
 $6756 = $6755;
 HEAP32[$6756>>2] = $6752;
 $6757 = $79;
 $6758 = $6757;
 $6759 = HEAP32[$6758>>2]|0;
 $6760 = (($6757) + 4)|0;
 $6761 = $6760;
 $6762 = HEAP32[$6761>>2]|0;
 $6763 = (_bitshift64Shl(($6759|0),($6762|0),21)|0);
 $6764 = (getTempRet0() | 0);
 $6765 = $55;
 $6766 = $6765;
 $6767 = HEAP32[$6766>>2]|0;
 $6768 = (($6765) + 4)|0;
 $6769 = $6768;
 $6770 = HEAP32[$6769>>2]|0;
 $6771 = (_i64Subtract(($6767|0),($6770|0),($6763|0),($6764|0))|0);
 $6772 = (getTempRet0() | 0);
 $6773 = $55;
 $6774 = $6773;
 HEAP32[$6774>>2] = $6771;
 $6775 = (($6773) + 4)|0;
 $6776 = $6775;
 HEAP32[$6776>>2] = $6772;
 $6777 = $56;
 $6778 = $6777;
 $6779 = HEAP32[$6778>>2]|0;
 $6780 = (($6777) + 4)|0;
 $6781 = $6780;
 $6782 = HEAP32[$6781>>2]|0;
 $6783 = (___muldi3(($6779|0),($6782|0),666643,0)|0);
 $6784 = (getTempRet0() | 0);
 $6785 = $44;
 $6786 = $6785;
 $6787 = HEAP32[$6786>>2]|0;
 $6788 = (($6785) + 4)|0;
 $6789 = $6788;
 $6790 = HEAP32[$6789>>2]|0;
 $6791 = (_i64Add(($6787|0),($6790|0),($6783|0),($6784|0))|0);
 $6792 = (getTempRet0() | 0);
 $6793 = $44;
 $6794 = $6793;
 HEAP32[$6794>>2] = $6791;
 $6795 = (($6793) + 4)|0;
 $6796 = $6795;
 HEAP32[$6796>>2] = $6792;
 $6797 = $56;
 $6798 = $6797;
 $6799 = HEAP32[$6798>>2]|0;
 $6800 = (($6797) + 4)|0;
 $6801 = $6800;
 $6802 = HEAP32[$6801>>2]|0;
 $6803 = (___muldi3(($6799|0),($6802|0),470296,0)|0);
 $6804 = (getTempRet0() | 0);
 $6805 = $45;
 $6806 = $6805;
 $6807 = HEAP32[$6806>>2]|0;
 $6808 = (($6805) + 4)|0;
 $6809 = $6808;
 $6810 = HEAP32[$6809>>2]|0;
 $6811 = (_i64Add(($6807|0),($6810|0),($6803|0),($6804|0))|0);
 $6812 = (getTempRet0() | 0);
 $6813 = $45;
 $6814 = $6813;
 HEAP32[$6814>>2] = $6811;
 $6815 = (($6813) + 4)|0;
 $6816 = $6815;
 HEAP32[$6816>>2] = $6812;
 $6817 = $56;
 $6818 = $6817;
 $6819 = HEAP32[$6818>>2]|0;
 $6820 = (($6817) + 4)|0;
 $6821 = $6820;
 $6822 = HEAP32[$6821>>2]|0;
 $6823 = (___muldi3(($6819|0),($6822|0),654183,0)|0);
 $6824 = (getTempRet0() | 0);
 $6825 = $46;
 $6826 = $6825;
 $6827 = HEAP32[$6826>>2]|0;
 $6828 = (($6825) + 4)|0;
 $6829 = $6828;
 $6830 = HEAP32[$6829>>2]|0;
 $6831 = (_i64Add(($6827|0),($6830|0),($6823|0),($6824|0))|0);
 $6832 = (getTempRet0() | 0);
 $6833 = $46;
 $6834 = $6833;
 HEAP32[$6834>>2] = $6831;
 $6835 = (($6833) + 4)|0;
 $6836 = $6835;
 HEAP32[$6836>>2] = $6832;
 $6837 = $56;
 $6838 = $6837;
 $6839 = HEAP32[$6838>>2]|0;
 $6840 = (($6837) + 4)|0;
 $6841 = $6840;
 $6842 = HEAP32[$6841>>2]|0;
 $6843 = (___muldi3(($6839|0),($6842|0),997805,0)|0);
 $6844 = (getTempRet0() | 0);
 $6845 = $47;
 $6846 = $6845;
 $6847 = HEAP32[$6846>>2]|0;
 $6848 = (($6845) + 4)|0;
 $6849 = $6848;
 $6850 = HEAP32[$6849>>2]|0;
 $6851 = (_i64Subtract(($6847|0),($6850|0),($6843|0),($6844|0))|0);
 $6852 = (getTempRet0() | 0);
 $6853 = $47;
 $6854 = $6853;
 HEAP32[$6854>>2] = $6851;
 $6855 = (($6853) + 4)|0;
 $6856 = $6855;
 HEAP32[$6856>>2] = $6852;
 $6857 = $56;
 $6858 = $6857;
 $6859 = HEAP32[$6858>>2]|0;
 $6860 = (($6857) + 4)|0;
 $6861 = $6860;
 $6862 = HEAP32[$6861>>2]|0;
 $6863 = (___muldi3(($6859|0),($6862|0),136657,0)|0);
 $6864 = (getTempRet0() | 0);
 $6865 = $48;
 $6866 = $6865;
 $6867 = HEAP32[$6866>>2]|0;
 $6868 = (($6865) + 4)|0;
 $6869 = $6868;
 $6870 = HEAP32[$6869>>2]|0;
 $6871 = (_i64Add(($6867|0),($6870|0),($6863|0),($6864|0))|0);
 $6872 = (getTempRet0() | 0);
 $6873 = $48;
 $6874 = $6873;
 HEAP32[$6874>>2] = $6871;
 $6875 = (($6873) + 4)|0;
 $6876 = $6875;
 HEAP32[$6876>>2] = $6872;
 $6877 = $56;
 $6878 = $6877;
 $6879 = HEAP32[$6878>>2]|0;
 $6880 = (($6877) + 4)|0;
 $6881 = $6880;
 $6882 = HEAP32[$6881>>2]|0;
 $6883 = (___muldi3(($6879|0),($6882|0),683901,0)|0);
 $6884 = (getTempRet0() | 0);
 $6885 = $49;
 $6886 = $6885;
 $6887 = HEAP32[$6886>>2]|0;
 $6888 = (($6885) + 4)|0;
 $6889 = $6888;
 $6890 = HEAP32[$6889>>2]|0;
 $6891 = (_i64Subtract(($6887|0),($6890|0),($6883|0),($6884|0))|0);
 $6892 = (getTempRet0() | 0);
 $6893 = $49;
 $6894 = $6893;
 HEAP32[$6894>>2] = $6891;
 $6895 = (($6893) + 4)|0;
 $6896 = $6895;
 HEAP32[$6896>>2] = $6892;
 $6897 = $56;
 $6898 = $6897;
 HEAP32[$6898>>2] = 0;
 $6899 = (($6897) + 4)|0;
 $6900 = $6899;
 HEAP32[$6900>>2] = 0;
 $6901 = $44;
 $6902 = $6901;
 $6903 = HEAP32[$6902>>2]|0;
 $6904 = (($6901) + 4)|0;
 $6905 = $6904;
 $6906 = HEAP32[$6905>>2]|0;
 $6907 = (_bitshift64Ashr(($6903|0),($6906|0),21)|0);
 $6908 = (getTempRet0() | 0);
 $6909 = $68;
 $6910 = $6909;
 HEAP32[$6910>>2] = $6907;
 $6911 = (($6909) + 4)|0;
 $6912 = $6911;
 HEAP32[$6912>>2] = $6908;
 $6913 = $68;
 $6914 = $6913;
 $6915 = HEAP32[$6914>>2]|0;
 $6916 = (($6913) + 4)|0;
 $6917 = $6916;
 $6918 = HEAP32[$6917>>2]|0;
 $6919 = $45;
 $6920 = $6919;
 $6921 = HEAP32[$6920>>2]|0;
 $6922 = (($6919) + 4)|0;
 $6923 = $6922;
 $6924 = HEAP32[$6923>>2]|0;
 $6925 = (_i64Add(($6921|0),($6924|0),($6915|0),($6918|0))|0);
 $6926 = (getTempRet0() | 0);
 $6927 = $45;
 $6928 = $6927;
 HEAP32[$6928>>2] = $6925;
 $6929 = (($6927) + 4)|0;
 $6930 = $6929;
 HEAP32[$6930>>2] = $6926;
 $6931 = $68;
 $6932 = $6931;
 $6933 = HEAP32[$6932>>2]|0;
 $6934 = (($6931) + 4)|0;
 $6935 = $6934;
 $6936 = HEAP32[$6935>>2]|0;
 $6937 = (_bitshift64Shl(($6933|0),($6936|0),21)|0);
 $6938 = (getTempRet0() | 0);
 $6939 = $44;
 $6940 = $6939;
 $6941 = HEAP32[$6940>>2]|0;
 $6942 = (($6939) + 4)|0;
 $6943 = $6942;
 $6944 = HEAP32[$6943>>2]|0;
 $6945 = (_i64Subtract(($6941|0),($6944|0),($6937|0),($6938|0))|0);
 $6946 = (getTempRet0() | 0);
 $6947 = $44;
 $6948 = $6947;
 HEAP32[$6948>>2] = $6945;
 $6949 = (($6947) + 4)|0;
 $6950 = $6949;
 HEAP32[$6950>>2] = $6946;
 $6951 = $45;
 $6952 = $6951;
 $6953 = HEAP32[$6952>>2]|0;
 $6954 = (($6951) + 4)|0;
 $6955 = $6954;
 $6956 = HEAP32[$6955>>2]|0;
 $6957 = (_bitshift64Ashr(($6953|0),($6956|0),21)|0);
 $6958 = (getTempRet0() | 0);
 $6959 = $69;
 $6960 = $6959;
 HEAP32[$6960>>2] = $6957;
 $6961 = (($6959) + 4)|0;
 $6962 = $6961;
 HEAP32[$6962>>2] = $6958;
 $6963 = $69;
 $6964 = $6963;
 $6965 = HEAP32[$6964>>2]|0;
 $6966 = (($6963) + 4)|0;
 $6967 = $6966;
 $6968 = HEAP32[$6967>>2]|0;
 $6969 = $46;
 $6970 = $6969;
 $6971 = HEAP32[$6970>>2]|0;
 $6972 = (($6969) + 4)|0;
 $6973 = $6972;
 $6974 = HEAP32[$6973>>2]|0;
 $6975 = (_i64Add(($6971|0),($6974|0),($6965|0),($6968|0))|0);
 $6976 = (getTempRet0() | 0);
 $6977 = $46;
 $6978 = $6977;
 HEAP32[$6978>>2] = $6975;
 $6979 = (($6977) + 4)|0;
 $6980 = $6979;
 HEAP32[$6980>>2] = $6976;
 $6981 = $69;
 $6982 = $6981;
 $6983 = HEAP32[$6982>>2]|0;
 $6984 = (($6981) + 4)|0;
 $6985 = $6984;
 $6986 = HEAP32[$6985>>2]|0;
 $6987 = (_bitshift64Shl(($6983|0),($6986|0),21)|0);
 $6988 = (getTempRet0() | 0);
 $6989 = $45;
 $6990 = $6989;
 $6991 = HEAP32[$6990>>2]|0;
 $6992 = (($6989) + 4)|0;
 $6993 = $6992;
 $6994 = HEAP32[$6993>>2]|0;
 $6995 = (_i64Subtract(($6991|0),($6994|0),($6987|0),($6988|0))|0);
 $6996 = (getTempRet0() | 0);
 $6997 = $45;
 $6998 = $6997;
 HEAP32[$6998>>2] = $6995;
 $6999 = (($6997) + 4)|0;
 $7000 = $6999;
 HEAP32[$7000>>2] = $6996;
 $7001 = $46;
 $7002 = $7001;
 $7003 = HEAP32[$7002>>2]|0;
 $7004 = (($7001) + 4)|0;
 $7005 = $7004;
 $7006 = HEAP32[$7005>>2]|0;
 $7007 = (_bitshift64Ashr(($7003|0),($7006|0),21)|0);
 $7008 = (getTempRet0() | 0);
 $7009 = $70;
 $7010 = $7009;
 HEAP32[$7010>>2] = $7007;
 $7011 = (($7009) + 4)|0;
 $7012 = $7011;
 HEAP32[$7012>>2] = $7008;
 $7013 = $70;
 $7014 = $7013;
 $7015 = HEAP32[$7014>>2]|0;
 $7016 = (($7013) + 4)|0;
 $7017 = $7016;
 $7018 = HEAP32[$7017>>2]|0;
 $7019 = $47;
 $7020 = $7019;
 $7021 = HEAP32[$7020>>2]|0;
 $7022 = (($7019) + 4)|0;
 $7023 = $7022;
 $7024 = HEAP32[$7023>>2]|0;
 $7025 = (_i64Add(($7021|0),($7024|0),($7015|0),($7018|0))|0);
 $7026 = (getTempRet0() | 0);
 $7027 = $47;
 $7028 = $7027;
 HEAP32[$7028>>2] = $7025;
 $7029 = (($7027) + 4)|0;
 $7030 = $7029;
 HEAP32[$7030>>2] = $7026;
 $7031 = $70;
 $7032 = $7031;
 $7033 = HEAP32[$7032>>2]|0;
 $7034 = (($7031) + 4)|0;
 $7035 = $7034;
 $7036 = HEAP32[$7035>>2]|0;
 $7037 = (_bitshift64Shl(($7033|0),($7036|0),21)|0);
 $7038 = (getTempRet0() | 0);
 $7039 = $46;
 $7040 = $7039;
 $7041 = HEAP32[$7040>>2]|0;
 $7042 = (($7039) + 4)|0;
 $7043 = $7042;
 $7044 = HEAP32[$7043>>2]|0;
 $7045 = (_i64Subtract(($7041|0),($7044|0),($7037|0),($7038|0))|0);
 $7046 = (getTempRet0() | 0);
 $7047 = $46;
 $7048 = $7047;
 HEAP32[$7048>>2] = $7045;
 $7049 = (($7047) + 4)|0;
 $7050 = $7049;
 HEAP32[$7050>>2] = $7046;
 $7051 = $47;
 $7052 = $7051;
 $7053 = HEAP32[$7052>>2]|0;
 $7054 = (($7051) + 4)|0;
 $7055 = $7054;
 $7056 = HEAP32[$7055>>2]|0;
 $7057 = (_bitshift64Ashr(($7053|0),($7056|0),21)|0);
 $7058 = (getTempRet0() | 0);
 $7059 = $71;
 $7060 = $7059;
 HEAP32[$7060>>2] = $7057;
 $7061 = (($7059) + 4)|0;
 $7062 = $7061;
 HEAP32[$7062>>2] = $7058;
 $7063 = $71;
 $7064 = $7063;
 $7065 = HEAP32[$7064>>2]|0;
 $7066 = (($7063) + 4)|0;
 $7067 = $7066;
 $7068 = HEAP32[$7067>>2]|0;
 $7069 = $48;
 $7070 = $7069;
 $7071 = HEAP32[$7070>>2]|0;
 $7072 = (($7069) + 4)|0;
 $7073 = $7072;
 $7074 = HEAP32[$7073>>2]|0;
 $7075 = (_i64Add(($7071|0),($7074|0),($7065|0),($7068|0))|0);
 $7076 = (getTempRet0() | 0);
 $7077 = $48;
 $7078 = $7077;
 HEAP32[$7078>>2] = $7075;
 $7079 = (($7077) + 4)|0;
 $7080 = $7079;
 HEAP32[$7080>>2] = $7076;
 $7081 = $71;
 $7082 = $7081;
 $7083 = HEAP32[$7082>>2]|0;
 $7084 = (($7081) + 4)|0;
 $7085 = $7084;
 $7086 = HEAP32[$7085>>2]|0;
 $7087 = (_bitshift64Shl(($7083|0),($7086|0),21)|0);
 $7088 = (getTempRet0() | 0);
 $7089 = $47;
 $7090 = $7089;
 $7091 = HEAP32[$7090>>2]|0;
 $7092 = (($7089) + 4)|0;
 $7093 = $7092;
 $7094 = HEAP32[$7093>>2]|0;
 $7095 = (_i64Subtract(($7091|0),($7094|0),($7087|0),($7088|0))|0);
 $7096 = (getTempRet0() | 0);
 $7097 = $47;
 $7098 = $7097;
 HEAP32[$7098>>2] = $7095;
 $7099 = (($7097) + 4)|0;
 $7100 = $7099;
 HEAP32[$7100>>2] = $7096;
 $7101 = $48;
 $7102 = $7101;
 $7103 = HEAP32[$7102>>2]|0;
 $7104 = (($7101) + 4)|0;
 $7105 = $7104;
 $7106 = HEAP32[$7105>>2]|0;
 $7107 = (_bitshift64Ashr(($7103|0),($7106|0),21)|0);
 $7108 = (getTempRet0() | 0);
 $7109 = $72;
 $7110 = $7109;
 HEAP32[$7110>>2] = $7107;
 $7111 = (($7109) + 4)|0;
 $7112 = $7111;
 HEAP32[$7112>>2] = $7108;
 $7113 = $72;
 $7114 = $7113;
 $7115 = HEAP32[$7114>>2]|0;
 $7116 = (($7113) + 4)|0;
 $7117 = $7116;
 $7118 = HEAP32[$7117>>2]|0;
 $7119 = $49;
 $7120 = $7119;
 $7121 = HEAP32[$7120>>2]|0;
 $7122 = (($7119) + 4)|0;
 $7123 = $7122;
 $7124 = HEAP32[$7123>>2]|0;
 $7125 = (_i64Add(($7121|0),($7124|0),($7115|0),($7118|0))|0);
 $7126 = (getTempRet0() | 0);
 $7127 = $49;
 $7128 = $7127;
 HEAP32[$7128>>2] = $7125;
 $7129 = (($7127) + 4)|0;
 $7130 = $7129;
 HEAP32[$7130>>2] = $7126;
 $7131 = $72;
 $7132 = $7131;
 $7133 = HEAP32[$7132>>2]|0;
 $7134 = (($7131) + 4)|0;
 $7135 = $7134;
 $7136 = HEAP32[$7135>>2]|0;
 $7137 = (_bitshift64Shl(($7133|0),($7136|0),21)|0);
 $7138 = (getTempRet0() | 0);
 $7139 = $48;
 $7140 = $7139;
 $7141 = HEAP32[$7140>>2]|0;
 $7142 = (($7139) + 4)|0;
 $7143 = $7142;
 $7144 = HEAP32[$7143>>2]|0;
 $7145 = (_i64Subtract(($7141|0),($7144|0),($7137|0),($7138|0))|0);
 $7146 = (getTempRet0() | 0);
 $7147 = $48;
 $7148 = $7147;
 HEAP32[$7148>>2] = $7145;
 $7149 = (($7147) + 4)|0;
 $7150 = $7149;
 HEAP32[$7150>>2] = $7146;
 $7151 = $49;
 $7152 = $7151;
 $7153 = HEAP32[$7152>>2]|0;
 $7154 = (($7151) + 4)|0;
 $7155 = $7154;
 $7156 = HEAP32[$7155>>2]|0;
 $7157 = (_bitshift64Ashr(($7153|0),($7156|0),21)|0);
 $7158 = (getTempRet0() | 0);
 $7159 = $73;
 $7160 = $7159;
 HEAP32[$7160>>2] = $7157;
 $7161 = (($7159) + 4)|0;
 $7162 = $7161;
 HEAP32[$7162>>2] = $7158;
 $7163 = $73;
 $7164 = $7163;
 $7165 = HEAP32[$7164>>2]|0;
 $7166 = (($7163) + 4)|0;
 $7167 = $7166;
 $7168 = HEAP32[$7167>>2]|0;
 $7169 = $50;
 $7170 = $7169;
 $7171 = HEAP32[$7170>>2]|0;
 $7172 = (($7169) + 4)|0;
 $7173 = $7172;
 $7174 = HEAP32[$7173>>2]|0;
 $7175 = (_i64Add(($7171|0),($7174|0),($7165|0),($7168|0))|0);
 $7176 = (getTempRet0() | 0);
 $7177 = $50;
 $7178 = $7177;
 HEAP32[$7178>>2] = $7175;
 $7179 = (($7177) + 4)|0;
 $7180 = $7179;
 HEAP32[$7180>>2] = $7176;
 $7181 = $73;
 $7182 = $7181;
 $7183 = HEAP32[$7182>>2]|0;
 $7184 = (($7181) + 4)|0;
 $7185 = $7184;
 $7186 = HEAP32[$7185>>2]|0;
 $7187 = (_bitshift64Shl(($7183|0),($7186|0),21)|0);
 $7188 = (getTempRet0() | 0);
 $7189 = $49;
 $7190 = $7189;
 $7191 = HEAP32[$7190>>2]|0;
 $7192 = (($7189) + 4)|0;
 $7193 = $7192;
 $7194 = HEAP32[$7193>>2]|0;
 $7195 = (_i64Subtract(($7191|0),($7194|0),($7187|0),($7188|0))|0);
 $7196 = (getTempRet0() | 0);
 $7197 = $49;
 $7198 = $7197;
 HEAP32[$7198>>2] = $7195;
 $7199 = (($7197) + 4)|0;
 $7200 = $7199;
 HEAP32[$7200>>2] = $7196;
 $7201 = $50;
 $7202 = $7201;
 $7203 = HEAP32[$7202>>2]|0;
 $7204 = (($7201) + 4)|0;
 $7205 = $7204;
 $7206 = HEAP32[$7205>>2]|0;
 $7207 = (_bitshift64Ashr(($7203|0),($7206|0),21)|0);
 $7208 = (getTempRet0() | 0);
 $7209 = $74;
 $7210 = $7209;
 HEAP32[$7210>>2] = $7207;
 $7211 = (($7209) + 4)|0;
 $7212 = $7211;
 HEAP32[$7212>>2] = $7208;
 $7213 = $74;
 $7214 = $7213;
 $7215 = HEAP32[$7214>>2]|0;
 $7216 = (($7213) + 4)|0;
 $7217 = $7216;
 $7218 = HEAP32[$7217>>2]|0;
 $7219 = $51;
 $7220 = $7219;
 $7221 = HEAP32[$7220>>2]|0;
 $7222 = (($7219) + 4)|0;
 $7223 = $7222;
 $7224 = HEAP32[$7223>>2]|0;
 $7225 = (_i64Add(($7221|0),($7224|0),($7215|0),($7218|0))|0);
 $7226 = (getTempRet0() | 0);
 $7227 = $51;
 $7228 = $7227;
 HEAP32[$7228>>2] = $7225;
 $7229 = (($7227) + 4)|0;
 $7230 = $7229;
 HEAP32[$7230>>2] = $7226;
 $7231 = $74;
 $7232 = $7231;
 $7233 = HEAP32[$7232>>2]|0;
 $7234 = (($7231) + 4)|0;
 $7235 = $7234;
 $7236 = HEAP32[$7235>>2]|0;
 $7237 = (_bitshift64Shl(($7233|0),($7236|0),21)|0);
 $7238 = (getTempRet0() | 0);
 $7239 = $50;
 $7240 = $7239;
 $7241 = HEAP32[$7240>>2]|0;
 $7242 = (($7239) + 4)|0;
 $7243 = $7242;
 $7244 = HEAP32[$7243>>2]|0;
 $7245 = (_i64Subtract(($7241|0),($7244|0),($7237|0),($7238|0))|0);
 $7246 = (getTempRet0() | 0);
 $7247 = $50;
 $7248 = $7247;
 HEAP32[$7248>>2] = $7245;
 $7249 = (($7247) + 4)|0;
 $7250 = $7249;
 HEAP32[$7250>>2] = $7246;
 $7251 = $51;
 $7252 = $7251;
 $7253 = HEAP32[$7252>>2]|0;
 $7254 = (($7251) + 4)|0;
 $7255 = $7254;
 $7256 = HEAP32[$7255>>2]|0;
 $7257 = (_bitshift64Ashr(($7253|0),($7256|0),21)|0);
 $7258 = (getTempRet0() | 0);
 $7259 = $75;
 $7260 = $7259;
 HEAP32[$7260>>2] = $7257;
 $7261 = (($7259) + 4)|0;
 $7262 = $7261;
 HEAP32[$7262>>2] = $7258;
 $7263 = $75;
 $7264 = $7263;
 $7265 = HEAP32[$7264>>2]|0;
 $7266 = (($7263) + 4)|0;
 $7267 = $7266;
 $7268 = HEAP32[$7267>>2]|0;
 $7269 = $52;
 $7270 = $7269;
 $7271 = HEAP32[$7270>>2]|0;
 $7272 = (($7269) + 4)|0;
 $7273 = $7272;
 $7274 = HEAP32[$7273>>2]|0;
 $7275 = (_i64Add(($7271|0),($7274|0),($7265|0),($7268|0))|0);
 $7276 = (getTempRet0() | 0);
 $7277 = $52;
 $7278 = $7277;
 HEAP32[$7278>>2] = $7275;
 $7279 = (($7277) + 4)|0;
 $7280 = $7279;
 HEAP32[$7280>>2] = $7276;
 $7281 = $75;
 $7282 = $7281;
 $7283 = HEAP32[$7282>>2]|0;
 $7284 = (($7281) + 4)|0;
 $7285 = $7284;
 $7286 = HEAP32[$7285>>2]|0;
 $7287 = (_bitshift64Shl(($7283|0),($7286|0),21)|0);
 $7288 = (getTempRet0() | 0);
 $7289 = $51;
 $7290 = $7289;
 $7291 = HEAP32[$7290>>2]|0;
 $7292 = (($7289) + 4)|0;
 $7293 = $7292;
 $7294 = HEAP32[$7293>>2]|0;
 $7295 = (_i64Subtract(($7291|0),($7294|0),($7287|0),($7288|0))|0);
 $7296 = (getTempRet0() | 0);
 $7297 = $51;
 $7298 = $7297;
 HEAP32[$7298>>2] = $7295;
 $7299 = (($7297) + 4)|0;
 $7300 = $7299;
 HEAP32[$7300>>2] = $7296;
 $7301 = $52;
 $7302 = $7301;
 $7303 = HEAP32[$7302>>2]|0;
 $7304 = (($7301) + 4)|0;
 $7305 = $7304;
 $7306 = HEAP32[$7305>>2]|0;
 $7307 = (_bitshift64Ashr(($7303|0),($7306|0),21)|0);
 $7308 = (getTempRet0() | 0);
 $7309 = $76;
 $7310 = $7309;
 HEAP32[$7310>>2] = $7307;
 $7311 = (($7309) + 4)|0;
 $7312 = $7311;
 HEAP32[$7312>>2] = $7308;
 $7313 = $76;
 $7314 = $7313;
 $7315 = HEAP32[$7314>>2]|0;
 $7316 = (($7313) + 4)|0;
 $7317 = $7316;
 $7318 = HEAP32[$7317>>2]|0;
 $7319 = $53;
 $7320 = $7319;
 $7321 = HEAP32[$7320>>2]|0;
 $7322 = (($7319) + 4)|0;
 $7323 = $7322;
 $7324 = HEAP32[$7323>>2]|0;
 $7325 = (_i64Add(($7321|0),($7324|0),($7315|0),($7318|0))|0);
 $7326 = (getTempRet0() | 0);
 $7327 = $53;
 $7328 = $7327;
 HEAP32[$7328>>2] = $7325;
 $7329 = (($7327) + 4)|0;
 $7330 = $7329;
 HEAP32[$7330>>2] = $7326;
 $7331 = $76;
 $7332 = $7331;
 $7333 = HEAP32[$7332>>2]|0;
 $7334 = (($7331) + 4)|0;
 $7335 = $7334;
 $7336 = HEAP32[$7335>>2]|0;
 $7337 = (_bitshift64Shl(($7333|0),($7336|0),21)|0);
 $7338 = (getTempRet0() | 0);
 $7339 = $52;
 $7340 = $7339;
 $7341 = HEAP32[$7340>>2]|0;
 $7342 = (($7339) + 4)|0;
 $7343 = $7342;
 $7344 = HEAP32[$7343>>2]|0;
 $7345 = (_i64Subtract(($7341|0),($7344|0),($7337|0),($7338|0))|0);
 $7346 = (getTempRet0() | 0);
 $7347 = $52;
 $7348 = $7347;
 HEAP32[$7348>>2] = $7345;
 $7349 = (($7347) + 4)|0;
 $7350 = $7349;
 HEAP32[$7350>>2] = $7346;
 $7351 = $53;
 $7352 = $7351;
 $7353 = HEAP32[$7352>>2]|0;
 $7354 = (($7351) + 4)|0;
 $7355 = $7354;
 $7356 = HEAP32[$7355>>2]|0;
 $7357 = (_bitshift64Ashr(($7353|0),($7356|0),21)|0);
 $7358 = (getTempRet0() | 0);
 $7359 = $77;
 $7360 = $7359;
 HEAP32[$7360>>2] = $7357;
 $7361 = (($7359) + 4)|0;
 $7362 = $7361;
 HEAP32[$7362>>2] = $7358;
 $7363 = $77;
 $7364 = $7363;
 $7365 = HEAP32[$7364>>2]|0;
 $7366 = (($7363) + 4)|0;
 $7367 = $7366;
 $7368 = HEAP32[$7367>>2]|0;
 $7369 = $54;
 $7370 = $7369;
 $7371 = HEAP32[$7370>>2]|0;
 $7372 = (($7369) + 4)|0;
 $7373 = $7372;
 $7374 = HEAP32[$7373>>2]|0;
 $7375 = (_i64Add(($7371|0),($7374|0),($7365|0),($7368|0))|0);
 $7376 = (getTempRet0() | 0);
 $7377 = $54;
 $7378 = $7377;
 HEAP32[$7378>>2] = $7375;
 $7379 = (($7377) + 4)|0;
 $7380 = $7379;
 HEAP32[$7380>>2] = $7376;
 $7381 = $77;
 $7382 = $7381;
 $7383 = HEAP32[$7382>>2]|0;
 $7384 = (($7381) + 4)|0;
 $7385 = $7384;
 $7386 = HEAP32[$7385>>2]|0;
 $7387 = (_bitshift64Shl(($7383|0),($7386|0),21)|0);
 $7388 = (getTempRet0() | 0);
 $7389 = $53;
 $7390 = $7389;
 $7391 = HEAP32[$7390>>2]|0;
 $7392 = (($7389) + 4)|0;
 $7393 = $7392;
 $7394 = HEAP32[$7393>>2]|0;
 $7395 = (_i64Subtract(($7391|0),($7394|0),($7387|0),($7388|0))|0);
 $7396 = (getTempRet0() | 0);
 $7397 = $53;
 $7398 = $7397;
 HEAP32[$7398>>2] = $7395;
 $7399 = (($7397) + 4)|0;
 $7400 = $7399;
 HEAP32[$7400>>2] = $7396;
 $7401 = $54;
 $7402 = $7401;
 $7403 = HEAP32[$7402>>2]|0;
 $7404 = (($7401) + 4)|0;
 $7405 = $7404;
 $7406 = HEAP32[$7405>>2]|0;
 $7407 = (_bitshift64Ashr(($7403|0),($7406|0),21)|0);
 $7408 = (getTempRet0() | 0);
 $7409 = $78;
 $7410 = $7409;
 HEAP32[$7410>>2] = $7407;
 $7411 = (($7409) + 4)|0;
 $7412 = $7411;
 HEAP32[$7412>>2] = $7408;
 $7413 = $78;
 $7414 = $7413;
 $7415 = HEAP32[$7414>>2]|0;
 $7416 = (($7413) + 4)|0;
 $7417 = $7416;
 $7418 = HEAP32[$7417>>2]|0;
 $7419 = $55;
 $7420 = $7419;
 $7421 = HEAP32[$7420>>2]|0;
 $7422 = (($7419) + 4)|0;
 $7423 = $7422;
 $7424 = HEAP32[$7423>>2]|0;
 $7425 = (_i64Add(($7421|0),($7424|0),($7415|0),($7418|0))|0);
 $7426 = (getTempRet0() | 0);
 $7427 = $55;
 $7428 = $7427;
 HEAP32[$7428>>2] = $7425;
 $7429 = (($7427) + 4)|0;
 $7430 = $7429;
 HEAP32[$7430>>2] = $7426;
 $7431 = $78;
 $7432 = $7431;
 $7433 = HEAP32[$7432>>2]|0;
 $7434 = (($7431) + 4)|0;
 $7435 = $7434;
 $7436 = HEAP32[$7435>>2]|0;
 $7437 = (_bitshift64Shl(($7433|0),($7436|0),21)|0);
 $7438 = (getTempRet0() | 0);
 $7439 = $54;
 $7440 = $7439;
 $7441 = HEAP32[$7440>>2]|0;
 $7442 = (($7439) + 4)|0;
 $7443 = $7442;
 $7444 = HEAP32[$7443>>2]|0;
 $7445 = (_i64Subtract(($7441|0),($7444|0),($7437|0),($7438|0))|0);
 $7446 = (getTempRet0() | 0);
 $7447 = $54;
 $7448 = $7447;
 HEAP32[$7448>>2] = $7445;
 $7449 = (($7447) + 4)|0;
 $7450 = $7449;
 HEAP32[$7450>>2] = $7446;
 $7451 = $55;
 $7452 = $7451;
 $7453 = HEAP32[$7452>>2]|0;
 $7454 = (($7451) + 4)|0;
 $7455 = $7454;
 $7456 = HEAP32[$7455>>2]|0;
 $7457 = (_bitshift64Ashr(($7453|0),($7456|0),21)|0);
 $7458 = (getTempRet0() | 0);
 $7459 = $79;
 $7460 = $7459;
 HEAP32[$7460>>2] = $7457;
 $7461 = (($7459) + 4)|0;
 $7462 = $7461;
 HEAP32[$7462>>2] = $7458;
 $7463 = $79;
 $7464 = $7463;
 $7465 = HEAP32[$7464>>2]|0;
 $7466 = (($7463) + 4)|0;
 $7467 = $7466;
 $7468 = HEAP32[$7467>>2]|0;
 $7469 = $56;
 $7470 = $7469;
 $7471 = HEAP32[$7470>>2]|0;
 $7472 = (($7469) + 4)|0;
 $7473 = $7472;
 $7474 = HEAP32[$7473>>2]|0;
 $7475 = (_i64Add(($7471|0),($7474|0),($7465|0),($7468|0))|0);
 $7476 = (getTempRet0() | 0);
 $7477 = $56;
 $7478 = $7477;
 HEAP32[$7478>>2] = $7475;
 $7479 = (($7477) + 4)|0;
 $7480 = $7479;
 HEAP32[$7480>>2] = $7476;
 $7481 = $79;
 $7482 = $7481;
 $7483 = HEAP32[$7482>>2]|0;
 $7484 = (($7481) + 4)|0;
 $7485 = $7484;
 $7486 = HEAP32[$7485>>2]|0;
 $7487 = (_bitshift64Shl(($7483|0),($7486|0),21)|0);
 $7488 = (getTempRet0() | 0);
 $7489 = $55;
 $7490 = $7489;
 $7491 = HEAP32[$7490>>2]|0;
 $7492 = (($7489) + 4)|0;
 $7493 = $7492;
 $7494 = HEAP32[$7493>>2]|0;
 $7495 = (_i64Subtract(($7491|0),($7494|0),($7487|0),($7488|0))|0);
 $7496 = (getTempRet0() | 0);
 $7497 = $55;
 $7498 = $7497;
 HEAP32[$7498>>2] = $7495;
 $7499 = (($7497) + 4)|0;
 $7500 = $7499;
 HEAP32[$7500>>2] = $7496;
 $7501 = $56;
 $7502 = $7501;
 $7503 = HEAP32[$7502>>2]|0;
 $7504 = (($7501) + 4)|0;
 $7505 = $7504;
 $7506 = HEAP32[$7505>>2]|0;
 $7507 = (___muldi3(($7503|0),($7506|0),666643,0)|0);
 $7508 = (getTempRet0() | 0);
 $7509 = $44;
 $7510 = $7509;
 $7511 = HEAP32[$7510>>2]|0;
 $7512 = (($7509) + 4)|0;
 $7513 = $7512;
 $7514 = HEAP32[$7513>>2]|0;
 $7515 = (_i64Add(($7511|0),($7514|0),($7507|0),($7508|0))|0);
 $7516 = (getTempRet0() | 0);
 $7517 = $44;
 $7518 = $7517;
 HEAP32[$7518>>2] = $7515;
 $7519 = (($7517) + 4)|0;
 $7520 = $7519;
 HEAP32[$7520>>2] = $7516;
 $7521 = $56;
 $7522 = $7521;
 $7523 = HEAP32[$7522>>2]|0;
 $7524 = (($7521) + 4)|0;
 $7525 = $7524;
 $7526 = HEAP32[$7525>>2]|0;
 $7527 = (___muldi3(($7523|0),($7526|0),470296,0)|0);
 $7528 = (getTempRet0() | 0);
 $7529 = $45;
 $7530 = $7529;
 $7531 = HEAP32[$7530>>2]|0;
 $7532 = (($7529) + 4)|0;
 $7533 = $7532;
 $7534 = HEAP32[$7533>>2]|0;
 $7535 = (_i64Add(($7531|0),($7534|0),($7527|0),($7528|0))|0);
 $7536 = (getTempRet0() | 0);
 $7537 = $45;
 $7538 = $7537;
 HEAP32[$7538>>2] = $7535;
 $7539 = (($7537) + 4)|0;
 $7540 = $7539;
 HEAP32[$7540>>2] = $7536;
 $7541 = $56;
 $7542 = $7541;
 $7543 = HEAP32[$7542>>2]|0;
 $7544 = (($7541) + 4)|0;
 $7545 = $7544;
 $7546 = HEAP32[$7545>>2]|0;
 $7547 = (___muldi3(($7543|0),($7546|0),654183,0)|0);
 $7548 = (getTempRet0() | 0);
 $7549 = $46;
 $7550 = $7549;
 $7551 = HEAP32[$7550>>2]|0;
 $7552 = (($7549) + 4)|0;
 $7553 = $7552;
 $7554 = HEAP32[$7553>>2]|0;
 $7555 = (_i64Add(($7551|0),($7554|0),($7547|0),($7548|0))|0);
 $7556 = (getTempRet0() | 0);
 $7557 = $46;
 $7558 = $7557;
 HEAP32[$7558>>2] = $7555;
 $7559 = (($7557) + 4)|0;
 $7560 = $7559;
 HEAP32[$7560>>2] = $7556;
 $7561 = $56;
 $7562 = $7561;
 $7563 = HEAP32[$7562>>2]|0;
 $7564 = (($7561) + 4)|0;
 $7565 = $7564;
 $7566 = HEAP32[$7565>>2]|0;
 $7567 = (___muldi3(($7563|0),($7566|0),997805,0)|0);
 $7568 = (getTempRet0() | 0);
 $7569 = $47;
 $7570 = $7569;
 $7571 = HEAP32[$7570>>2]|0;
 $7572 = (($7569) + 4)|0;
 $7573 = $7572;
 $7574 = HEAP32[$7573>>2]|0;
 $7575 = (_i64Subtract(($7571|0),($7574|0),($7567|0),($7568|0))|0);
 $7576 = (getTempRet0() | 0);
 $7577 = $47;
 $7578 = $7577;
 HEAP32[$7578>>2] = $7575;
 $7579 = (($7577) + 4)|0;
 $7580 = $7579;
 HEAP32[$7580>>2] = $7576;
 $7581 = $56;
 $7582 = $7581;
 $7583 = HEAP32[$7582>>2]|0;
 $7584 = (($7581) + 4)|0;
 $7585 = $7584;
 $7586 = HEAP32[$7585>>2]|0;
 $7587 = (___muldi3(($7583|0),($7586|0),136657,0)|0);
 $7588 = (getTempRet0() | 0);
 $7589 = $48;
 $7590 = $7589;
 $7591 = HEAP32[$7590>>2]|0;
 $7592 = (($7589) + 4)|0;
 $7593 = $7592;
 $7594 = HEAP32[$7593>>2]|0;
 $7595 = (_i64Add(($7591|0),($7594|0),($7587|0),($7588|0))|0);
 $7596 = (getTempRet0() | 0);
 $7597 = $48;
 $7598 = $7597;
 HEAP32[$7598>>2] = $7595;
 $7599 = (($7597) + 4)|0;
 $7600 = $7599;
 HEAP32[$7600>>2] = $7596;
 $7601 = $56;
 $7602 = $7601;
 $7603 = HEAP32[$7602>>2]|0;
 $7604 = (($7601) + 4)|0;
 $7605 = $7604;
 $7606 = HEAP32[$7605>>2]|0;
 $7607 = (___muldi3(($7603|0),($7606|0),683901,0)|0);
 $7608 = (getTempRet0() | 0);
 $7609 = $49;
 $7610 = $7609;
 $7611 = HEAP32[$7610>>2]|0;
 $7612 = (($7609) + 4)|0;
 $7613 = $7612;
 $7614 = HEAP32[$7613>>2]|0;
 $7615 = (_i64Subtract(($7611|0),($7614|0),($7607|0),($7608|0))|0);
 $7616 = (getTempRet0() | 0);
 $7617 = $49;
 $7618 = $7617;
 HEAP32[$7618>>2] = $7615;
 $7619 = (($7617) + 4)|0;
 $7620 = $7619;
 HEAP32[$7620>>2] = $7616;
 $7621 = $44;
 $7622 = $7621;
 $7623 = HEAP32[$7622>>2]|0;
 $7624 = (($7621) + 4)|0;
 $7625 = $7624;
 $7626 = HEAP32[$7625>>2]|0;
 $7627 = (_bitshift64Ashr(($7623|0),($7626|0),21)|0);
 $7628 = (getTempRet0() | 0);
 $7629 = $68;
 $7630 = $7629;
 HEAP32[$7630>>2] = $7627;
 $7631 = (($7629) + 4)|0;
 $7632 = $7631;
 HEAP32[$7632>>2] = $7628;
 $7633 = $68;
 $7634 = $7633;
 $7635 = HEAP32[$7634>>2]|0;
 $7636 = (($7633) + 4)|0;
 $7637 = $7636;
 $7638 = HEAP32[$7637>>2]|0;
 $7639 = $45;
 $7640 = $7639;
 $7641 = HEAP32[$7640>>2]|0;
 $7642 = (($7639) + 4)|0;
 $7643 = $7642;
 $7644 = HEAP32[$7643>>2]|0;
 $7645 = (_i64Add(($7641|0),($7644|0),($7635|0),($7638|0))|0);
 $7646 = (getTempRet0() | 0);
 $7647 = $45;
 $7648 = $7647;
 HEAP32[$7648>>2] = $7645;
 $7649 = (($7647) + 4)|0;
 $7650 = $7649;
 HEAP32[$7650>>2] = $7646;
 $7651 = $68;
 $7652 = $7651;
 $7653 = HEAP32[$7652>>2]|0;
 $7654 = (($7651) + 4)|0;
 $7655 = $7654;
 $7656 = HEAP32[$7655>>2]|0;
 $7657 = (_bitshift64Shl(($7653|0),($7656|0),21)|0);
 $7658 = (getTempRet0() | 0);
 $7659 = $44;
 $7660 = $7659;
 $7661 = HEAP32[$7660>>2]|0;
 $7662 = (($7659) + 4)|0;
 $7663 = $7662;
 $7664 = HEAP32[$7663>>2]|0;
 $7665 = (_i64Subtract(($7661|0),($7664|0),($7657|0),($7658|0))|0);
 $7666 = (getTempRet0() | 0);
 $7667 = $44;
 $7668 = $7667;
 HEAP32[$7668>>2] = $7665;
 $7669 = (($7667) + 4)|0;
 $7670 = $7669;
 HEAP32[$7670>>2] = $7666;
 $7671 = $45;
 $7672 = $7671;
 $7673 = HEAP32[$7672>>2]|0;
 $7674 = (($7671) + 4)|0;
 $7675 = $7674;
 $7676 = HEAP32[$7675>>2]|0;
 $7677 = (_bitshift64Ashr(($7673|0),($7676|0),21)|0);
 $7678 = (getTempRet0() | 0);
 $7679 = $69;
 $7680 = $7679;
 HEAP32[$7680>>2] = $7677;
 $7681 = (($7679) + 4)|0;
 $7682 = $7681;
 HEAP32[$7682>>2] = $7678;
 $7683 = $69;
 $7684 = $7683;
 $7685 = HEAP32[$7684>>2]|0;
 $7686 = (($7683) + 4)|0;
 $7687 = $7686;
 $7688 = HEAP32[$7687>>2]|0;
 $7689 = $46;
 $7690 = $7689;
 $7691 = HEAP32[$7690>>2]|0;
 $7692 = (($7689) + 4)|0;
 $7693 = $7692;
 $7694 = HEAP32[$7693>>2]|0;
 $7695 = (_i64Add(($7691|0),($7694|0),($7685|0),($7688|0))|0);
 $7696 = (getTempRet0() | 0);
 $7697 = $46;
 $7698 = $7697;
 HEAP32[$7698>>2] = $7695;
 $7699 = (($7697) + 4)|0;
 $7700 = $7699;
 HEAP32[$7700>>2] = $7696;
 $7701 = $69;
 $7702 = $7701;
 $7703 = HEAP32[$7702>>2]|0;
 $7704 = (($7701) + 4)|0;
 $7705 = $7704;
 $7706 = HEAP32[$7705>>2]|0;
 $7707 = (_bitshift64Shl(($7703|0),($7706|0),21)|0);
 $7708 = (getTempRet0() | 0);
 $7709 = $45;
 $7710 = $7709;
 $7711 = HEAP32[$7710>>2]|0;
 $7712 = (($7709) + 4)|0;
 $7713 = $7712;
 $7714 = HEAP32[$7713>>2]|0;
 $7715 = (_i64Subtract(($7711|0),($7714|0),($7707|0),($7708|0))|0);
 $7716 = (getTempRet0() | 0);
 $7717 = $45;
 $7718 = $7717;
 HEAP32[$7718>>2] = $7715;
 $7719 = (($7717) + 4)|0;
 $7720 = $7719;
 HEAP32[$7720>>2] = $7716;
 $7721 = $46;
 $7722 = $7721;
 $7723 = HEAP32[$7722>>2]|0;
 $7724 = (($7721) + 4)|0;
 $7725 = $7724;
 $7726 = HEAP32[$7725>>2]|0;
 $7727 = (_bitshift64Ashr(($7723|0),($7726|0),21)|0);
 $7728 = (getTempRet0() | 0);
 $7729 = $70;
 $7730 = $7729;
 HEAP32[$7730>>2] = $7727;
 $7731 = (($7729) + 4)|0;
 $7732 = $7731;
 HEAP32[$7732>>2] = $7728;
 $7733 = $70;
 $7734 = $7733;
 $7735 = HEAP32[$7734>>2]|0;
 $7736 = (($7733) + 4)|0;
 $7737 = $7736;
 $7738 = HEAP32[$7737>>2]|0;
 $7739 = $47;
 $7740 = $7739;
 $7741 = HEAP32[$7740>>2]|0;
 $7742 = (($7739) + 4)|0;
 $7743 = $7742;
 $7744 = HEAP32[$7743>>2]|0;
 $7745 = (_i64Add(($7741|0),($7744|0),($7735|0),($7738|0))|0);
 $7746 = (getTempRet0() | 0);
 $7747 = $47;
 $7748 = $7747;
 HEAP32[$7748>>2] = $7745;
 $7749 = (($7747) + 4)|0;
 $7750 = $7749;
 HEAP32[$7750>>2] = $7746;
 $7751 = $70;
 $7752 = $7751;
 $7753 = HEAP32[$7752>>2]|0;
 $7754 = (($7751) + 4)|0;
 $7755 = $7754;
 $7756 = HEAP32[$7755>>2]|0;
 $7757 = (_bitshift64Shl(($7753|0),($7756|0),21)|0);
 $7758 = (getTempRet0() | 0);
 $7759 = $46;
 $7760 = $7759;
 $7761 = HEAP32[$7760>>2]|0;
 $7762 = (($7759) + 4)|0;
 $7763 = $7762;
 $7764 = HEAP32[$7763>>2]|0;
 $7765 = (_i64Subtract(($7761|0),($7764|0),($7757|0),($7758|0))|0);
 $7766 = (getTempRet0() | 0);
 $7767 = $46;
 $7768 = $7767;
 HEAP32[$7768>>2] = $7765;
 $7769 = (($7767) + 4)|0;
 $7770 = $7769;
 HEAP32[$7770>>2] = $7766;
 $7771 = $47;
 $7772 = $7771;
 $7773 = HEAP32[$7772>>2]|0;
 $7774 = (($7771) + 4)|0;
 $7775 = $7774;
 $7776 = HEAP32[$7775>>2]|0;
 $7777 = (_bitshift64Ashr(($7773|0),($7776|0),21)|0);
 $7778 = (getTempRet0() | 0);
 $7779 = $71;
 $7780 = $7779;
 HEAP32[$7780>>2] = $7777;
 $7781 = (($7779) + 4)|0;
 $7782 = $7781;
 HEAP32[$7782>>2] = $7778;
 $7783 = $71;
 $7784 = $7783;
 $7785 = HEAP32[$7784>>2]|0;
 $7786 = (($7783) + 4)|0;
 $7787 = $7786;
 $7788 = HEAP32[$7787>>2]|0;
 $7789 = $48;
 $7790 = $7789;
 $7791 = HEAP32[$7790>>2]|0;
 $7792 = (($7789) + 4)|0;
 $7793 = $7792;
 $7794 = HEAP32[$7793>>2]|0;
 $7795 = (_i64Add(($7791|0),($7794|0),($7785|0),($7788|0))|0);
 $7796 = (getTempRet0() | 0);
 $7797 = $48;
 $7798 = $7797;
 HEAP32[$7798>>2] = $7795;
 $7799 = (($7797) + 4)|0;
 $7800 = $7799;
 HEAP32[$7800>>2] = $7796;
 $7801 = $71;
 $7802 = $7801;
 $7803 = HEAP32[$7802>>2]|0;
 $7804 = (($7801) + 4)|0;
 $7805 = $7804;
 $7806 = HEAP32[$7805>>2]|0;
 $7807 = (_bitshift64Shl(($7803|0),($7806|0),21)|0);
 $7808 = (getTempRet0() | 0);
 $7809 = $47;
 $7810 = $7809;
 $7811 = HEAP32[$7810>>2]|0;
 $7812 = (($7809) + 4)|0;
 $7813 = $7812;
 $7814 = HEAP32[$7813>>2]|0;
 $7815 = (_i64Subtract(($7811|0),($7814|0),($7807|0),($7808|0))|0);
 $7816 = (getTempRet0() | 0);
 $7817 = $47;
 $7818 = $7817;
 HEAP32[$7818>>2] = $7815;
 $7819 = (($7817) + 4)|0;
 $7820 = $7819;
 HEAP32[$7820>>2] = $7816;
 $7821 = $48;
 $7822 = $7821;
 $7823 = HEAP32[$7822>>2]|0;
 $7824 = (($7821) + 4)|0;
 $7825 = $7824;
 $7826 = HEAP32[$7825>>2]|0;
 $7827 = (_bitshift64Ashr(($7823|0),($7826|0),21)|0);
 $7828 = (getTempRet0() | 0);
 $7829 = $72;
 $7830 = $7829;
 HEAP32[$7830>>2] = $7827;
 $7831 = (($7829) + 4)|0;
 $7832 = $7831;
 HEAP32[$7832>>2] = $7828;
 $7833 = $72;
 $7834 = $7833;
 $7835 = HEAP32[$7834>>2]|0;
 $7836 = (($7833) + 4)|0;
 $7837 = $7836;
 $7838 = HEAP32[$7837>>2]|0;
 $7839 = $49;
 $7840 = $7839;
 $7841 = HEAP32[$7840>>2]|0;
 $7842 = (($7839) + 4)|0;
 $7843 = $7842;
 $7844 = HEAP32[$7843>>2]|0;
 $7845 = (_i64Add(($7841|0),($7844|0),($7835|0),($7838|0))|0);
 $7846 = (getTempRet0() | 0);
 $7847 = $49;
 $7848 = $7847;
 HEAP32[$7848>>2] = $7845;
 $7849 = (($7847) + 4)|0;
 $7850 = $7849;
 HEAP32[$7850>>2] = $7846;
 $7851 = $72;
 $7852 = $7851;
 $7853 = HEAP32[$7852>>2]|0;
 $7854 = (($7851) + 4)|0;
 $7855 = $7854;
 $7856 = HEAP32[$7855>>2]|0;
 $7857 = (_bitshift64Shl(($7853|0),($7856|0),21)|0);
 $7858 = (getTempRet0() | 0);
 $7859 = $48;
 $7860 = $7859;
 $7861 = HEAP32[$7860>>2]|0;
 $7862 = (($7859) + 4)|0;
 $7863 = $7862;
 $7864 = HEAP32[$7863>>2]|0;
 $7865 = (_i64Subtract(($7861|0),($7864|0),($7857|0),($7858|0))|0);
 $7866 = (getTempRet0() | 0);
 $7867 = $48;
 $7868 = $7867;
 HEAP32[$7868>>2] = $7865;
 $7869 = (($7867) + 4)|0;
 $7870 = $7869;
 HEAP32[$7870>>2] = $7866;
 $7871 = $49;
 $7872 = $7871;
 $7873 = HEAP32[$7872>>2]|0;
 $7874 = (($7871) + 4)|0;
 $7875 = $7874;
 $7876 = HEAP32[$7875>>2]|0;
 $7877 = (_bitshift64Ashr(($7873|0),($7876|0),21)|0);
 $7878 = (getTempRet0() | 0);
 $7879 = $73;
 $7880 = $7879;
 HEAP32[$7880>>2] = $7877;
 $7881 = (($7879) + 4)|0;
 $7882 = $7881;
 HEAP32[$7882>>2] = $7878;
 $7883 = $73;
 $7884 = $7883;
 $7885 = HEAP32[$7884>>2]|0;
 $7886 = (($7883) + 4)|0;
 $7887 = $7886;
 $7888 = HEAP32[$7887>>2]|0;
 $7889 = $50;
 $7890 = $7889;
 $7891 = HEAP32[$7890>>2]|0;
 $7892 = (($7889) + 4)|0;
 $7893 = $7892;
 $7894 = HEAP32[$7893>>2]|0;
 $7895 = (_i64Add(($7891|0),($7894|0),($7885|0),($7888|0))|0);
 $7896 = (getTempRet0() | 0);
 $7897 = $50;
 $7898 = $7897;
 HEAP32[$7898>>2] = $7895;
 $7899 = (($7897) + 4)|0;
 $7900 = $7899;
 HEAP32[$7900>>2] = $7896;
 $7901 = $73;
 $7902 = $7901;
 $7903 = HEAP32[$7902>>2]|0;
 $7904 = (($7901) + 4)|0;
 $7905 = $7904;
 $7906 = HEAP32[$7905>>2]|0;
 $7907 = (_bitshift64Shl(($7903|0),($7906|0),21)|0);
 $7908 = (getTempRet0() | 0);
 $7909 = $49;
 $7910 = $7909;
 $7911 = HEAP32[$7910>>2]|0;
 $7912 = (($7909) + 4)|0;
 $7913 = $7912;
 $7914 = HEAP32[$7913>>2]|0;
 $7915 = (_i64Subtract(($7911|0),($7914|0),($7907|0),($7908|0))|0);
 $7916 = (getTempRet0() | 0);
 $7917 = $49;
 $7918 = $7917;
 HEAP32[$7918>>2] = $7915;
 $7919 = (($7917) + 4)|0;
 $7920 = $7919;
 HEAP32[$7920>>2] = $7916;
 $7921 = $50;
 $7922 = $7921;
 $7923 = HEAP32[$7922>>2]|0;
 $7924 = (($7921) + 4)|0;
 $7925 = $7924;
 $7926 = HEAP32[$7925>>2]|0;
 $7927 = (_bitshift64Ashr(($7923|0),($7926|0),21)|0);
 $7928 = (getTempRet0() | 0);
 $7929 = $74;
 $7930 = $7929;
 HEAP32[$7930>>2] = $7927;
 $7931 = (($7929) + 4)|0;
 $7932 = $7931;
 HEAP32[$7932>>2] = $7928;
 $7933 = $74;
 $7934 = $7933;
 $7935 = HEAP32[$7934>>2]|0;
 $7936 = (($7933) + 4)|0;
 $7937 = $7936;
 $7938 = HEAP32[$7937>>2]|0;
 $7939 = $51;
 $7940 = $7939;
 $7941 = HEAP32[$7940>>2]|0;
 $7942 = (($7939) + 4)|0;
 $7943 = $7942;
 $7944 = HEAP32[$7943>>2]|0;
 $7945 = (_i64Add(($7941|0),($7944|0),($7935|0),($7938|0))|0);
 $7946 = (getTempRet0() | 0);
 $7947 = $51;
 $7948 = $7947;
 HEAP32[$7948>>2] = $7945;
 $7949 = (($7947) + 4)|0;
 $7950 = $7949;
 HEAP32[$7950>>2] = $7946;
 $7951 = $74;
 $7952 = $7951;
 $7953 = HEAP32[$7952>>2]|0;
 $7954 = (($7951) + 4)|0;
 $7955 = $7954;
 $7956 = HEAP32[$7955>>2]|0;
 $7957 = (_bitshift64Shl(($7953|0),($7956|0),21)|0);
 $7958 = (getTempRet0() | 0);
 $7959 = $50;
 $7960 = $7959;
 $7961 = HEAP32[$7960>>2]|0;
 $7962 = (($7959) + 4)|0;
 $7963 = $7962;
 $7964 = HEAP32[$7963>>2]|0;
 $7965 = (_i64Subtract(($7961|0),($7964|0),($7957|0),($7958|0))|0);
 $7966 = (getTempRet0() | 0);
 $7967 = $50;
 $7968 = $7967;
 HEAP32[$7968>>2] = $7965;
 $7969 = (($7967) + 4)|0;
 $7970 = $7969;
 HEAP32[$7970>>2] = $7966;
 $7971 = $51;
 $7972 = $7971;
 $7973 = HEAP32[$7972>>2]|0;
 $7974 = (($7971) + 4)|0;
 $7975 = $7974;
 $7976 = HEAP32[$7975>>2]|0;
 $7977 = (_bitshift64Ashr(($7973|0),($7976|0),21)|0);
 $7978 = (getTempRet0() | 0);
 $7979 = $75;
 $7980 = $7979;
 HEAP32[$7980>>2] = $7977;
 $7981 = (($7979) + 4)|0;
 $7982 = $7981;
 HEAP32[$7982>>2] = $7978;
 $7983 = $75;
 $7984 = $7983;
 $7985 = HEAP32[$7984>>2]|0;
 $7986 = (($7983) + 4)|0;
 $7987 = $7986;
 $7988 = HEAP32[$7987>>2]|0;
 $7989 = $52;
 $7990 = $7989;
 $7991 = HEAP32[$7990>>2]|0;
 $7992 = (($7989) + 4)|0;
 $7993 = $7992;
 $7994 = HEAP32[$7993>>2]|0;
 $7995 = (_i64Add(($7991|0),($7994|0),($7985|0),($7988|0))|0);
 $7996 = (getTempRet0() | 0);
 $7997 = $52;
 $7998 = $7997;
 HEAP32[$7998>>2] = $7995;
 $7999 = (($7997) + 4)|0;
 $8000 = $7999;
 HEAP32[$8000>>2] = $7996;
 $8001 = $75;
 $8002 = $8001;
 $8003 = HEAP32[$8002>>2]|0;
 $8004 = (($8001) + 4)|0;
 $8005 = $8004;
 $8006 = HEAP32[$8005>>2]|0;
 $8007 = (_bitshift64Shl(($8003|0),($8006|0),21)|0);
 $8008 = (getTempRet0() | 0);
 $8009 = $51;
 $8010 = $8009;
 $8011 = HEAP32[$8010>>2]|0;
 $8012 = (($8009) + 4)|0;
 $8013 = $8012;
 $8014 = HEAP32[$8013>>2]|0;
 $8015 = (_i64Subtract(($8011|0),($8014|0),($8007|0),($8008|0))|0);
 $8016 = (getTempRet0() | 0);
 $8017 = $51;
 $8018 = $8017;
 HEAP32[$8018>>2] = $8015;
 $8019 = (($8017) + 4)|0;
 $8020 = $8019;
 HEAP32[$8020>>2] = $8016;
 $8021 = $52;
 $8022 = $8021;
 $8023 = HEAP32[$8022>>2]|0;
 $8024 = (($8021) + 4)|0;
 $8025 = $8024;
 $8026 = HEAP32[$8025>>2]|0;
 $8027 = (_bitshift64Ashr(($8023|0),($8026|0),21)|0);
 $8028 = (getTempRet0() | 0);
 $8029 = $76;
 $8030 = $8029;
 HEAP32[$8030>>2] = $8027;
 $8031 = (($8029) + 4)|0;
 $8032 = $8031;
 HEAP32[$8032>>2] = $8028;
 $8033 = $76;
 $8034 = $8033;
 $8035 = HEAP32[$8034>>2]|0;
 $8036 = (($8033) + 4)|0;
 $8037 = $8036;
 $8038 = HEAP32[$8037>>2]|0;
 $8039 = $53;
 $8040 = $8039;
 $8041 = HEAP32[$8040>>2]|0;
 $8042 = (($8039) + 4)|0;
 $8043 = $8042;
 $8044 = HEAP32[$8043>>2]|0;
 $8045 = (_i64Add(($8041|0),($8044|0),($8035|0),($8038|0))|0);
 $8046 = (getTempRet0() | 0);
 $8047 = $53;
 $8048 = $8047;
 HEAP32[$8048>>2] = $8045;
 $8049 = (($8047) + 4)|0;
 $8050 = $8049;
 HEAP32[$8050>>2] = $8046;
 $8051 = $76;
 $8052 = $8051;
 $8053 = HEAP32[$8052>>2]|0;
 $8054 = (($8051) + 4)|0;
 $8055 = $8054;
 $8056 = HEAP32[$8055>>2]|0;
 $8057 = (_bitshift64Shl(($8053|0),($8056|0),21)|0);
 $8058 = (getTempRet0() | 0);
 $8059 = $52;
 $8060 = $8059;
 $8061 = HEAP32[$8060>>2]|0;
 $8062 = (($8059) + 4)|0;
 $8063 = $8062;
 $8064 = HEAP32[$8063>>2]|0;
 $8065 = (_i64Subtract(($8061|0),($8064|0),($8057|0),($8058|0))|0);
 $8066 = (getTempRet0() | 0);
 $8067 = $52;
 $8068 = $8067;
 HEAP32[$8068>>2] = $8065;
 $8069 = (($8067) + 4)|0;
 $8070 = $8069;
 HEAP32[$8070>>2] = $8066;
 $8071 = $53;
 $8072 = $8071;
 $8073 = HEAP32[$8072>>2]|0;
 $8074 = (($8071) + 4)|0;
 $8075 = $8074;
 $8076 = HEAP32[$8075>>2]|0;
 $8077 = (_bitshift64Ashr(($8073|0),($8076|0),21)|0);
 $8078 = (getTempRet0() | 0);
 $8079 = $77;
 $8080 = $8079;
 HEAP32[$8080>>2] = $8077;
 $8081 = (($8079) + 4)|0;
 $8082 = $8081;
 HEAP32[$8082>>2] = $8078;
 $8083 = $77;
 $8084 = $8083;
 $8085 = HEAP32[$8084>>2]|0;
 $8086 = (($8083) + 4)|0;
 $8087 = $8086;
 $8088 = HEAP32[$8087>>2]|0;
 $8089 = $54;
 $8090 = $8089;
 $8091 = HEAP32[$8090>>2]|0;
 $8092 = (($8089) + 4)|0;
 $8093 = $8092;
 $8094 = HEAP32[$8093>>2]|0;
 $8095 = (_i64Add(($8091|0),($8094|0),($8085|0),($8088|0))|0);
 $8096 = (getTempRet0() | 0);
 $8097 = $54;
 $8098 = $8097;
 HEAP32[$8098>>2] = $8095;
 $8099 = (($8097) + 4)|0;
 $8100 = $8099;
 HEAP32[$8100>>2] = $8096;
 $8101 = $77;
 $8102 = $8101;
 $8103 = HEAP32[$8102>>2]|0;
 $8104 = (($8101) + 4)|0;
 $8105 = $8104;
 $8106 = HEAP32[$8105>>2]|0;
 $8107 = (_bitshift64Shl(($8103|0),($8106|0),21)|0);
 $8108 = (getTempRet0() | 0);
 $8109 = $53;
 $8110 = $8109;
 $8111 = HEAP32[$8110>>2]|0;
 $8112 = (($8109) + 4)|0;
 $8113 = $8112;
 $8114 = HEAP32[$8113>>2]|0;
 $8115 = (_i64Subtract(($8111|0),($8114|0),($8107|0),($8108|0))|0);
 $8116 = (getTempRet0() | 0);
 $8117 = $53;
 $8118 = $8117;
 HEAP32[$8118>>2] = $8115;
 $8119 = (($8117) + 4)|0;
 $8120 = $8119;
 HEAP32[$8120>>2] = $8116;
 $8121 = $54;
 $8122 = $8121;
 $8123 = HEAP32[$8122>>2]|0;
 $8124 = (($8121) + 4)|0;
 $8125 = $8124;
 $8126 = HEAP32[$8125>>2]|0;
 $8127 = (_bitshift64Ashr(($8123|0),($8126|0),21)|0);
 $8128 = (getTempRet0() | 0);
 $8129 = $78;
 $8130 = $8129;
 HEAP32[$8130>>2] = $8127;
 $8131 = (($8129) + 4)|0;
 $8132 = $8131;
 HEAP32[$8132>>2] = $8128;
 $8133 = $78;
 $8134 = $8133;
 $8135 = HEAP32[$8134>>2]|0;
 $8136 = (($8133) + 4)|0;
 $8137 = $8136;
 $8138 = HEAP32[$8137>>2]|0;
 $8139 = $55;
 $8140 = $8139;
 $8141 = HEAP32[$8140>>2]|0;
 $8142 = (($8139) + 4)|0;
 $8143 = $8142;
 $8144 = HEAP32[$8143>>2]|0;
 $8145 = (_i64Add(($8141|0),($8144|0),($8135|0),($8138|0))|0);
 $8146 = (getTempRet0() | 0);
 $8147 = $55;
 $8148 = $8147;
 HEAP32[$8148>>2] = $8145;
 $8149 = (($8147) + 4)|0;
 $8150 = $8149;
 HEAP32[$8150>>2] = $8146;
 $8151 = $78;
 $8152 = $8151;
 $8153 = HEAP32[$8152>>2]|0;
 $8154 = (($8151) + 4)|0;
 $8155 = $8154;
 $8156 = HEAP32[$8155>>2]|0;
 $8157 = (_bitshift64Shl(($8153|0),($8156|0),21)|0);
 $8158 = (getTempRet0() | 0);
 $8159 = $54;
 $8160 = $8159;
 $8161 = HEAP32[$8160>>2]|0;
 $8162 = (($8159) + 4)|0;
 $8163 = $8162;
 $8164 = HEAP32[$8163>>2]|0;
 $8165 = (_i64Subtract(($8161|0),($8164|0),($8157|0),($8158|0))|0);
 $8166 = (getTempRet0() | 0);
 $8167 = $54;
 $8168 = $8167;
 HEAP32[$8168>>2] = $8165;
 $8169 = (($8167) + 4)|0;
 $8170 = $8169;
 HEAP32[$8170>>2] = $8166;
 $8171 = $44;
 $8172 = $8171;
 $8173 = HEAP32[$8172>>2]|0;
 $8174 = (($8171) + 4)|0;
 $8175 = $8174;
 $8176 = HEAP32[$8175>>2]|0;
 $8177 = (_bitshift64Ashr(($8173|0),($8176|0),0)|0);
 $8178 = (getTempRet0() | 0);
 $8179 = $8177&255;
 $8180 = $4;
 HEAP8[$8180>>0] = $8179;
 $8181 = $44;
 $8182 = $8181;
 $8183 = HEAP32[$8182>>2]|0;
 $8184 = (($8181) + 4)|0;
 $8185 = $8184;
 $8186 = HEAP32[$8185>>2]|0;
 $8187 = (_bitshift64Ashr(($8183|0),($8186|0),8)|0);
 $8188 = (getTempRet0() | 0);
 $8189 = $8187&255;
 $8190 = $4;
 $8191 = ((($8190)) + 1|0);
 HEAP8[$8191>>0] = $8189;
 $8192 = $44;
 $8193 = $8192;
 $8194 = HEAP32[$8193>>2]|0;
 $8195 = (($8192) + 4)|0;
 $8196 = $8195;
 $8197 = HEAP32[$8196>>2]|0;
 $8198 = (_bitshift64Ashr(($8194|0),($8197|0),16)|0);
 $8199 = (getTempRet0() | 0);
 $8200 = $45;
 $8201 = $8200;
 $8202 = HEAP32[$8201>>2]|0;
 $8203 = (($8200) + 4)|0;
 $8204 = $8203;
 $8205 = HEAP32[$8204>>2]|0;
 $8206 = (_bitshift64Shl(($8202|0),($8205|0),5)|0);
 $8207 = (getTempRet0() | 0);
 $8208 = $8198 | $8206;
 $8199 | $8207;
 $8209 = $8208&255;
 $8210 = $4;
 $8211 = ((($8210)) + 2|0);
 HEAP8[$8211>>0] = $8209;
 $8212 = $45;
 $8213 = $8212;
 $8214 = HEAP32[$8213>>2]|0;
 $8215 = (($8212) + 4)|0;
 $8216 = $8215;
 $8217 = HEAP32[$8216>>2]|0;
 $8218 = (_bitshift64Ashr(($8214|0),($8217|0),3)|0);
 $8219 = (getTempRet0() | 0);
 $8220 = $8218&255;
 $8221 = $4;
 $8222 = ((($8221)) + 3|0);
 HEAP8[$8222>>0] = $8220;
 $8223 = $45;
 $8224 = $8223;
 $8225 = HEAP32[$8224>>2]|0;
 $8226 = (($8223) + 4)|0;
 $8227 = $8226;
 $8228 = HEAP32[$8227>>2]|0;
 $8229 = (_bitshift64Ashr(($8225|0),($8228|0),11)|0);
 $8230 = (getTempRet0() | 0);
 $8231 = $8229&255;
 $8232 = $4;
 $8233 = ((($8232)) + 4|0);
 HEAP8[$8233>>0] = $8231;
 $8234 = $45;
 $8235 = $8234;
 $8236 = HEAP32[$8235>>2]|0;
 $8237 = (($8234) + 4)|0;
 $8238 = $8237;
 $8239 = HEAP32[$8238>>2]|0;
 $8240 = (_bitshift64Ashr(($8236|0),($8239|0),19)|0);
 $8241 = (getTempRet0() | 0);
 $8242 = $46;
 $8243 = $8242;
 $8244 = HEAP32[$8243>>2]|0;
 $8245 = (($8242) + 4)|0;
 $8246 = $8245;
 $8247 = HEAP32[$8246>>2]|0;
 $8248 = (_bitshift64Shl(($8244|0),($8247|0),2)|0);
 $8249 = (getTempRet0() | 0);
 $8250 = $8240 | $8248;
 $8241 | $8249;
 $8251 = $8250&255;
 $8252 = $4;
 $8253 = ((($8252)) + 5|0);
 HEAP8[$8253>>0] = $8251;
 $8254 = $46;
 $8255 = $8254;
 $8256 = HEAP32[$8255>>2]|0;
 $8257 = (($8254) + 4)|0;
 $8258 = $8257;
 $8259 = HEAP32[$8258>>2]|0;
 $8260 = (_bitshift64Ashr(($8256|0),($8259|0),6)|0);
 $8261 = (getTempRet0() | 0);
 $8262 = $8260&255;
 $8263 = $4;
 $8264 = ((($8263)) + 6|0);
 HEAP8[$8264>>0] = $8262;
 $8265 = $46;
 $8266 = $8265;
 $8267 = HEAP32[$8266>>2]|0;
 $8268 = (($8265) + 4)|0;
 $8269 = $8268;
 $8270 = HEAP32[$8269>>2]|0;
 $8271 = (_bitshift64Ashr(($8267|0),($8270|0),14)|0);
 $8272 = (getTempRet0() | 0);
 $8273 = $47;
 $8274 = $8273;
 $8275 = HEAP32[$8274>>2]|0;
 $8276 = (($8273) + 4)|0;
 $8277 = $8276;
 $8278 = HEAP32[$8277>>2]|0;
 $8279 = (_bitshift64Shl(($8275|0),($8278|0),7)|0);
 $8280 = (getTempRet0() | 0);
 $8281 = $8271 | $8279;
 $8272 | $8280;
 $8282 = $8281&255;
 $8283 = $4;
 $8284 = ((($8283)) + 7|0);
 HEAP8[$8284>>0] = $8282;
 $8285 = $47;
 $8286 = $8285;
 $8287 = HEAP32[$8286>>2]|0;
 $8288 = (($8285) + 4)|0;
 $8289 = $8288;
 $8290 = HEAP32[$8289>>2]|0;
 $8291 = (_bitshift64Ashr(($8287|0),($8290|0),1)|0);
 $8292 = (getTempRet0() | 0);
 $8293 = $8291&255;
 $8294 = $4;
 $8295 = ((($8294)) + 8|0);
 HEAP8[$8295>>0] = $8293;
 $8296 = $47;
 $8297 = $8296;
 $8298 = HEAP32[$8297>>2]|0;
 $8299 = (($8296) + 4)|0;
 $8300 = $8299;
 $8301 = HEAP32[$8300>>2]|0;
 $8302 = (_bitshift64Ashr(($8298|0),($8301|0),9)|0);
 $8303 = (getTempRet0() | 0);
 $8304 = $8302&255;
 $8305 = $4;
 $8306 = ((($8305)) + 9|0);
 HEAP8[$8306>>0] = $8304;
 $8307 = $47;
 $8308 = $8307;
 $8309 = HEAP32[$8308>>2]|0;
 $8310 = (($8307) + 4)|0;
 $8311 = $8310;
 $8312 = HEAP32[$8311>>2]|0;
 $8313 = (_bitshift64Ashr(($8309|0),($8312|0),17)|0);
 $8314 = (getTempRet0() | 0);
 $8315 = $48;
 $8316 = $8315;
 $8317 = HEAP32[$8316>>2]|0;
 $8318 = (($8315) + 4)|0;
 $8319 = $8318;
 $8320 = HEAP32[$8319>>2]|0;
 $8321 = (_bitshift64Shl(($8317|0),($8320|0),4)|0);
 $8322 = (getTempRet0() | 0);
 $8323 = $8313 | $8321;
 $8314 | $8322;
 $8324 = $8323&255;
 $8325 = $4;
 $8326 = ((($8325)) + 10|0);
 HEAP8[$8326>>0] = $8324;
 $8327 = $48;
 $8328 = $8327;
 $8329 = HEAP32[$8328>>2]|0;
 $8330 = (($8327) + 4)|0;
 $8331 = $8330;
 $8332 = HEAP32[$8331>>2]|0;
 $8333 = (_bitshift64Ashr(($8329|0),($8332|0),4)|0);
 $8334 = (getTempRet0() | 0);
 $8335 = $8333&255;
 $8336 = $4;
 $8337 = ((($8336)) + 11|0);
 HEAP8[$8337>>0] = $8335;
 $8338 = $48;
 $8339 = $8338;
 $8340 = HEAP32[$8339>>2]|0;
 $8341 = (($8338) + 4)|0;
 $8342 = $8341;
 $8343 = HEAP32[$8342>>2]|0;
 $8344 = (_bitshift64Ashr(($8340|0),($8343|0),12)|0);
 $8345 = (getTempRet0() | 0);
 $8346 = $8344&255;
 $8347 = $4;
 $8348 = ((($8347)) + 12|0);
 HEAP8[$8348>>0] = $8346;
 $8349 = $48;
 $8350 = $8349;
 $8351 = HEAP32[$8350>>2]|0;
 $8352 = (($8349) + 4)|0;
 $8353 = $8352;
 $8354 = HEAP32[$8353>>2]|0;
 $8355 = (_bitshift64Ashr(($8351|0),($8354|0),20)|0);
 $8356 = (getTempRet0() | 0);
 $8357 = $49;
 $8358 = $8357;
 $8359 = HEAP32[$8358>>2]|0;
 $8360 = (($8357) + 4)|0;
 $8361 = $8360;
 $8362 = HEAP32[$8361>>2]|0;
 $8363 = (_bitshift64Shl(($8359|0),($8362|0),1)|0);
 $8364 = (getTempRet0() | 0);
 $8365 = $8355 | $8363;
 $8356 | $8364;
 $8366 = $8365&255;
 $8367 = $4;
 $8368 = ((($8367)) + 13|0);
 HEAP8[$8368>>0] = $8366;
 $8369 = $49;
 $8370 = $8369;
 $8371 = HEAP32[$8370>>2]|0;
 $8372 = (($8369) + 4)|0;
 $8373 = $8372;
 $8374 = HEAP32[$8373>>2]|0;
 $8375 = (_bitshift64Ashr(($8371|0),($8374|0),7)|0);
 $8376 = (getTempRet0() | 0);
 $8377 = $8375&255;
 $8378 = $4;
 $8379 = ((($8378)) + 14|0);
 HEAP8[$8379>>0] = $8377;
 $8380 = $49;
 $8381 = $8380;
 $8382 = HEAP32[$8381>>2]|0;
 $8383 = (($8380) + 4)|0;
 $8384 = $8383;
 $8385 = HEAP32[$8384>>2]|0;
 $8386 = (_bitshift64Ashr(($8382|0),($8385|0),15)|0);
 $8387 = (getTempRet0() | 0);
 $8388 = $50;
 $8389 = $8388;
 $8390 = HEAP32[$8389>>2]|0;
 $8391 = (($8388) + 4)|0;
 $8392 = $8391;
 $8393 = HEAP32[$8392>>2]|0;
 $8394 = (_bitshift64Shl(($8390|0),($8393|0),6)|0);
 $8395 = (getTempRet0() | 0);
 $8396 = $8386 | $8394;
 $8387 | $8395;
 $8397 = $8396&255;
 $8398 = $4;
 $8399 = ((($8398)) + 15|0);
 HEAP8[$8399>>0] = $8397;
 $8400 = $50;
 $8401 = $8400;
 $8402 = HEAP32[$8401>>2]|0;
 $8403 = (($8400) + 4)|0;
 $8404 = $8403;
 $8405 = HEAP32[$8404>>2]|0;
 $8406 = (_bitshift64Ashr(($8402|0),($8405|0),2)|0);
 $8407 = (getTempRet0() | 0);
 $8408 = $8406&255;
 $8409 = $4;
 $8410 = ((($8409)) + 16|0);
 HEAP8[$8410>>0] = $8408;
 $8411 = $50;
 $8412 = $8411;
 $8413 = HEAP32[$8412>>2]|0;
 $8414 = (($8411) + 4)|0;
 $8415 = $8414;
 $8416 = HEAP32[$8415>>2]|0;
 $8417 = (_bitshift64Ashr(($8413|0),($8416|0),10)|0);
 $8418 = (getTempRet0() | 0);
 $8419 = $8417&255;
 $8420 = $4;
 $8421 = ((($8420)) + 17|0);
 HEAP8[$8421>>0] = $8419;
 $8422 = $50;
 $8423 = $8422;
 $8424 = HEAP32[$8423>>2]|0;
 $8425 = (($8422) + 4)|0;
 $8426 = $8425;
 $8427 = HEAP32[$8426>>2]|0;
 $8428 = (_bitshift64Ashr(($8424|0),($8427|0),18)|0);
 $8429 = (getTempRet0() | 0);
 $8430 = $51;
 $8431 = $8430;
 $8432 = HEAP32[$8431>>2]|0;
 $8433 = (($8430) + 4)|0;
 $8434 = $8433;
 $8435 = HEAP32[$8434>>2]|0;
 $8436 = (_bitshift64Shl(($8432|0),($8435|0),3)|0);
 $8437 = (getTempRet0() | 0);
 $8438 = $8428 | $8436;
 $8429 | $8437;
 $8439 = $8438&255;
 $8440 = $4;
 $8441 = ((($8440)) + 18|0);
 HEAP8[$8441>>0] = $8439;
 $8442 = $51;
 $8443 = $8442;
 $8444 = HEAP32[$8443>>2]|0;
 $8445 = (($8442) + 4)|0;
 $8446 = $8445;
 $8447 = HEAP32[$8446>>2]|0;
 $8448 = (_bitshift64Ashr(($8444|0),($8447|0),5)|0);
 $8449 = (getTempRet0() | 0);
 $8450 = $8448&255;
 $8451 = $4;
 $8452 = ((($8451)) + 19|0);
 HEAP8[$8452>>0] = $8450;
 $8453 = $51;
 $8454 = $8453;
 $8455 = HEAP32[$8454>>2]|0;
 $8456 = (($8453) + 4)|0;
 $8457 = $8456;
 $8458 = HEAP32[$8457>>2]|0;
 $8459 = (_bitshift64Ashr(($8455|0),($8458|0),13)|0);
 $8460 = (getTempRet0() | 0);
 $8461 = $8459&255;
 $8462 = $4;
 $8463 = ((($8462)) + 20|0);
 HEAP8[$8463>>0] = $8461;
 $8464 = $52;
 $8465 = $8464;
 $8466 = HEAP32[$8465>>2]|0;
 $8467 = (($8464) + 4)|0;
 $8468 = $8467;
 $8469 = HEAP32[$8468>>2]|0;
 $8470 = (_bitshift64Ashr(($8466|0),($8469|0),0)|0);
 $8471 = (getTempRet0() | 0);
 $8472 = $8470&255;
 $8473 = $4;
 $8474 = ((($8473)) + 21|0);
 HEAP8[$8474>>0] = $8472;
 $8475 = $52;
 $8476 = $8475;
 $8477 = HEAP32[$8476>>2]|0;
 $8478 = (($8475) + 4)|0;
 $8479 = $8478;
 $8480 = HEAP32[$8479>>2]|0;
 $8481 = (_bitshift64Ashr(($8477|0),($8480|0),8)|0);
 $8482 = (getTempRet0() | 0);
 $8483 = $8481&255;
 $8484 = $4;
 $8485 = ((($8484)) + 22|0);
 HEAP8[$8485>>0] = $8483;
 $8486 = $52;
 $8487 = $8486;
 $8488 = HEAP32[$8487>>2]|0;
 $8489 = (($8486) + 4)|0;
 $8490 = $8489;
 $8491 = HEAP32[$8490>>2]|0;
 $8492 = (_bitshift64Ashr(($8488|0),($8491|0),16)|0);
 $8493 = (getTempRet0() | 0);
 $8494 = $53;
 $8495 = $8494;
 $8496 = HEAP32[$8495>>2]|0;
 $8497 = (($8494) + 4)|0;
 $8498 = $8497;
 $8499 = HEAP32[$8498>>2]|0;
 $8500 = (_bitshift64Shl(($8496|0),($8499|0),5)|0);
 $8501 = (getTempRet0() | 0);
 $8502 = $8492 | $8500;
 $8493 | $8501;
 $8503 = $8502&255;
 $8504 = $4;
 $8505 = ((($8504)) + 23|0);
 HEAP8[$8505>>0] = $8503;
 $8506 = $53;
 $8507 = $8506;
 $8508 = HEAP32[$8507>>2]|0;
 $8509 = (($8506) + 4)|0;
 $8510 = $8509;
 $8511 = HEAP32[$8510>>2]|0;
 $8512 = (_bitshift64Ashr(($8508|0),($8511|0),3)|0);
 $8513 = (getTempRet0() | 0);
 $8514 = $8512&255;
 $8515 = $4;
 $8516 = ((($8515)) + 24|0);
 HEAP8[$8516>>0] = $8514;
 $8517 = $53;
 $8518 = $8517;
 $8519 = HEAP32[$8518>>2]|0;
 $8520 = (($8517) + 4)|0;
 $8521 = $8520;
 $8522 = HEAP32[$8521>>2]|0;
 $8523 = (_bitshift64Ashr(($8519|0),($8522|0),11)|0);
 $8524 = (getTempRet0() | 0);
 $8525 = $8523&255;
 $8526 = $4;
 $8527 = ((($8526)) + 25|0);
 HEAP8[$8527>>0] = $8525;
 $8528 = $53;
 $8529 = $8528;
 $8530 = HEAP32[$8529>>2]|0;
 $8531 = (($8528) + 4)|0;
 $8532 = $8531;
 $8533 = HEAP32[$8532>>2]|0;
 $8534 = (_bitshift64Ashr(($8530|0),($8533|0),19)|0);
 $8535 = (getTempRet0() | 0);
 $8536 = $54;
 $8537 = $8536;
 $8538 = HEAP32[$8537>>2]|0;
 $8539 = (($8536) + 4)|0;
 $8540 = $8539;
 $8541 = HEAP32[$8540>>2]|0;
 $8542 = (_bitshift64Shl(($8538|0),($8541|0),2)|0);
 $8543 = (getTempRet0() | 0);
 $8544 = $8534 | $8542;
 $8535 | $8543;
 $8545 = $8544&255;
 $8546 = $4;
 $8547 = ((($8546)) + 26|0);
 HEAP8[$8547>>0] = $8545;
 $8548 = $54;
 $8549 = $8548;
 $8550 = HEAP32[$8549>>2]|0;
 $8551 = (($8548) + 4)|0;
 $8552 = $8551;
 $8553 = HEAP32[$8552>>2]|0;
 $8554 = (_bitshift64Ashr(($8550|0),($8553|0),6)|0);
 $8555 = (getTempRet0() | 0);
 $8556 = $8554&255;
 $8557 = $4;
 $8558 = ((($8557)) + 27|0);
 HEAP8[$8558>>0] = $8556;
 $8559 = $54;
 $8560 = $8559;
 $8561 = HEAP32[$8560>>2]|0;
 $8562 = (($8559) + 4)|0;
 $8563 = $8562;
 $8564 = HEAP32[$8563>>2]|0;
 $8565 = (_bitshift64Ashr(($8561|0),($8564|0),14)|0);
 $8566 = (getTempRet0() | 0);
 $8567 = $55;
 $8568 = $8567;
 $8569 = HEAP32[$8568>>2]|0;
 $8570 = (($8567) + 4)|0;
 $8571 = $8570;
 $8572 = HEAP32[$8571>>2]|0;
 $8573 = (_bitshift64Shl(($8569|0),($8572|0),7)|0);
 $8574 = (getTempRet0() | 0);
 $8575 = $8565 | $8573;
 $8566 | $8574;
 $8576 = $8575&255;
 $8577 = $4;
 $8578 = ((($8577)) + 28|0);
 HEAP8[$8578>>0] = $8576;
 $8579 = $55;
 $8580 = $8579;
 $8581 = HEAP32[$8580>>2]|0;
 $8582 = (($8579) + 4)|0;
 $8583 = $8582;
 $8584 = HEAP32[$8583>>2]|0;
 $8585 = (_bitshift64Ashr(($8581|0),($8584|0),1)|0);
 $8586 = (getTempRet0() | 0);
 $8587 = $8585&255;
 $8588 = $4;
 $8589 = ((($8588)) + 29|0);
 HEAP8[$8589>>0] = $8587;
 $8590 = $55;
 $8591 = $8590;
 $8592 = HEAP32[$8591>>2]|0;
 $8593 = (($8590) + 4)|0;
 $8594 = $8593;
 $8595 = HEAP32[$8594>>2]|0;
 $8596 = (_bitshift64Ashr(($8592|0),($8595|0),9)|0);
 $8597 = (getTempRet0() | 0);
 $8598 = $8596&255;
 $8599 = $4;
 $8600 = ((($8599)) + 30|0);
 HEAP8[$8600>>0] = $8598;
 $8601 = $55;
 $8602 = $8601;
 $8603 = HEAP32[$8602>>2]|0;
 $8604 = (($8601) + 4)|0;
 $8605 = $8604;
 $8606 = HEAP32[$8605>>2]|0;
 $8607 = (_bitshift64Ashr(($8603|0),($8606|0),17)|0);
 $8608 = (getTempRet0() | 0);
 $8609 = $8607&255;
 $8610 = $4;
 $8611 = ((($8610)) + 31|0);
 HEAP8[$8611>>0] = $8609;
 STACKTOP = sp;return;
}
function _sc_check($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp + 56|0;
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $1 = $0;
 $10 = $1;
 $11 = (_load_4($10)|0);
 $12 = (getTempRet0() | 0);
 $13 = $2;
 $14 = $13;
 HEAP32[$14>>2] = $11;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = (_load_4($18)|0);
 $20 = (getTempRet0() | 0);
 $21 = $3;
 $22 = $21;
 HEAP32[$22>>2] = $19;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $20;
 $25 = $1;
 $26 = ((($25)) + 8|0);
 $27 = (_load_4($26)|0);
 $28 = (getTempRet0() | 0);
 $29 = $4;
 $30 = $29;
 HEAP32[$30>>2] = $27;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = $1;
 $34 = ((($33)) + 12|0);
 $35 = (_load_4($34)|0);
 $36 = (getTempRet0() | 0);
 $37 = $5;
 $38 = $37;
 HEAP32[$38>>2] = $35;
 $39 = (($37) + 4)|0;
 $40 = $39;
 HEAP32[$40>>2] = $36;
 $41 = $1;
 $42 = ((($41)) + 16|0);
 $43 = (_load_4($42)|0);
 $44 = (getTempRet0() | 0);
 $45 = $6;
 $46 = $45;
 HEAP32[$46>>2] = $43;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = $1;
 $50 = ((($49)) + 20|0);
 $51 = (_load_4($50)|0);
 $52 = (getTempRet0() | 0);
 $53 = $7;
 $54 = $53;
 HEAP32[$54>>2] = $51;
 $55 = (($53) + 4)|0;
 $56 = $55;
 HEAP32[$56>>2] = $52;
 $57 = $1;
 $58 = ((($57)) + 24|0);
 $59 = (_load_4($58)|0);
 $60 = (getTempRet0() | 0);
 $61 = $8;
 $62 = $61;
 HEAP32[$62>>2] = $59;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = $1;
 $66 = ((($65)) + 28|0);
 $67 = (_load_4($66)|0);
 $68 = (getTempRet0() | 0);
 $69 = $9;
 $70 = $69;
 HEAP32[$70>>2] = $67;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $68;
 $73 = $2;
 $74 = $73;
 $75 = HEAP32[$74>>2]|0;
 $76 = (($73) + 4)|0;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (_i64Subtract(1559614444,0,($75|0),($78|0))|0);
 $80 = (getTempRet0() | 0);
 $81 = (_signum($79,$80)|0);
 $82 = (getTempRet0() | 0);
 $83 = $3;
 $84 = $83;
 $85 = HEAP32[$84>>2]|0;
 $86 = (($83) + 4)|0;
 $87 = $86;
 $88 = HEAP32[$87>>2]|0;
 $89 = (_i64Subtract(1477600026,0,($85|0),($88|0))|0);
 $90 = (getTempRet0() | 0);
 $91 = (_signum($89,$90)|0);
 $92 = (getTempRet0() | 0);
 $93 = (_bitshift64Shl(($91|0),($92|0),1)|0);
 $94 = (getTempRet0() | 0);
 $95 = (_i64Add(($81|0),($82|0),($93|0),($94|0))|0);
 $96 = (getTempRet0() | 0);
 $97 = $4;
 $98 = $97;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($97) + 4)|0;
 $101 = $100;
 $102 = HEAP32[$101>>2]|0;
 $103 = (_i64Subtract(-1560830762,0,($99|0),($102|0))|0);
 $104 = (getTempRet0() | 0);
 $105 = (_signum($103,$104)|0);
 $106 = (getTempRet0() | 0);
 $107 = (_bitshift64Shl(($105|0),($106|0),2)|0);
 $108 = (getTempRet0() | 0);
 $109 = (_i64Add(($95|0),($96|0),($107|0),($108|0))|0);
 $110 = (getTempRet0() | 0);
 $111 = $5;
 $112 = $111;
 $113 = HEAP32[$112>>2]|0;
 $114 = (($111) + 4)|0;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (_i64Subtract(350157278,0,($113|0),($116|0))|0);
 $118 = (getTempRet0() | 0);
 $119 = (_signum($117,$118)|0);
 $120 = (getTempRet0() | 0);
 $121 = (_bitshift64Shl(($119|0),($120|0),3)|0);
 $122 = (getTempRet0() | 0);
 $123 = (_i64Add(($109|0),($110|0),($121|0),($122|0))|0);
 $124 = (getTempRet0() | 0);
 $125 = $6;
 $126 = $125;
 $127 = HEAP32[$126>>2]|0;
 $128 = (($125) + 4)|0;
 $129 = $128;
 $130 = HEAP32[$129>>2]|0;
 $131 = (_i64Subtract(0,0,($127|0),($130|0))|0);
 $132 = (getTempRet0() | 0);
 $133 = (_signum($131,$132)|0);
 $134 = (getTempRet0() | 0);
 $135 = (_bitshift64Shl(($133|0),($134|0),4)|0);
 $136 = (getTempRet0() | 0);
 $137 = (_i64Add(($123|0),($124|0),($135|0),($136|0))|0);
 $138 = (getTempRet0() | 0);
 $139 = $7;
 $140 = $139;
 $141 = HEAP32[$140>>2]|0;
 $142 = (($139) + 4)|0;
 $143 = $142;
 $144 = HEAP32[$143>>2]|0;
 $145 = (_i64Subtract(0,0,($141|0),($144|0))|0);
 $146 = (getTempRet0() | 0);
 $147 = (_signum($145,$146)|0);
 $148 = (getTempRet0() | 0);
 $149 = (_bitshift64Shl(($147|0),($148|0),5)|0);
 $150 = (getTempRet0() | 0);
 $151 = (_i64Add(($137|0),($138|0),($149|0),($150|0))|0);
 $152 = (getTempRet0() | 0);
 $153 = $8;
 $154 = $153;
 $155 = HEAP32[$154>>2]|0;
 $156 = (($153) + 4)|0;
 $157 = $156;
 $158 = HEAP32[$157>>2]|0;
 $159 = (_i64Subtract(0,0,($155|0),($158|0))|0);
 $160 = (getTempRet0() | 0);
 $161 = (_signum($159,$160)|0);
 $162 = (getTempRet0() | 0);
 $163 = (_bitshift64Shl(($161|0),($162|0),6)|0);
 $164 = (getTempRet0() | 0);
 $165 = (_i64Add(($151|0),($152|0),($163|0),($164|0))|0);
 $166 = (getTempRet0() | 0);
 $167 = $9;
 $168 = $167;
 $169 = HEAP32[$168>>2]|0;
 $170 = (($167) + 4)|0;
 $171 = $170;
 $172 = HEAP32[$171>>2]|0;
 $173 = (_i64Subtract(268435456,0,($169|0),($172|0))|0);
 $174 = (getTempRet0() | 0);
 $175 = (_signum($173,$174)|0);
 $176 = (getTempRet0() | 0);
 $177 = (_bitshift64Shl(($175|0),($176|0),7)|0);
 $178 = (getTempRet0() | 0);
 $179 = (_i64Add(($165|0),($166|0),($177|0),($178|0))|0);
 $180 = (getTempRet0() | 0);
 $181 = (_bitshift64Ashr(($179|0),($180|0),8)|0);
 $182 = (getTempRet0() | 0);
 STACKTOP = sp;return ($181|0);
}
function _signum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_bitshift64Ashr(($9|0),($12|0),63)|0);
 $14 = (getTempRet0() | 0);
 $15 = $2;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (_i64Subtract(0,0,($17|0),($20|0))|0);
 $22 = (getTempRet0() | 0);
 $23 = (_bitshift64Ashr(($21|0),($22|0),63)|0);
 $24 = (getTempRet0() | 0);
 $25 = (_i64Subtract(($13|0),($14|0),($23|0),($24|0))|0);
 $26 = (getTempRet0() | 0);
 setTempRet0(($26) | 0);
 STACKTOP = sp;return ($25|0);
}
function _hash_permutation($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _keccakf($2,24);
 STACKTOP = sp;return;
}
function _hash_process($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 _keccak1600($6,$7,$8);
 STACKTOP = sp;return;
}
function _cn_fast_hash($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = $4;
 _hash_process($6,$7,$8);
 $9 = $5;
 dest=$9; src=$6; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _keccakf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $7 = sp + 40|0;
 $8 = sp;
 $2 = $0;
 $3 = $1;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $3;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $4 = 0;
  while(1) {
   $12 = $4;
   $13 = ($12|0)<(5);
   if (!($13)) {
    break;
   }
   $14 = $2;
   $15 = $4;
   $16 = (($14) + ($15<<3)|0);
   $17 = $16;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = $2;
   $24 = $4;
   $25 = (($24) + 5)|0;
   $26 = (($23) + ($25<<3)|0);
   $27 = $26;
   $28 = $27;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($27) + 4)|0;
   $31 = $30;
   $32 = HEAP32[$31>>2]|0;
   $33 = $19 ^ $29;
   $34 = $22 ^ $32;
   $35 = $2;
   $36 = $4;
   $37 = (($36) + 10)|0;
   $38 = (($35) + ($37<<3)|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = $33 ^ $41;
   $46 = $34 ^ $44;
   $47 = $2;
   $48 = $4;
   $49 = (($48) + 15)|0;
   $50 = (($47) + ($49<<3)|0);
   $51 = $50;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($51) + 4)|0;
   $55 = $54;
   $56 = HEAP32[$55>>2]|0;
   $57 = $45 ^ $53;
   $58 = $46 ^ $56;
   $59 = $2;
   $60 = $4;
   $61 = (($60) + 20)|0;
   $62 = (($59) + ($61<<3)|0);
   $63 = $62;
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + 4)|0;
   $67 = $66;
   $68 = HEAP32[$67>>2]|0;
   $69 = $57 ^ $65;
   $70 = $58 ^ $68;
   $71 = $4;
   $72 = (($8) + ($71<<3)|0);
   $73 = $72;
   $74 = $73;
   HEAP32[$74>>2] = $69;
   $75 = (($73) + 4)|0;
   $76 = $75;
   HEAP32[$76>>2] = $70;
   $77 = $4;
   $78 = (($77) + 1)|0;
   $4 = $78;
  }
  $4 = 0;
  while(1) {
   $79 = $4;
   $80 = ($79|0)<(5);
   if (!($80)) {
    break;
   }
   $81 = $4;
   $82 = (($81) + 4)|0;
   $83 = (($82|0) % 5)&-1;
   $84 = (($8) + ($83<<3)|0);
   $85 = $84;
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = (($85) + 4)|0;
   $89 = $88;
   $90 = HEAP32[$89>>2]|0;
   $91 = $4;
   $92 = (($91) + 1)|0;
   $93 = (($92|0) % 5)&-1;
   $94 = (($8) + ($93<<3)|0);
   $95 = $94;
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($95) + 4)|0;
   $99 = $98;
   $100 = HEAP32[$99>>2]|0;
   $101 = (_bitshift64Shl(($97|0),($100|0),1)|0);
   $102 = (getTempRet0() | 0);
   $103 = $4;
   $104 = (($103) + 1)|0;
   $105 = (($104|0) % 5)&-1;
   $106 = (($8) + ($105<<3)|0);
   $107 = $106;
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = (($107) + 4)|0;
   $111 = $110;
   $112 = HEAP32[$111>>2]|0;
   $113 = (_bitshift64Lshr(($109|0),($112|0),63)|0);
   $114 = (getTempRet0() | 0);
   $115 = $101 | $113;
   $116 = $102 | $114;
   $117 = $87 ^ $115;
   $118 = $90 ^ $116;
   $119 = $7;
   $120 = $119;
   HEAP32[$120>>2] = $117;
   $121 = (($119) + 4)|0;
   $122 = $121;
   HEAP32[$122>>2] = $118;
   $5 = 0;
   while(1) {
    $123 = $5;
    $124 = ($123|0)<(25);
    if (!($124)) {
     break;
    }
    $125 = $7;
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = (($125) + 4)|0;
    $129 = $128;
    $130 = HEAP32[$129>>2]|0;
    $131 = $2;
    $132 = $5;
    $133 = $4;
    $134 = (($132) + ($133))|0;
    $135 = (($131) + ($134<<3)|0);
    $136 = $135;
    $137 = $136;
    $138 = HEAP32[$137>>2]|0;
    $139 = (($136) + 4)|0;
    $140 = $139;
    $141 = HEAP32[$140>>2]|0;
    $142 = $138 ^ $127;
    $143 = $141 ^ $130;
    $144 = $135;
    $145 = $144;
    HEAP32[$145>>2] = $142;
    $146 = (($144) + 4)|0;
    $147 = $146;
    HEAP32[$147>>2] = $143;
    $148 = $5;
    $149 = (($148) + 5)|0;
    $5 = $149;
   }
   $150 = $4;
   $151 = (($150) + 1)|0;
   $4 = $151;
  }
  $152 = $2;
  $153 = ((($152)) + 8|0);
  $154 = $153;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($154) + 4)|0;
  $158 = $157;
  $159 = HEAP32[$158>>2]|0;
  $160 = $7;
  $161 = $160;
  HEAP32[$161>>2] = $156;
  $162 = (($160) + 4)|0;
  $163 = $162;
  HEAP32[$163>>2] = $159;
  $4 = 0;
  while(1) {
   $164 = $4;
   $165 = ($164|0)<(24);
   if (!($165)) {
    break;
   }
   $166 = $4;
   $167 = (32416 + ($166<<2)|0);
   $168 = HEAP32[$167>>2]|0;
   $5 = $168;
   $169 = $2;
   $170 = $5;
   $171 = (($169) + ($170<<3)|0);
   $172 = $171;
   $173 = $172;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($172) + 4)|0;
   $176 = $175;
   $177 = HEAP32[$176>>2]|0;
   $178 = $8;
   $179 = $178;
   HEAP32[$179>>2] = $174;
   $180 = (($178) + 4)|0;
   $181 = $180;
   HEAP32[$181>>2] = $177;
   $182 = $7;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = (($182) + 4)|0;
   $186 = $185;
   $187 = HEAP32[$186>>2]|0;
   $188 = $4;
   $189 = (32320 + ($188<<2)|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = (_bitshift64Shl(($184|0),($187|0),($190|0))|0);
   $192 = (getTempRet0() | 0);
   $193 = $7;
   $194 = $193;
   $195 = HEAP32[$194>>2]|0;
   $196 = (($193) + 4)|0;
   $197 = $196;
   $198 = HEAP32[$197>>2]|0;
   $199 = $4;
   $200 = (32320 + ($199<<2)|0);
   $201 = HEAP32[$200>>2]|0;
   $202 = (64 - ($201))|0;
   $203 = (_bitshift64Lshr(($195|0),($198|0),($202|0))|0);
   $204 = (getTempRet0() | 0);
   $205 = $191 | $203;
   $206 = $192 | $204;
   $207 = $2;
   $208 = $5;
   $209 = (($207) + ($208<<3)|0);
   $210 = $209;
   $211 = $210;
   HEAP32[$211>>2] = $205;
   $212 = (($210) + 4)|0;
   $213 = $212;
   HEAP32[$213>>2] = $206;
   $214 = $8;
   $215 = $214;
   $216 = HEAP32[$215>>2]|0;
   $217 = (($214) + 4)|0;
   $218 = $217;
   $219 = HEAP32[$218>>2]|0;
   $220 = $7;
   $221 = $220;
   HEAP32[$221>>2] = $216;
   $222 = (($220) + 4)|0;
   $223 = $222;
   HEAP32[$223>>2] = $219;
   $224 = $4;
   $225 = (($224) + 1)|0;
   $4 = $225;
  }
  $5 = 0;
  while(1) {
   $226 = $5;
   $227 = ($226|0)<(25);
   if (!($227)) {
    break;
   }
   $4 = 0;
   while(1) {
    $228 = $4;
    $229 = ($228|0)<(5);
    if (!($229)) {
     break;
    }
    $230 = $2;
    $231 = $5;
    $232 = $4;
    $233 = (($231) + ($232))|0;
    $234 = (($230) + ($233<<3)|0);
    $235 = $234;
    $236 = $235;
    $237 = HEAP32[$236>>2]|0;
    $238 = (($235) + 4)|0;
    $239 = $238;
    $240 = HEAP32[$239>>2]|0;
    $241 = $4;
    $242 = (($8) + ($241<<3)|0);
    $243 = $242;
    $244 = $243;
    HEAP32[$244>>2] = $237;
    $245 = (($243) + 4)|0;
    $246 = $245;
    HEAP32[$246>>2] = $240;
    $247 = $4;
    $248 = (($247) + 1)|0;
    $4 = $248;
   }
   $4 = 0;
   while(1) {
    $249 = $4;
    $250 = ($249|0)<(5);
    if (!($250)) {
     break;
    }
    $251 = $4;
    $252 = (($251) + 1)|0;
    $253 = (($252|0) % 5)&-1;
    $254 = (($8) + ($253<<3)|0);
    $255 = $254;
    $256 = $255;
    $257 = HEAP32[$256>>2]|0;
    $258 = (($255) + 4)|0;
    $259 = $258;
    $260 = HEAP32[$259>>2]|0;
    $261 = $257 ^ -1;
    $262 = $260 ^ -1;
    $263 = $4;
    $264 = (($263) + 2)|0;
    $265 = (($264|0) % 5)&-1;
    $266 = (($8) + ($265<<3)|0);
    $267 = $266;
    $268 = $267;
    $269 = HEAP32[$268>>2]|0;
    $270 = (($267) + 4)|0;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = $261 & $269;
    $274 = $262 & $272;
    $275 = $2;
    $276 = $5;
    $277 = $4;
    $278 = (($276) + ($277))|0;
    $279 = (($275) + ($278<<3)|0);
    $280 = $279;
    $281 = $280;
    $282 = HEAP32[$281>>2]|0;
    $283 = (($280) + 4)|0;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = $282 ^ $273;
    $287 = $285 ^ $274;
    $288 = $279;
    $289 = $288;
    HEAP32[$289>>2] = $286;
    $290 = (($288) + 4)|0;
    $291 = $290;
    HEAP32[$291>>2] = $287;
    $292 = $4;
    $293 = (($292) + 1)|0;
    $4 = $293;
   }
   $294 = $5;
   $295 = (($294) + 5)|0;
   $5 = $295;
  }
  $296 = $6;
  $297 = (32128 + ($296<<3)|0);
  $298 = $297;
  $299 = $298;
  $300 = HEAP32[$299>>2]|0;
  $301 = (($298) + 4)|0;
  $302 = $301;
  $303 = HEAP32[$302>>2]|0;
  $304 = $2;
  $305 = $304;
  $306 = $305;
  $307 = HEAP32[$306>>2]|0;
  $308 = (($305) + 4)|0;
  $309 = $308;
  $310 = HEAP32[$309>>2]|0;
  $311 = $307 ^ $300;
  $312 = $310 ^ $303;
  $313 = $304;
  $314 = $313;
  HEAP32[$314>>2] = $311;
  $315 = (($313) + 4)|0;
  $316 = $315;
  HEAP32[$316>>2] = $312;
  $317 = $6;
  $318 = (($317) + 1)|0;
  $6 = $318;
 }
 STACKTOP = sp;return;
}
function _keccak($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $8 = sp + 144|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = 136;
 $14 = $7;
 $15 = (200)==($14|0);
 if ($15) {
  $19 = 136;
 } else {
  $16 = $7;
  $17 = $16<<1;
  $18 = (200 - ($17))|0;
  $19 = $18;
 }
 $11 = $19;
 $20 = $11;
 $21 = (($20|0) / 8)&-1;
 $12 = $21;
 _memset(($8|0),0,200)|0;
 while(1) {
  $22 = $5;
  $23 = $11;
  $24 = ($22|0)>=($23|0);
  if (!($24)) {
   break;
  }
  $10 = 0;
  while(1) {
   $25 = $10;
   $26 = $12;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $4;
   $29 = $10;
   $30 = (($28) + ($29<<3)|0);
   $31 = $30;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($31) + 4)|0;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = $10;
   $38 = (($8) + ($37<<3)|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = $41 ^ $33;
   $46 = $44 ^ $36;
   $47 = $38;
   $48 = $47;
   HEAP32[$48>>2] = $45;
   $49 = (($47) + 4)|0;
   $50 = $49;
   HEAP32[$50>>2] = $46;
   $51 = $10;
   $52 = (($51) + 1)|0;
   $10 = $52;
  }
  _keccakf($8,24);
  $53 = $11;
  $54 = $5;
  $55 = (($54) - ($53))|0;
  $5 = $55;
  $56 = $11;
  $57 = $4;
  $58 = (($57) + ($56)|0);
  $4 = $58;
 }
 $59 = $4;
 $60 = $5;
 _memcpy(($9|0),($59|0),($60|0))|0;
 $61 = $5;
 $62 = (($61) + 1)|0;
 $5 = $62;
 $63 = (($9) + ($61)|0);
 HEAP8[$63>>0] = 1;
 $64 = $5;
 $65 = (($9) + ($64)|0);
 $66 = $11;
 $67 = $5;
 $68 = (($66) - ($67))|0;
 _memset(($65|0),0,($68|0))|0;
 $69 = $11;
 $70 = (($69) - 1)|0;
 $71 = (($9) + ($70)|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 | 128;
 $75 = $74&255;
 HEAP8[$71>>0] = $75;
 $10 = 0;
 while(1) {
  $76 = $10;
  $77 = $12;
  $78 = ($76|0)<($77|0);
  if (!($78)) {
   break;
  }
  $79 = $10;
  $80 = (($9) + ($79<<3)|0);
  $81 = $80;
  $82 = $81;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($81) + 4)|0;
  $85 = $84;
  $86 = HEAP32[$85>>2]|0;
  $87 = $10;
  $88 = (($8) + ($87<<3)|0);
  $89 = $88;
  $90 = $89;
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 4)|0;
  $93 = $92;
  $94 = HEAP32[$93>>2]|0;
  $95 = $91 ^ $83;
  $96 = $94 ^ $86;
  $97 = $88;
  $98 = $97;
  HEAP32[$98>>2] = $95;
  $99 = (($97) + 4)|0;
  $100 = $99;
  HEAP32[$100>>2] = $96;
  $101 = $10;
  $102 = (($101) + 1)|0;
  $10 = $102;
 }
 _keccakf($8,24);
 $103 = $6;
 $104 = $7;
 _memcpy(($103|0),($8|0),($104|0))|0;
 STACKTOP = sp;return 0;
}
function _keccak1600($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 (_keccak($6,$7,$8,200)|0);
 STACKTOP = sp;return;
}
function _init_random() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _generate_system_random_bytes(32,41644);
 $0 = HEAP32[10256]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[10256] = 1;
  return;
 } else {
  ___assert_fail((36795|0),(36809|0),86,(36825|0));
  // unreachable;
 }
}
function _generate_system_random_bytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $6 = (_open(36837,524544,$vararg_buffer)|0);
 $4 = $6;
 while(1) {
  $7 = $4;
  $8 = $3;
  $9 = $2;
  $10 = (_read($7,$8,$9)|0);
  $5 = $10;
  $11 = $5;
  $12 = $2;
  $13 = ($11|0)==($12|0);
  if ($13) {
   break;
  }
  $14 = $5;
  $15 = ($14|0)<(0);
  if ($15) {
  } else {
   $16 = $5;
   $17 = ($16|0)==(0);
   if (!($17)) {
    $18 = $3;
    $19 = $5;
    $20 = (_padd($18,$19)|0);
    $3 = $20;
    $21 = $5;
    $22 = $2;
    $23 = (($22) - ($21))|0;
    $2 = $23;
   }
  }
 }
 $24 = $4;
 (_close($24)|0);
 STACKTOP = sp;return;
}
function _padd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (($4) + ($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _deinit_random() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10256]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  HEAP32[10256] = 0;
  _memset((41644|0),0,200)|0;
  return;
 } else {
  ___assert_fail((36850|0),(36809|0),76,(36864|0));
  // unreachable;
 }
}
function _generate_random_bytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[10256]|0;
 $5 = ($4|0)==(1);
 if (!($5)) {
  ___assert_fail((36850|0),(36809|0),93,(36878|0));
  // unreachable;
 }
 HEAP32[10256] = 2;
 $6 = $2;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = HEAP32[10256]|0;
  $9 = ($8|0)==(2);
  if (!($9)) {
   ___assert_fail((36900|0),(36809|0),98,(36878|0));
   // unreachable;
  }
  HEAP32[10256] = 1;
  STACKTOP = sp;return;
 }
 while(1) {
  _hash_permutation(41644);
  $10 = $2;
  $11 = ($10>>>0)<=(136);
  $12 = $3;
  if ($11) {
   break;
  }
  _memcpy(($12|0),(41644|0),136)|0;
  $16 = $3;
  $17 = (_padd($16,136)|0);
  $3 = $17;
  $18 = $2;
  $19 = (($18) - 136)|0;
  $2 = $19;
 }
 $13 = $2;
 _memcpy(($12|0),(41644|0),($13|0))|0;
 $14 = HEAP32[10256]|0;
 $15 = ($14|0)==(2);
 if (!($15)) {
  ___assert_fail((36900|0),(36809|0),108,(36878|0));
  // unreachable;
 }
 HEAP32[10256] = 1;
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_crypto_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $7 = sp + 160|0;
 $8 = sp;
 $5 = $0;
 $6 = $1;
 $3 = $7;
 $4 = 41028;
 $9 = $3;
 $10 = $4;
 HEAP32[$9>>2] = $10;
 $11 = HEAP32[$9>>2]|0;
 __ZNSt3__25mutex4lockEv($11);
 $12 = $6;
 __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($12);
 $13 = $6;
 _ge_scalarmult_base($8,$13);
 $14 = $5;
 _ge_p3_tobytes($14,$8);
 $2 = $7;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 __ZNSt3__25mutex6unlockEv($16);
 STACKTOP = sp;return;
}
function __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp;
 $1 = $0;
 _generate_random_bytes(64,$2);
 _sc_reduce($2);
 $3 = $1;
 dest=$3; src=$2; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN6Crypto9SecretKeyC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN6CryptoL20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 16|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZZN6CryptoL20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarEEN3__0C2Ev($6);
 $8 = ((($6)) + 32|0);
 HEAP32[$7>>2] = $8;
 $9 = $3;
 dest=$6; src=$9; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $10 = $4;
 __ZN5Tools12write_varintIRPcmEENSt3__29enable_ifIXaasr3std11is_integralIT0_EE5valuesr3std11is_unsignedIS5_EE5valueEvE4typeEOT_S5_($7,$10);
 $11 = HEAP32[$7>>2]|0;
 $12 = ((($6)) + 32|0);
 $13 = ((($12)) + 5|0);
 $14 = ($11>>>0)<=($13>>>0);
 if ($14) {
  $15 = HEAP32[$7>>2]|0;
  $16 = $15;
  $17 = $6;
  $18 = (($16) - ($17))|0;
  $19 = $5;
  __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($6,$18,$19);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((36932|0),(36914|0),123,(36982|0));
  // unreachable;
 }
}
function __ZZN6CryptoL20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarEEN3__0C2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZN6Crypto13KeyDerivationC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN5Tools12write_varintIRPcmEENSt3__29enable_ifIXaasr3std11is_integralIT0_EE5valuesr3std11is_unsignedIS5_EE5valueEvE4typeEOT_S5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $4 = $3;
  $5 = ($4>>>0)>=(128);
  $6 = $3;
  $7 = $6&255;
  if (!($5)) {
   break;
  }
  $8 = $7 << 24 >> 24;
  $9 = $8 & 127;
  $10 = $9 | 128;
  $11 = $10&255;
  $12 = $2;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 1|0);
  HEAP32[$12>>2] = $14;
  HEAP8[$13>>0] = $11;
  $15 = $3;
  $16 = $15 >>> 7;
  $3 = $16;
 }
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($18)) + 1|0);
 HEAP32[$17>>2] = $19;
 HEAP8[$18>>0] = $7;
 STACKTOP = sp;return;
}
function __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($6,$7,$8);
 $9 = $5;
 _sc_reduce32($9);
 STACKTOP = sp;return;
}
function __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _cn_fast_hash($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN6Crypto13KeyDerivationC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(816|0);
 $4 = sp + 808|0;
 $9 = sp + 776|0;
 $10 = sp + 600|0;
 $11 = sp + 440|0;
 $12 = sp + 280|0;
 $13 = sp + 120|0;
 $14 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $15 = $7;
 $16 = (_ge_frombytes_vartime($10,$15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val = 0;
  HEAP8[$4>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $21 = $$pre_trunc&1;
  STACKTOP = sp;return ($21|0);
 } else {
  $18 = $5;
  $19 = $6;
  __ZN6CryptoL20derivation_to_scalarERKNS_13KeyDerivationEmRNS_19EllipticCurveScalarE($18,$19,$9);
  _ge_scalarmult_base($11,$9);
  _ge_p3_to_cached($12,$11);
  _ge_sub($13,$10,$12);
  _ge_p1p1_to_p2($14,$13);
  $20 = $8;
  _ge_tobytes($20,$14);
  $$expand_i1_val2 = 1;
  HEAP8[$4>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$4>>0]|0;
  $21 = $$pre_trunc&1;
  STACKTOP = sp;return ($21|0);
 }
 return (0)|0;
}
function __ZN6Crypto9PublicKeyC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN6Crypto8KeyImageC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $6 = sp + 120|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $4;
 $9 = (_sc_check($8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = $3;
  __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($11,$6);
  $12 = $4;
  _ge_scalarmult($7,$12,$6);
  $13 = $5;
  _ge_tobytes($13,$7);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((37003|0),(36914|0),346,(37173|0));
  // unreachable;
 }
}
function __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $5 = sp + 296|0;
 $6 = sp + 160|0;
 $7 = sp;
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $2 = $8;
 $9 = $2;
 __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($9,32,$5);
 _ge_fromfe_frombytes_vartime($6,$5);
 _ge_mul8($7,$6);
 $10 = $4;
 _ge_p1p1_to_p3($10,$7);
 STACKTOP = sp;return;
}
function __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEy($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$alloca_mul = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2304|0);
 $25 = sp + 1376|0;
 $26 = sp + 1368|0;
 $27 = sp + 1360|0;
 $28 = sp + 1352|0;
 $33 = sp + 2291|0;
 $34 = sp + 2290|0;
 $35 = sp + 2289|0;
 $36 = sp + 2288|0;
 $68 = sp + 1344|0;
 $69 = sp + 1336|0;
 $70 = sp + 1328|0;
 $71 = sp + 1320|0;
 $76 = sp + 2287|0;
 $77 = sp + 2286|0;
 $78 = sp + 2285|0;
 $79 = sp + 2284|0;
 $96 = sp + 1312|0;
 $97 = sp + 1304|0;
 $98 = sp + 1296|0;
 $99 = sp + 1288|0;
 $104 = sp + 2283|0;
 $105 = sp + 2282|0;
 $106 = sp + 2281|0;
 $107 = sp + 2280|0;
 $112 = sp + 1280|0;
 $113 = sp + 1844|0;
 $114 = sp + 1840|0;
 $115 = sp + 1680|0;
 $116 = sp;
 $117 = sp + 2248|0;
 $118 = sp + 2216|0;
 $119 = sp + 2184|0;
 $121 = sp + 2182|0;
 $124 = sp + 1544|0;
 $125 = sp + 1384|0;
 $126 = sp + 2181|0;
 $127 = sp + 2180|0;
 $128 = $112;
 $129 = $128;
 HEAP32[$129>>2] = $5;
 $130 = (($128) + 4)|0;
 $131 = $130;
 HEAP32[$131>>2] = $6;
 $111 = $3;
 $132 = $111;
 $133 = ((($132)) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = HEAP32[$132>>2]|0;
 $136 = $134;
 $137 = $135;
 $138 = (($136) - ($137))|0;
 $139 = (($138|0) / 32)&-1;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2Em($113,$139);
 $109 = $114;
 $110 = 41028;
 $140 = $109;
 $141 = $110;
 HEAP32[$140>>2] = $141;
 $142 = HEAP32[$140>>2]|0;
 __ZNSt3__25mutex4lockEv($142);
 $108 = $3;
 $143 = $108;
 $144 = ((($143)) + 4|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = HEAP32[$143>>2]|0;
 $147 = $145;
 $148 = $146;
 $149 = (($147) - ($148))|0;
 $150 = (($149|0) / 32)&-1;
 $151 = (__ZN6CryptoL12rs_comm_sizeEm($150)|0);
 $$alloca_mul = $151;
 $152 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $120 = $152;
 $153 = (_ge_frombytes_vartime($115,$2)|0);
 $154 = ($153|0)!=(0);
 if ($154) {
  HEAP8[$121>>0] = 0;
  $101 = $0;
  $102 = $121;
  $103 = $113;
  $155 = $101;
  $156 = $102;
  $100 = $156;
  $157 = $100;
  $158 = $103;
  $84 = $158;
  $159 = $84;
  ;HEAP8[$96>>0]=HEAP8[$107>>0]|0;
  ;HEAP8[$97>>0]=HEAP8[$106>>0]|0;
  ;HEAP8[$98>>0]=HEAP8[$105>>0]|0;
  ;HEAP8[$99>>0]=HEAP8[$104>>0]|0;
  $93 = $155;
  $94 = $157;
  $95 = $159;
  $160 = $93;
  $161 = $94;
  $92 = $161;
  $162 = $92;
  $87 = $160;
  $88 = $162;
  $163 = $87;
  $164 = $88;
  $86 = $164;
  $165 = $86;
  $166 = HEAP8[$165>>0]|0;
  $167 = $166&1;
  $168 = $167&1;
  HEAP8[$163>>0] = $168;
  $169 = ((($160)) + 4|0);
  $170 = $95;
  $85 = $170;
  $171 = $85;
  $90 = $169;
  $91 = $171;
  $172 = $90;
  $173 = $91;
  $89 = $173;
  $174 = $89;
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2ERKS5_($172,$174);
  $122 = 1;
  $82 = $114;
  $352 = $82;
  $353 = HEAP32[$352>>2]|0;
  __ZNSt3__25mutex6unlockEv($353);
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($113);
  STACKTOP = sp;return;
 }
 _ge_dsm_precomp($116,$115);
 _sc_0($117);
 $175 = $120;
 dest=$175; src=$1; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $123 = 0;
 while(1) {
  $176 = $123;
  $83 = $3;
  $177 = $83;
  $178 = ((($177)) + 4|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = HEAP32[$177>>2]|0;
  $181 = $179;
  $182 = $180;
  $183 = (($181) - ($182))|0;
  $184 = (($183|0) / 32)&-1;
  $185 = ($176>>>0)<($184>>>0);
  if (!($185)) {
   label = 11;
   break;
  }
  $186 = $123;
  $187 = $112;
  $188 = $187;
  $189 = HEAP32[$188>>2]|0;
  $190 = (($187) + 4)|0;
  $191 = $190;
  $192 = HEAP32[$191>>2]|0;
  $193 = ($186|0)==($189|0);
  $194 = (0)==($192|0);
  $195 = $193 & $194;
  if ($195) {
   __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($118);
   _ge_scalarmult_base($125,$118);
   $196 = $120;
   $197 = ((($196)) + 32|0);
   $198 = $123;
   $199 = (($197) + ($198<<6)|0);
   _ge_p3_tobytes($199,$125);
   $200 = $123;
   $80 = $3;
   $81 = $200;
   $201 = $80;
   $202 = HEAP32[$201>>2]|0;
   $203 = $81;
   $204 = (($202) + ($203<<5)|0);
   __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($204,$125);
   _ge_scalarmult($124,$118,$125);
   $205 = $120;
   $206 = ((($205)) + 32|0);
   $207 = $123;
   $208 = (($206) + ($207<<6)|0);
   $209 = ((($208)) + 32|0);
   _ge_tobytes($209,$124);
  } else {
   $210 = $123;
   $54 = $113;
   $55 = $210;
   $211 = $54;
   $212 = HEAP32[$211>>2]|0;
   $213 = $55;
   $214 = (($212) + ($213<<6)|0);
   __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($214);
   $215 = $123;
   $46 = $113;
   $47 = $215;
   $216 = $46;
   $217 = HEAP32[$216>>2]|0;
   $218 = $47;
   $219 = (($217) + ($218<<6)|0);
   $220 = ((($219)) + 32|0);
   __ZN6CryptoL13random_scalarERNS_19EllipticCurveScalarE($220);
   $221 = $123;
   $44 = $3;
   $45 = $221;
   $222 = $44;
   $223 = HEAP32[$222>>2]|0;
   $224 = $45;
   $225 = (($223) + ($224<<5)|0);
   $226 = (_ge_frombytes_vartime($125,$225)|0);
   $227 = ($226|0)!=(0);
   if ($227) {
    label = 8;
    break;
   }
   $248 = $123;
   $11 = $113;
   $12 = $248;
   $249 = $11;
   $250 = HEAP32[$249>>2]|0;
   $251 = $12;
   $252 = (($250) + ($251<<6)|0);
   $253 = $123;
   $7 = $113;
   $8 = $253;
   $254 = $7;
   $255 = HEAP32[$254>>2]|0;
   $256 = $8;
   $257 = (($255) + ($256<<6)|0);
   $258 = ((($257)) + 32|0);
   _ge_double_scalarmult_base_vartime($124,$252,$125,$258);
   $259 = $120;
   $260 = ((($259)) + 32|0);
   $261 = $123;
   $262 = (($260) + ($261<<6)|0);
   _ge_tobytes($262,$124);
   $263 = $123;
   $9 = $3;
   $10 = $263;
   $264 = $9;
   $265 = HEAP32[$264>>2]|0;
   $266 = $10;
   $267 = (($265) + ($266<<5)|0);
   __ZN6CryptoL10hash_to_ecERKNS_9PublicKeyERNS_5ge_p3E($267,$125);
   $268 = $123;
   $37 = $113;
   $38 = $268;
   $269 = $37;
   $270 = HEAP32[$269>>2]|0;
   $271 = $38;
   $272 = (($270) + ($271<<6)|0);
   $273 = ((($272)) + 32|0);
   $274 = $123;
   $39 = $113;
   $40 = $274;
   $275 = $39;
   $276 = HEAP32[$275>>2]|0;
   $277 = $40;
   $278 = (($276) + ($277<<6)|0);
   _ge_double_scalarmult_precomp_vartime($124,$273,$125,$278,$116);
   $279 = $120;
   $280 = ((($279)) + 32|0);
   $281 = $123;
   $282 = (($280) + ($281<<6)|0);
   $283 = ((($282)) + 32|0);
   _ge_tobytes($283,$124);
   $284 = $123;
   $41 = $113;
   $42 = $284;
   $285 = $41;
   $286 = HEAP32[$285>>2]|0;
   $287 = $42;
   $288 = (($286) + ($287<<6)|0);
   _sc_add($117,$117,$288);
  }
  $289 = $123;
  $290 = (($289) + 1)|0;
  $123 = $290;
 }
 if ((label|0) == 8) {
  HEAP8[$126>>0] = 0;
  $30 = $0;
  $31 = $126;
  $32 = $113;
  $228 = $30;
  $229 = $31;
  $29 = $229;
  $230 = $29;
  $231 = $32;
  $13 = $231;
  $232 = $13;
  ;HEAP8[$25>>0]=HEAP8[$36>>0]|0;
  ;HEAP8[$26>>0]=HEAP8[$35>>0]|0;
  ;HEAP8[$27>>0]=HEAP8[$34>>0]|0;
  ;HEAP8[$28>>0]=HEAP8[$33>>0]|0;
  $22 = $228;
  $23 = $230;
  $24 = $232;
  $233 = $22;
  $234 = $23;
  $21 = $234;
  $235 = $21;
  $16 = $233;
  $17 = $235;
  $236 = $16;
  $237 = $17;
  $15 = $237;
  $238 = $15;
  $239 = HEAP8[$238>>0]|0;
  $240 = $239&1;
  $241 = $240&1;
  HEAP8[$236>>0] = $241;
  $242 = ((($233)) + 4|0);
  $243 = $24;
  $14 = $243;
  $244 = $14;
  $19 = $242;
  $20 = $244;
  $245 = $19;
  $246 = $20;
  $18 = $246;
  $247 = $18;
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2ERKS5_($245,$247);
  $122 = 1;
  $82 = $114;
  $352 = $82;
  $353 = HEAP32[$352>>2]|0;
  __ZNSt3__25mutex6unlockEv($353);
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($113);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 11) {
  $291 = $120;
  $43 = $3;
  $292 = $43;
  $293 = ((($292)) + 4|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = HEAP32[$292>>2]|0;
  $296 = $294;
  $297 = $295;
  $298 = (($296) - ($297))|0;
  $299 = (($298|0) / 32)&-1;
  $300 = (__ZN6CryptoL12rs_comm_sizeEm($299)|0);
  __ZN6CryptoL14hash_to_scalarEPKvmRNS_19EllipticCurveScalarE($291,$300,$119);
  $301 = $112;
  $302 = $301;
  $303 = HEAP32[$302>>2]|0;
  $304 = (($301) + 4)|0;
  $305 = $304;
  $306 = HEAP32[$305>>2]|0;
  $48 = $113;
  $49 = $303;
  $307 = $48;
  $308 = HEAP32[$307>>2]|0;
  $309 = $49;
  $310 = (($308) + ($309<<6)|0);
  _sc_sub($310,$119,$117);
  $311 = $112;
  $312 = $311;
  $313 = HEAP32[$312>>2]|0;
  $314 = (($311) + 4)|0;
  $315 = $314;
  $316 = HEAP32[$315>>2]|0;
  $50 = $113;
  $51 = $313;
  $317 = $50;
  $318 = HEAP32[$317>>2]|0;
  $319 = $51;
  $320 = (($318) + ($319<<6)|0);
  $321 = ((($320)) + 32|0);
  $322 = $112;
  $323 = $322;
  $324 = HEAP32[$323>>2]|0;
  $325 = (($322) + 4)|0;
  $326 = $325;
  $327 = HEAP32[$326>>2]|0;
  $52 = $113;
  $53 = $324;
  $328 = $52;
  $329 = HEAP32[$328>>2]|0;
  $330 = $53;
  $331 = (($329) + ($330<<6)|0);
  _sc_mulsub($321,$331,$4,$118);
  HEAP8[$127>>0] = 1;
  $73 = $0;
  $74 = $127;
  $75 = $113;
  $332 = $73;
  $333 = $74;
  $72 = $333;
  $334 = $72;
  $335 = $75;
  $56 = $335;
  $336 = $56;
  ;HEAP8[$68>>0]=HEAP8[$79>>0]|0;
  ;HEAP8[$69>>0]=HEAP8[$78>>0]|0;
  ;HEAP8[$70>>0]=HEAP8[$77>>0]|0;
  ;HEAP8[$71>>0]=HEAP8[$76>>0]|0;
  $65 = $332;
  $66 = $334;
  $67 = $336;
  $337 = $65;
  $338 = $66;
  $64 = $338;
  $339 = $64;
  $59 = $337;
  $60 = $339;
  $340 = $59;
  $341 = $60;
  $58 = $341;
  $342 = $58;
  $343 = HEAP8[$342>>0]|0;
  $344 = $343&1;
  $345 = $344&1;
  HEAP8[$340>>0] = $345;
  $346 = ((($337)) + 4|0);
  $347 = $67;
  $57 = $347;
  $348 = $57;
  $62 = $346;
  $63 = $348;
  $349 = $62;
  $350 = $63;
  $61 = $350;
  $351 = $61;
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2ERKS5_($349,$351);
  $122 = 1;
  $82 = $114;
  $352 = $82;
  $353 = HEAP32[$352>>2]|0;
  __ZNSt3__25mutex6unlockEv($353);
  __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($113);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp + 8|0;
 $13 = $0;
 $14 = $1;
 $15 = $13;
 $11 = $15;
 $16 = $11;
 $10 = $16;
 HEAP32[$16>>2] = 0;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($16)) + 8|0);
 HEAP32[$12>>2] = 0;
 $8 = $18;
 $9 = $12;
 $19 = $8;
 $20 = $9;
 $7 = $20;
 $21 = $7;
 $3 = $19;
 $4 = $21;
 $22 = $3;
 $23 = $4;
 $2 = $23;
 HEAP32[$22>>2] = 0;
 $6 = $19;
 $24 = $6;
 $5 = $24;
 $25 = $14;
 $26 = ($25>>>0)>(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $14;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE8allocateEm($15,$27);
 $28 = $14;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endEm($15,$28);
 STACKTOP = sp;return;
}
function __ZN6CryptoL12rs_comm_sizeEm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2<<6;
 $4 = (32 + ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp + 36|0;
 $19 = sp;
 $21 = sp + 101|0;
 $27 = sp + 100|0;
 $25 = $0;
 $26 = $1;
 $29 = $25;
 $30 = $26;
 $24 = $30;
 $31 = $24;
 $32 = ((($31)) + 8|0);
 $23 = $32;
 $33 = $23;
 $22 = $33;
 $34 = $22;
 $20 = $34;
 $35 = $20;
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0;
 $18 = $35;
 $15 = $29;
 $16 = $27;
 $36 = $15;
 $14 = $36;
 HEAP32[$36>>2] = 0;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($36)) + 8|0);
 HEAP32[$17>>2] = 0;
 $39 = $16;
 $11 = $38;
 $12 = $17;
 $13 = $39;
 $40 = $11;
 $41 = $12;
 $10 = $41;
 $42 = $10;
 $4 = $40;
 $5 = $42;
 $43 = $4;
 $44 = $5;
 $3 = $44;
 HEAP32[$43>>2] = 0;
 $45 = $13;
 $6 = $45;
 $46 = $6;
 $8 = $40;
 $9 = $46;
 $47 = $9;
 $7 = $47;
 $48 = $26;
 $2 = $48;
 $49 = $2;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 64)&-1;
 $28 = $56;
 $57 = $28;
 $58 = ($57>>>0)>(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $28;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE8allocateEm($29,$59);
 $60 = $26;
 $61 = HEAP32[$60>>2]|0;
 $62 = $26;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $28;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($29,$61,$64,$65);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 120|0;
 $31 = $0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $30 = $32;
 $35 = $30;
 $36 = HEAP32[$35>>2]|0;
 $27 = $35;
 $28 = $36;
 $37 = $27;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $29 = $39;
 while(1) {
  $40 = $28;
  $41 = $29;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $26 = $37;
  $43 = $26;
  $44 = ((($43)) + 8|0);
  $25 = $44;
  $45 = $25;
  $24 = $45;
  $46 = $24;
  $47 = $29;
  $48 = ((($47)) + -64|0);
  $29 = $48;
  $23 = $48;
  $49 = $23;
  $20 = $46;
  $21 = $49;
  $50 = $20;
  $51 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $50;
  $18 = $51;
  $52 = $17;
  $53 = $18;
  $15 = $52;
  $16 = $53;
 }
 $54 = $28;
 $55 = ((($37)) + 4|0);
 HEAP32[$55>>2] = $54;
 $7 = $32;
 $56 = $7;
 $57 = ((($56)) + 8|0);
 $6 = $57;
 $58 = $6;
 $5 = $58;
 $59 = $5;
 $60 = HEAP32[$32>>2]|0;
 $4 = $32;
 $61 = $4;
 $3 = $61;
 $62 = $3;
 $63 = ((($62)) + 8|0);
 $2 = $63;
 $64 = $2;
 $1 = $64;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$61>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $71 = (($70|0) / 64)&-1;
 $12 = $59;
 $13 = $60;
 $14 = $71;
 $72 = $12;
 $73 = $13;
 $74 = $14;
 $9 = $72;
 $10 = $73;
 $11 = $74;
 $75 = $10;
 $8 = $75;
 $76 = $8;
 __ZdlPv($76);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $43 = $0;
 $44 = $1;
 $45 = $43;
 $46 = $44;
 $47 = (__ZNKSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE8max_sizeEv($45)|0);
 $48 = ($46>>>0)>($47>>>0);
 if ($48) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($45);
  // unreachable;
 }
 $42 = $45;
 $49 = $42;
 $50 = ((($49)) + 8|0);
 $41 = $50;
 $51 = $41;
 $40 = $51;
 $52 = $40;
 $53 = $44;
 $10 = $52;
 $11 = $53;
 $54 = $10;
 $55 = $11;
 $7 = $54;
 $8 = $55;
 $9 = 0;
 $56 = $7;
 $57 = $8;
 $6 = $56;
 $58 = ($57>>>0)>(67108863);
 if ($58) {
  $4 = 37845;
  $59 = (___cxa_allocate_exception(8)|0);
  $60 = $4;
  $2 = $59;
  $3 = $60;
  $61 = $2;
  $62 = $3;
  __ZNSt11logic_errorC2EPKc($61,$62);
  HEAP32[$61>>2] = (36492);
  ___cxa_throw(($59|0),(35608|0),(18|0));
  // unreachable;
 } else {
  $63 = $8;
  $64 = $63<<6;
  $5 = $64;
  $65 = $5;
  $66 = (__Znwm($65)|0);
  $67 = ((($45)) + 4|0);
  HEAP32[$67>>2] = $66;
  HEAP32[$45>>2] = $66;
  $68 = HEAP32[$45>>2]|0;
  $69 = $44;
  $70 = (($68) + ($69<<6)|0);
  $14 = $45;
  $71 = $14;
  $72 = ((($71)) + 8|0);
  $13 = $72;
  $73 = $13;
  $12 = $73;
  $74 = $12;
  HEAP32[$74>>2] = $70;
  $38 = $45;
  $39 = 0;
  $75 = $38;
  $37 = $75;
  $76 = $37;
  $77 = HEAP32[$76>>2]|0;
  $36 = $77;
  $78 = $36;
  $16 = $75;
  $79 = $16;
  $80 = HEAP32[$79>>2]|0;
  $15 = $80;
  $81 = $15;
  $21 = $75;
  $82 = $21;
  $20 = $82;
  $83 = $20;
  $19 = $83;
  $84 = $19;
  $85 = ((($84)) + 8|0);
  $18 = $85;
  $86 = $18;
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$83>>2]|0;
  $90 = $88;
  $91 = $89;
  $92 = (($90) - ($91))|0;
  $93 = (($92|0) / 64)&-1;
  $94 = (($81) + ($93<<6)|0);
  $23 = $75;
  $95 = $23;
  $96 = HEAP32[$95>>2]|0;
  $22 = $96;
  $97 = $22;
  $28 = $75;
  $98 = $28;
  $27 = $98;
  $99 = $27;
  $26 = $99;
  $100 = $26;
  $101 = ((($100)) + 8|0);
  $25 = $101;
  $102 = $25;
  $24 = $102;
  $103 = $24;
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$99>>2]|0;
  $106 = $104;
  $107 = $105;
  $108 = (($106) - ($107))|0;
  $109 = (($108|0) / 64)&-1;
  $110 = (($97) + ($109<<6)|0);
  $30 = $75;
  $111 = $30;
  $112 = HEAP32[$111>>2]|0;
  $29 = $112;
  $113 = $29;
  $114 = $39;
  $115 = (($113) + ($114<<6)|0);
  $31 = $75;
  $32 = $78;
  $33 = $94;
  $34 = $110;
  $35 = $115;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $21 = sp + 68|0;
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $22 = $16;
 $15 = $22;
 $23 = $15;
 $24 = ((($23)) + 8|0);
 $14 = $24;
 $25 = $14;
 $13 = $25;
 $26 = $13;
 $20 = $26;
 $27 = $19;
 $4 = $21;
 $5 = $22;
 $6 = $27;
 $28 = $20;
 $29 = $17;
 $30 = $18;
 $31 = ((($22)) + 4|0);
 $7 = $28;
 $8 = $29;
 $9 = $30;
 $10 = $31;
 $32 = $9;
 $33 = $8;
 $34 = $32;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = (($36|0) / 64)&-1;
 $11 = $37;
 $38 = $11;
 $39 = ($38|0)>(0);
 if (!($39)) {
  $12 = $21;
  STACKTOP = sp;return;
 }
 $40 = $10;
 $41 = HEAP32[$40>>2]|0;
 $42 = $8;
 $43 = $11;
 $44 = $43<<6;
 _memcpy(($41|0),($42|0),($44|0))|0;
 $45 = $11;
 $46 = $10;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($45<<6)|0);
 HEAP32[$46>>2] = $48;
 $12 = $21;
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 67108863;
 HEAP32[$20>>2] = 2147483647;
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp;
 $13 = sp + 73|0;
 $21 = sp + 72|0;
 $18 = $0;
 $19 = $1;
 $22 = $18;
 $17 = $22;
 $23 = $17;
 $24 = ((($23)) + 8|0);
 $16 = $24;
 $25 = $16;
 $15 = $25;
 $26 = $15;
 $20 = $26;
 while(1) {
  $3 = $21;
  $4 = $22;
  $5 = 1;
  $27 = $20;
  $28 = ((($22)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $2 = $29;
  $30 = $2;
  $11 = $27;
  $12 = $30;
  $31 = $11;
  $32 = $12;
  ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
  $8 = $31;
  $9 = $32;
  $33 = $8;
  $34 = $9;
  $6 = $33;
  $7 = $34;
  $35 = $7;
  __ZN6Crypto9SignatureC2Ev($35);
  $36 = ((($22)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 64|0);
  HEAP32[$36>>2] = $38;
  $39 = $19;
  $40 = (($39) + -1)|0;
  $19 = $40;
  $14 = $21;
  $41 = $19;
  $42 = ($41>>>0)>(0);
  if (!($42)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6Crypto9SignatureC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $40 = $0;
 $41 = $1;
 $42 = $40;
 $43 = $41;
 $44 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($42)|0);
 $45 = ($43>>>0)>($44>>>0);
 if ($45) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($42);
  // unreachable;
 } else {
  $39 = $42;
  $46 = $39;
  $47 = ((($46)) + 8|0);
  $38 = $47;
  $48 = $38;
  $37 = $48;
  $49 = $37;
  $50 = $41;
  $7 = $49;
  $8 = $50;
  $51 = $7;
  $52 = $8;
  $4 = $51;
  $5 = $52;
  $6 = 0;
  $53 = $4;
  $3 = $53;
  $54 = $5;
  $2 = $54;
  $55 = $2;
  $56 = (__Znwm($55)|0);
  $57 = ((($42)) + 4|0);
  HEAP32[$57>>2] = $56;
  HEAP32[$42>>2] = $56;
  $58 = HEAP32[$42>>2]|0;
  $59 = $41;
  $60 = (($58) + ($59)|0);
  $11 = $42;
  $61 = $11;
  $62 = ((($61)) + 8|0);
  $10 = $62;
  $63 = $10;
  $9 = $63;
  $64 = $9;
  HEAP32[$64>>2] = $60;
  $35 = $42;
  $36 = 0;
  $65 = $35;
  $34 = $65;
  $66 = $34;
  $67 = HEAP32[$66>>2]|0;
  $33 = $67;
  $68 = $33;
  $13 = $65;
  $69 = $13;
  $70 = HEAP32[$69>>2]|0;
  $12 = $70;
  $71 = $12;
  $18 = $65;
  $72 = $18;
  $17 = $72;
  $73 = $17;
  $16 = $73;
  $74 = $16;
  $75 = ((($74)) + 8|0);
  $15 = $75;
  $76 = $15;
  $14 = $76;
  $77 = $14;
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$73>>2]|0;
  $80 = $78;
  $81 = $79;
  $82 = (($80) - ($81))|0;
  $83 = (($71) + ($82)|0);
  $20 = $65;
  $84 = $20;
  $85 = HEAP32[$84>>2]|0;
  $19 = $85;
  $86 = $19;
  $25 = $65;
  $87 = $25;
  $24 = $87;
  $88 = $24;
  $23 = $88;
  $89 = $23;
  $90 = ((($89)) + 8|0);
  $22 = $90;
  $91 = $22;
  $21 = $91;
  $92 = $21;
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$88>>2]|0;
  $95 = $93;
  $96 = $94;
  $97 = (($95) - ($96))|0;
  $98 = (($86) + ($97)|0);
  $27 = $65;
  $99 = $27;
  $100 = HEAP32[$99>>2]|0;
  $26 = $100;
  $101 = $26;
  $102 = $36;
  $103 = (($101) + ($102)|0);
  $28 = $65;
  $29 = $68;
  $30 = $83;
  $31 = $98;
  $32 = $103;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 120|0;
 $31 = $0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $30 = $32;
 $35 = $30;
 $36 = HEAP32[$35>>2]|0;
 $27 = $35;
 $28 = $36;
 $37 = $27;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $29 = $39;
 while(1) {
  $40 = $28;
  $41 = $29;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $26 = $37;
  $43 = $26;
  $44 = ((($43)) + 8|0);
  $25 = $44;
  $45 = $25;
  $24 = $45;
  $46 = $24;
  $47 = $29;
  $48 = ((($47)) + -1|0);
  $29 = $48;
  $23 = $48;
  $49 = $23;
  $20 = $46;
  $21 = $49;
  $50 = $20;
  $51 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $50;
  $18 = $51;
  $52 = $17;
  $53 = $18;
  $15 = $52;
  $16 = $53;
 }
 $54 = $28;
 $55 = ((($37)) + 4|0);
 HEAP32[$55>>2] = $54;
 $7 = $32;
 $56 = $7;
 $57 = ((($56)) + 8|0);
 $6 = $57;
 $58 = $6;
 $5 = $58;
 $59 = $5;
 $60 = HEAP32[$32>>2]|0;
 $4 = $32;
 $61 = $4;
 $3 = $61;
 $62 = $3;
 $63 = ((($62)) + 8|0);
 $2 = $63;
 $64 = $2;
 $1 = $64;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$61>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $12 = $59;
 $13 = $60;
 $14 = $70;
 $71 = $12;
 $72 = $13;
 $73 = $14;
 $9 = $71;
 $10 = $72;
 $11 = $73;
 $74 = $10;
 $8 = $74;
 $75 = $8;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = -1;
 HEAP32[$20>>2] = 2147483647;
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZN6Common7fromHexEc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = $3&255;
 $5 = (32512 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $2 = $6;
 $7 = $2;
 $8 = $7&255;
 $9 = ($8|0)>(15);
 if ($9) {
  $10 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($10,37063);
  ___cxa_throw(($10|0),(35592|0),(21|0));
  // unreachable;
 } else {
  $11 = $2;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZN6Common7fromHexEcRh($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 5|0;
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = $5&255;
 $7 = (32512 + ($6)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($9|0)>(15);
 if ($10) {
  $$expand_i1_val = 0;
  HEAP8[$2>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $16 = $$pre_trunc&1;
  STACKTOP = sp;return ($16|0);
 } else {
  $11 = $3;
  $12 = $11&255;
  $13 = (32512 + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $4;
  HEAP8[$15>>0] = $14;
  $$expand_i1_val2 = 1;
  HEAP8[$2>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$2>>0]|0;
  $16 = $$pre_trunc&1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $77 = sp + 318|0;
 $80 = sp + 8|0;
 $82 = sp;
 $83 = sp + 317|0;
 $84 = sp + 316|0;
 $78 = $0;
 $79 = $1;
 $85 = $80;
 $86 = $85;
 HEAP32[$86>>2] = $2;
 $87 = (($85) + 4)|0;
 $88 = $87;
 HEAP32[$88>>2] = $3;
 $81 = $4;
 $89 = $78;
 $76 = $89;
 $90 = $76;
 $75 = $90;
 $91 = $75;
 $74 = $91;
 $92 = $74;
 $73 = $92;
 $93 = $73;
 $94 = ((($93)) + 11|0);
 $95 = HEAP8[$94>>0]|0;
 $96 = $95&255;
 $97 = $96 & 128;
 $98 = ($97|0)!=(0);
 if ($98) {
  $69 = $90;
  $99 = $69;
  $68 = $99;
  $100 = $68;
  $67 = $100;
  $101 = $67;
  $102 = ((($101)) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $111 = $103;
 } else {
  $72 = $90;
  $104 = $72;
  $71 = $104;
  $105 = $71;
  $70 = $105;
  $106 = $70;
  $107 = ((($106)) + 11|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $111 = $109;
 }
 $110 = $111 & 1;
 $112 = ($110|0)!=(0);
 if ($112) {
  $$expand_i1_val = 0;
  HEAP8[$77>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $311 = $$pre_trunc&1;
  STACKTOP = sp;return ($311|0);
 }
 $113 = $78;
 $56 = $113;
 $114 = $56;
 $55 = $114;
 $115 = $55;
 $54 = $115;
 $116 = $54;
 $53 = $116;
 $117 = $53;
 $118 = ((($117)) + 11|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $120 & 128;
 $122 = ($121|0)!=(0);
 if ($122) {
  $49 = $114;
  $123 = $49;
  $48 = $123;
  $124 = $48;
  $47 = $124;
  $125 = $47;
  $126 = ((($125)) + 4|0);
  $127 = HEAP32[$126>>2]|0;
  $135 = $127;
 } else {
  $52 = $114;
  $128 = $52;
  $51 = $128;
  $129 = $51;
  $50 = $129;
  $130 = $50;
  $131 = ((($130)) + 11|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = $132&255;
  $135 = $133;
 }
 $134 = $135 >>> 1;
 $136 = $80;
 $137 = $136;
 $138 = HEAP32[$137>>2]|0;
 $139 = (($136) + 4)|0;
 $140 = $139;
 $141 = HEAP32[$140>>2]|0;
 $142 = (0)>($141>>>0);
 $143 = ($134>>>0)>($138>>>0);
 $144 = (0)==($141|0);
 $145 = $144 & $143;
 $146 = $142 | $145;
 if ($146) {
  $$expand_i1_val2 = 0;
  HEAP8[$77>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $311 = $$pre_trunc&1;
  STACKTOP = sp;return ($311|0);
 }
 $147 = $82;
 $148 = $147;
 HEAP32[$148>>2] = 0;
 $149 = (($147) + 4)|0;
 $150 = $149;
 HEAP32[$150>>2] = 0;
 while(1) {
  $151 = $82;
  $152 = $151;
  $153 = HEAP32[$152>>2]|0;
  $154 = (($151) + 4)|0;
  $155 = $154;
  $156 = HEAP32[$155>>2]|0;
  $157 = $78;
  $30 = $157;
  $158 = $30;
  $29 = $158;
  $159 = $29;
  $28 = $159;
  $160 = $28;
  $27 = $160;
  $161 = $27;
  $162 = ((($161)) + 11|0);
  $163 = HEAP8[$162>>0]|0;
  $164 = $163&255;
  $165 = $164 & 128;
  $166 = ($165|0)!=(0);
  if ($166) {
   $23 = $158;
   $167 = $23;
   $22 = $167;
   $168 = $22;
   $21 = $168;
   $169 = $21;
   $170 = ((($169)) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $179 = $171;
  } else {
   $26 = $158;
   $172 = $26;
   $25 = $172;
   $173 = $25;
   $24 = $173;
   $174 = $24;
   $175 = ((($174)) + 11|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $179 = $177;
  }
  $178 = $179 >>> 1;
  $180 = ($156>>>0)<(0);
  $181 = ($153>>>0)<($178>>>0);
  $182 = ($156|0)==(0);
  $183 = $182 & $181;
  $184 = $180 | $183;
  $185 = $78;
  if (!($184)) {
   label = 27;
   break;
  }
  $186 = $82;
  $187 = $186;
  $188 = HEAP32[$187>>2]|0;
  $189 = (($186) + 4)|0;
  $190 = $189;
  $191 = HEAP32[$190>>2]|0;
  $192 = (_bitshift64Shl(($188|0),($191|0),1)|0);
  $193 = (getTempRet0() | 0);
  $19 = $185;
  $20 = $192;
  $194 = $19;
  $18 = $194;
  $195 = $18;
  $17 = $195;
  $196 = $17;
  $16 = $196;
  $197 = $16;
  $15 = $197;
  $198 = $15;
  $14 = $198;
  $199 = $14;
  $200 = ((($199)) + 11|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = $202 & 128;
  $204 = ($203|0)!=(0);
  if ($204) {
   $8 = $196;
   $205 = $8;
   $7 = $205;
   $206 = $7;
   $6 = $206;
   $207 = $6;
   $208 = HEAP32[$207>>2]|0;
   $214 = $208;
  } else {
   $13 = $196;
   $209 = $13;
   $12 = $209;
   $210 = $12;
   $11 = $210;
   $211 = $11;
   $10 = $211;
   $212 = $10;
   $9 = $212;
   $213 = $9;
   $214 = $213;
  }
  $5 = $214;
  $215 = $5;
  $216 = $20;
  $217 = (($215) + ($216)|0);
  $218 = HEAP8[$217>>0]|0;
  $219 = (__ZN6Common7fromHexEcRh($218,$83)|0);
  if (!($219)) {
   label = 20;
   break;
  }
  $220 = $78;
  $221 = $82;
  $222 = $221;
  $223 = HEAP32[$222>>2]|0;
  $224 = (($221) + 4)|0;
  $225 = $224;
  $226 = HEAP32[$225>>2]|0;
  $227 = (_bitshift64Shl(($223|0),($226|0),1)|0);
  $228 = (getTempRet0() | 0);
  $229 = (_i64Add(($227|0),($228|0),1,0)|0);
  $230 = (getTempRet0() | 0);
  $45 = $220;
  $46 = $229;
  $231 = $45;
  $44 = $231;
  $232 = $44;
  $43 = $232;
  $233 = $43;
  $42 = $233;
  $234 = $42;
  $41 = $234;
  $235 = $41;
  $40 = $235;
  $236 = $40;
  $237 = ((($236)) + 11|0);
  $238 = HEAP8[$237>>0]|0;
  $239 = $238&255;
  $240 = $239 & 128;
  $241 = ($240|0)!=(0);
  if ($241) {
   $34 = $233;
   $242 = $34;
   $33 = $242;
   $243 = $33;
   $32 = $243;
   $244 = $32;
   $245 = HEAP32[$244>>2]|0;
   $251 = $245;
  } else {
   $39 = $233;
   $246 = $39;
   $38 = $246;
   $247 = $38;
   $37 = $247;
   $248 = $37;
   $36 = $248;
   $249 = $36;
   $35 = $249;
   $250 = $35;
   $251 = $250;
  }
  $31 = $251;
  $252 = $31;
  $253 = $46;
  $254 = (($252) + ($253)|0);
  $255 = HEAP8[$254>>0]|0;
  $256 = (__ZN6Common7fromHexEcRh($255,$84)|0);
  if (!($256)) {
   label = 25;
   break;
  }
  $257 = HEAP8[$83>>0]|0;
  $258 = $257&255;
  $259 = $258 << 4;
  $260 = HEAP8[$84>>0]|0;
  $261 = $260&255;
  $262 = $259 | $261;
  $263 = $262&255;
  $264 = $79;
  $265 = $82;
  $266 = $265;
  $267 = HEAP32[$266>>2]|0;
  $268 = (($265) + 4)|0;
  $269 = $268;
  $270 = HEAP32[$269>>2]|0;
  $271 = (($264) + ($267)|0);
  HEAP8[$271>>0] = $263;
  $272 = $82;
  $273 = $272;
  $274 = HEAP32[$273>>2]|0;
  $275 = (($272) + 4)|0;
  $276 = $275;
  $277 = HEAP32[$276>>2]|0;
  $278 = (_i64Add(($274|0),($277|0),1,0)|0);
  $279 = (getTempRet0() | 0);
  $280 = $82;
  $281 = $280;
  HEAP32[$281>>2] = $278;
  $282 = (($280) + 4)|0;
  $283 = $282;
  HEAP32[$283>>2] = $279;
 }
 if ((label|0) == 20) {
  $$expand_i1_val4 = 0;
  HEAP8[$77>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $311 = $$pre_trunc&1;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 25) {
  $$expand_i1_val6 = 0;
  HEAP8[$77>>0] = $$expand_i1_val6;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $311 = $$pre_trunc&1;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 27) {
  $66 = $185;
  $284 = $66;
  $65 = $284;
  $285 = $65;
  $64 = $285;
  $286 = $64;
  $63 = $286;
  $287 = $63;
  $288 = ((($287)) + 11|0);
  $289 = HEAP8[$288>>0]|0;
  $290 = $289&255;
  $291 = $290 & 128;
  $292 = ($291|0)!=(0);
  if ($292) {
   $59 = $284;
   $293 = $59;
   $58 = $293;
   $294 = $58;
   $57 = $294;
   $295 = $57;
   $296 = ((($295)) + 4|0);
   $297 = HEAP32[$296>>2]|0;
   $305 = $297;
  } else {
   $62 = $284;
   $298 = $62;
   $61 = $298;
   $299 = $61;
   $60 = $299;
   $300 = $60;
   $301 = ((($300)) + 11|0);
   $302 = HEAP8[$301>>0]|0;
   $303 = $302&255;
   $305 = $303;
  }
  $304 = $305 >>> 1;
  $306 = $81;
  $307 = $306;
  $308 = $307;
  HEAP32[$308>>2] = $304;
  $309 = (($307) + 4)|0;
  $310 = $309;
  HEAP32[$310>>2] = 0;
  $$expand_i1_val8 = 1;
  HEAP8[$77>>0] = $$expand_i1_val8;
  $$pre_trunc = HEAP8[$77>>0]|0;
  $311 = $$pre_trunc&1;
  STACKTOP = sp;return ($311|0);
 }
 return (0)|0;
}
function __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $58 = sp + 232|0;
 $59 = sp;
 $57 = $1;
 $60 = $57;
 $56 = $60;
 $61 = $56;
 $55 = $61;
 $62 = $55;
 $54 = $62;
 $63 = $54;
 $53 = $63;
 $64 = $53;
 $65 = ((($64)) + 11|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 & 128;
 $69 = ($68|0)!=(0);
 if ($69) {
  $49 = $61;
  $70 = $49;
  $48 = $70;
  $71 = $48;
  $47 = $71;
  $72 = $47;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $82 = $74;
 } else {
  $52 = $61;
  $75 = $52;
  $51 = $75;
  $76 = $51;
  $50 = $76;
  $77 = $50;
  $78 = ((($77)) + 11|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $82 = $80;
 }
 $81 = $82 & 1;
 $83 = ($81|0)!=(0);
 if ($83) {
  $84 = (___cxa_allocate_exception(8)|0);
  __ZNSt13runtime_errorC2EPKc($84,37090);
  ___cxa_throw(($84|0),(35592|0),(21|0));
  // unreachable;
 }
 $$expand_i1_val = 0;
 HEAP8[$58>>0] = $$expand_i1_val;
 $85 = $57;
 $46 = $85;
 $86 = $46;
 $45 = $86;
 $87 = $45;
 $44 = $87;
 $88 = $44;
 $43 = $88;
 $89 = $43;
 $90 = ((($89)) + 11|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91&255;
 $93 = $92 & 128;
 $94 = ($93|0)!=(0);
 if ($94) {
  $39 = $86;
  $95 = $39;
  $38 = $95;
  $96 = $38;
  $37 = $96;
  $97 = $37;
  $98 = ((($97)) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $107 = $99;
 } else {
  $42 = $86;
  $100 = $42;
  $41 = $100;
  $101 = $41;
  $40 = $101;
  $102 = $40;
  $103 = ((($102)) + 11|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $107 = $105;
 }
 $106 = $107 >>> 1;
 __ZNSt3__26vectorIhNS_9allocatorIhEEEC2Em($0,$106);
 $108 = $59;
 $109 = $108;
 HEAP32[$109>>2] = 0;
 $110 = (($108) + 4)|0;
 $111 = $110;
 HEAP32[$111>>2] = 0;
 while(1) {
  $112 = $59;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($112) + 4)|0;
  $116 = $115;
  $117 = HEAP32[$116>>2]|0;
  $36 = $0;
  $118 = $36;
  $119 = ((($118)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = HEAP32[$118>>2]|0;
  $122 = $120;
  $123 = $121;
  $124 = (($122) - ($123))|0;
  $125 = ($117>>>0)<(0);
  $126 = ($114>>>0)<($124>>>0);
  $127 = ($117|0)==(0);
  $128 = $127 & $126;
  $129 = $125 | $128;
  if (!($129)) {
   break;
  }
  $130 = $57;
  $131 = $59;
  $132 = $131;
  $133 = HEAP32[$132>>2]|0;
  $134 = (($131) + 4)|0;
  $135 = $134;
  $136 = HEAP32[$135>>2]|0;
  $137 = (_bitshift64Shl(($133|0),($136|0),1)|0);
  $138 = (getTempRet0() | 0);
  $32 = $130;
  $33 = $137;
  $139 = $32;
  $31 = $139;
  $140 = $31;
  $30 = $140;
  $141 = $30;
  $29 = $141;
  $142 = $29;
  $28 = $142;
  $143 = $28;
  $27 = $143;
  $144 = $27;
  $145 = ((($144)) + 11|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = $147 & 128;
  $149 = ($148|0)!=(0);
  if ($149) {
   $21 = $141;
   $150 = $21;
   $20 = $150;
   $151 = $20;
   $19 = $151;
   $152 = $19;
   $153 = HEAP32[$152>>2]|0;
   $159 = $153;
  } else {
   $26 = $141;
   $154 = $26;
   $25 = $154;
   $155 = $25;
   $24 = $155;
   $156 = $24;
   $23 = $156;
   $157 = $23;
   $22 = $157;
   $158 = $22;
   $159 = $158;
  }
  $18 = $159;
  $160 = $18;
  $161 = $33;
  $162 = (($160) + ($161)|0);
  $163 = HEAP8[$162>>0]|0;
  $164 = (__ZN6Common7fromHexEc($163)|0);
  $165 = $164&255;
  $166 = $165 << 4;
  $167 = $57;
  $168 = $59;
  $169 = $168;
  $170 = HEAP32[$169>>2]|0;
  $171 = (($168) + 4)|0;
  $172 = $171;
  $173 = HEAP32[$172>>2]|0;
  $174 = (_bitshift64Shl(($170|0),($173|0),1)|0);
  $175 = (getTempRet0() | 0);
  $176 = (_i64Add(($174|0),($175|0),1,0)|0);
  $177 = (getTempRet0() | 0);
  $16 = $167;
  $17 = $176;
  $178 = $16;
  $15 = $178;
  $179 = $15;
  $14 = $179;
  $180 = $14;
  $13 = $180;
  $181 = $13;
  $12 = $181;
  $182 = $12;
  $11 = $182;
  $183 = $11;
  $184 = ((($183)) + 11|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = $185&255;
  $187 = $186 & 128;
  $188 = ($187|0)!=(0);
  if ($188) {
   $5 = $180;
   $189 = $5;
   $4 = $189;
   $190 = $4;
   $3 = $190;
   $191 = $3;
   $192 = HEAP32[$191>>2]|0;
   $198 = $192;
  } else {
   $10 = $180;
   $193 = $10;
   $9 = $193;
   $194 = $9;
   $8 = $194;
   $195 = $8;
   $7 = $195;
   $196 = $7;
   $6 = $196;
   $197 = $6;
   $198 = $197;
  }
  $2 = $198;
  $199 = $2;
  $200 = $17;
  $201 = (($199) + ($200)|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = (__ZN6Common7fromHexEc($202)|0);
  $204 = $203&255;
  $205 = $166 | $204;
  $206 = $205&255;
  $207 = $59;
  $208 = $207;
  $209 = HEAP32[$208>>2]|0;
  $210 = (($207) + 4)|0;
  $211 = $210;
  $212 = HEAP32[$211>>2]|0;
  $34 = $0;
  $35 = $209;
  $213 = $34;
  $214 = HEAP32[$213>>2]|0;
  $215 = $35;
  $216 = (($214) + ($215)|0);
  HEAP8[$216>>0] = $206;
  $217 = $59;
  $218 = $217;
  $219 = HEAP32[$218>>2]|0;
  $220 = (($217) + 4)|0;
  $221 = $220;
  $222 = HEAP32[$221>>2]|0;
  $223 = (_i64Add(($219|0),($222|0),1,0)|0);
  $224 = (getTempRet0() | 0);
  $225 = $59;
  $226 = $225;
  HEAP32[$226>>2] = $223;
  $227 = (($225) + 4)|0;
  $228 = $227;
  HEAP32[$228>>2] = $224;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$58>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$58>>0]|0;
 $229 = $$pre_trunc&1;
 if ($229) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEEC2Em($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $12 = sp + 8|0;
 $13 = $0;
 $14 = $1;
 $15 = $13;
 $11 = $15;
 $16 = $11;
 $10 = $16;
 HEAP32[$16>>2] = 0;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($16)) + 8|0);
 HEAP32[$12>>2] = 0;
 $8 = $18;
 $9 = $12;
 $19 = $8;
 $20 = $9;
 $7 = $20;
 $21 = $7;
 $3 = $19;
 $4 = $21;
 $22 = $3;
 $23 = $4;
 $2 = $23;
 HEAP32[$22>>2] = 0;
 $6 = $19;
 $24 = $6;
 $5 = $24;
 $25 = $14;
 $26 = ($25>>>0)>(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = $14;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE8allocateEm($15,$27);
 $28 = $14;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($15,$28);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE18__construct_at_endEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $10 = sp;
 $13 = sp + 73|0;
 $21 = sp + 72|0;
 $18 = $0;
 $19 = $1;
 $22 = $18;
 $17 = $22;
 $23 = $17;
 $24 = ((($23)) + 8|0);
 $16 = $24;
 $25 = $16;
 $15 = $25;
 $26 = $15;
 $20 = $26;
 while(1) {
  $2 = $21;
  $3 = $22;
  $4 = 1;
  $27 = $20;
  $28 = ((($22)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $5 = $29;
  $30 = $5;
  $11 = $27;
  $12 = $30;
  $31 = $11;
  $32 = $12;
  ;HEAP8[$10>>0]=HEAP8[$13>>0]|0;
  $8 = $31;
  $9 = $32;
  $33 = $8;
  $34 = $9;
  $6 = $33;
  $7 = $34;
  $35 = $7;
  HEAP8[$35>>0] = 0;
  $36 = ((($22)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 1|0);
  HEAP32[$36>>2] = $38;
  $39 = $19;
  $40 = (($39) + -1)|0;
  $19 = $40;
  $14 = $21;
  $41 = $19;
  $42 = ($41>>>0)>(0);
  if (!($42)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6Common5toHexEPKvy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $19 = sp + 8|0;
 $20 = sp + 68|0;
 $21 = sp;
 $18 = $1;
 $22 = $19;
 $23 = $22;
 HEAP32[$23>>2] = $2;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $3;
 $$expand_i1_val = 0;
 HEAP8[$20>>0] = $$expand_i1_val;
 $17 = $0;
 $26 = $17;
 $16 = $26;
 $27 = $16;
 $15 = $27;
 $28 = $15;
 ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
 $14 = $27;
 $29 = $14;
 $13 = $29;
 $10 = $26;
 $30 = $10;
 $9 = $30;
 $31 = $9;
 $8 = $31;
 $32 = $8;
 $11 = $32;
 $12 = 0;
 while(1) {
  $33 = $12;
  $34 = ($33>>>0)<(3);
  if (!($34)) {
   break;
  }
  $35 = $11;
  $36 = $12;
  $37 = (($35) + ($36<<2)|0);
  HEAP32[$37>>2] = 0;
  $38 = $12;
  $39 = (($38) + 1)|0;
  $12 = $39;
 }
 $40 = $21;
 $41 = $40;
 HEAP32[$41>>2] = 0;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = 0;
 while(1) {
  $44 = $21;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $19;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4)|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = ($49>>>0)<($55>>>0);
  $57 = ($46>>>0)<($52>>>0);
  $58 = ($49|0)==($55|0);
  $59 = $58 & $57;
  $60 = $56 | $59;
  if (!($60)) {
   break;
  }
  $61 = $18;
  $62 = $21;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($62) + 4)|0;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($61) + ($64)|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $70 >> 4;
  $72 = (37119 + ($71)|0);
  $73 = HEAP8[$72>>0]|0;
  $4 = $0;
  $5 = $73;
  $74 = $4;
  $75 = $5;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($74,$75);
  $76 = $18;
  $77 = $21;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 4)|0;
  $81 = $80;
  $82 = HEAP32[$81>>2]|0;
  $83 = (($76) + ($79)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $85 & 15;
  $87 = (37119 + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $6 = $0;
  $7 = $88;
  $89 = $6;
  $90 = $7;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($89,$90);
  $91 = $21;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) + 4)|0;
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $97 = (_i64Add(($93|0),($96|0),1,0)|0);
  $98 = (getTempRet0() | 0);
  $99 = $21;
  $100 = $99;
  HEAP32[$100>>2] = $97;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $98;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$20>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$20>>0]|0;
 $103 = $$pre_trunc&1;
 if ($103) {
  STACKTOP = sp;return;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = HEAP8[$4>>0]|0;
 $6 = $2;
 HEAP8[$6>>0] = $5;
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_turtlecoin_crypto_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_12();
 return;
}
function ___cxx_global_var_init_12() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN39EmscriptenBindingInitializer_signaturesC2Ev(41844);
 return;
}
function __ZN39EmscriptenBindingInitializer_signaturesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_S8_SA_S8_jEJEEEvPKcPFT_DpT0_EDpT1_(37136,33);
 __ZN10emscripten8functionI4KeysJEJEEEvPKcPFT_DpT0_EDpT1_(37159,34);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_(37173,35);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_(37192,36);
 __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mS7_EJEEEvPKcPFT_DpT0_EDpT1_(37205,37);
 __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc(37223);
 __ZN10emscripten12value_objectI4KeysEC2EPKc($2,37236);
 $3 = (__ZN10emscripten12value_objectI4KeysE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($2,37241,12)|0);
 (__ZN10emscripten12value_objectI4KeysE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($3,37251,0)|0);
 __ZN10emscripten12value_objectI4KeysED2Ev($2);
 STACKTOP = sp;return;
}
function __Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_j($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(944|0);
 $$byval_copy2 = sp + 912|0;
 $$byval_copy1 = sp + 880|0;
 $$byval_copy = sp + 848|0;
 $34 = sp + 16|0;
 $39 = sp + 844|0;
 $50 = sp + 843|0;
 $54 = sp + 368|0;
 $57 = sp + 356|0;
 $61 = sp + 340|0;
 $64 = sp + 328|0;
 $82 = sp + 8|0;
 $87 = sp + 842|0;
 $97 = sp + 841|0;
 $111 = sp + 152|0;
 $123 = sp + 104|0;
 $126 = sp + 840|0;
 $127 = sp + 808|0;
 $128 = sp + 776|0;
 $129 = sp + 84|0;
 $131 = sp + 744|0;
 $132 = sp + 712|0;
 $133 = sp;
 $134 = sp + 64|0;
 $135 = sp + 680|0;
 $136 = sp + 648|0;
 $137 = sp + 52|0;
 $138 = sp + 616|0;
 $142 = sp + 36|0;
 $143 = sp + 32|0;
 $144 = sp + 552|0;
 $145 = sp + 20|0;
 $125 = $5;
 $$expand_i1_val = 0;
 HEAP8[$126>>0] = $$expand_i1_val;
 $124 = $0;
 $146 = $124;
 $122 = $146;
 $147 = $122;
 $121 = $147;
 HEAP32[$147>>2] = 0;
 $148 = ((($147)) + 4|0);
 HEAP32[$148>>2] = 0;
 $149 = ((($147)) + 8|0);
 HEAP32[$123>>2] = 0;
 $119 = $149;
 $120 = $123;
 $150 = $119;
 $151 = $120;
 $118 = $151;
 $152 = $118;
 $114 = $150;
 $115 = $152;
 $153 = $114;
 $154 = $115;
 $113 = $154;
 HEAP32[$153>>2] = 0;
 $117 = $150;
 $155 = $117;
 $116 = $155;
 dest=$127; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (__ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($1,$127)|0);
 __ZN6Crypto8KeyImageC2Ev($128);
 (__ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($2,$128)|0);
 $112 = $129;
 $156 = $112;
 $110 = $156;
 $157 = $110;
 $109 = $157;
 HEAP32[$157>>2] = 0;
 $158 = ((($157)) + 4|0);
 HEAP32[$158>>2] = 0;
 $159 = ((($157)) + 8|0);
 HEAP32[$111>>2] = 0;
 $107 = $159;
 $108 = $111;
 $160 = $107;
 $161 = $108;
 $106 = $161;
 $162 = $106;
 $102 = $160;
 $103 = $162;
 $163 = $102;
 $164 = $103;
 $101 = $164;
 HEAP32[$163>>2] = 0;
 $105 = $160;
 $165 = $105;
 $104 = $165;
 $130 = 0;
 while(1) {
  $166 = $130;
  $100 = $3;
  $167 = $100;
  $168 = ((($167)) + 4|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = HEAP32[$167>>2]|0;
  $171 = $169;
  $172 = $170;
  $173 = (($171) - ($172))|0;
  $174 = (($173|0) / 12)&-1;
  $175 = ($166>>>0)<($174>>>0);
  if (!($175)) {
   break;
  }
  __ZN6Crypto9PublicKeyC2Ev($131);
  $176 = $130;
  $98 = $3;
  $99 = $176;
  $177 = $98;
  $178 = HEAP32[$177>>2]|0;
  $179 = $99;
  $180 = (($178) + (($179*12)|0)|0);
  (__ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($180,$131)|0);
  $95 = $129;
  $96 = $131;
  $181 = $95;
  $182 = ((($181)) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $94 = $181;
  $184 = $94;
  $185 = ((($184)) + 8|0);
  $93 = $185;
  $186 = $93;
  $92 = $186;
  $187 = $92;
  $188 = HEAP32[$187>>2]|0;
  $189 = ($183|0)!=($188|0);
  if ($189) {
   $89 = $97;
   $90 = $181;
   $91 = 1;
   $72 = $181;
   $190 = $72;
   $191 = ((($190)) + 8|0);
   $71 = $191;
   $192 = $71;
   $70 = $192;
   $193 = $70;
   $194 = ((($181)) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $73 = $195;
   $196 = $73;
   $197 = $96;
   $84 = $193;
   $85 = $196;
   $86 = $197;
   $198 = $84;
   $199 = $85;
   $200 = $86;
   $83 = $200;
   $201 = $83;
   ;HEAP8[$82>>0]=HEAP8[$87>>0]|0;
   $79 = $198;
   $80 = $199;
   $81 = $201;
   $202 = $79;
   $203 = $80;
   $204 = $81;
   $78 = $204;
   $205 = $78;
   $75 = $202;
   $76 = $203;
   $77 = $205;
   $206 = $76;
   $207 = $77;
   $74 = $207;
   $208 = $74;
   dest=$206; src=$208; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
   $88 = $97;
   $209 = ((($181)) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($210)) + 32|0);
   HEAP32[$209>>2] = $211;
  } else {
   $212 = $96;
   __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($181,$212);
  }
  $213 = $130;
  $214 = (($213) + 1)|0;
  $130 = $214;
 }
 __ZN6Crypto9SecretKeyC2Ev($132);
 (__ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($4,$132)|0);
 $215 = $125;
 $216 = $133;
 $217 = $216;
 HEAP32[$217>>2] = $215;
 $218 = (($216) + 4)|0;
 $219 = $218;
 HEAP32[$219>>2] = 0;
 dest=$135; src=$127; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$136; src=$128; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($137,$129);
 dest=$138; src=$132; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $220 = $133;
 $221 = $220;
 $222 = HEAP32[$221>>2]|0;
 $223 = (($220) + 4)|0;
 $224 = $223;
 $225 = HEAP32[$224>>2]|0;
 dest=$$byval_copy; src=$135; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy1; src=$136; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 dest=$$byval_copy2; src=$138; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 __ZN6Crypto10crypto_ops22generateRingSignaturesENS_4HashENS_8KeyImageENSt3__26vectorINS_9PublicKeyENS3_9allocatorIS5_EEEENS_9SecretKeyEy($134,$$byval_copy,$$byval_copy1,$137,$$byval_copy2,$222,$225);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($137);
 $69 = $134;
 $226 = $69;
 $68 = $226;
 $227 = $68;
 $139 = $227;
 $67 = $134;
 $228 = $67;
 $229 = ((($228)) + 4|0);
 $66 = $229;
 $230 = $66;
 $140 = $230;
 $231 = $139;
 $232 = HEAP8[$231>>0]|0;
 $233 = $232&1;
 L9: do {
  if ($233) {
   $234 = $140;
   $141 = $234;
   $235 = $141;
   $65 = $235;
   $236 = $65;
   $237 = HEAP32[$236>>2]|0;
   $62 = $236;
   $63 = $237;
   $238 = $63;
   $59 = $61;
   $60 = $238;
   $239 = $59;
   $240 = $60;
   HEAP32[$239>>2] = $240;
   $241 = HEAP32[$61>>2]|0;
   HEAP32[$64>>2] = $241;
   $242 = HEAP32[$64>>2]|0;
   HEAP32[$142>>2] = $242;
   $243 = $141;
   $58 = $243;
   $244 = $58;
   $245 = ((($244)) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $55 = $244;
   $56 = $246;
   $247 = $56;
   $52 = $54;
   $53 = $247;
   $248 = $52;
   $249 = $53;
   HEAP32[$248>>2] = $249;
   $250 = HEAP32[$54>>2]|0;
   HEAP32[$57>>2] = $250;
   $251 = HEAP32[$57>>2]|0;
   HEAP32[$143>>2] = $251;
   while(1) {
    $11 = $142;
    $12 = $143;
    $252 = $11;
    $253 = $12;
    $9 = $252;
    $10 = $253;
    $254 = $9;
    $8 = $254;
    $255 = $8;
    $256 = HEAP32[$255>>2]|0;
    $257 = $10;
    $7 = $257;
    $258 = $7;
    $259 = HEAP32[$258>>2]|0;
    $260 = ($256|0)==($259|0);
    $261 = $260 ^ 1;
    if (!($261)) {
     break L9;
    }
    $6 = $142;
    $262 = $6;
    $263 = HEAP32[$262>>2]|0;
    dest=$144; src=$263; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    __ZN6Common5toHexEPKvy($145,$144,64,0);
    $48 = $0;
    $49 = $145;
    $264 = $48;
    $265 = ((($264)) + 4|0);
    $266 = HEAP32[$265>>2]|0;
    $47 = $264;
    $267 = $47;
    $268 = ((($267)) + 8|0);
    $46 = $268;
    $269 = $46;
    $45 = $269;
    $270 = $45;
    $271 = HEAP32[$270>>2]|0;
    $272 = ($266>>>0)<($271>>>0);
    if ($272) {
     $42 = $50;
     $43 = $264;
     $44 = 1;
     $15 = $264;
     $273 = $15;
     $274 = ((($273)) + 8|0);
     $14 = $274;
     $275 = $14;
     $13 = $275;
     $276 = $13;
     $277 = ((($264)) + 4|0);
     $278 = HEAP32[$277>>2]|0;
     $16 = $278;
     $279 = $16;
     $280 = $49;
     $17 = $280;
     $281 = $17;
     $36 = $276;
     $37 = $279;
     $38 = $281;
     $282 = $36;
     $283 = $37;
     $284 = $38;
     $35 = $284;
     $285 = $35;
     ;HEAP8[$34>>0]=HEAP8[$39>>0]|0;
     $31 = $282;
     $32 = $283;
     $33 = $285;
     $286 = $31;
     $287 = $32;
     $288 = $33;
     $30 = $288;
     $289 = $30;
     $27 = $286;
     $28 = $287;
     $29 = $289;
     $290 = $28;
     $291 = $29;
     $26 = $291;
     $292 = $26;
     $24 = $290;
     $25 = $292;
     $293 = $24;
     $294 = $25;
     $23 = $294;
     $295 = $23;
     ;HEAP32[$293>>2]=HEAP32[$295>>2]|0;HEAP32[$293+4>>2]=HEAP32[$295+4>>2]|0;HEAP32[$293+8>>2]=HEAP32[$295+8>>2]|0;
     $296 = $25;
     $20 = $296;
     $297 = $20;
     $19 = $297;
     $298 = $19;
     $18 = $298;
     $299 = $18;
     $21 = $299;
     $22 = 0;
     while(1) {
      $300 = $22;
      $301 = ($300>>>0)<(3);
      if (!($301)) {
       break;
      }
      $302 = $21;
      $303 = $22;
      $304 = (($302) + ($303<<2)|0);
      HEAP32[$304>>2] = 0;
      $305 = $22;
      $306 = (($305) + 1)|0;
      $22 = $306;
     }
     $40 = $50;
     $307 = ((($264)) + 4|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ((($308)) + 12|0);
     HEAP32[$307>>2] = $309;
    } else {
     $310 = $49;
     $41 = $310;
     $311 = $41;
     __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($264,$311);
    }
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($145);
    $51 = $142;
    $312 = $51;
    $313 = HEAP32[$312>>2]|0;
    $314 = ((($313)) + 64|0);
    HEAP32[$312>>2] = $314;
   }
  }
 } while(0);
 $$expand_i1_val4 = 1;
 HEAP8[$126>>0] = $$expand_i1_val4;
 __ZNSt3__25tupleIJbNS_6vectorIN6Crypto9SignatureENS_9allocatorIS3_EEEEEED2Ev($134);
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($129);
 $$pre_trunc = HEAP8[$126>>0]|0;
 $315 = $$pre_trunc&1;
 if ($315) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEJS8_S8_SA_S8_jEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 38;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEESB_SB_SD_SB_jEE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEESB_SB_SD_SB_jEE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __Z12generateKeysv($0) {
 $0 = $0|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(496|0);
 $15 = sp + 24|0;
 $18 = sp + 495|0;
 $45 = sp + 494|0;
 $46 = sp + 493|0;
 $49 = sp + 16|0;
 $52 = sp + 492|0;
 $67 = sp + 8|0;
 $70 = sp + 491|0;
 $97 = sp + 490|0;
 $98 = sp + 489|0;
 $101 = sp;
 $104 = sp + 488|0;
 $105 = sp + 456|0;
 $106 = sp + 424|0;
 $107 = sp + 420|0;
 $108 = sp + 40|0;
 $109 = sp + 28|0;
 __ZN6Crypto9PublicKeyC2Ev($105);
 __ZN6Crypto9SecretKeyC2Ev($106);
 __ZN6Crypto13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($105,$106);
 $$expand_i1_val = 0;
 HEAP8[$107>>0] = $$expand_i1_val;
 __ZN4KeysC2Ev($0);
 __ZN6Common5toHexEPKvy($108,$105,32,0);
 $102 = $0;
 $103 = $108;
 $110 = $102;
 $111 = $103;
 ;HEAP8[$101>>0]=HEAP8[$104>>0]|0;
 $99 = $110;
 $100 = $111;
 $112 = $99;
 $96 = $112;
 $113 = $96;
 $95 = $113;
 $94 = $113;
 $114 = $94;
 $93 = $114;
 $115 = $93;
 $92 = $115;
 $116 = $92;
 $117 = ((($116)) + 11|0);
 $118 = HEAP8[$117>>0]|0;
 $119 = $118&255;
 $120 = $119 & 128;
 $121 = ($120|0)!=(0);
 if ($121) {
  $87 = $113;
  $122 = $87;
  $86 = $122;
  $123 = $86;
  $85 = $123;
  $124 = $85;
  $125 = HEAP32[$124>>2]|0;
  HEAP8[$97>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($125,$97);
  $78 = $113;
  $79 = 0;
  $126 = $78;
  $127 = $79;
  $77 = $126;
  $128 = $77;
  $76 = $128;
  $129 = $76;
  $130 = ((($129)) + 4|0);
  HEAP32[$130>>2] = $127;
 } else {
  $84 = $113;
  $131 = $84;
  $83 = $131;
  $132 = $83;
  $82 = $132;
  $133 = $82;
  $81 = $133;
  $134 = $81;
  $80 = $134;
  $135 = $80;
  HEAP8[$98>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($135,$98);
  $90 = $113;
  $91 = 0;
  $136 = $90;
  $137 = $91;
  $138 = $137&255;
  $89 = $136;
  $139 = $89;
  $88 = $139;
  $140 = $88;
  $141 = ((($140)) + 11|0);
  HEAP8[$141>>0] = $138;
 }
 $75 = $112;
 $142 = $75;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($142,0);
 $143 = $100;
 $74 = $143;
 $144 = $74;
 $73 = $144;
 $145 = $73;
 $72 = $112;
 $146 = $72;
 $71 = $146;
 $147 = $71;
 ;HEAP32[$147>>2]=HEAP32[$145>>2]|0;HEAP32[$147+4>>2]=HEAP32[$145+4>>2]|0;HEAP32[$147+8>>2]=HEAP32[$145+8>>2]|0;
 $148 = $100;
 $68 = $112;
 $69 = $148;
 $149 = $68;
 $150 = $69;
 ;HEAP8[$67>>0]=HEAP8[$70>>0]|0;
 $65 = $149;
 $66 = $150;
 $151 = $65;
 $152 = $66;
 $64 = $152;
 $153 = $64;
 $63 = $153;
 $154 = $63;
 $62 = $154;
 $155 = $62;
 $58 = $155;
 $61 = $151;
 $156 = $61;
 $60 = $156;
 $157 = $60;
 $59 = $157;
 $158 = $100;
 $55 = $158;
 $159 = $55;
 $54 = $159;
 $160 = $54;
 $53 = $160;
 $161 = $53;
 $56 = $161;
 $57 = 0;
 while(1) {
  $162 = $57;
  $163 = ($162>>>0)<(3);
  if (!($163)) {
   break;
  }
  $164 = $56;
  $165 = $57;
  $166 = (($164) + ($165<<2)|0);
  HEAP32[$166>>2] = 0;
  $167 = $57;
  $168 = (($167) + 1)|0;
  $57 = $168;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($108);
 __ZN6Common5toHexEPKvy($109,$106,32,0);
 $169 = ((($0)) + 12|0);
 $50 = $169;
 $51 = $109;
 $170 = $50;
 $171 = $51;
 ;HEAP8[$49>>0]=HEAP8[$52>>0]|0;
 $47 = $170;
 $48 = $171;
 $172 = $47;
 $44 = $172;
 $173 = $44;
 $43 = $173;
 $42 = $173;
 $174 = $42;
 $41 = $174;
 $175 = $41;
 $40 = $175;
 $176 = $40;
 $177 = ((($176)) + 11|0);
 $178 = HEAP8[$177>>0]|0;
 $179 = $178&255;
 $180 = $179 & 128;
 $181 = ($180|0)!=(0);
 if ($181) {
  $35 = $173;
  $182 = $35;
  $34 = $182;
  $183 = $34;
  $33 = $183;
  $184 = $33;
  $185 = HEAP32[$184>>2]|0;
  HEAP8[$45>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($185,$45);
  $26 = $173;
  $27 = 0;
  $186 = $26;
  $187 = $27;
  $25 = $186;
  $188 = $25;
  $24 = $188;
  $189 = $24;
  $190 = ((($189)) + 4|0);
  HEAP32[$190>>2] = $187;
 } else {
  $32 = $173;
  $191 = $32;
  $31 = $191;
  $192 = $31;
  $30 = $192;
  $193 = $30;
  $29 = $193;
  $194 = $29;
  $28 = $194;
  $195 = $28;
  HEAP8[$46>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($195,$46);
  $38 = $173;
  $39 = 0;
  $196 = $38;
  $197 = $39;
  $198 = $197&255;
  $37 = $196;
  $199 = $37;
  $36 = $199;
  $200 = $36;
  $201 = ((($200)) + 11|0);
  HEAP8[$201>>0] = $198;
 }
 $23 = $172;
 $202 = $23;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($202,0);
 $203 = $48;
 $22 = $203;
 $204 = $22;
 $21 = $204;
 $205 = $21;
 $20 = $172;
 $206 = $20;
 $19 = $206;
 $207 = $19;
 ;HEAP32[$207>>2]=HEAP32[$205>>2]|0;HEAP32[$207+4>>2]=HEAP32[$205+4>>2]|0;HEAP32[$207+8>>2]=HEAP32[$205+8>>2]|0;
 $208 = $48;
 $16 = $172;
 $17 = $208;
 $209 = $16;
 $210 = $17;
 ;HEAP8[$15>>0]=HEAP8[$18>>0]|0;
 $13 = $209;
 $14 = $210;
 $211 = $13;
 $212 = $14;
 $12 = $212;
 $213 = $12;
 $11 = $213;
 $214 = $11;
 $10 = $214;
 $215 = $10;
 $6 = $215;
 $9 = $211;
 $216 = $9;
 $8 = $216;
 $217 = $8;
 $7 = $217;
 $218 = $48;
 $3 = $218;
 $219 = $3;
 $2 = $219;
 $220 = $2;
 $1 = $220;
 $221 = $1;
 $4 = $221;
 $5 = 0;
 while(1) {
  $222 = $5;
  $223 = ($222>>>0)<(3);
  if (!($223)) {
   break;
  }
  $224 = $4;
  $225 = $5;
  $226 = (($224) + ($225<<2)|0);
  HEAP32[$226>>2] = 0;
  $227 = $5;
  $228 = (($227) + 1)|0;
  $5 = $228;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($109);
 $$expand_i1_val2 = 1;
 HEAP8[$107>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$107>>0]|0;
 $229 = $$pre_trunc&1;
 if ($229) {
  STACKTOP = sp;return;
 }
 __ZN4KeysD2Ev($0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionI4KeysJEJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 39;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ4KeysEE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ4KeysEE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __Z16generateKeyImageNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $17 = sp + 8|0;
 $20 = sp + 348|0;
 $47 = sp + 347|0;
 $48 = sp + 346|0;
 $51 = sp;
 $54 = sp + 345|0;
 $65 = sp + 344|0;
 $66 = sp + 312|0;
 $67 = sp + 280|0;
 $68 = sp + 248|0;
 $69 = sp + 12|0;
 $$expand_i1_val = 0;
 HEAP8[$65>>0] = $$expand_i1_val;
 $64 = $0;
 $70 = $64;
 $63 = $70;
 $71 = $63;
 $62 = $71;
 $72 = $62;
 ;HEAP32[$72>>2]=0|0;HEAP32[$72+4>>2]=0|0;HEAP32[$72+8>>2]=0|0;
 $61 = $71;
 $73 = $61;
 $60 = $73;
 $57 = $70;
 $74 = $57;
 $56 = $74;
 $75 = $56;
 $55 = $75;
 $76 = $55;
 $58 = $76;
 $59 = 0;
 while(1) {
  $77 = $59;
  $78 = ($77>>>0)<(3);
  if (!($78)) {
   break;
  }
  $79 = $58;
  $80 = $59;
  $81 = (($79) + ($80<<2)|0);
  HEAP32[$81>>2] = 0;
  $82 = $59;
  $83 = (($82) + 1)|0;
  $59 = $83;
 }
 __ZN6Crypto9PublicKeyC2Ev($66);
 (__ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($1,$66)|0);
 __ZN6Crypto9SecretKeyC2Ev($67);
 (__ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($2,$67)|0);
 __ZN6Crypto8KeyImageC2Ev($68);
 __ZN6Crypto18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($66,$67,$68);
 __ZN6Common8podToHexIN6Crypto8KeyImageEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($69,$68);
 $52 = $0;
 $53 = $69;
 $84 = $52;
 $85 = $53;
 ;HEAP8[$51>>0]=HEAP8[$54>>0]|0;
 $49 = $84;
 $50 = $85;
 $86 = $49;
 $46 = $86;
 $87 = $46;
 $45 = $87;
 $44 = $87;
 $88 = $44;
 $43 = $88;
 $89 = $43;
 $42 = $89;
 $90 = $42;
 $91 = ((($90)) + 11|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = $92&255;
 $94 = $93 & 128;
 $95 = ($94|0)!=(0);
 if ($95) {
  $37 = $87;
  $96 = $37;
  $36 = $96;
  $97 = $36;
  $35 = $97;
  $98 = $35;
  $99 = HEAP32[$98>>2]|0;
  HEAP8[$47>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($99,$47);
  $28 = $87;
  $29 = 0;
  $100 = $28;
  $101 = $29;
  $27 = $100;
  $102 = $27;
  $26 = $102;
  $103 = $26;
  $104 = ((($103)) + 4|0);
  HEAP32[$104>>2] = $101;
 } else {
  $34 = $87;
  $105 = $34;
  $33 = $105;
  $106 = $33;
  $32 = $106;
  $107 = $32;
  $31 = $107;
  $108 = $31;
  $30 = $108;
  $109 = $30;
  HEAP8[$48>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($109,$48);
  $40 = $87;
  $41 = 0;
  $110 = $40;
  $111 = $41;
  $112 = $111&255;
  $39 = $110;
  $113 = $39;
  $38 = $113;
  $114 = $38;
  $115 = ((($114)) + 11|0);
  HEAP8[$115>>0] = $112;
 }
 $25 = $86;
 $116 = $25;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($116,0);
 $117 = $50;
 $24 = $117;
 $118 = $24;
 $23 = $118;
 $119 = $23;
 $22 = $86;
 $120 = $22;
 $21 = $120;
 $121 = $21;
 ;HEAP32[$121>>2]=HEAP32[$119>>2]|0;HEAP32[$121+4>>2]=HEAP32[$119+4>>2]|0;HEAP32[$121+8>>2]=HEAP32[$119+8>>2]|0;
 $122 = $50;
 $18 = $86;
 $19 = $122;
 $123 = $18;
 $124 = $19;
 ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
 $15 = $123;
 $16 = $124;
 $125 = $15;
 $126 = $16;
 $14 = $126;
 $127 = $14;
 $13 = $127;
 $128 = $13;
 $12 = $128;
 $129 = $12;
 $8 = $129;
 $11 = $125;
 $130 = $11;
 $10 = $130;
 $131 = $10;
 $9 = $131;
 $132 = $50;
 $5 = $132;
 $133 = $5;
 $4 = $133;
 $134 = $4;
 $3 = $134;
 $135 = $3;
 $6 = $135;
 $7 = 0;
 while(1) {
  $136 = $7;
  $137 = ($136>>>0)<(3);
  if (!($137)) {
   break;
  }
  $138 = $6;
  $139 = $7;
  $140 = (($138) + ($139<<2)|0);
  HEAP32[$140>>2] = 0;
  $141 = $7;
  $142 = (($141) + 1)|0;
  $7 = $142;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($69);
 $$expand_i1_val2 = 1;
 HEAP8[$65>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$65>>0]|0;
 $143 = $$pre_trunc&1;
 if ($143) {
  STACKTOP = sp;return;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_S7_EJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 40;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __Z12cn_fast_hashNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $16 = sp + 8|0;
 $19 = sp + 316|0;
 $46 = sp + 315|0;
 $47 = sp + 314|0;
 $50 = sp;
 $53 = sp + 313|0;
 $67 = sp + 312|0;
 $69 = sp + 24|0;
 $70 = sp + 280|0;
 $71 = sp + 12|0;
 $$expand_i1_val = 0;
 HEAP8[$67>>0] = $$expand_i1_val;
 $66 = $0;
 $72 = $66;
 $65 = $72;
 $73 = $65;
 $64 = $73;
 $74 = $64;
 ;HEAP32[$74>>2]=0|0;HEAP32[$74+4>>2]=0|0;HEAP32[$74+8>>2]=0|0;
 $63 = $73;
 $75 = $63;
 $62 = $75;
 $59 = $72;
 $76 = $59;
 $58 = $76;
 $77 = $58;
 $57 = $77;
 $78 = $57;
 $60 = $78;
 $61 = 0;
 while(1) {
  $79 = $61;
  $80 = ($79>>>0)<(3);
  if (!($80)) {
   break;
  }
  $81 = $60;
  $82 = $61;
  $83 = (($81) + ($82<<2)|0);
  HEAP32[$83>>2] = 0;
  $84 = $61;
  $85 = (($84) + 1)|0;
  $61 = $85;
 }
 __ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($69,$1);
 $68 = $69;
 dest=$70; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $86 = $68;
 $56 = $86;
 $87 = $56;
 $88 = HEAP32[$87>>2]|0;
 $55 = $88;
 $89 = $55;
 $90 = $68;
 $54 = $90;
 $91 = $54;
 $92 = ((($91)) + 4|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = HEAP32[$91>>2]|0;
 $95 = $93;
 $96 = $94;
 $97 = (($95) - ($96))|0;
 __ZN6Crypto12cn_fast_hashEPKvmRNS_4HashE($89,$97,$70);
 __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($71,$70);
 $51 = $0;
 $52 = $71;
 $98 = $51;
 $99 = $52;
 ;HEAP8[$50>>0]=HEAP8[$53>>0]|0;
 $48 = $98;
 $49 = $99;
 $100 = $48;
 $45 = $100;
 $101 = $45;
 $44 = $101;
 $43 = $101;
 $102 = $43;
 $42 = $102;
 $103 = $42;
 $41 = $103;
 $104 = $41;
 $105 = ((($104)) + 11|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $107 & 128;
 $109 = ($108|0)!=(0);
 if ($109) {
  $36 = $101;
  $110 = $36;
  $35 = $110;
  $111 = $35;
  $34 = $111;
  $112 = $34;
  $113 = HEAP32[$112>>2]|0;
  HEAP8[$46>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($113,$46);
  $27 = $101;
  $28 = 0;
  $114 = $27;
  $115 = $28;
  $26 = $114;
  $116 = $26;
  $25 = $116;
  $117 = $25;
  $118 = ((($117)) + 4|0);
  HEAP32[$118>>2] = $115;
 } else {
  $33 = $101;
  $119 = $33;
  $32 = $119;
  $120 = $32;
  $31 = $120;
  $121 = $31;
  $30 = $121;
  $122 = $30;
  $29 = $122;
  $123 = $29;
  HEAP8[$47>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($123,$47);
  $39 = $101;
  $40 = 0;
  $124 = $39;
  $125 = $40;
  $126 = $125&255;
  $38 = $124;
  $127 = $38;
  $37 = $127;
  $128 = $37;
  $129 = ((($128)) + 11|0);
  HEAP8[$129>>0] = $126;
 }
 $24 = $100;
 $130 = $24;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($130,0);
 $131 = $49;
 $23 = $131;
 $132 = $23;
 $22 = $132;
 $133 = $22;
 $21 = $100;
 $134 = $21;
 $20 = $134;
 $135 = $20;
 ;HEAP32[$135>>2]=HEAP32[$133>>2]|0;HEAP32[$135+4>>2]=HEAP32[$133+4>>2]|0;HEAP32[$135+8>>2]=HEAP32[$133+8>>2]|0;
 $136 = $49;
 $17 = $100;
 $18 = $136;
 $137 = $17;
 $138 = $18;
 ;HEAP8[$16>>0]=HEAP8[$19>>0]|0;
 $14 = $137;
 $15 = $138;
 $139 = $14;
 $140 = $15;
 $13 = $140;
 $141 = $13;
 $12 = $141;
 $142 = $12;
 $11 = $142;
 $143 = $11;
 $7 = $143;
 $10 = $139;
 $144 = $10;
 $9 = $144;
 $145 = $9;
 $8 = $145;
 $146 = $49;
 $4 = $146;
 $147 = $4;
 $3 = $147;
 $148 = $3;
 $2 = $148;
 $149 = $2;
 $5 = $149;
 $6 = 0;
 while(1) {
  $150 = $6;
  $151 = ($150>>>0)<(3);
  if (!($151)) {
   break;
  }
  $152 = $5;
  $153 = $6;
  $154 = (($152) + ($153<<2)|0);
  HEAP32[$154>>2] = 0;
  $155 = $6;
  $156 = (($155) + 1)|0;
  $6 = $156;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($71);
 $$expand_i1_val2 = 1;
 HEAP8[$67>>0] = $$expand_i1_val2;
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($69);
 $$pre_trunc = HEAP8[$67>>0]|0;
 $157 = $$pre_trunc&1;
 if ($157) {
  STACKTOP = sp;return;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_EJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 41;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_EE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_EE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp + 72|0;
 $6 = sp + 40|0;
 $7 = sp + 8|0;
 $4 = $2;
 __ZN6Crypto13KeyDerivationC2Ev($5);
 (__ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($1,$5)|0);
 __ZN6Crypto9PublicKeyC2Ev($6);
 (__ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($3,$6)|0);
 __ZN6Crypto9PublicKeyC2Ev($7);
 $8 = $4;
 (__ZN6Crypto19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS3_($5,$8,$6,$7)|0);
 __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($0,$7);
 STACKTOP = sp;return;
}
function __ZN10emscripten8functionINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEJS7_mS7_EJEEEvPKcPFT_DpT0_EDpT1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp + 16|0;
 $3 = $0;
 $4 = $1;
 $6 = 42;
 $7 = $3;
 $8 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_mSA_EE8getCountEv($5)|0);
 $9 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_mSA_EE8getTypesEv($5)|0);
 $10 = $6;
 $2 = $10;
 $11 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $12 = $6;
 $13 = $4;
 __embind_register_function(($7|0),($8|0),($9|0),($11|0),($12|0),($13|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$field = 0, $$field11 = 0, $$field14 = 0, $$field19 = 0, $$field22 = 0, $$field27 = 0, $$field30 = 0, $$field37 = 0, $$field40 = 0, $$field6 = 0, $$index1 = 0, $$index13 = 0, $$index17 = 0, $$index21 = 0, $$index25 = 0, $$index29 = 0, $$index3 = 0, $$index33 = 0, $$index35 = 0, $$index39 = 0;
 var $$index43 = 0, $$index5 = 0, $$index9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $4 = sp + 228|0;
 $5 = sp + 250|0;
 $10 = sp + 208|0;
 $11 = sp + 249|0;
 $16 = sp + 184|0;
 $18 = sp + 248|0;
 $19 = sp + 16|0;
 $23 = sp + 160|0;
 $25 = sp + 247|0;
 $26 = sp + 8|0;
 $30 = sp + 136|0;
 $32 = sp + 246|0;
 $33 = sp;
 $37 = sp + 245|0;
 $51 = sp + 56|0;
 $52 = sp + 48|0;
 $53 = sp + 244|0;
 $54 = sp + 40|0;
 $55 = sp + 32|0;
 $56 = sp + 24|0;
 $50 = $0;
 HEAP32[$51>>2] = (43);
 $$index1 = ((($51)) + 4|0);
 HEAP32[$$index1>>2] = 0;
 HEAP32[$52>>2] = (44);
 $$index3 = ((($52)) + 4|0);
 HEAP32[$$index3>>2] = 0;
 $57 = $50;
 $44 = $53;
 $45 = $57;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEvv();
 $46 = 45;
 $58 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv()|0);
 $47 = $58;
 $59 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv()|0);
 $48 = $59;
 $49 = 46;
 $60 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $61 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv()|0);
 $62 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv()|0);
 $63 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $64 = $46;
 $43 = $64;
 $65 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $66 = $46;
 $67 = $47;
 $42 = $67;
 $68 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $69 = $47;
 $70 = $48;
 $41 = $70;
 $71 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $72 = $48;
 $73 = $45;
 $74 = $49;
 $40 = $74;
 $75 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 $76 = $49;
 __embind_register_class(($60|0),($61|0),($62|0),($63|0),($65|0),($66|0),($68|0),($69|0),($71|0),($72|0),($73|0),($75|0),($76|0));
 $39 = $53;
 $77 = $39;
 $35 = $77;
 $36 = 47;
 $78 = $35;
 $38 = 48;
 $79 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $80 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getCountEv($37)|0);
 $81 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getTypesEv($37)|0);
 $82 = $38;
 $34 = $82;
 $83 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $84 = $38;
 $85 = $36;
 __embind_register_class_constructor(($79|0),($80|0),($81|0),($83|0),($84|0),($85|0));
 $$field = HEAP32[$51>>2]|0;
 $$index5 = ((($51)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 HEAP32[$54>>2] = $$field;
 $$index9 = ((($54)) + 4|0);
 HEAP32[$$index9>>2] = $$field6;
 ;HEAP8[$33>>0]=HEAP8[$54>>0]|0;HEAP8[$33+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$33+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$33+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$33+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$33+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$33+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$33+7>>0]=HEAP8[$54+7>>0]|0;
 $$field11 = HEAP32[$33>>2]|0;
 $$index13 = ((($33)) + 4|0);
 $$field14 = HEAP32[$$index13>>2]|0;
 $28 = $78;
 $29 = 37382;
 HEAP32[$30>>2] = $$field11;
 $$index17 = ((($30)) + 4|0);
 HEAP32[$$index17>>2] = $$field14;
 $86 = $28;
 $31 = 49;
 $87 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $88 = $29;
 $89 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getCountEv($32)|0);
 $90 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getTypesEv($32)|0);
 $91 = $31;
 $27 = $91;
 $92 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $93 = $31;
 $94 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EEEPT_RKSG_($30)|0);
 __embind_register_class_function(($87|0),($88|0),($89|0),($90|0),($92|0),($93|0),($94|0),0);
 $$field19 = HEAP32[$52>>2]|0;
 $$index21 = ((($52)) + 4|0);
 $$field22 = HEAP32[$$index21>>2]|0;
 HEAP32[$55>>2] = $$field19;
 $$index25 = ((($55)) + 4|0);
 HEAP32[$$index25>>2] = $$field22;
 ;HEAP8[$26>>0]=HEAP8[$55>>0]|0;HEAP8[$26+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$26+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$26+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$26+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$26+7>>0]=HEAP8[$55+7>>0]|0;
 $$field27 = HEAP32[$26>>2]|0;
 $$index29 = ((($26)) + 4|0);
 $$field30 = HEAP32[$$index29>>2]|0;
 $21 = $86;
 $22 = 37392;
 HEAP32[$23>>2] = $$field27;
 $$index33 = ((($23)) + 4|0);
 HEAP32[$$index33>>2] = $$field30;
 $95 = $21;
 $24 = 50;
 $96 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $97 = $22;
 $98 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEmRKSC_EE8getCountEv($25)|0);
 $99 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEmRKSC_EE8getTypesEv($25)|0);
 $100 = $24;
 $20 = $100;
 $101 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $102 = $24;
 $103 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EEEPT_RKSG_($23)|0);
 __embind_register_class_function(($96|0),($97|0),($98|0),($99|0),($101|0),($102|0),($103|0),0);
 HEAP32[$56>>2] = (51);
 $$index35 = ((($56)) + 4|0);
 HEAP32[$$index35>>2] = 0;
 ;HEAP8[$19>>0]=HEAP8[$56>>0]|0;HEAP8[$19+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$56+3>>0]|0;HEAP8[$19+4>>0]=HEAP8[$56+4>>0]|0;HEAP8[$19+5>>0]=HEAP8[$56+5>>0]|0;HEAP8[$19+6>>0]=HEAP8[$56+6>>0]|0;HEAP8[$19+7>>0]=HEAP8[$56+7>>0]|0;
 $$field37 = HEAP32[$19>>2]|0;
 $$index39 = ((($19)) + 4|0);
 $$field40 = HEAP32[$$index39>>2]|0;
 $14 = $95;
 $15 = 37399;
 HEAP32[$16>>2] = $$field37;
 $$index43 = ((($16)) + 4|0);
 HEAP32[$$index43>>2] = $$field40;
 $104 = $14;
 $17 = 52;
 $105 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $106 = $15;
 $107 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getCountEv($18)|0);
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getTypesEv($18)|0);
 $109 = $17;
 $13 = $109;
 $110 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $111 = $17;
 $112 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEEEPT_RKSE_($16)|0);
 __embind_register_class_function(($105|0),($106|0),($107|0),($108|0),($110|0),($111|0),($112|0),0);
 $8 = $104;
 $9 = 37404;
 HEAP32[$10>>2] = 53;
 $113 = $8;
 $12 = 54;
 $114 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $115 = $9;
 $116 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEmEE8getCountEv($11)|0);
 $117 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEmEE8getTypesEv($11)|0);
 $118 = $12;
 $7 = $118;
 $119 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $120 = $12;
 $121 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmEEEPT_RKSH_($10)|0);
 __embind_register_class_function(($114|0),($115|0),($116|0),($117|0),($119|0),($120|0),($121|0),0);
 $2 = $113;
 $3 = 37408;
 HEAP32[$4>>2] = 55;
 $6 = 56;
 $122 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $123 = $3;
 $124 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEmRKSB_EE8getCountEv($5)|0);
 $125 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEmRKSB_EE8getTypesEv($5)|0);
 $126 = $6;
 $1 = $126;
 $127 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $128 = $6;
 $129 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EEEPT_RKSH_($4)|0);
 __embind_register_class_function(($122|0),($123|0),($124|0),($125|0),($127|0),($128|0),($129|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten12value_objectI4KeysEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $8 = $4;
 __ZN10emscripten8internal11noncopyableC2Ev($8);
 $6 = 57;
 $7 = 58;
 $9 = (__ZN10emscripten8internal6TypeIDI4KeysE3getEv()|0);
 $10 = $5;
 $11 = $6;
 $3 = $11;
 $12 = (__ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv()|0);
 $13 = $6;
 $14 = $7;
 $2 = $14;
 $15 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 $16 = $7;
 __embind_register_value_object(($9|0),($10|0),($12|0),($13|0),($15|0),($16|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten12value_objectI4KeysE5fieldIS1_NSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 HEAP32[$7>>2] = $2;
 $10 = $5;
 $8 = 59;
 $9 = 60;
 $11 = (__ZN10emscripten8internal6TypeIDI4KeysE3getEv()|0);
 $12 = $6;
 $13 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 $14 = $8;
 $4 = $14;
 $15 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $16 = $8;
 $17 = (__ZN10emscripten8internal10getContextIM4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($7)|0);
 $18 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 $19 = $9;
 $3 = $19;
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $21 = $9;
 $22 = (__ZN10emscripten8internal10getContextIM4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($7)|0);
 __embind_register_value_object_field(($11|0),($12|0),($13|0),($15|0),($16|0),($17|0),($18|0),($20|0),($21|0),($22|0));
 STACKTOP = sp;return ($10|0);
}
function __ZN10emscripten12value_objectI4KeysED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__ZN10emscripten8internal6TypeIDI4KeysE3getEv()|0);
 __embind_finalize_value_object(($3|0));
 __ZN10emscripten8internal11noncopyableD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDI4KeysE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDI4KeysE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11noncopyableD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11LightTypeIDI4KeysE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35232|0);
}
function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + ($6)|0);
 $8 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($7)|0);
 STACKTOP = sp;return ($8|0);
}
function __ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $17 = sp + 8|0;
 $20 = sp + 223|0;
 $47 = sp + 222|0;
 $48 = sp + 221|0;
 $51 = sp;
 $54 = sp + 220|0;
 $58 = sp + 12|0;
 $55 = $0;
 $56 = $1;
 $57 = $2;
 $59 = $57;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($58,$59);
 $60 = $56;
 $61 = $55;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + ($62)|0);
 $52 = $63;
 $53 = $58;
 $64 = $52;
 $65 = $53;
 ;HEAP8[$51>>0]=HEAP8[$54>>0]|0;
 $49 = $64;
 $50 = $65;
 $66 = $49;
 $46 = $66;
 $67 = $46;
 $45 = $67;
 $44 = $67;
 $68 = $44;
 $43 = $68;
 $69 = $43;
 $42 = $69;
 $70 = $42;
 $71 = ((($70)) + 11|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 & 128;
 $75 = ($74|0)!=(0);
 if ($75) {
  $37 = $67;
  $76 = $37;
  $36 = $76;
  $77 = $36;
  $35 = $77;
  $78 = $35;
  $79 = HEAP32[$78>>2]|0;
  HEAP8[$47>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($79,$47);
  $28 = $67;
  $29 = 0;
  $80 = $28;
  $81 = $29;
  $27 = $80;
  $82 = $27;
  $26 = $82;
  $83 = $26;
  $84 = ((($83)) + 4|0);
  HEAP32[$84>>2] = $81;
 } else {
  $34 = $67;
  $85 = $34;
  $33 = $85;
  $86 = $33;
  $32 = $86;
  $87 = $32;
  $31 = $87;
  $88 = $31;
  $30 = $88;
  $89 = $30;
  HEAP8[$48>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($89,$48);
  $40 = $67;
  $41 = 0;
  $90 = $40;
  $91 = $41;
  $92 = $91&255;
  $39 = $90;
  $93 = $39;
  $38 = $93;
  $94 = $38;
  $95 = ((($94)) + 11|0);
  HEAP8[$95>>0] = $92;
 }
 $25 = $66;
 $96 = $25;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($96,0);
 $97 = $50;
 $24 = $97;
 $98 = $24;
 $23 = $98;
 $99 = $23;
 $22 = $66;
 $100 = $22;
 $21 = $100;
 $101 = $21;
 ;HEAP32[$101>>2]=HEAP32[$99>>2]|0;HEAP32[$101+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$99+8>>2]|0;
 $102 = $50;
 $18 = $66;
 $19 = $102;
 $103 = $18;
 $104 = $19;
 ;HEAP8[$17>>0]=HEAP8[$20>>0]|0;
 $15 = $103;
 $16 = $104;
 $105 = $15;
 $106 = $16;
 $14 = $106;
 $107 = $14;
 $13 = $107;
 $108 = $13;
 $12 = $108;
 $109 = $12;
 $8 = $109;
 $11 = $105;
 $110 = $11;
 $10 = $110;
 $111 = $10;
 $9 = $111;
 $112 = $50;
 $5 = $112;
 $113 = $5;
 $4 = $113;
 $114 = $4;
 $3 = $114;
 $115 = $3;
 $6 = $115;
 $7 = 0;
 while(1) {
  $116 = $7;
  $117 = ($116>>>0)<(3);
  if (!($117)) {
   break;
  }
  $118 = $6;
  $119 = $7;
  $120 = (($118) + ($119<<2)|0);
  HEAP32[$120>>2] = 0;
  $121 = $7;
  $122 = (($121) + 1)|0;
  $7 = $122;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($58);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37272|0);
}
function __ZN10emscripten8internal10getContextIM4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(4)|0);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37267|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35240|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = $1;
 $10 = $9;
 $11 = ((($10)) + 4|0);
 $12 = $9;
 $13 = HEAP32[$12>>2]|0;
 $6 = $0;
 $7 = $11;
 $8 = $13;
 $14 = $6;
 $5 = $14;
 $15 = $5;
 $4 = $15;
 $16 = $4;
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;
 $3 = $15;
 $17 = $3;
 $2 = $17;
 $18 = $7;
 $19 = $8;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($14,$18,$19);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $48 = $0;
 $50 = $48;
 $47 = $50;
 $51 = $47;
 $46 = $51;
 $52 = $46;
 $45 = $52;
 $53 = $45;
 $44 = $53;
 $54 = $44;
 $43 = $54;
 $55 = $43;
 $56 = ((($55)) + 11|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = $58 & 128;
 $60 = ($59|0)!=(0);
 if ($60) {
  $39 = $52;
  $61 = $39;
  $38 = $61;
  $62 = $38;
  $37 = $62;
  $63 = $37;
  $64 = ((($63)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $73 = $65;
 } else {
  $42 = $52;
  $66 = $42;
  $41 = $66;
  $67 = $41;
  $40 = $67;
  $68 = $40;
  $69 = ((($68)) + 11|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $73 = $71;
 }
 $72 = (4 + ($73))|0;
 $74 = (_malloc($72)|0);
 $49 = $74;
 $75 = $48;
 $11 = $75;
 $76 = $11;
 $10 = $76;
 $77 = $10;
 $9 = $77;
 $78 = $9;
 $8 = $78;
 $79 = $8;
 $7 = $79;
 $80 = $7;
 $81 = ((($80)) + 11|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $83 & 128;
 $85 = ($84|0)!=(0);
 if ($85) {
  $3 = $77;
  $86 = $3;
  $2 = $86;
  $87 = $2;
  $1 = $87;
  $88 = $1;
  $89 = ((($88)) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $98 = $90;
 } else {
  $6 = $77;
  $91 = $6;
  $5 = $91;
  $92 = $5;
  $4 = $92;
  $93 = $4;
  $94 = ((($93)) + 11|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $98 = $96;
 }
 $97 = $49;
 HEAP32[$97>>2] = $98;
 $99 = $49;
 $100 = ((($99)) + 4|0);
 $101 = $48;
 $25 = $101;
 $102 = $25;
 $24 = $102;
 $103 = $24;
 $23 = $103;
 $104 = $23;
 $22 = $104;
 $105 = $22;
 $21 = $105;
 $106 = $21;
 $107 = ((($106)) + 11|0);
 $108 = HEAP8[$107>>0]|0;
 $109 = $108&255;
 $110 = $109 & 128;
 $111 = ($110|0)!=(0);
 if ($111) {
  $15 = $103;
  $112 = $15;
  $14 = $112;
  $113 = $14;
  $13 = $113;
  $114 = $13;
  $115 = HEAP32[$114>>2]|0;
  $121 = $115;
 } else {
  $20 = $103;
  $116 = $20;
  $19 = $116;
  $117 = $19;
  $18 = $117;
  $118 = $18;
  $17 = $118;
  $119 = $17;
  $16 = $119;
  $120 = $16;
  $121 = $120;
 }
 $12 = $121;
 $122 = $12;
 $123 = $48;
 $36 = $123;
 $124 = $36;
 $35 = $124;
 $125 = $35;
 $34 = $125;
 $126 = $34;
 $33 = $126;
 $127 = $33;
 $32 = $127;
 $128 = $32;
 $129 = ((($128)) + 11|0);
 $130 = HEAP8[$129>>0]|0;
 $131 = $130&255;
 $132 = $131 & 128;
 $133 = ($132|0)!=(0);
 if ($133) {
  $28 = $125;
  $134 = $28;
  $27 = $134;
  $135 = $27;
  $26 = $135;
  $136 = $26;
  $137 = ((($136)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $145 = $138;
  _memcpy(($100|0),($122|0),($145|0))|0;
  $146 = $49;
  STACKTOP = sp;return ($146|0);
 } else {
  $31 = $125;
  $139 = $31;
  $30 = $139;
  $140 = $30;
  $29 = $140;
  $141 = $29;
  $142 = ((($141)) + 11|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $143&255;
  $145 = $144;
  _memcpy(($100|0),($122|0),($145|0))|0;
  $146 = $49;
  STACKTOP = sp;return ($146|0);
 }
 return (0)|0;
}
function __ZN10emscripten8internal11noncopyableC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwm(24)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 __ZN4KeysC2Ev($0);
 return ($0|0);
}
function __ZN10emscripten8internal14raw_destructorI4KeysEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZN4KeysD2Ev($2);
  __ZdlPv($2);
 }
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal19getGenericSignatureIJiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37380|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37377|0);
}
function __ZN4KeysD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 12|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN4KeysC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $21 = $0;
 $22 = $21;
 $20 = $22;
 $23 = $20;
 $19 = $23;
 $24 = $19;
 $18 = $24;
 $25 = $18;
 ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;
 $17 = $24;
 $26 = $17;
 $16 = $26;
 $13 = $23;
 $27 = $13;
 $12 = $27;
 $28 = $12;
 $11 = $28;
 $29 = $11;
 $14 = $29;
 $15 = 0;
 while(1) {
  $30 = $15;
  $31 = ($30>>>0)<(3);
  if (!($31)) {
   break;
  }
  $32 = $14;
  $33 = $15;
  $34 = (($32) + ($33<<2)|0);
  HEAP32[$34>>2] = 0;
  $35 = $15;
  $36 = (($35) + 1)|0;
  $15 = $36;
 }
 $37 = ((($22)) + 12|0);
 $10 = $37;
 $38 = $10;
 $9 = $38;
 $39 = $9;
 $8 = $39;
 $40 = $8;
 ;HEAP32[$40>>2]=0|0;HEAP32[$40+4>>2]=0|0;HEAP32[$40+8>>2]=0|0;
 $7 = $39;
 $41 = $7;
 $6 = $41;
 $3 = $38;
 $42 = $3;
 $2 = $42;
 $43 = $2;
 $1 = $43;
 $44 = $1;
 $4 = $44;
 $5 = 0;
 while(1) {
  $45 = $5;
  $46 = ($45>>>0)<(3);
  if (!($46)) {
   break;
  }
  $47 = $4;
  $48 = $5;
  $49 = (($47) + ($48<<2)|0);
  HEAP32[$49>>2] = 0;
  $50 = $5;
  $51 = (($50) + 1)|0;
  $5 = $51;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $14 = sp;
 $19 = sp + 105|0;
 $29 = sp + 104|0;
 $27 = $0;
 $28 = $1;
 $30 = $27;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $26 = $30;
 $33 = $26;
 $34 = ((($33)) + 8|0);
 $25 = $34;
 $35 = $25;
 $24 = $35;
 $36 = $24;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($32|0)!=($37|0);
 if ($38) {
  $21 = $29;
  $22 = $30;
  $23 = 1;
  $5 = $30;
  $39 = $5;
  $40 = ((($39)) + 8|0);
  $4 = $40;
  $41 = $4;
  $3 = $41;
  $42 = $3;
  $43 = ((($30)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $2 = $44;
  $45 = $2;
  $46 = $28;
  $16 = $42;
  $17 = $45;
  $18 = $46;
  $47 = $16;
  $48 = $17;
  $49 = $18;
  $15 = $49;
  $50 = $15;
  ;HEAP8[$14>>0]=HEAP8[$19>>0]|0;
  $11 = $47;
  $12 = $48;
  $13 = $50;
  $51 = $11;
  $52 = $12;
  $53 = $13;
  $10 = $53;
  $54 = $10;
  $7 = $51;
  $8 = $52;
  $9 = $54;
  $55 = $8;
  $56 = $9;
  $6 = $56;
  $57 = $6;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($55,$57);
  $20 = $29;
  $58 = ((($30)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ((($59)) + 12|0);
  HEAP32[$58>>2] = $60;
  STACKTOP = sp;return;
 } else {
  $61 = $28;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($30,$61);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $7 = sp;
 $10 = sp + 184|0;
 $46 = $0;
 $47 = $1;
 $48 = $2;
 $50 = $46;
 $45 = $50;
 $51 = $45;
 $52 = ((($51)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[$51>>2]|0;
 $55 = $53;
 $56 = $54;
 $57 = (($55) - ($56))|0;
 $58 = (($57|0) / 12)&-1;
 $49 = $58;
 $59 = $49;
 $60 = $47;
 $61 = ($59>>>0)<($60>>>0);
 if ($61) {
  $62 = $47;
  $63 = $49;
  $64 = (($62) - ($63))|0;
  $65 = $48;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($50,$64,$65);
  STACKTOP = sp;return;
 }
 $66 = $49;
 $67 = $47;
 $68 = ($66>>>0)>($67>>>0);
 if (!($68)) {
  STACKTOP = sp;return;
 }
 $69 = HEAP32[$50>>2]|0;
 $70 = $47;
 $71 = (($69) + (($70*12)|0)|0);
 $42 = $50;
 $43 = $71;
 $72 = $42;
 $73 = $43;
 $40 = $72;
 $41 = $73;
 $39 = $72;
 $74 = $39;
 $75 = ((($74)) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = HEAP32[$74>>2]|0;
 $78 = $76;
 $79 = $77;
 $80 = (($78) - ($79))|0;
 $81 = (($80|0) / 12)&-1;
 $44 = $81;
 $82 = $43;
 $15 = $72;
 $16 = $82;
 $83 = $15;
 $84 = ((($83)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $17 = $85;
 while(1) {
  $86 = $16;
  $87 = $17;
  $88 = ($86|0)!=($87|0);
  if (!($88)) {
   break;
  }
  $14 = $83;
  $89 = $14;
  $90 = ((($89)) + 8|0);
  $13 = $90;
  $91 = $13;
  $12 = $91;
  $92 = $12;
  $93 = $17;
  $94 = ((($93)) + -12|0);
  $17 = $94;
  $11 = $94;
  $95 = $11;
  $8 = $92;
  $9 = $95;
  $96 = $8;
  $97 = $9;
  ;HEAP8[$7>>0]=HEAP8[$10>>0]|0;
  $5 = $96;
  $6 = $97;
  $98 = $5;
  $99 = $6;
  $3 = $98;
  $4 = $99;
  $100 = $4;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($100);
 }
 $101 = $16;
 $102 = ((($83)) + 4|0);
 HEAP32[$102>>2] = $101;
 $103 = $44;
 $37 = $72;
 $38 = $103;
 $104 = $37;
 $36 = $104;
 $105 = $36;
 $106 = HEAP32[$105>>2]|0;
 $35 = $106;
 $107 = $35;
 $19 = $104;
 $108 = $19;
 $109 = HEAP32[$108>>2]|0;
 $18 = $109;
 $110 = $18;
 $24 = $104;
 $111 = $24;
 $23 = $111;
 $112 = $23;
 $22 = $112;
 $113 = $22;
 $114 = ((($113)) + 8|0);
 $21 = $114;
 $115 = $21;
 $20 = $115;
 $116 = $20;
 $117 = HEAP32[$116>>2]|0;
 $118 = HEAP32[$112>>2]|0;
 $119 = $117;
 $120 = $118;
 $121 = (($119) - ($120))|0;
 $122 = (($121|0) / 12)&-1;
 $123 = (($110) + (($122*12)|0)|0);
 $26 = $104;
 $124 = $26;
 $125 = HEAP32[$124>>2]|0;
 $25 = $125;
 $126 = $25;
 $127 = $38;
 $128 = (($126) + (($127*12)|0)|0);
 $28 = $104;
 $129 = $28;
 $130 = HEAP32[$129>>2]|0;
 $27 = $130;
 $131 = $27;
 $29 = $104;
 $132 = $29;
 $133 = ((($132)) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = HEAP32[$132>>2]|0;
 $136 = $134;
 $137 = $135;
 $138 = (($136) - ($137))|0;
 $139 = (($138|0) / 12)&-1;
 $140 = (($131) + (($139*12)|0)|0);
 $30 = $104;
 $31 = $107;
 $32 = $123;
 $33 = $128;
 $34 = $140;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvRKT_($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($2);
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37842|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37840|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 4|0;
 $12 = (__Znwm(12)|0);
 $11 = $12;
 $13 = $11;
 $9 = $13;
 $14 = $9;
 $8 = $14;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($14)) + 8|0);
 HEAP32[$10>>2] = 0;
 $6 = $16;
 $7 = $10;
 $17 = $6;
 $18 = $7;
 $5 = $18;
 $19 = $5;
 $1 = $17;
 $2 = $19;
 $20 = $1;
 $21 = $2;
 $0 = $21;
 HEAP32[$20>>2] = 0;
 $4 = $17;
 $22 = $4;
 $3 = $22;
 STACKTOP = sp;return ($12|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (FUNCTION_TABLE_i[$2 & 63]()|0);
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeESC_($3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $4;
 $8 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESC_($7)|0);
 $9 = $3;
 $$field = HEAP32[$9>>2]|0;
 $$index1 = ((($9)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $10 = $$field2 >> 1;
 $11 = (($8) + ($10)|0);
 $12 = $$field2 & 1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = HEAP32[$11>>2]|0;
  $15 = (($14) + ($$field)|0);
  $16 = HEAP32[$15>>2]|0;
  $19 = $16;
 } else {
  $17 = $$field;
  $19 = $17;
 }
 $18 = $5;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($6,$18);
 FUNCTION_TABLE_vii[$19 & 63]($11,$6);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEERKSB_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EEEPT_RKSG_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_EUt_E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESC_($9)|0);
 $11 = $4;
 $$field = HEAP32[$11>>2]|0;
 $$index1 = ((($11)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $12 = $$field2 >> 1;
 $13 = (($10) + ($12)|0);
 $14 = $$field2 & 1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($$field)|0);
  $18 = HEAP32[$17>>2]|0;
  $23 = $18;
 } else {
  $19 = $$field;
  $23 = $19;
 }
 $20 = $6;
 $21 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($20)|0);
 $22 = $7;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($8,$22);
 FUNCTION_TABLE_viii[$23 & 63]($13,$21,$8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEmRKSC_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEmRKSC_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEmRKSB_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37747|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EEEPT_RKSG_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = $4;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = (($8|0) / 12)&-1;
 STACKTOP = sp;return ($9|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESD_($5)|0);
 $7 = $2;
 $$field = HEAP32[$7>>2]|0;
 $$index1 = ((($7)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $8 = $$field2 >> 1;
 $9 = (($6) + ($8)|0);
 $10 = $$field2 & 1;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[$9>>2]|0;
  $13 = (($12) + ($$field)|0);
  $14 = HEAP32[$13>>2]|0;
  $16 = $14;
 } else {
  $15 = $$field;
  $16 = $15;
 }
 $17 = (FUNCTION_TABLE_ii[$16 & 63]($9)|0);
 HEAP32[$4>>2] = $17;
 $18 = (__ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($4)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEEEPT_RKSE_($0) {
 $0 = $0|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $$index5 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(8)|0);
 $3 = $1;
 $$field = HEAP32[$3>>2]|0;
 $$index1 = ((($3)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 HEAP32[$2>>2] = $$field;
 $$index5 = ((($2)) + 4|0);
 HEAP32[$$index5>>2] = $$field2;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $1;
 $7 = $2;
 $8 = $7;
 $9 = $6;
 $5 = $9;
 $10 = $5;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$10>>2]|0;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 12)&-1;
 $18 = ($8>>>0)<($17>>>0);
 if ($18) {
  $19 = $6;
  $20 = $7;
  $3 = $19;
  $4 = $20;
  $21 = $3;
  $22 = HEAP32[$21>>2]|0;
  $23 = $4;
  $24 = (($22) + (($23*12)|0)|0);
  __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($0,$24);
  STACKTOP = sp;return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  STACKTOP = sp;return;
 }
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($9)|0);
 $11 = $5;
 $12 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($11)|0);
 FUNCTION_TABLE_viii[$8 & 63]($6,$10,$12);
 $13 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($6)|0);
 __ZN10emscripten3valD2Ev($6);
 STACKTOP = sp;return ($13|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEmEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEmEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEmEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37635|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmEEEPT_RKSH_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(4)|0);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $7;
 $9 = $5;
 $10 = $6;
 $3 = $9;
 $4 = $10;
 $11 = $3;
 $12 = HEAP32[$11>>2]|0;
 $13 = $4;
 $14 = (($12) + (($13*12)|0)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($14,$8)|0);
 STACKTOP = sp;return 1;
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_EUt_E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $4;
 $10 = HEAP32[$9>>2]|0;
 $11 = $5;
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($11)|0);
 $13 = $6;
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($13)|0);
 $15 = $7;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($8,$15);
 $16 = (FUNCTION_TABLE_iiii[$10 & 63]($12,$14,$8)|0);
 $17 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($16)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 STACKTOP = sp;return ($17|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEmRKSB_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEmRKSB_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmRKSA_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37412|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EEEPT_RKSH_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__Znwm(4)|0);
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmRKSA_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32768|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0&1;
 $1 = $2;
 $3 = $1;
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEmEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35800|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 __emval_incref(($3|0));
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 __emval_decref(($3|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $2 = $7;
 $8 = $2;
 __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($5,$8);
 $9 = (__ZN10emscripten8internal6TypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 $10 = (__ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($5)|0);
 $11 = (__emval_take_value(($9|0),($10|0))|0);
 HEAP32[$6>>2] = $11;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val9undefinedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1));
 return;
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $9 = sp;
 $7 = $0;
 $8 = $1;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 HEAP32[$9>>2] = $11;
 $12 = $8;
 $2 = $12;
 $13 = $2;
 $4 = $9;
 $5 = $13;
 $14 = $4;
 $15 = $5;
 $3 = $15;
 $16 = $3;
 $17 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($16)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($14,$17);
 $18 = $4;
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($18);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 STACKTOP = sp;return ($4|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35240|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $4;
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 8|0);
 HEAP32[$7>>2] = $9;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJmNS0_17AllowedRawPointerIKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35812|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESD_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11BindingTypeImE10toWireTypeERKm($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEmRKSB_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32784|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEERKSB_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35820|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35832|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeESC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35336|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35352|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35272|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 120|0;
 $31 = $0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $30 = $32;
 $35 = $30;
 $36 = HEAP32[$35>>2]|0;
 $27 = $35;
 $28 = $36;
 $37 = $27;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $29 = $39;
 while(1) {
  $40 = $28;
  $41 = $29;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $26 = $37;
  $43 = $26;
  $44 = ((($43)) + 8|0);
  $25 = $44;
  $45 = $25;
  $24 = $45;
  $46 = $24;
  $47 = $29;
  $48 = ((($47)) + -12|0);
  $29 = $48;
  $23 = $48;
  $49 = $23;
  $20 = $46;
  $21 = $49;
  $50 = $20;
  $51 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $50;
  $18 = $51;
  $52 = $17;
  $53 = $18;
  $15 = $52;
  $16 = $53;
  $54 = $16;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($54);
 }
 $55 = $28;
 $56 = ((($37)) + 4|0);
 HEAP32[$56>>2] = $55;
 $14 = $32;
 $57 = $14;
 $58 = ((($57)) + 8|0);
 $13 = $58;
 $59 = $13;
 $12 = $59;
 $60 = $12;
 $61 = HEAP32[$32>>2]|0;
 $4 = $32;
 $62 = $4;
 $3 = $62;
 $63 = $3;
 $64 = ((($63)) + 8|0);
 $2 = $64;
 $65 = $2;
 $1 = $65;
 $66 = $1;
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$62>>2]|0;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = (($71|0) / 12)&-1;
 $9 = $60;
 $10 = $61;
 $11 = $72;
 $73 = $9;
 $74 = $10;
 $75 = $11;
 $6 = $73;
 $7 = $74;
 $8 = $75;
 $76 = $7;
 $5 = $76;
 $77 = $5;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return (35272|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEmRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $9 = sp + 8|0;
 $12 = sp + 250|0;
 $20 = sp + 184|0;
 $23 = sp + 172|0;
 $40 = sp;
 $45 = sp + 249|0;
 $54 = sp + 248|0;
 $62 = sp + 12|0;
 $58 = $0;
 $59 = $1;
 $60 = $2;
 $63 = $58;
 $57 = $63;
 $64 = $57;
 $65 = ((($64)) + 8|0);
 $56 = $65;
 $66 = $56;
 $55 = $66;
 $67 = $55;
 $68 = HEAP32[$67>>2]|0;
 $69 = ((($63)) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $68;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 12)&-1;
 $75 = $59;
 $76 = ($74>>>0)>=($75>>>0);
 if ($76) {
  $77 = $59;
  $78 = $60;
  $50 = $63;
  $51 = $77;
  $52 = $78;
  $79 = $50;
  $49 = $79;
  $80 = $49;
  $81 = ((($80)) + 8|0);
  $48 = $81;
  $82 = $48;
  $47 = $82;
  $83 = $47;
  $53 = $83;
  while(1) {
   $29 = $54;
   $30 = $79;
   $31 = 1;
   $84 = $53;
   $85 = ((($79)) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $28 = $86;
   $87 = $28;
   $88 = $52;
   $42 = $84;
   $43 = $87;
   $44 = $88;
   $89 = $42;
   $90 = $43;
   $91 = $44;
   $41 = $91;
   $92 = $41;
   ;HEAP8[$40>>0]=HEAP8[$45>>0]|0;
   $37 = $89;
   $38 = $90;
   $39 = $92;
   $93 = $37;
   $94 = $38;
   $95 = $39;
   $36 = $95;
   $96 = $36;
   $33 = $93;
   $34 = $94;
   $35 = $96;
   $97 = $34;
   $98 = $35;
   $32 = $98;
   $99 = $32;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($97,$99);
   $100 = ((($79)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($101)) + 12|0);
   HEAP32[$100>>2] = $102;
   $103 = $51;
   $104 = (($103) + -1)|0;
   $51 = $104;
   $46 = $54;
   $105 = $51;
   $106 = ($105>>>0)>(0);
   if (!($106)) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $27 = $63;
 $107 = $27;
 $108 = ((($107)) + 8|0);
 $26 = $108;
 $109 = $26;
 $25 = $109;
 $110 = $25;
 $61 = $110;
 $24 = $63;
 $111 = $24;
 $112 = ((($111)) + 4|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$111>>2]|0;
 $115 = $113;
 $116 = $114;
 $117 = (($115) - ($116))|0;
 $118 = (($117|0) / 12)&-1;
 $119 = $59;
 $120 = (($118) + ($119))|0;
 $19 = $63;
 HEAP32[$20>>2] = $120;
 $121 = $19;
 $122 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($121)|0);
 $21 = $122;
 $123 = HEAP32[$20>>2]|0;
 $124 = $21;
 $125 = ($123>>>0)>($124>>>0);
 if ($125) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($121);
  // unreachable;
 }
 $17 = $121;
 $126 = $17;
 $16 = $126;
 $127 = $16;
 $15 = $127;
 $128 = $15;
 $129 = ((($128)) + 8|0);
 $14 = $129;
 $130 = $14;
 $13 = $130;
 $131 = $13;
 $132 = HEAP32[$131>>2]|0;
 $133 = HEAP32[$127>>2]|0;
 $134 = $132;
 $135 = $133;
 $136 = (($134) - ($135))|0;
 $137 = (($136|0) / 12)&-1;
 $22 = $137;
 $138 = $22;
 $139 = $21;
 $140 = (($139>>>0) / 2)&-1;
 $141 = ($138>>>0)>=($140>>>0);
 if ($141) {
  $142 = $21;
  $18 = $142;
 } else {
  $143 = $22;
  $144 = $143<<1;
  HEAP32[$23>>2] = $144;
  $10 = $23;
  $11 = $20;
  $145 = $10;
  $146 = $11;
  ;HEAP8[$9>>0]=HEAP8[$12>>0]|0;
  $7 = $145;
  $8 = $146;
  $147 = $7;
  $148 = $8;
  $4 = $9;
  $5 = $147;
  $6 = $148;
  $149 = $5;
  $150 = HEAP32[$149>>2]|0;
  $151 = $6;
  $152 = HEAP32[$151>>2]|0;
  $153 = ($150>>>0)<($152>>>0);
  $154 = $8;
  $155 = $7;
  $156 = $153 ? $154 : $155;
  $157 = HEAP32[$156>>2]|0;
  $18 = $157;
 }
 $158 = $18;
 $3 = $63;
 $159 = $3;
 $160 = ((($159)) + 4|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = HEAP32[$159>>2]|0;
 $163 = $161;
 $164 = $162;
 $165 = (($163) - ($164))|0;
 $166 = (($165|0) / 12)&-1;
 $167 = $61;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($62,$158,$166,$167);
 $168 = $59;
 $169 = $60;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEmRKS6_($62,$168,$169);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($63,$62);
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($62);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 357913941;
 HEAP32[$20>>2] = 2147483647;
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $35 = sp;
 $31 = $0;
 $32 = $1;
 $33 = $2;
 $34 = $3;
 $36 = $31;
 $37 = ((($36)) + 12|0);
 HEAP32[$35>>2] = 0;
 $38 = $34;
 $28 = $37;
 $29 = $35;
 $30 = $38;
 $39 = $28;
 $40 = $29;
 $27 = $40;
 $41 = $27;
 $21 = $39;
 $22 = $41;
 $42 = $21;
 $43 = $22;
 $20 = $43;
 HEAP32[$42>>2] = 0;
 $44 = ((($39)) + 4|0);
 $45 = $30;
 $23 = $45;
 $46 = $23;
 $25 = $44;
 $26 = $46;
 $47 = $25;
 $48 = $26;
 $24 = $48;
 $49 = $24;
 HEAP32[$47>>2] = $49;
 $50 = $32;
 $51 = ($50|0)!=(0);
 do {
  if ($51) {
   $6 = $36;
   $52 = $6;
   $53 = ((($52)) + 12|0);
   $5 = $53;
   $54 = $5;
   $55 = ((($54)) + 4|0);
   $4 = $55;
   $56 = $4;
   $57 = HEAP32[$56>>2]|0;
   $58 = $32;
   $15 = $57;
   $16 = $58;
   $59 = $15;
   $60 = $16;
   $12 = $59;
   $13 = $60;
   $14 = 0;
   $61 = $12;
   $62 = $13;
   $11 = $61;
   $63 = ($62>>>0)>(357913941);
   if ($63) {
    $9 = 37845;
    $64 = (___cxa_allocate_exception(8)|0);
    $65 = $9;
    $7 = $64;
    $8 = $65;
    $66 = $7;
    $67 = $8;
    __ZNSt11logic_errorC2EPKc($66,$67);
    HEAP32[$66>>2] = (36492);
    ___cxa_throw(($64|0),(35608|0),(18|0));
    // unreachable;
   } else {
    $68 = $13;
    $69 = ($68*12)|0;
    $10 = $69;
    $70 = $10;
    $71 = (__Znwm($70)|0);
    $72 = $71;
    break;
   }
  } else {
   $72 = 0;
  }
 } while(0);
 HEAP32[$36>>2] = $72;
 $73 = HEAP32[$36>>2]|0;
 $74 = $33;
 $75 = (($73) + (($74*12)|0)|0);
 $76 = ((($36)) + 8|0);
 HEAP32[$76>>2] = $75;
 $77 = ((($36)) + 4|0);
 HEAP32[$77>>2] = $75;
 $78 = HEAP32[$36>>2]|0;
 $79 = $32;
 $80 = (($78) + (($79*12)|0)|0);
 $19 = $36;
 $81 = $19;
 $82 = ((($81)) + 12|0);
 $18 = $82;
 $83 = $18;
 $17 = $83;
 $84 = $17;
 HEAP32[$84>>2] = $80;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEmRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp;
 $17 = sp + 84|0;
 $21 = $0;
 $22 = $1;
 $23 = $2;
 $25 = $21;
 $20 = $25;
 $26 = $20;
 $27 = ((($26)) + 12|0);
 $19 = $27;
 $28 = $19;
 $29 = ((($28)) + 4|0);
 $18 = $29;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $24 = $31;
 while(1) {
  $32 = $24;
  $33 = ((($25)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $3 = $34;
  $35 = $3;
  $36 = $23;
  $14 = $32;
  $15 = $35;
  $16 = $36;
  $37 = $14;
  $38 = $15;
  $39 = $16;
  $13 = $39;
  $40 = $13;
  ;HEAP8[$12>>0]=HEAP8[$17>>0]|0;
  $9 = $37;
  $10 = $38;
  $11 = $40;
  $41 = $9;
  $42 = $10;
  $43 = $11;
  $8 = $43;
  $44 = $8;
  $5 = $41;
  $6 = $42;
  $7 = $44;
  $45 = $6;
  $46 = $7;
  $4 = $46;
  $47 = $4;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($45,$47);
  $48 = ((($25)) + 8|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($49)) + 12|0);
  HEAP32[$48>>2] = $50;
  $51 = $22;
  $52 = (($51) + -1)|0;
  $22 = $52;
  $53 = $22;
  $54 = ($53>>>0)>(0);
  if (!($54)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(448|0);
 $23 = sp;
 $28 = sp + 436|0;
 $39 = sp + 292|0;
 $45 = sp + 268|0;
 $57 = sp + 220|0;
 $110 = $0;
 $111 = $1;
 $112 = $110;
 $109 = $112;
 $113 = $109;
 $108 = $113;
 $114 = $108;
 $115 = HEAP32[$114>>2]|0;
 $107 = $115;
 $116 = $107;
 $86 = $113;
 $117 = $86;
 $118 = HEAP32[$117>>2]|0;
 $85 = $118;
 $119 = $85;
 $91 = $113;
 $120 = $91;
 $90 = $120;
 $121 = $90;
 $89 = $121;
 $122 = $89;
 $123 = ((($122)) + 8|0);
 $88 = $123;
 $124 = $88;
 $87 = $124;
 $125 = $87;
 $126 = HEAP32[$125>>2]|0;
 $127 = HEAP32[$121>>2]|0;
 $128 = $126;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $131 = (($130|0) / 12)&-1;
 $132 = (($119) + (($131*12)|0)|0);
 $93 = $113;
 $133 = $93;
 $134 = HEAP32[$133>>2]|0;
 $92 = $134;
 $135 = $92;
 $94 = $113;
 $136 = $94;
 $137 = ((($136)) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = HEAP32[$136>>2]|0;
 $140 = $138;
 $141 = $139;
 $142 = (($140) - ($141))|0;
 $143 = (($142|0) / 12)&-1;
 $144 = (($135) + (($143*12)|0)|0);
 $96 = $113;
 $145 = $96;
 $146 = HEAP32[$145>>2]|0;
 $95 = $146;
 $147 = $95;
 $101 = $113;
 $148 = $101;
 $100 = $148;
 $149 = $100;
 $99 = $149;
 $150 = $99;
 $151 = ((($150)) + 8|0);
 $98 = $151;
 $152 = $98;
 $97 = $152;
 $153 = $97;
 $154 = HEAP32[$153>>2]|0;
 $155 = HEAP32[$149>>2]|0;
 $156 = $154;
 $157 = $155;
 $158 = (($156) - ($157))|0;
 $159 = (($158|0) / 12)&-1;
 $160 = (($147) + (($159*12)|0)|0);
 $102 = $113;
 $103 = $116;
 $104 = $132;
 $105 = $144;
 $106 = $160;
 $4 = $112;
 $161 = $4;
 $162 = ((($161)) + 8|0);
 $3 = $162;
 $163 = $3;
 $2 = $163;
 $164 = $2;
 $165 = HEAP32[$112>>2]|0;
 $166 = ((($112)) + 4|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = $111;
 $169 = ((($168)) + 4|0);
 $30 = $164;
 $31 = $165;
 $32 = $167;
 $33 = $169;
 while(1) {
  $170 = $32;
  $171 = $31;
  $172 = ($170|0)!=($171|0);
  if (!($172)) {
   break;
  }
  $173 = $30;
  $174 = $33;
  $175 = HEAP32[$174>>2]|0;
  $176 = ((($175)) + -12|0);
  $29 = $176;
  $177 = $29;
  $178 = $32;
  $179 = ((($178)) + -12|0);
  $32 = $179;
  $6 = $179;
  $180 = $6;
  $5 = $180;
  $181 = $5;
  $25 = $173;
  $26 = $177;
  $27 = $181;
  $182 = $25;
  $183 = $26;
  $184 = $27;
  $24 = $184;
  $185 = $24;
  ;HEAP8[$23>>0]=HEAP8[$28>>0]|0;
  $20 = $182;
  $21 = $183;
  $22 = $185;
  $186 = $20;
  $187 = $21;
  $188 = $22;
  $19 = $188;
  $189 = $19;
  $16 = $186;
  $17 = $187;
  $18 = $189;
  $190 = $17;
  $191 = $18;
  $15 = $191;
  $192 = $15;
  $13 = $190;
  $14 = $192;
  $193 = $13;
  $194 = $14;
  $12 = $194;
  $195 = $12;
  ;HEAP32[$193>>2]=HEAP32[$195>>2]|0;HEAP32[$193+4>>2]=HEAP32[$195+4>>2]|0;HEAP32[$193+8>>2]=HEAP32[$195+8>>2]|0;
  $196 = $14;
  $9 = $196;
  $197 = $9;
  $8 = $197;
  $198 = $8;
  $7 = $198;
  $199 = $7;
  $10 = $199;
  $11 = 0;
  while(1) {
   $200 = $11;
   $201 = ($200>>>0)<(3);
   if (!($201)) {
    break;
   }
   $202 = $10;
   $203 = $11;
   $204 = (($202) + ($203<<2)|0);
   HEAP32[$204>>2] = 0;
   $205 = $11;
   $206 = (($205) + 1)|0;
   $11 = $206;
  }
  $207 = $33;
  $208 = HEAP32[$207>>2]|0;
  $209 = ((($208)) + -12|0);
  HEAP32[$207>>2] = $209;
 }
 $210 = $111;
 $211 = ((($210)) + 4|0);
 $37 = $112;
 $38 = $211;
 $212 = $37;
 $36 = $212;
 $213 = $36;
 $214 = HEAP32[$213>>2]|0;
 HEAP32[$39>>2] = $214;
 $215 = $38;
 $34 = $215;
 $216 = $34;
 $217 = HEAP32[$216>>2]|0;
 $218 = $37;
 HEAP32[$218>>2] = $217;
 $35 = $39;
 $219 = $35;
 $220 = HEAP32[$219>>2]|0;
 $221 = $38;
 HEAP32[$221>>2] = $220;
 $222 = ((($112)) + 4|0);
 $223 = $111;
 $224 = ((($223)) + 8|0);
 $43 = $222;
 $44 = $224;
 $225 = $43;
 $42 = $225;
 $226 = $42;
 $227 = HEAP32[$226>>2]|0;
 HEAP32[$45>>2] = $227;
 $228 = $44;
 $40 = $228;
 $229 = $40;
 $230 = HEAP32[$229>>2]|0;
 $231 = $43;
 HEAP32[$231>>2] = $230;
 $41 = $45;
 $232 = $41;
 $233 = HEAP32[$232>>2]|0;
 $234 = $44;
 HEAP32[$234>>2] = $233;
 $48 = $112;
 $235 = $48;
 $236 = ((($235)) + 8|0);
 $47 = $236;
 $237 = $47;
 $46 = $237;
 $238 = $46;
 $239 = $111;
 $51 = $239;
 $240 = $51;
 $241 = ((($240)) + 12|0);
 $50 = $241;
 $242 = $50;
 $49 = $242;
 $243 = $49;
 $55 = $238;
 $56 = $243;
 $244 = $55;
 $54 = $244;
 $245 = $54;
 $246 = HEAP32[$245>>2]|0;
 HEAP32[$57>>2] = $246;
 $247 = $56;
 $52 = $247;
 $248 = $52;
 $249 = HEAP32[$248>>2]|0;
 $250 = $55;
 HEAP32[$250>>2] = $249;
 $53 = $57;
 $251 = $53;
 $252 = HEAP32[$251>>2]|0;
 $253 = $56;
 HEAP32[$253>>2] = $252;
 $254 = $111;
 $255 = ((($254)) + 4|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = $111;
 HEAP32[$257>>2] = $256;
 $58 = $112;
 $258 = $58;
 $259 = ((($258)) + 4|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = HEAP32[$258>>2]|0;
 $262 = $260;
 $263 = $261;
 $264 = (($262) - ($263))|0;
 $265 = (($264|0) / 12)&-1;
 $82 = $112;
 $83 = $265;
 $266 = $82;
 $81 = $266;
 $267 = $81;
 $268 = HEAP32[$267>>2]|0;
 $80 = $268;
 $269 = $80;
 $60 = $266;
 $270 = $60;
 $271 = HEAP32[$270>>2]|0;
 $59 = $271;
 $272 = $59;
 $65 = $266;
 $273 = $65;
 $64 = $273;
 $274 = $64;
 $63 = $274;
 $275 = $63;
 $276 = ((($275)) + 8|0);
 $62 = $276;
 $277 = $62;
 $61 = $277;
 $278 = $61;
 $279 = HEAP32[$278>>2]|0;
 $280 = HEAP32[$274>>2]|0;
 $281 = $279;
 $282 = $280;
 $283 = (($281) - ($282))|0;
 $284 = (($283|0) / 12)&-1;
 $285 = (($272) + (($284*12)|0)|0);
 $67 = $266;
 $286 = $67;
 $287 = HEAP32[$286>>2]|0;
 $66 = $287;
 $288 = $66;
 $72 = $266;
 $289 = $72;
 $71 = $289;
 $290 = $71;
 $70 = $290;
 $291 = $70;
 $292 = ((($291)) + 8|0);
 $69 = $292;
 $293 = $69;
 $68 = $293;
 $294 = $68;
 $295 = HEAP32[$294>>2]|0;
 $296 = HEAP32[$290>>2]|0;
 $297 = $295;
 $298 = $296;
 $299 = (($297) - ($298))|0;
 $300 = (($299|0) / 12)&-1;
 $301 = (($288) + (($300*12)|0)|0);
 $74 = $266;
 $302 = $74;
 $303 = HEAP32[$302>>2]|0;
 $73 = $303;
 $304 = $73;
 $305 = $83;
 $306 = (($304) + (($305*12)|0)|0);
 $75 = $266;
 $76 = $269;
 $77 = $285;
 $78 = $301;
 $79 = $306;
 $84 = $112;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28;
  $43 = ((($41)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0);
  $25 = $47;
  $48 = $25;
  $49 = ((($48)) + 4|0);
  $24 = $49;
  $50 = $24;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($41)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -12|0);
  HEAP32[$52>>2] = $54;
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
  $60 = $16;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($60);
 }
 $61 = HEAP32[$35>>2]|0;
 $62 = ($61|0)!=(0|0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $63 = $14;
 $64 = ((($63)) + 12|0);
 $13 = $64;
 $65 = $13;
 $66 = ((($65)) + 4|0);
 $12 = $66;
 $67 = $12;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$35>>2]|0;
 $11 = $35;
 $70 = $11;
 $10 = $70;
 $71 = $10;
 $72 = ((($71)) + 12|0);
 $9 = $72;
 $73 = $9;
 $8 = $73;
 $74 = $8;
 $75 = HEAP32[$74>>2]|0;
 $76 = HEAP32[$70>>2]|0;
 $77 = $75;
 $78 = $76;
 $79 = (($77) - ($78))|0;
 $80 = (($79|0) / 12)&-1;
 $5 = $68;
 $6 = $69;
 $7 = $80;
 $81 = $5;
 $82 = $6;
 $83 = $7;
 $2 = $81;
 $3 = $82;
 $4 = $83;
 $84 = $3;
 $1 = $84;
 $85 = $1;
 __ZdlPv($85);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 193|0;
 $24 = sp;
 $27 = sp + 192|0;
 $35 = sp + 72|0;
 $38 = sp + 60|0;
 $46 = sp + 12|0;
 $43 = $0;
 $44 = $1;
 $47 = $43;
 $42 = $47;
 $48 = $42;
 $49 = ((($48)) + 8|0);
 $41 = $49;
 $50 = $41;
 $40 = $50;
 $51 = $40;
 $45 = $51;
 $39 = $47;
 $52 = $39;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$52>>2]|0;
 $56 = $54;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = (($58|0) / 12)&-1;
 $60 = (($59) + 1)|0;
 $34 = $47;
 HEAP32[$35>>2] = $60;
 $61 = $34;
 $62 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($61)|0);
 $36 = $62;
 $63 = HEAP32[$35>>2]|0;
 $64 = $36;
 $65 = ($63>>>0)>($64>>>0);
 if ($65) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($61);
  // unreachable;
 }
 $32 = $61;
 $66 = $32;
 $31 = $66;
 $67 = $31;
 $30 = $67;
 $68 = $30;
 $69 = ((($68)) + 8|0);
 $29 = $69;
 $70 = $29;
 $28 = $70;
 $71 = $28;
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$67>>2]|0;
 $74 = $72;
 $75 = $73;
 $76 = (($74) - ($75))|0;
 $77 = (($76|0) / 12)&-1;
 $37 = $77;
 $78 = $37;
 $79 = $36;
 $80 = (($79>>>0) / 2)&-1;
 $81 = ($78>>>0)>=($80>>>0);
 if ($81) {
  $82 = $36;
  $33 = $82;
 } else {
  $83 = $37;
  $84 = $83<<1;
  HEAP32[$38>>2] = $84;
  $25 = $38;
  $26 = $35;
  $85 = $25;
  $86 = $26;
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
  $22 = $85;
  $23 = $86;
  $87 = $22;
  $88 = $23;
  $19 = $24;
  $20 = $87;
  $21 = $88;
  $89 = $20;
  $90 = HEAP32[$89>>2]|0;
  $91 = $21;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90>>>0)<($92>>>0);
  $94 = $23;
  $95 = $22;
  $96 = $93 ? $94 : $95;
  $97 = HEAP32[$96>>2]|0;
  $33 = $97;
 }
 $98 = $33;
 $18 = $47;
 $99 = $18;
 $100 = ((($99)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = HEAP32[$99>>2]|0;
 $103 = $101;
 $104 = $102;
 $105 = (($103) - ($104))|0;
 $106 = (($105|0) / 12)&-1;
 $107 = $45;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($46,$98,$106,$107);
 $108 = $45;
 $109 = ((($46)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $17 = $110;
 $111 = $17;
 $112 = $44;
 $16 = $112;
 $113 = $16;
 $12 = $108;
 $13 = $111;
 $14 = $113;
 $114 = $12;
 $115 = $13;
 $116 = $14;
 $11 = $116;
 $117 = $11;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 $7 = $114;
 $8 = $115;
 $9 = $117;
 $118 = $7;
 $119 = $8;
 $120 = $9;
 $6 = $120;
 $121 = $6;
 $3 = $118;
 $4 = $119;
 $5 = $121;
 $122 = $4;
 $123 = $5;
 $2 = $123;
 $124 = $2;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($122,$124);
 $125 = ((($46)) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ((($126)) + 12|0);
 HEAP32[$125>>2] = $127;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($47,$46);
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($46);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_mS8_EE6invokeEPFS8_S8_mS8_EPNS0_11BindingTypeIS8_EUt_EmSF_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $8 = sp + 24|0;
 $9 = sp + 12|0;
 $10 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $11 = $4;
 $12 = $5;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($9,$12);
 $13 = $6;
 $14 = (__ZN10emscripten8internal11BindingTypeImE12fromWireTypeEm($13)|0);
 $15 = $7;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($10,$15);
 FUNCTION_TABLE_viiii[$11 & 63]($8,$9,$14,$10);
 $16 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($8)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($10);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($9);
 STACKTOP = sp;return ($16|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_mSA_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_mSA_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_mS9_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_mS9_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32800|0);
}
function __ZN6Common10podFromHexIN6Crypto13KeyDerivationEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($5,$6,32,0,$4)|0);
 $8 = $4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==(32);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 $17 = $7 ? $16 : 0;
 STACKTOP = sp;return ($17|0);
}
function __ZN6Common10podFromHexIN6Crypto9PublicKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($5,$6,32,0,$4)|0);
 $8 = $4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==(32);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 $17 = $7 ? $16 : 0;
 STACKTOP = sp;return ($17|0);
}
function __ZN6Crypto19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = $5;
 $10 = $6;
 $11 = $7;
 $12 = (__ZN6Crypto10crypto_ops19underive_public_keyERKNS_13KeyDerivationEmRKNS_9PublicKeyERS4_($8,$9,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN6Common8podToHexIN6Crypto9PublicKeyEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 __ZN6Common5toHexEPKvy($0,$3,32,0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $5 = sp;
 $2 = $0;
 $3 = $1;
 $6 = $2;
 $7 = $3;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$7);
 FUNCTION_TABLE_vii[$6 & 63]($4,$5);
 $8 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($4)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 STACKTOP = sp;return ($8|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35836|0);
}
function __ZN6Common8podToHexIN6Crypto4HashEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 __ZN6Common5toHexEPKvy($0,$3,32,0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp + 24|0;
 $7 = sp + 12|0;
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $3;
 $10 = $4;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($7,$10);
 $11 = $5;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($8,$11);
 FUNCTION_TABLE_viii[$9 & 63]($6,$7,$8);
 $12 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($6)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($8);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 STACKTOP = sp;return ($12|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEESA_SA_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES9_S9_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35844|0);
}
function __ZN6Common10podFromHexIN6Crypto9SecretKeyEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($5,$6,32,0,$4)|0);
 $8 = $4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==(32);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 $17 = $7 ? $16 : 0;
 STACKTOP = sp;return ($17|0);
}
function __ZN6Crypto18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 __ZN6Crypto10crypto_ops18generate_key_imageERKNS_9PublicKeyERKNS_9SecretKeyERNS_8KeyImageE($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN6Common8podToHexIN6Crypto8KeyImageEEENSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $1;
 $3 = $2;
 __ZN6Common5toHexEPKvy($0,$3,32,0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 FUNCTION_TABLE_vi[$3 & 63]($2);
 $4 = (__ZN10emscripten8internal18GenericBindingTypeI4KeysE10toWireTypeEOS2_($2)|0);
 __ZN4KeysD2Ev($2);
 STACKTOP = sp;return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ4KeysEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJ4KeysEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ4KeysEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJ4KeysEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35856|0);
}
function __ZN10emscripten8internal18GenericBindingTypeI4KeysE10toWireTypeEOS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (__Znwm(24)|0);
 $4 = $2;
 $1 = $4;
 $5 = $1;
 __ZN4KeysC2EOS_($3,$5);
 STACKTOP = sp;return ($3|0);
}
function __ZN4KeysC2EOS_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $18 = $0;
 $19 = $1;
 $20 = $18;
 $21 = $19;
 $16 = $20;
 $17 = $21;
 $22 = $16;
 $23 = $17;
 $15 = $23;
 $24 = $15;
 ;HEAP32[$22>>2]=HEAP32[$24>>2]|0;HEAP32[$22+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$24+8>>2]|0;
 $25 = $17;
 $12 = $25;
 $26 = $12;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 $28 = $10;
 $13 = $28;
 $14 = 0;
 while(1) {
  $29 = $14;
  $30 = ($29>>>0)<(3);
  if (!($30)) {
   break;
  }
  $31 = $13;
  $32 = $14;
  $33 = (($31) + ($32<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = $14;
  $35 = (($34) + 1)|0;
  $14 = $35;
 }
 $36 = ((($20)) + 12|0);
 $37 = $19;
 $38 = ((($37)) + 12|0);
 $8 = $36;
 $9 = $38;
 $39 = $8;
 $40 = $9;
 $7 = $40;
 $41 = $7;
 ;HEAP32[$39>>2]=HEAP32[$41>>2]|0;HEAP32[$39+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$41+8>>2]|0;
 $42 = $9;
 $4 = $42;
 $43 = $4;
 $3 = $43;
 $44 = $3;
 $2 = $44;
 $45 = $2;
 $5 = $45;
 $6 = 0;
 while(1) {
  $46 = $6;
  $47 = ($46>>>0)<(3);
  if (!($47)) {
   break;
  }
  $48 = $5;
  $49 = $6;
  $50 = (($48) + ($49<<2)|0);
  HEAP32[$50>>2] = 0;
  $51 = $6;
  $52 = (($51) + 1)|0;
  $6 = $52;
 }
 STACKTOP = sp;return;
}
function __ZN6Crypto13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN6Crypto10crypto_ops13generate_keysERNS_9PublicKeyERNS_9SecretKeyE($4,$5);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_jEE6invokeEPFSB_S9_S9_SB_S9_jEPNS0_11BindingTypeIS9_EUt_ESI_PSB_SI_j($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $12 = sp + 48|0;
 $13 = sp + 36|0;
 $14 = sp + 24|0;
 $15 = sp + 12|0;
 $16 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $17 = $6;
 $18 = $7;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($13,$18);
 $19 = $8;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($14,$19);
 $20 = $9;
 $21 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($20)|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($15,$21);
 $22 = $10;
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($16,$22);
 $23 = $11;
 $24 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($23)|0);
 FUNCTION_TABLE_viiiiii[$17 & 63]($12,$13,$14,$15,$16,$24);
 $25 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($12)|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($12);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($16);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($15);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($14);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($13);
 STACKTOP = sp;return ($25|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEESB_SB_SD_SB_jEE8getCountEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 STACKTOP = sp;return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEESB_SB_SD_SB_jEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEESA_SA_SC_SA_jEEEE3getEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (37913|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEESA_SA_SC_SA_jEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32816|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp + 36|0;
 $19 = sp;
 $21 = sp + 101|0;
 $27 = sp + 100|0;
 $25 = $0;
 $26 = $1;
 $29 = $25;
 $30 = $26;
 $24 = $30;
 $31 = $24;
 $32 = ((($31)) + 8|0);
 $23 = $32;
 $33 = $23;
 $22 = $33;
 $34 = $22;
 $20 = $34;
 $35 = $20;
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0;
 $18 = $35;
 $15 = $29;
 $16 = $27;
 $36 = $15;
 $14 = $36;
 HEAP32[$36>>2] = 0;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($36)) + 8|0);
 HEAP32[$17>>2] = 0;
 $39 = $16;
 $11 = $38;
 $12 = $17;
 $13 = $39;
 $40 = $11;
 $41 = $12;
 $10 = $41;
 $42 = $10;
 $4 = $40;
 $5 = $42;
 $43 = $4;
 $44 = $5;
 $3 = $44;
 HEAP32[$43>>2] = 0;
 $45 = $13;
 $6 = $45;
 $46 = $6;
 $8 = $40;
 $9 = $46;
 $47 = $9;
 $7 = $47;
 $48 = $26;
 $2 = $48;
 $49 = $2;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 12)&-1;
 $28 = $56;
 $57 = $28;
 $58 = ($57>>>0)>(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $28;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEm($29,$59);
 $60 = $26;
 $61 = HEAP32[$60>>2]|0;
 $62 = $26;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $28;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_m($29,$61,$64,$65);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeEOSB_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $15 = sp + 68|0;
 $32 = $0;
 $33 = (__Znwm(12)|0);
 $34 = $32;
 $31 = $34;
 $35 = $31;
 $29 = $33;
 $30 = $35;
 $36 = $29;
 $37 = $30;
 $28 = $37;
 $38 = $28;
 $39 = ((($38)) + 8|0);
 $27 = $39;
 $40 = $27;
 $26 = $40;
 $41 = $26;
 $25 = $41;
 $42 = $25;
 $13 = $36;
 $14 = $42;
 $43 = $13;
 $12 = $43;
 HEAP32[$43>>2] = 0;
 $44 = ((($43)) + 4|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($43)) + 8|0);
 HEAP32[$15>>2] = 0;
 $46 = $14;
 $9 = $45;
 $10 = $15;
 $11 = $46;
 $47 = $9;
 $48 = $10;
 $8 = $48;
 $49 = $8;
 $2 = $47;
 $3 = $49;
 $50 = $2;
 $51 = $3;
 $1 = $51;
 HEAP32[$50>>2] = 0;
 $52 = $11;
 $4 = $52;
 $53 = $4;
 $6 = $47;
 $7 = $53;
 $54 = $7;
 $5 = $54;
 $55 = $30;
 $56 = HEAP32[$55>>2]|0;
 HEAP32[$36>>2] = $56;
 $57 = $30;
 $58 = ((($57)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($36)) + 4|0);
 HEAP32[$60>>2] = $59;
 $61 = $30;
 $18 = $61;
 $62 = $18;
 $63 = ((($62)) + 8|0);
 $17 = $63;
 $64 = $17;
 $16 = $64;
 $65 = $16;
 $66 = HEAP32[$65>>2]|0;
 $21 = $36;
 $67 = $21;
 $68 = ((($67)) + 8|0);
 $20 = $68;
 $69 = $20;
 $19 = $69;
 $70 = $19;
 HEAP32[$70>>2] = $66;
 $71 = $30;
 $24 = $71;
 $72 = $24;
 $73 = ((($72)) + 8|0);
 $23 = $73;
 $74 = $23;
 $22 = $74;
 $75 = $22;
 HEAP32[$75>>2] = 0;
 $76 = $30;
 $77 = ((($76)) + 4|0);
 HEAP32[$77>>2] = 0;
 $78 = $30;
 HEAP32[$78>>2] = 0;
 STACKTOP = sp;return ($33|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $43 = $0;
 $44 = $1;
 $45 = $43;
 $46 = $44;
 $47 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($45)|0);
 $48 = ($46>>>0)>($47>>>0);
 if ($48) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($45);
  // unreachable;
 }
 $42 = $45;
 $49 = $42;
 $50 = ((($49)) + 8|0);
 $41 = $50;
 $51 = $41;
 $40 = $51;
 $52 = $40;
 $53 = $44;
 $10 = $52;
 $11 = $53;
 $54 = $10;
 $55 = $11;
 $7 = $54;
 $8 = $55;
 $9 = 0;
 $56 = $7;
 $57 = $8;
 $6 = $56;
 $58 = ($57>>>0)>(357913941);
 if ($58) {
  $4 = 37845;
  $59 = (___cxa_allocate_exception(8)|0);
  $60 = $4;
  $2 = $59;
  $3 = $60;
  $61 = $2;
  $62 = $3;
  __ZNSt11logic_errorC2EPKc($61,$62);
  HEAP32[$61>>2] = (36492);
  ___cxa_throw(($59|0),(35608|0),(18|0));
  // unreachable;
 } else {
  $63 = $8;
  $64 = ($63*12)|0;
  $5 = $64;
  $65 = $5;
  $66 = (__Znwm($65)|0);
  $67 = ((($45)) + 4|0);
  HEAP32[$67>>2] = $66;
  HEAP32[$45>>2] = $66;
  $68 = HEAP32[$45>>2]|0;
  $69 = $44;
  $70 = (($68) + (($69*12)|0)|0);
  $14 = $45;
  $71 = $14;
  $72 = ((($71)) + 8|0);
  $13 = $72;
  $73 = $13;
  $12 = $73;
  $74 = $12;
  HEAP32[$74>>2] = $70;
  $38 = $45;
  $39 = 0;
  $75 = $38;
  $37 = $75;
  $76 = $37;
  $77 = HEAP32[$76>>2]|0;
  $36 = $77;
  $78 = $36;
  $16 = $75;
  $79 = $16;
  $80 = HEAP32[$79>>2]|0;
  $15 = $80;
  $81 = $15;
  $21 = $75;
  $82 = $21;
  $20 = $82;
  $83 = $20;
  $19 = $83;
  $84 = $19;
  $85 = ((($84)) + 8|0);
  $18 = $85;
  $86 = $18;
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$83>>2]|0;
  $90 = $88;
  $91 = $89;
  $92 = (($90) - ($91))|0;
  $93 = (($92|0) / 12)&-1;
  $94 = (($81) + (($93*12)|0)|0);
  $23 = $75;
  $95 = $23;
  $96 = HEAP32[$95>>2]|0;
  $22 = $96;
  $97 = $22;
  $28 = $75;
  $98 = $28;
  $27 = $98;
  $99 = $27;
  $26 = $99;
  $100 = $26;
  $101 = ((($100)) + 8|0);
  $25 = $101;
  $102 = $25;
  $24 = $102;
  $103 = $24;
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$99>>2]|0;
  $106 = $104;
  $107 = $105;
  $108 = (($106) - ($107))|0;
  $109 = (($108|0) / 12)&-1;
  $110 = (($97) + (($109*12)|0)|0);
  $30 = $75;
  $111 = $30;
  $112 = HEAP32[$111>>2]|0;
  $29 = $112;
  $113 = $29;
  $114 = $39;
  $115 = (($113) + (($114*12)|0)|0);
  $31 = $75;
  $32 = $78;
  $33 = $94;
  $34 = $110;
  $35 = $115;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $15 = sp;
 $20 = sp + 121|0;
 $35 = sp + 120|0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $36 = $30;
 $29 = $36;
 $37 = $29;
 $38 = ((($37)) + 8|0);
 $28 = $38;
 $39 = $28;
 $27 = $39;
 $40 = $27;
 $34 = $40;
 $41 = $33;
 $4 = $35;
 $5 = $36;
 $6 = $41;
 $42 = $34;
 $43 = $31;
 $44 = $32;
 $45 = ((($36)) + 4|0);
 $22 = $42;
 $23 = $43;
 $24 = $44;
 $25 = $45;
 while(1) {
  $46 = $23;
  $47 = $24;
  $48 = ($46|0)!=($47|0);
  if (!($48)) {
   break;
  }
  $49 = $22;
  $50 = $25;
  $51 = HEAP32[$50>>2]|0;
  $21 = $51;
  $52 = $21;
  $53 = $23;
  $17 = $49;
  $18 = $52;
  $19 = $53;
  $54 = $17;
  $55 = $18;
  $56 = $19;
  $16 = $56;
  $57 = $16;
  ;HEAP8[$15>>0]=HEAP8[$20>>0]|0;
  $12 = $54;
  $13 = $55;
  $14 = $57;
  $58 = $12;
  $59 = $13;
  $60 = $14;
  $11 = $60;
  $61 = $11;
  $8 = $58;
  $9 = $59;
  $10 = $61;
  $62 = $9;
  $63 = $10;
  $7 = $63;
  $64 = $7;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($62,$64);
  $65 = $23;
  $66 = ((($65)) + 12|0);
  $23 = $66;
  $67 = $25;
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 12|0);
  HEAP32[$67>>2] = $69;
 }
 $26 = $35;
 STACKTOP = sp;return;
}
function __ZN6Common10podFromHexIN6Crypto4HashEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($5,$6,32,0,$4)|0);
 $8 = $4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==(32);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 $17 = $7 ? $16 : 0;
 STACKTOP = sp;return ($17|0);
}
function __ZN6Common10podFromHexIN6Crypto8KeyImageEEEbRKNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (__ZN6Common7fromHexERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPvyRy($5,$6,32,0,$4)|0);
 $8 = $4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = ($10|0)==(32);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 $17 = $7 ? $16 : 0;
 STACKTOP = sp;return ($17|0);
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $10 = sp + 8|0;
 $15 = sp + 193|0;
 $24 = sp;
 $27 = sp + 192|0;
 $35 = sp + 72|0;
 $38 = sp + 60|0;
 $46 = sp + 12|0;
 $43 = $0;
 $44 = $1;
 $47 = $43;
 $42 = $47;
 $48 = $42;
 $49 = ((($48)) + 8|0);
 $41 = $49;
 $50 = $41;
 $40 = $50;
 $51 = $40;
 $45 = $51;
 $39 = $47;
 $52 = $39;
 $53 = ((($52)) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$52>>2]|0;
 $56 = $54;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = (($58|0) / 32)&-1;
 $60 = (($59) + 1)|0;
 $34 = $47;
 HEAP32[$35>>2] = $60;
 $61 = $34;
 $62 = (__ZNKSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE8max_sizeEv($61)|0);
 $36 = $62;
 $63 = HEAP32[$35>>2]|0;
 $64 = $36;
 $65 = ($63>>>0)>($64>>>0);
 if ($65) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($61);
  // unreachable;
 }
 $32 = $61;
 $66 = $32;
 $31 = $66;
 $67 = $31;
 $30 = $67;
 $68 = $30;
 $69 = ((($68)) + 8|0);
 $29 = $69;
 $70 = $29;
 $28 = $70;
 $71 = $28;
 $72 = HEAP32[$71>>2]|0;
 $73 = HEAP32[$67>>2]|0;
 $74 = $72;
 $75 = $73;
 $76 = (($74) - ($75))|0;
 $77 = (($76|0) / 32)&-1;
 $37 = $77;
 $78 = $37;
 $79 = $36;
 $80 = (($79>>>0) / 2)&-1;
 $81 = ($78>>>0)>=($80>>>0);
 if ($81) {
  $82 = $36;
  $33 = $82;
 } else {
  $83 = $37;
  $84 = $83<<1;
  HEAP32[$38>>2] = $84;
  $25 = $38;
  $26 = $35;
  $85 = $25;
  $86 = $26;
  ;HEAP8[$24>>0]=HEAP8[$27>>0]|0;
  $22 = $85;
  $23 = $86;
  $87 = $22;
  $88 = $23;
  $19 = $24;
  $20 = $87;
  $21 = $88;
  $89 = $20;
  $90 = HEAP32[$89>>2]|0;
  $91 = $21;
  $92 = HEAP32[$91>>2]|0;
  $93 = ($90>>>0)<($92>>>0);
  $94 = $23;
  $95 = $22;
  $96 = $93 ? $94 : $95;
  $97 = HEAP32[$96>>2]|0;
  $33 = $97;
 }
 $98 = $33;
 $18 = $47;
 $99 = $18;
 $100 = ((($99)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = HEAP32[$99>>2]|0;
 $103 = $101;
 $104 = $102;
 $105 = (($103) - ($104))|0;
 $106 = (($105|0) / 32)&-1;
 $107 = $45;
 __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEEC2EmmS5_($46,$98,$106,$107);
 $108 = $45;
 $109 = ((($46)) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $17 = $110;
 $111 = $17;
 $112 = $44;
 $16 = $112;
 $113 = $16;
 $12 = $108;
 $13 = $111;
 $14 = $113;
 $114 = $12;
 $115 = $13;
 $116 = $14;
 $11 = $116;
 $117 = $11;
 ;HEAP8[$10>>0]=HEAP8[$15>>0]|0;
 $7 = $114;
 $8 = $115;
 $9 = $117;
 $118 = $7;
 $119 = $8;
 $120 = $9;
 $6 = $120;
 $121 = $6;
 $3 = $118;
 $4 = $119;
 $5 = $121;
 $122 = $4;
 $123 = $5;
 $2 = $123;
 $124 = $2;
 dest=$122; src=$124; stop=dest+32|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $125 = ((($46)) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ((($126)) + 32|0);
 HEAP32[$125>>2] = $127;
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($47,$46);
 __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEED2Ev($46);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $17 = sp + 36|0;
 $19 = sp;
 $21 = sp + 101|0;
 $27 = sp + 100|0;
 $25 = $0;
 $26 = $1;
 $29 = $25;
 $30 = $26;
 $24 = $30;
 $31 = $24;
 $32 = ((($31)) + 8|0);
 $23 = $32;
 $33 = $23;
 $22 = $33;
 $34 = $22;
 $20 = $34;
 $35 = $20;
 ;HEAP8[$19>>0]=HEAP8[$21>>0]|0;
 $18 = $35;
 $15 = $29;
 $16 = $27;
 $36 = $15;
 $14 = $36;
 HEAP32[$36>>2] = 0;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($36)) + 8|0);
 HEAP32[$17>>2] = 0;
 $39 = $16;
 $11 = $38;
 $12 = $17;
 $13 = $39;
 $40 = $11;
 $41 = $12;
 $10 = $41;
 $42 = $10;
 $4 = $40;
 $5 = $42;
 $43 = $4;
 $44 = $5;
 $3 = $44;
 HEAP32[$43>>2] = 0;
 $45 = $13;
 $6 = $45;
 $46 = $6;
 $8 = $40;
 $9 = $46;
 $47 = $9;
 $7 = $47;
 $48 = $26;
 $2 = $48;
 $49 = $2;
 $50 = ((($49)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 32)&-1;
 $28 = $56;
 $57 = $28;
 $58 = ($57>>>0)>(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $28;
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE8allocateEm($29,$59);
 $60 = $26;
 $61 = HEAP32[$60>>2]|0;
 $62 = $26;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $28;
 __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($29,$61,$64,$65);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $18 = sp + 8|0;
 $23 = sp + 225|0;
 $32 = sp;
 $35 = sp + 224|0;
 $43 = sp + 72|0;
 $46 = sp + 60|0;
 $54 = sp + 12|0;
 $51 = $0;
 $52 = $1;
 $55 = $51;
 $50 = $55;
 $56 = $50;
 $57 = ((($56)) + 8|0);
 $49 = $57;
 $58 = $49;
 $48 = $58;
 $59 = $48;
 $53 = $59;
 $47 = $55;
 $60 = $47;
 $61 = ((($60)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$60>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 12)&-1;
 $68 = (($67) + 1)|0;
 $42 = $55;
 HEAP32[$43>>2] = $68;
 $69 = $42;
 $70 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($69)|0);
 $44 = $70;
 $71 = HEAP32[$43>>2]|0;
 $72 = $44;
 $73 = ($71>>>0)>($72>>>0);
 if ($73) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($69);
  // unreachable;
 }
 $40 = $69;
 $74 = $40;
 $39 = $74;
 $75 = $39;
 $38 = $75;
 $76 = $38;
 $77 = ((($76)) + 8|0);
 $37 = $77;
 $78 = $37;
 $36 = $78;
 $79 = $36;
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP32[$75>>2]|0;
 $82 = $80;
 $83 = $81;
 $84 = (($82) - ($83))|0;
 $85 = (($84|0) / 12)&-1;
 $45 = $85;
 $86 = $45;
 $87 = $44;
 $88 = (($87>>>0) / 2)&-1;
 $89 = ($86>>>0)>=($88>>>0);
 if ($89) {
  $90 = $44;
  $41 = $90;
 } else {
  $91 = $45;
  $92 = $91<<1;
  HEAP32[$46>>2] = $92;
  $33 = $46;
  $34 = $43;
  $93 = $33;
  $94 = $34;
  ;HEAP8[$32>>0]=HEAP8[$35>>0]|0;
  $30 = $93;
  $31 = $94;
  $95 = $30;
  $96 = $31;
  $27 = $32;
  $28 = $95;
  $29 = $96;
  $97 = $28;
  $98 = HEAP32[$97>>2]|0;
  $99 = $29;
  $100 = HEAP32[$99>>2]|0;
  $101 = ($98>>>0)<($100>>>0);
  $102 = $31;
  $103 = $30;
  $104 = $101 ? $102 : $103;
  $105 = HEAP32[$104>>2]|0;
  $41 = $105;
 }
 $106 = $41;
 $26 = $55;
 $107 = $26;
 $108 = ((($107)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = HEAP32[$107>>2]|0;
 $111 = $109;
 $112 = $110;
 $113 = (($111) - ($112))|0;
 $114 = (($113|0) / 12)&-1;
 $115 = $53;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EmmS8_($54,$106,$114,$115);
 $116 = $53;
 $117 = ((($54)) + 8|0);
 $118 = HEAP32[$117>>2]|0;
 $25 = $118;
 $119 = $25;
 $120 = $52;
 $24 = $120;
 $121 = $24;
 $20 = $116;
 $21 = $119;
 $22 = $121;
 $122 = $20;
 $123 = $21;
 $124 = $22;
 $19 = $124;
 $125 = $19;
 ;HEAP8[$18>>0]=HEAP8[$23>>0]|0;
 $15 = $122;
 $16 = $123;
 $17 = $125;
 $126 = $15;
 $127 = $16;
 $128 = $17;
 $14 = $128;
 $129 = $14;
 $11 = $126;
 $12 = $127;
 $13 = $129;
 $130 = $12;
 $131 = $13;
 $10 = $131;
 $132 = $10;
 $8 = $130;
 $9 = $132;
 $133 = $8;
 $134 = $9;
 $7 = $134;
 $135 = $7;
 ;HEAP32[$133>>2]=HEAP32[$135>>2]|0;HEAP32[$133+4>>2]=HEAP32[$135+4>>2]|0;HEAP32[$133+8>>2]=HEAP32[$135+8>>2]|0;
 $136 = $9;
 $4 = $136;
 $137 = $4;
 $3 = $137;
 $138 = $3;
 $2 = $138;
 $139 = $2;
 $5 = $139;
 $6 = 0;
 while(1) {
  $140 = $6;
  $141 = ($140>>>0)<(3);
  if (!($141)) {
   break;
  }
  $142 = $5;
  $143 = $6;
  $144 = (($142) + ($143<<2)|0);
  HEAP32[$144>>2] = 0;
  $145 = $6;
  $146 = (($145) + 1)|0;
  $6 = $146;
 }
 $147 = ((($54)) + 8|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ((($148)) + 12|0);
 HEAP32[$147>>2] = $149;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($55,$54);
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($54);
 STACKTOP = sp;return;
}
function __ZNSt3__25tupleIJbNS_6vectorIN6Crypto9SignatureENS_9allocatorIS3_EEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJbNS_6vectorIN6Crypto9SignatureENS_9allocatorIS5_EEEEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__212__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJbNS_6vectorIN6Crypto9SignatureENS_9allocatorIS5_EEEEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 __ZNSt3__212__tuple_leafILm1ENS_6vectorIN6Crypto9SignatureENS_9allocatorIS3_EEEELb0EED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__212__tuple_leafILm1ENS_6vectorIN6Crypto9SignatureENS_9allocatorIS3_EEEELb0EED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 __ZNSt3__26vectorIN6Crypto9SignatureENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__213__vector_baseIN6Crypto9PublicKeyENS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $19 = sp;
 $22 = sp + 120|0;
 $31 = $0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $30 = $32;
 $35 = $30;
 $36 = HEAP32[$35>>2]|0;
 $27 = $35;
 $28 = $36;
 $37 = $27;
 $38 = ((($37)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $29 = $39;
 while(1) {
  $40 = $28;
  $41 = $29;
  $42 = ($40|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $26 = $37;
  $43 = $26;
  $44 = ((($43)) + 8|0);
  $25 = $44;
  $45 = $25;
  $24 = $45;
  $46 = $24;
  $47 = $29;
  $48 = ((($47)) + -32|0);
  $29 = $48;
  $23 = $48;
  $49 = $23;
  $20 = $46;
  $21 = $49;
  $50 = $20;
  $51 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $50;
  $18 = $51;
  $52 = $17;
  $53 = $18;
  $15 = $52;
  $16 = $53;
 }
 $54 = $28;
 $55 = ((($37)) + 4|0);
 HEAP32[$55>>2] = $54;
 $7 = $32;
 $56 = $7;
 $57 = ((($56)) + 8|0);
 $6 = $57;
 $58 = $6;
 $5 = $58;
 $59 = $5;
 $60 = HEAP32[$32>>2]|0;
 $4 = $32;
 $61 = $4;
 $3 = $61;
 $62 = $3;
 $63 = ((($62)) + 8|0);
 $2 = $63;
 $64 = $2;
 $1 = $64;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$61>>2]|0;
 $68 = $66;
 $69 = $67;
 $70 = (($68) - ($69))|0;
 $71 = (($70|0) / 32)&-1;
 $12 = $59;
 $13 = $60;
 $14 = $71;
 $72 = $12;
 $73 = $13;
 $74 = $14;
 $9 = $72;
 $10 = $73;
 $11 = $74;
 $75 = $10;
 $8 = $75;
 $76 = $8;
 __ZdlPv($76);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE8allocateEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $43 = $0;
 $44 = $1;
 $45 = $43;
 $46 = $44;
 $47 = (__ZNKSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE8max_sizeEv($45)|0);
 $48 = ($46>>>0)>($47>>>0);
 if ($48) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($45);
  // unreachable;
 }
 $42 = $45;
 $49 = $42;
 $50 = ((($49)) + 8|0);
 $41 = $50;
 $51 = $41;
 $40 = $51;
 $52 = $40;
 $53 = $44;
 $10 = $52;
 $11 = $53;
 $54 = $10;
 $55 = $11;
 $7 = $54;
 $8 = $55;
 $9 = 0;
 $56 = $7;
 $57 = $8;
 $6 = $56;
 $58 = ($57>>>0)>(134217727);
 if ($58) {
  $4 = 37845;
  $59 = (___cxa_allocate_exception(8)|0);
  $60 = $4;
  $2 = $59;
  $3 = $60;
  $61 = $2;
  $62 = $3;
  __ZNSt11logic_errorC2EPKc($61,$62);
  HEAP32[$61>>2] = (36492);
  ___cxa_throw(($59|0),(35608|0),(18|0));
  // unreachable;
 } else {
  $63 = $8;
  $64 = $63<<5;
  $5 = $64;
  $65 = $5;
  $66 = (__Znwm($65)|0);
  $67 = ((($45)) + 4|0);
  HEAP32[$67>>2] = $66;
  HEAP32[$45>>2] = $66;
  $68 = HEAP32[$45>>2]|0;
  $69 = $44;
  $70 = (($68) + ($69<<5)|0);
  $14 = $45;
  $71 = $14;
  $72 = ((($71)) + 8|0);
  $13 = $72;
  $73 = $13;
  $12 = $73;
  $74 = $12;
  HEAP32[$74>>2] = $70;
  $38 = $45;
  $39 = 0;
  $75 = $38;
  $37 = $75;
  $76 = $37;
  $77 = HEAP32[$76>>2]|0;
  $36 = $77;
  $78 = $36;
  $16 = $75;
  $79 = $16;
  $80 = HEAP32[$79>>2]|0;
  $15 = $80;
  $81 = $15;
  $21 = $75;
  $82 = $21;
  $20 = $82;
  $83 = $20;
  $19 = $83;
  $84 = $19;
  $85 = ((($84)) + 8|0);
  $18 = $85;
  $86 = $18;
  $17 = $86;
  $87 = $17;
  $88 = HEAP32[$87>>2]|0;
  $89 = HEAP32[$83>>2]|0;
  $90 = $88;
  $91 = $89;
  $92 = (($90) - ($91))|0;
  $93 = (($92|0) / 32)&-1;
  $94 = (($81) + ($93<<5)|0);
  $23 = $75;
  $95 = $23;
  $96 = HEAP32[$95>>2]|0;
  $22 = $96;
  $97 = $22;
  $28 = $75;
  $98 = $28;
  $27 = $98;
  $99 = $27;
  $26 = $99;
  $100 = $26;
  $101 = ((($100)) + 8|0);
  $25 = $101;
  $102 = $25;
  $24 = $102;
  $103 = $24;
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$99>>2]|0;
  $106 = $104;
  $107 = $105;
  $108 = (($106) - ($107))|0;
  $109 = (($108|0) / 32)&-1;
  $110 = (($97) + ($109<<5)|0);
  $30 = $75;
  $111 = $30;
  $112 = HEAP32[$111>>2]|0;
  $29 = $112;
  $113 = $29;
  $114 = $39;
  $115 = (($113) + ($114<<5)|0);
  $31 = $75;
  $32 = $78;
  $33 = $94;
  $34 = $110;
  $35 = $115;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_m($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $21 = sp + 68|0;
 $16 = $0;
 $17 = $1;
 $18 = $2;
 $19 = $3;
 $22 = $16;
 $15 = $22;
 $23 = $15;
 $24 = ((($23)) + 8|0);
 $14 = $24;
 $25 = $14;
 $13 = $25;
 $26 = $13;
 $20 = $26;
 $27 = $19;
 $4 = $21;
 $5 = $22;
 $6 = $27;
 $28 = $20;
 $29 = $17;
 $30 = $18;
 $31 = ((($22)) + 4|0);
 $7 = $28;
 $8 = $29;
 $9 = $30;
 $10 = $31;
 $32 = $9;
 $33 = $8;
 $34 = $32;
 $35 = $33;
 $36 = (($34) - ($35))|0;
 $37 = (($36|0) / 32)&-1;
 $11 = $37;
 $38 = $11;
 $39 = ($38|0)>(0);
 if (!($39)) {
  $12 = $21;
  STACKTOP = sp;return;
 }
 $40 = $10;
 $41 = HEAP32[$40>>2]|0;
 $42 = $8;
 $43 = $11;
 $44 = $43<<5;
 _memcpy(($41|0),($42|0),($44|0))|0;
 $45 = $11;
 $46 = $10;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + ($45<<5)|0);
 HEAP32[$46>>2] = $48;
 $12 = $21;
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = sp + 8|0;
 $9 = sp + 77|0;
 $12 = sp;
 $14 = sp + 76|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $18 = $0;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $13 = $25;
 $26 = $13;
 ;HEAP8[$12>>0]=HEAP8[$14>>0]|0;
 $11 = $26;
 $27 = $11;
 $10 = $27;
 HEAP32[$19>>2] = 134217727;
 HEAP32[$20>>2] = 2147483647;
 $7 = $19;
 $8 = $20;
 $28 = $7;
 $29 = $8;
 ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
 $4 = $28;
 $5 = $29;
 $30 = $5;
 $31 = $4;
 $1 = $6;
 $2 = $30;
 $3 = $31;
 $32 = $2;
 $33 = HEAP32[$32>>2]|0;
 $34 = $3;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $5;
 $38 = $4;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEEC2EmmS5_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $35 = sp;
 $31 = $0;
 $32 = $1;
 $33 = $2;
 $34 = $3;
 $36 = $31;
 $37 = ((($36)) + 12|0);
 HEAP32[$35>>2] = 0;
 $38 = $34;
 $28 = $37;
 $29 = $35;
 $30 = $38;
 $39 = $28;
 $40 = $29;
 $27 = $40;
 $41 = $27;
 $21 = $39;
 $22 = $41;
 $42 = $21;
 $43 = $22;
 $20 = $43;
 HEAP32[$42>>2] = 0;
 $44 = ((($39)) + 4|0);
 $45 = $30;
 $23 = $45;
 $46 = $23;
 $25 = $44;
 $26 = $46;
 $47 = $25;
 $48 = $26;
 $24 = $48;
 $49 = $24;
 HEAP32[$47>>2] = $49;
 $50 = $32;
 $51 = ($50|0)!=(0);
 do {
  if ($51) {
   $6 = $36;
   $52 = $6;
   $53 = ((($52)) + 12|0);
   $5 = $53;
   $54 = $5;
   $55 = ((($54)) + 4|0);
   $4 = $55;
   $56 = $4;
   $57 = HEAP32[$56>>2]|0;
   $58 = $32;
   $15 = $57;
   $16 = $58;
   $59 = $15;
   $60 = $16;
   $12 = $59;
   $13 = $60;
   $14 = 0;
   $61 = $12;
   $62 = $13;
   $11 = $61;
   $63 = ($62>>>0)>(134217727);
   if ($63) {
    $9 = 37845;
    $64 = (___cxa_allocate_exception(8)|0);
    $65 = $9;
    $7 = $64;
    $8 = $65;
    $66 = $7;
    $67 = $8;
    __ZNSt11logic_errorC2EPKc($66,$67);
    HEAP32[$66>>2] = (36492);
    ___cxa_throw(($64|0),(35608|0),(18|0));
    // unreachable;
   } else {
    $68 = $13;
    $69 = $68<<5;
    $10 = $69;
    $70 = $10;
    $71 = (__Znwm($70)|0);
    $72 = $71;
    break;
   }
  } else {
   $72 = 0;
  }
 } while(0);
 HEAP32[$36>>2] = $72;
 $73 = HEAP32[$36>>2]|0;
 $74 = $33;
 $75 = (($73) + ($74<<5)|0);
 $76 = ((($36)) + 8|0);
 HEAP32[$76>>2] = $75;
 $77 = ((($36)) + 4|0);
 HEAP32[$77>>2] = $75;
 $78 = HEAP32[$36>>2]|0;
 $79 = $32;
 $80 = (($78) + ($79<<5)|0);
 $19 = $36;
 $81 = $19;
 $82 = ((($81)) + 12|0);
 $18 = $82;
 $83 = $18;
 $17 = $83;
 $84 = $17;
 HEAP32[$84>>2] = $80;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIN6Crypto9PublicKeyENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $15 = sp + 288|0;
 $21 = sp + 264|0;
 $33 = sp + 216|0;
 $86 = $0;
 $87 = $1;
 $88 = $86;
 $85 = $88;
 $89 = $85;
 $84 = $89;
 $90 = $84;
 $91 = HEAP32[$90>>2]|0;
 $83 = $91;
 $92 = $83;
 $62 = $89;
 $93 = $62;
 $94 = HEAP32[$93>>2]|0;
 $61 = $94;
 $95 = $61;
 $67 = $89;
 $96 = $67;
 $66 = $96;
 $97 = $66;
 $65 = $97;
 $98 = $65;
 $99 = ((($98)) + 8|0);
 $64 = $99;
 $100 = $64;
 $63 = $100;
 $101 = $63;
 $102 = HEAP32[$101>>2]|0;
 $103 = HEAP32[$97>>2]|0;
 $104 = $102;
 $105 = $103;
 $106 = (($104) - ($105))|0;
 $107 = (($106|0) / 32)&-1;
 $108 = (($95) + ($107<<5)|0);
 $69 = $89;
 $109 = $69;
 $110 = HEAP32[$109>>2]|0;
 $68 = $110;
 $111 = $68;
 $70 = $89;
 $112 = $70;
 $113 = ((($112)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = HEAP32[$112>>2]|0;
 $116 = $114;
 $117 = $115;
 $118 = (($116) - ($117))|0;
 $119 = (($118|0) / 32)&-1;
 $120 = (($111) + ($119<<5)|0);
 $72 = $89;
 $121 = $72;
 $122 = HEAP32[$121>>2]|0;
 $71 = $122;
 $123 = $71;
 $77 = $89;
 $124 = $77;
 $76 = $124;
 $125 = $76;
 $75 = $125;
 $126 = $75;
 $127 = ((($126)) + 8|0);
 $74 = $127;
 $128 = $74;
 $73 = $128;
 $129 = $73;
 $130 = HEAP32[$129>>2]|0;
 $131 = HEAP32[$125>>2]|0;
 $132 = $130;
 $133 = $131;
 $134 = (($132) - ($133))|0;
 $135 = (($134|0) / 32)&-1;
 $136 = (($123) + ($135<<5)|0);
 $78 = $89;
 $79 = $92;
 $80 = $108;
 $81 = $120;
 $82 = $136;
 $4 = $88;
 $137 = $4;
 $138 = ((($137)) + 8|0);
 $3 = $138;
 $139 = $3;
 $2 = $139;
 $140 = $2;
 $141 = HEAP32[$88>>2]|0;
 $142 = ((($88)) + 4|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = $87;
 $145 = ((($144)) + 4|0);
 $5 = $140;
 $6 = $141;
 $7 = $143;
 $8 = $145;
 $146 = $7;
 $147 = $6;
 $148 = $146;
 $149 = $147;
 $150 = (($148) - ($149))|0;
 $151 = (($150|0) / 32)&-1;
 $9 = $151;
 $152 = $9;
 $153 = $8;
 $154 = HEAP32[$153>>2]|0;
 $155 = (0 - ($152))|0;
 $156 = (($154) + ($155<<5)|0);
 HEAP32[$153>>2] = $156;
 $157 = $9;
 $158 = ($157|0)>(0);
 if ($158) {
  $159 = $8;
  $160 = HEAP32[$159>>2]|0;
  $161 = $6;
  $162 = $9;
  $163 = $162<<5;
  _memcpy(($160|0),($161|0),($163|0))|0;
 }
 $164 = $87;
 $165 = ((($164)) + 4|0);
 $13 = $88;
 $14 = $165;
 $166 = $13;
 $12 = $166;
 $167 = $12;
 $168 = HEAP32[$167>>2]|0;
 HEAP32[$15>>2] = $168;
 $169 = $14;
 $10 = $169;
 $170 = $10;
 $171 = HEAP32[$170>>2]|0;
 $172 = $13;
 HEAP32[$172>>2] = $171;
 $11 = $15;
 $173 = $11;
 $174 = HEAP32[$173>>2]|0;
 $175 = $14;
 HEAP32[$175>>2] = $174;
 $176 = ((($88)) + 4|0);
 $177 = $87;
 $178 = ((($177)) + 8|0);
 $19 = $176;
 $20 = $178;
 $179 = $19;
 $18 = $179;
 $180 = $18;
 $181 = HEAP32[$180>>2]|0;
 HEAP32[$21>>2] = $181;
 $182 = $20;
 $16 = $182;
 $183 = $16;
 $184 = HEAP32[$183>>2]|0;
 $185 = $19;
 HEAP32[$185>>2] = $184;
 $17 = $21;
 $186 = $17;
 $187 = HEAP32[$186>>2]|0;
 $188 = $20;
 HEAP32[$188>>2] = $187;
 $24 = $88;
 $189 = $24;
 $190 = ((($189)) + 8|0);
 $23 = $190;
 $191 = $23;
 $22 = $191;
 $192 = $22;
 $193 = $87;
 $27 = $193;
 $194 = $27;
 $195 = ((($194)) + 12|0);
 $26 = $195;
 $196 = $26;
 $25 = $196;
 $197 = $25;
 $31 = $192;
 $32 = $197;
 $198 = $31;
 $30 = $198;
 $199 = $30;
 $200 = HEAP32[$199>>2]|0;
 HEAP32[$33>>2] = $200;
 $201 = $32;
 $28 = $201;
 $202 = $28;
 $203 = HEAP32[$202>>2]|0;
 $204 = $31;
 HEAP32[$204>>2] = $203;
 $29 = $33;
 $205 = $29;
 $206 = HEAP32[$205>>2]|0;
 $207 = $32;
 HEAP32[$207>>2] = $206;
 $208 = $87;
 $209 = ((($208)) + 4|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = $87;
 HEAP32[$211>>2] = $210;
 $34 = $88;
 $212 = $34;
 $213 = ((($212)) + 4|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = HEAP32[$212>>2]|0;
 $216 = $214;
 $217 = $215;
 $218 = (($216) - ($217))|0;
 $219 = (($218|0) / 32)&-1;
 $58 = $88;
 $59 = $219;
 $220 = $58;
 $57 = $220;
 $221 = $57;
 $222 = HEAP32[$221>>2]|0;
 $56 = $222;
 $223 = $56;
 $36 = $220;
 $224 = $36;
 $225 = HEAP32[$224>>2]|0;
 $35 = $225;
 $226 = $35;
 $41 = $220;
 $227 = $41;
 $40 = $227;
 $228 = $40;
 $39 = $228;
 $229 = $39;
 $230 = ((($229)) + 8|0);
 $38 = $230;
 $231 = $38;
 $37 = $231;
 $232 = $37;
 $233 = HEAP32[$232>>2]|0;
 $234 = HEAP32[$228>>2]|0;
 $235 = $233;
 $236 = $234;
 $237 = (($235) - ($236))|0;
 $238 = (($237|0) / 32)&-1;
 $239 = (($226) + ($238<<5)|0);
 $43 = $220;
 $240 = $43;
 $241 = HEAP32[$240>>2]|0;
 $42 = $241;
 $242 = $42;
 $48 = $220;
 $243 = $48;
 $47 = $243;
 $244 = $47;
 $46 = $244;
 $245 = $46;
 $246 = ((($245)) + 8|0);
 $45 = $246;
 $247 = $45;
 $44 = $247;
 $248 = $44;
 $249 = HEAP32[$248>>2]|0;
 $250 = HEAP32[$244>>2]|0;
 $251 = $249;
 $252 = $250;
 $253 = (($251) - ($252))|0;
 $254 = (($253|0) / 32)&-1;
 $255 = (($242) + ($254<<5)|0);
 $50 = $220;
 $256 = $50;
 $257 = HEAP32[$256>>2]|0;
 $49 = $257;
 $258 = $49;
 $259 = $59;
 $260 = (($258) + ($259<<5)|0);
 $51 = $220;
 $52 = $223;
 $53 = $239;
 $54 = $255;
 $55 = $260;
 $60 = $88;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIN6Crypto9PublicKeyERNS_9allocatorIS2_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $19 = sp + 8|0;
 $22 = sp + 133|0;
 $29 = sp;
 $32 = sp + 132|0;
 $34 = $0;
 $35 = $34;
 $33 = $35;
 $36 = $33;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $30 = $36;
 $31 = $38;
 $39 = $30;
 $40 = $31;
 ;HEAP8[$29>>0]=HEAP8[$32>>0]|0;
 $27 = $39;
 $28 = $40;
 $41 = $27;
 while(1) {
  $42 = $28;
  $43 = ((($41)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($42|0)!=($44|0);
  if (!($45)) {
   break;
  }
  $26 = $41;
  $46 = $26;
  $47 = ((($46)) + 12|0);
  $25 = $47;
  $48 = $25;
  $49 = ((($48)) + 4|0);
  $24 = $49;
  $50 = $24;
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($41)) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + -32|0);
  HEAP32[$52>>2] = $54;
  $23 = $54;
  $55 = $23;
  $20 = $51;
  $21 = $55;
  $56 = $20;
  $57 = $21;
  ;HEAP8[$19>>0]=HEAP8[$22>>0]|0;
  $17 = $56;
  $18 = $57;
  $58 = $17;
  $59 = $18;
  $15 = $58;
  $16 = $59;
 }
 $60 = HEAP32[$35>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $62 = $14;
 $63 = ((($62)) + 12|0);
 $13 = $63;
 $64 = $13;
 $65 = ((($64)) + 4|0);
 $12 = $65;
 $66 = $12;
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$35>>2]|0;
 $4 = $35;
 $69 = $4;
 $3 = $69;
 $70 = $3;
 $71 = ((($70)) + 12|0);
 $2 = $71;
 $72 = $2;
 $1 = $72;
 $73 = $1;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 32)&-1;
 $9 = $67;
 $10 = $68;
 $11 = $79;
 $80 = $9;
 $81 = $10;
 $82 = $11;
 $6 = $80;
 $7 = $81;
 $8 = $82;
 $83 = $7;
 $5 = $83;
 $84 = $5;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_26();
 return;
}
function ___cxx_global_var_init_26() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(41845);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($2|0),(37921|0));
 $3 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($3|0),(37926|0),1,1,0);
 __ZN12_GLOBAL__N_116register_integerIcEEvPKc(37931);
 __ZN12_GLOBAL__N_116register_integerIaEEvPKc(37936);
 __ZN12_GLOBAL__N_116register_integerIhEEvPKc(37948);
 __ZN12_GLOBAL__N_116register_integerIsEEvPKc(37962);
 __ZN12_GLOBAL__N_116register_integerItEEvPKc(37968);
 __ZN12_GLOBAL__N_116register_integerIiEEvPKc(37983);
 __ZN12_GLOBAL__N_116register_integerIjEEvPKc(37987);
 __ZN12_GLOBAL__N_116register_integerIlEEvPKc(38000);
 __ZN12_GLOBAL__N_116register_integerImEEvPKc(38005);
 __ZN12_GLOBAL__N_114register_floatIfEEvPKc(38019);
 __ZN12_GLOBAL__N_114register_floatIdEEvPKc(38025);
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(38032|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($5|0),(38044|0));
 $6 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($6|0),4,(38077|0));
 $7 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($7|0),(38090|0));
 __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc(38106);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(38136);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(38173);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(38212);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(38243);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(38283);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(38312);
 __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc(38350);
 __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc(38380);
 __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc(38419);
 __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc(38451);
 __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc(38484);
 __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc(38517);
 __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc(38551);
 __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc(38584);
 __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc(38618);
 __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc(38649);
 __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc(38681);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_116register_integerIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 $3 = $1;
 $4 = -128 << 24 >> 24;
 $5 = 127 << 24 >> 24;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 255;
 __embind_register_integer(($2|0),($3|0),1,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 $3 = $1;
 $4 = -32768 << 16 >> 16;
 $5 = 32767 << 16 >> 16;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 $3 = $1;
 $4 = 0;
 $5 = 65535;
 __embind_register_integer(($2|0),($3|0),2,($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,-2147483648,2147483647);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116register_integerImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 $3 = $1;
 __embind_register_integer(($2|0),($3|0),4,0,-1);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114register_floatIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),4);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114register_floatIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 $3 = $1;
 __embind_register_float(($2|0),($3|0),8);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_120register_memory_viewIcEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIlEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewImEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIfEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIdEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_120register_memory_viewIeEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 $3 = (__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv()|0);
 $4 = $1;
 __embind_register_memory_view(($2|0),($3|0),($4|0));
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35368|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35376|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35384|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35392|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35400|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 5;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35408|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35416|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35424|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35432|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35440|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35448|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35456|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35328|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35464|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35488|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35776|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35768|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35760|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35752|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35744|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35736|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35728|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35720|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35704|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35712|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35696|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35688|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (35672|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (___strdup($6)|0);
 STACKTOP = sp;return ($7|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (41120|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 2;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $spec$store$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_dummy($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-4);
 $spec$store$select = $3 ? 0 : $2;
 $4 = (___syscall_ret($spec$store$select)|0);
 STACKTOP = sp;return ($4|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 208|0;
 $4 = sp + 160|0;
 $5 = sp + 80|0;
 $6 = sp;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 56|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = sp + 60|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((32848 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 39216;$$2256 = $spec$select295;$$4266 = $spec$select;$276 = $240;$278 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = (getTempRet0() | 0);
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 39216;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 39216 : (39218);
       $spec$select296 = $266 ? $$ : (39217);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 39216;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 39216;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 39226 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_503($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 39216;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (39216 + ($236)|0);
      $spec$select293 = $or$cond278 ? 39216 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$276 = $225;$278 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$276 = $271;$278 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 39216;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_503($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $277 = ($276|0)!=(0);
     $279 = ($278|0)!=(0);
     $280 = $277 | $279;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_503($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_503($0,32,$$2261,$341,$$6268);
    _out($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_503($0,48,$$2261,$341,$343);
    _pad_503($0,48,$spec$select284,$339,0);
    _out($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_503($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $353 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $354 = ($353>>>0)<(10);
      if ($354) {
       $$3317 = $353;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (33312 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = (getTempRet0() | 0);
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = (getTempRet0() | 0);
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = (getTempRet0() | 0);
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = (getTempRet0() | 0);
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = (getTempRet0() | 0);
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_309()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_503($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi717Z2D = 0, $$pre$phi718Z2D = 0, $$pre720 = 0, $$sink757 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep711 = 0, $scevgep711712 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540722 = 0, $spec$select540723 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 32|0;
 $7 = sp + 536|0;
 $8 = sp;
 $9 = $8;
 $10 = sp + 540|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS_504($1)|0);
 $13 = (getTempRet0() | 0);
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS_504($15)|0);
  $17 = (getTempRet0() | 0);
  $$0471 = $15;$$0522 = 1;$$0523 = 39233;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (39234) : (39239);
  $spec$select565 = $19 ? $$ : (39236);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 39252 : 39256;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 39260 : 39264;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_503($0,32,$2,$34,$35);
   _out($0,$$0523,$$0522);
   _out($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_503($0,32,$2,$34,$36);
   $$sink757 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (33312 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre720 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre720))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi717Z2D = $103;$$pre$phi718Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre720))|0;
     $$0527 = $112;$$pre$phi717Z2D = $108;$$pre$phi718Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_503($0,32,$2,$113,$4);
    _out($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_503($0,48,$2,$113,$114);
    $115 = (($$pre720) - ($9))|0;
    _out($0,$8,$115);
    $116 = (($$pre$phi717Z2D) - ($$pre$phi718Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_503($0,48,$118,0,0);
    _out($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_503($0,32,$2,$113,$119);
    $$sink757 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = $$0498;
   $133 = ($$pr|0)>(0);
   if ($133) {
    $$1482683 = $$0498;$$2500682 = $127;$134 = $$pr;
    while(1) {
     $135 = ($134|0)<(29);
     $136 = $135 ? $134 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $137 = ($$0488669>>>0)<($$1482683>>>0);
     if ($137) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $138 = HEAP32[$$0488671>>2]|0;
       $139 = (_bitshift64Shl(($138|0),0,($136|0))|0);
       $140 = (getTempRet0() | 0);
       $141 = (_i64Add(($139|0),($140|0),($$0497670|0),0)|0);
       $142 = (getTempRet0() | 0);
       $143 = (___udivdi3(($141|0),($142|0),1000000000,0)|0);
       $144 = (getTempRet0() | 0);
       $145 = (___muldi3(($143|0),($144|0),1000000000,0)|0);
       $146 = (getTempRet0() | 0);
       $147 = (_i64Subtract(($141|0),($142|0),($145|0),($146|0))|0);
       $148 = (getTempRet0() | 0);
       HEAP32[$$0488671>>2] = $147;
       $$0488 = ((($$0488671)) + -4|0);
       $149 = ($$0488>>>0)<($$1482683>>>0);
       if ($149) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $143;
       }
      }
      $150 = ($143|0)==(0);
      if ($150) {
       $$2483 = $$1482683;
      } else {
       $151 = ((($$1482683)) + -4|0);
       HEAP32[$151>>2] = $143;
       $$2483 = $151;
      }
     }
     $152 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($152) {
       $$3501676 = $$2500682;
       while(1) {
        $153 = ((($$3501676)) + -4|0);
        $155 = HEAP32[$153>>2]|0;
        $156 = ($155|0)==(0);
        if (!($156)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $154 = ($153>>>0)>($$2483>>>0);
        if ($154) {
         $$3501676 = $153;
        } else {
         $$3501$lcssa = $153;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $157 = HEAP32[$7>>2]|0;
     $158 = (($157) - ($136))|0;
     HEAP32[$7>>2] = $158;
     $159 = ($158|0)>(0);
     if ($159) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$134 = $158;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $158;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $160 = ($$pr564|0)<(0);
   if ($160) {
    $161 = (($spec$select539) + 25)|0;
    $162 = (($161|0) / 9)&-1;
    $163 = (($162) + 1)|0;
    $164 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$166 = $$pr564;
    while(1) {
     $165 = (0 - ($166))|0;
     $167 = ($165|0)<(9);
     $168 = $167 ? $165 : 9;
     $169 = ($$3484663>>>0)<($$4502662>>>0);
     if ($169) {
      $173 = 1 << $168;
      $174 = (($173) + -1)|0;
      $175 = 1000000000 >>> $168;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $176 = HEAP32[$$1489656>>2]|0;
       $177 = $176 & $174;
       $178 = $176 >>> $168;
       $179 = (($178) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $179;
       $180 = Math_imul($177, $175)|0;
       $181 = ((($$1489656)) + 4|0);
       $182 = ($181>>>0)<($$4502662>>>0);
       if ($182) {
        $$0487657 = $180;$$1489656 = $181;
       } else {
        break;
       }
      }
      $183 = HEAP32[$$3484663>>2]|0;
      $184 = ($183|0)==(0);
      $185 = ((($$3484663)) + 4|0);
      $spec$select540 = $184 ? $185 : $$3484663;
      $186 = ($180|0)==(0);
      if ($186) {
       $$5503 = $$4502662;$spec$select540723 = $spec$select540;
      } else {
       $187 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $180;
       $$5503 = $187;$spec$select540723 = $spec$select540;
      }
     } else {
      $170 = HEAP32[$$3484663>>2]|0;
      $171 = ($170|0)==(0);
      $172 = ((($$3484663)) + 4|0);
      $spec$select540722 = $171 ? $172 : $$3484663;
      $$5503 = $$4502662;$spec$select540723 = $spec$select540722;
     }
     $188 = $164 ? $$0498 : $spec$select540723;
     $189 = $$5503;
     $190 = $188;
     $191 = (($189) - ($190))|0;
     $192 = $191 >> 2;
     $193 = ($192|0)>($163|0);
     $194 = (($188) + ($163<<2)|0);
     $spec$select541 = $193 ? $194 : $$5503;
     $195 = HEAP32[$7>>2]|0;
     $196 = (($195) + ($168))|0;
     HEAP32[$7>>2] = $196;
     $197 = ($196|0)<(0);
     if ($197) {
      $$3484663 = $spec$select540723;$$4502662 = $spec$select541;$166 = $196;
     } else {
      $$3484$lcssa = $spec$select540723;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $198 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   if ($198) {
    $199 = $$3484$lcssa;
    $200 = (($132) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($132))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($132) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($132))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_503($0,32,$2,$339,$4);
   _out($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_503($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out($0,39268,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_503($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out($0,39268,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep711 = (($$0) + ($386)|0);
        $scevgep711712 = $scevgep711;
        _memset(($8|0),48,($scevgep711712|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_503($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_503($0,32,$2,$339,$410);
   $$sink757 = $339;
  }
 } while(0);
 $411 = ($$sink757|0)<($2|0);
 $$560 = $411 ? $2 : $$sink757;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS_504($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($2) | 0);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = (getTempRet0() | 0);
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_372()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_372() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (36116|0);
}
function ___pthread_self_309() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (33328 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 33424;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 33424;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 63]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0;
 var $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $or$cond14 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 32|0;
 $vararg_buffer = sp + 16|0;
 $2 = sp;
 $3 = $1 & 4194368;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
 } else {
  HEAP32[$2>>2] = $varargs;
  $arglist_current = HEAP32[$2>>2]|0;
  $5 = $arglist_current;
  $6 = ((0) + 4|0);
  $expanded2 = $6;
  $expanded = (($expanded2) - 1)|0;
  $7 = (($5) + ($expanded))|0;
  $8 = ((0) + 4|0);
  $expanded6 = $8;
  $expanded5 = (($expanded6) - 1)|0;
  $expanded4 = $expanded5 ^ -1;
  $9 = $7 & $expanded4;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $arglist_next = ((($10)) + 4|0);
  HEAP32[$2>>2] = $arglist_next;
  $$0 = $11;
 }
 $12 = $0;
 $13 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $13;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $$0;
 $14 = (___syscall5(5,($vararg_buffer|0))|0);
 $15 = ($14|0)<(0);
 $16 = $1 & 524288;
 $17 = ($16|0)==(0);
 $or$cond14 = $17 | $15;
 if (!($or$cond14)) {
  HEAP32[$vararg_buffer3>>2] = $14;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = 2;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 1;
  (___syscall221(221,($vararg_buffer3|0))|0);
 }
 $18 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($18|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $4 = (___syscall3(3,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((41124|0));
 return (41132|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((41124|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[9028]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[9028]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[10284]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (41176 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[10284] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(41144)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (41176 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[10284] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(41156)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (41176 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[10284] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(41144)>>2] = $76;
     HEAP32[(41156)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(41140)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (41440 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (41440 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(41140)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(41156)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (41176 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[10284] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(41144)>>2] = $$0171$i;
       HEAP32[(41156)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(41140)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (41440 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (41440 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312;
       } else {
        $313 = $309;
       }
       $314 = ($313|0)==(0|0);
       if ($314) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $313;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(41144)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (41440 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(41140)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (41176 + ($382<<2)|0);
           $384 = HEAP32[10284]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[10284] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (41440 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(41140)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(41144)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(41156)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(41156)>>2] = $465;
   HEAP32[(41144)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(41144)>>2] = 0;
   HEAP32[(41156)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(41148)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(41148)>>2] = $480;
  $481 = HEAP32[(41160)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(41160)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[10402]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(41616)>>2] = 4096;
  HEAP32[(41612)>>2] = 4096;
  HEAP32[(41620)>>2] = -1;
  HEAP32[(41624)>>2] = -1;
  HEAP32[(41628)>>2] = 0;
  HEAP32[(41580)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[10402] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(41616)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(41576)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(41568)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(41580)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(41160)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (41584);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(41612)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(41568)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(41576)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(41616)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(41580)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(41580)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(41568)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(41568)>>2] = $582;
  $583 = HEAP32[(41572)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(41572)>>2] = $582;
  }
  $585 = HEAP32[(41160)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(41152)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(41152)>>2] = $$748$i;
    }
    HEAP32[(41584)>>2] = $$748$i;
    HEAP32[(41588)>>2] = $$723947$i;
    HEAP32[(41596)>>2] = 0;
    $590 = HEAP32[10402]|0;
    HEAP32[(41172)>>2] = $590;
    HEAP32[(41168)>>2] = -1;
    HEAP32[(41188)>>2] = (41176);
    HEAP32[(41184)>>2] = (41176);
    HEAP32[(41196)>>2] = (41184);
    HEAP32[(41192)>>2] = (41184);
    HEAP32[(41204)>>2] = (41192);
    HEAP32[(41200)>>2] = (41192);
    HEAP32[(41212)>>2] = (41200);
    HEAP32[(41208)>>2] = (41200);
    HEAP32[(41220)>>2] = (41208);
    HEAP32[(41216)>>2] = (41208);
    HEAP32[(41228)>>2] = (41216);
    HEAP32[(41224)>>2] = (41216);
    HEAP32[(41236)>>2] = (41224);
    HEAP32[(41232)>>2] = (41224);
    HEAP32[(41244)>>2] = (41232);
    HEAP32[(41240)>>2] = (41232);
    HEAP32[(41252)>>2] = (41240);
    HEAP32[(41248)>>2] = (41240);
    HEAP32[(41260)>>2] = (41248);
    HEAP32[(41256)>>2] = (41248);
    HEAP32[(41268)>>2] = (41256);
    HEAP32[(41264)>>2] = (41256);
    HEAP32[(41276)>>2] = (41264);
    HEAP32[(41272)>>2] = (41264);
    HEAP32[(41284)>>2] = (41272);
    HEAP32[(41280)>>2] = (41272);
    HEAP32[(41292)>>2] = (41280);
    HEAP32[(41288)>>2] = (41280);
    HEAP32[(41300)>>2] = (41288);
    HEAP32[(41296)>>2] = (41288);
    HEAP32[(41308)>>2] = (41296);
    HEAP32[(41304)>>2] = (41296);
    HEAP32[(41316)>>2] = (41304);
    HEAP32[(41312)>>2] = (41304);
    HEAP32[(41324)>>2] = (41312);
    HEAP32[(41320)>>2] = (41312);
    HEAP32[(41332)>>2] = (41320);
    HEAP32[(41328)>>2] = (41320);
    HEAP32[(41340)>>2] = (41328);
    HEAP32[(41336)>>2] = (41328);
    HEAP32[(41348)>>2] = (41336);
    HEAP32[(41344)>>2] = (41336);
    HEAP32[(41356)>>2] = (41344);
    HEAP32[(41352)>>2] = (41344);
    HEAP32[(41364)>>2] = (41352);
    HEAP32[(41360)>>2] = (41352);
    HEAP32[(41372)>>2] = (41360);
    HEAP32[(41368)>>2] = (41360);
    HEAP32[(41380)>>2] = (41368);
    HEAP32[(41376)>>2] = (41368);
    HEAP32[(41388)>>2] = (41376);
    HEAP32[(41384)>>2] = (41376);
    HEAP32[(41396)>>2] = (41384);
    HEAP32[(41392)>>2] = (41384);
    HEAP32[(41404)>>2] = (41392);
    HEAP32[(41400)>>2] = (41392);
    HEAP32[(41412)>>2] = (41400);
    HEAP32[(41408)>>2] = (41400);
    HEAP32[(41420)>>2] = (41408);
    HEAP32[(41416)>>2] = (41408);
    HEAP32[(41428)>>2] = (41416);
    HEAP32[(41424)>>2] = (41416);
    HEAP32[(41436)>>2] = (41424);
    HEAP32[(41432)>>2] = (41424);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(41160)>>2] = $599;
    HEAP32[(41148)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(41624)>>2]|0;
    HEAP32[(41164)>>2] = $605;
   } else {
    $$024372$i = (41584);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(41148)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(41160)>>2] = $631;
       HEAP32[(41148)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(41624)>>2]|0;
       HEAP32[(41164)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(41152)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(41152)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (41584);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(41148)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(41148)>>2] = $678;
        HEAP32[(41160)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(41156)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(41144)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(41144)>>2] = $684;
         HEAP32[(41156)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[10284]|0;
            $703 = $702 & $701;
            HEAP32[10284] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (41440 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(41140)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(41140)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (41176 + ($763<<2)|0);
         $765 = HEAP32[10284]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[10284] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (41440 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(41140)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(41140)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (41584);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(41160)>>2] = $870;
    HEAP32[(41148)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(41624)>>2]|0;
    HEAP32[(41164)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(41584)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(41584)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(41584)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(41584)+12>>2]|0;
    HEAP32[(41584)>>2] = $$748$i;
    HEAP32[(41588)>>2] = $$723947$i;
    HEAP32[(41596)>>2] = 0;
    HEAP32[(41592)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (41176 + ($892<<2)|0);
      $894 = HEAP32[10284]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[10284] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (41440 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(41140)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(41140)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(41148)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(41148)>>2] = $971;
   $972 = HEAP32[(41160)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(41160)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(41152)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(41156)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(41144)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[10284]|0;
     $29 = $28 & $27;
     HEAP32[10284] = $29;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (41440 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(41140)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(41140)>>2] = $62;
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(41160)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(41148)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(41148)>>2] = $98;
   HEAP32[(41160)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(41156)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(41156)>>2] = 0;
   HEAP32[(41144)>>2] = 0;
   return;
  }
  $103 = HEAP32[(41156)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(41144)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(41144)>>2] = $106;
   HEAP32[(41156)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[10284]|0;
     $122 = $121 & $120;
     HEAP32[10284] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (41440 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(41140)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(41140)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(41156)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(41144)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (41176 + ($183<<2)|0);
  $185 = HEAP32[10284]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[10284] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (41440 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(41140)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(41140)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(41168)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(41168)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (41592);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(41168)>>2] = -1;
 return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__25mutex4lockEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_mutex_lock(($0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 } else {
  __ZNSt3__220__throw_system_errorEiPKc($1,39270);
  // unreachable;
 }
}
function __ZNSt3__25mutex6unlockEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_unlock(($0|0))|0);
 return;
}
function __Znwm($0) {
 $0 = $0|0;
 var $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $spec$store$select = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($spec$store$select)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 63]();
 }
 return ($$lcssa|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwm($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (36452);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt13runtime_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (36472);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 if ($4) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$5,$7);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($2>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $5 = ($2>>>0)<(11);
 if ($5) {
  $6 = $2&255;
  $7 = ((($0)) + 11|0);
  HEAP8[$7>>0] = $6;
  $$0 = $0;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwm($9)|0);
  HEAP32[$0>>2] = $10;
  $11 = $9 | -2147483648;
  $12 = ((($0)) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  $$0 = $10;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$0,$1,$2)|0);
 $14 = (($$0) + ($2)|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $4&255;
  $10 = $5 ? $6 : $1;
  $11 = $5 ? $8 : $9;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0,$10,$11)|0);
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 } else {
  $10 = 10;
 }
 $11 = ($10>>>0)<($2>>>0);
 do {
  if ($11) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($10))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$10,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwm($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$017$off042 = 0, $$01938 = 0, $$020355154 = 0, $$02036 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i = 0, $phitmp$i22 = 0, $spec$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(4294967279);
 if ($2) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = ((($0)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 2147483647;
  $phitmp$i = (($8) + -1)|0;
  $9 = ((($0)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;$18 = $phitmp$i;
 } else {
  $11 = $4&255;
  $12 = $11;$18 = 10;
 }
 $13 = ($12>>>0)>($1>>>0);
 $$sroa$speculated = $13 ? $12 : $1;
 $14 = ($$sroa$speculated>>>0)<(11);
 $15 = (($$sroa$speculated) + 16)|0;
 $16 = $15 & -16;
 $phitmp$i22 = (($16) + -1)|0;
 $spec$select$i = $14 ? 10 : $phitmp$i22;
 $17 = ($spec$select$i|0)==($18|0);
 do {
  if (!($17)) {
   do {
    if ($14) {
     $22 = HEAP32[$0>>2]|0;
     if ($5) {
      $$017$off042 = 0;$$01938 = $22;$$02036 = $0;
      label = 13;
     } else {
      $23 = $4&255;
      $24 = (($23) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($0,$22,$24)|0);
      __ZdlPv($22);
      label = 16;
     }
    } else {
     $19 = (($spec$select$i) + 1)|0;
     $20 = (__Znwm($19)|0);
     if ($5) {
      $21 = HEAP32[$0>>2]|0;
      $$017$off042 = 1;$$01938 = $21;$$02036 = $20;
      label = 13;
      break;
     } else {
      $25 = $4&255;
      $26 = (($25) + 1)|0;
      (__ZNSt3__211char_traitsIcE4copyEPcPKcm($20,$0,$26)|0);
      $$pre = ((($0)) + 4|0);
      $$020355154 = $20;$$pre$phi57Z2D = $19;$$pre$phiZ2D = $$pre;
      label = 15;
      break;
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $27 = ((($0)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    (__ZNSt3__211char_traitsIcE4copyEPcPKcm($$02036,$$01938,$29)|0);
    __ZdlPv($$01938);
    if ($$017$off042) {
     $$pre56 = (($spec$select$i) + 1)|0;
     $$020355154 = $$02036;$$pre$phi57Z2D = $$pre56;$$pre$phiZ2D = $27;
     label = 15;
    } else {
     label = 16;
    }
   }
   if ((label|0) == 15) {
    $30 = $$pre$phi57Z2D | -2147483648;
    $31 = ((($0)) + 8|0);
    HEAP32[$31>>2] = $30;
    HEAP32[$$pre$phiZ2D>>2] = $12;
    HEAP32[$0>>2] = $$020355154;
    break;
   }
   else if ((label|0) == 16) {
    $32 = $12&255;
    HEAP8[$3>>0] = $32;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (-17 - ($1))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $9 = ((($0)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)<(0);
 if ($11) {
  $12 = HEAP32[$0>>2]|0;
  $23 = $12;
 } else {
  $23 = $0;
 }
 $13 = ($1>>>0)<(2147483623);
 if ($13) {
  $14 = (($2) + ($1))|0;
  $15 = $1 << 1;
  $16 = ($14>>>0)<($15>>>0);
  $$sroa$speculated = $16 ? $15 : $14;
  $17 = ($$sroa$speculated>>>0)<(11);
  $18 = (($$sroa$speculated) + 16)|0;
  $19 = $18 & -16;
  $phitmp = $17 ? 11 : $19;
  $20 = $phitmp;
 } else {
  $20 = -17;
 }
 $21 = (__Znwm($20)|0);
 $22 = ($4|0)==(0);
 if (!($22)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($21,$23,$4)|0);
 }
 $24 = (($3) - ($5))|0;
 $25 = (($24) - ($4))|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($21) + ($4)|0);
  $28 = (($27) + ($6)|0);
  $29 = (($23) + ($4)|0);
  $30 = (($29) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($28,$30,$25)|0);
 }
 $31 = ($1|0)==(10);
 if (!($31)) {
  __ZdlPv($23);
 }
 HEAP32[$0>>2] = $21;
 $32 = $20 | -2147483648;
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $32;
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$018 = 0, $$019 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 1|0;
 $3 = sp;
 HEAP8[$2>>0] = $1;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $8 = ((($0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 2147483647;
  $11 = (($10) + -1)|0;
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $$018 = $13;$$019 = $11;
 } else {
  $7 = $5&255;
  $$018 = $7;$$019 = 10;
 }
 $14 = ($$018|0)==($$019|0);
 if ($14) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEmmmmmm($0,$$019,1,$$019,$$019,0,0);
  $15 = HEAP8[$4>>0]|0;
  $16 = ($15<<24>>24)<(0);
  if ($16) {
   label = 8;
  } else {
   label = 7;
  }
 } else {
  if ($6) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($$018) + 1)|0;
  $18 = $17&255;
  HEAP8[$4>>0] = $18;
  $$pn = $0;
 }
 else if ((label|0) == 8) {
  $19 = HEAP32[$0>>2]|0;
  $20 = (($$018) + 1)|0;
  $21 = ((($0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;
 }
 $$0 = (($$pn) + ($$018)|0);
 __ZNSt3__211char_traitsIcE6assignERcRKc($$0,$2);
 $22 = ((($$0)) + 1|0);
 HEAP8[$3>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($22,$3);
 STACKTOP = sp;return;
}
function __ZNSt3__220__throw_system_errorEiPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 39424;
    _abort_message(39374,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[8878]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 63](35512,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 63]($30)|0);
    HEAP32[$vararg_buffer>>2] = 39424;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(39288,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 39424;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(39333,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(39412,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((41632|0),(61|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[10409]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(39563,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[8965]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,35536,35520,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 63]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $18 & $17;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, $spec$select = 0, $spec$select33 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 63]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $spec$select = $26 ? $8 : 0;
   $$0 = $spec$select;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 31]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $spec$select33 = $or$cond28 ? $38 : 0;
    $$0 = $spec$select33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 63]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $44 = ((($0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 31]($45,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 63]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 0;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 1;
       label = 11;
      } else {
       label = 15;
      }
     }
     do {
      if ((label|0) == 11) {
       HEAP32[$13>>2] = $2;
       $33 = ((($1)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($1)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($1)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($1)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($$037$off038) {
          label = 15;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($$037$off038) {
        label = 15;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      $43 = 3;
     }
     HEAP32[$19>>2] = $43;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 63]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((41636|0),(62|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(39612,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[10409]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(39662,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 63]();
 _abort_message(39715,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[9090]|0;
 $1 = (($0) + 0)|0;
 HEAP32[9090] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (36452);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_451($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_451($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (36472);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt13runtime_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt13runtime_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,0)|0);
 if ($6) {
  $$4 = 1;
 } else {
  $7 = ($1|0)==(0|0);
  if ($7) {
   $$4 = 0;
  } else {
   $8 = (___dynamic_cast($1,35536,35640,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$4 = 0;
   } else {
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 ^ -1;
    $15 = $11 & $14;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = ((($0)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($8)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($18,$20,0)|0);
     if ($21) {
      $$4 = 1;
     } else {
      $22 = HEAP32[$17>>2]|0;
      $23 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22,35672,0)|0);
      if ($23) {
       $$4 = 1;
      } else {
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$4 = 0;
       } else {
        $26 = (___dynamic_cast($24,35536,35520,0)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         $$4 = 0;
        } else {
         $28 = HEAP32[$19>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $$4 = 0;
         } else {
          $30 = (___dynamic_cast($28,35536,35520,0)|0);
          $31 = ($30|0)==(0|0);
          if ($31) {
           $$4 = 0;
          } else {
           $32 = ((($3)) + 4|0);
           dest=$32; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$3>>2] = $30;
           $33 = ((($3)) + 8|0);
           HEAP32[$33>>2] = $26;
           $34 = ((($3)) + 12|0);
           HEAP32[$34>>2] = -1;
           $35 = ((($3)) + 48|0);
           HEAP32[$35>>2] = 1;
           $36 = HEAP32[$30>>2]|0;
           $37 = ((($36)) + 28|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$2>>2]|0;
           FUNCTION_TABLE_viiii[$38 & 63]($30,$3,$39,1);
           $40 = ((($3)) + 24|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)==(1);
           if ($42) {
            $43 = ((($3)) + 16|0);
            $44 = HEAP32[$43>>2]|0;
            HEAP32[$2>>2] = $44;
            $$0 = 1;
           } else {
            $$0 = 0;
           }
           $$4 = $$0;
          }
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1,35680,0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($0)) + 8|0);
    $21 = ((($1)) + 54|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$20>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$20>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $56 = ((($0)) + 16|0);
    $57 = ((($0)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($0)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$1,$2,$3,$4);
    $60 = ((($0)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($1)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $86 = ((($1)) + 54|0);
       $$2 = $60;
       while(1) {
        $87 = HEAP8[$86>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $91 = ((($$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($1)) + 24|0);
      $77 = ((($1)) + 54|0);
      $$1 = $60;
      while(1) {
       $78 = HEAP8[$77>>0]|0;
       $79 = ($78<<24>>24)==(0);
       if (!($79)) {
        break L1;
       }
       $80 = HEAP32[$66>>2]|0;
       $81 = ($80|0)==(1);
       if ($81) {
        $82 = HEAP32[$76>>2]|0;
        $83 = ($82|0)==(1);
        if ($83) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $84 = ((($$1)) + 8|0);
       $85 = ($84>>>0)<($59>>>0);
       if ($85) {
        $$1 = $84;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($1)) + 54|0);
    $$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $72 = ((($$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($0)) + 16|0);
     $23 = ((($0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($0)) + 16|0) + ($24<<3)|0);
     $26 = ((($1)) + 52|0);
     $27 = ((($1)) + 53|0);
     $28 = ((($1)) + 54|0);
     $29 = ((($0)) + 8|0);
     $30 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $22;$$085$off0 = 0;
     L32: while(1) {
      $31 = ($$084>>>0)<($25>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$26>>0] = 0;
      HEAP8[$27>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$28>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$27>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$26>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$29>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L32;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$30>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L32;
        }
        $40 = HEAP32[$29>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L32;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$13>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = ((($1)) + 36|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = HEAP32[$30>>2]|0;
         $54 = ($53|0)==(2);
         if ($54) {
          HEAP8[$28>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $55 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $55 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $55 = 3;
     }
     HEAP32[$19>>2] = $55;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)==(0);
 $19 = $18 ? 2 : $3;
 FUNCTION_TABLE_viiii[$15 & 63]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)==(0);
 $21 = $20 ? 2 : $4;
 FUNCTION_TABLE_viiiiii[$17 & 63]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)==(0);
 $20 = $19 ? 2 : $3;
 FUNCTION_TABLE_viiiii[$16 & 31]($13,$1,$17,$20,$4);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10410]|0;
 $1 = (($0) + 0)|0;
 HEAP32[10410] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 63]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,35536,35640,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0(((high|0) < 0 ? -1 : 0) | 0);
    return (high >> (bits - 32))|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&63]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0;
}
function b6() {
 ; nullFunc_v(6);
}
function b7(p0) {
 p0 = p0|0; nullFunc_vi(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function b9(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(9);
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}
function b11(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(11);
}
function b12(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal15raw_constructorI4KeysJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt11logic_error4whatEv,b1,b1,__ZNKSt13runtime_error4whatEv,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZN10emscripten8internal7InvokerI4KeysJEE6invokeEPFS2_vE,b1,b1,b1,b1,b1,__ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_,b1,b1,__ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE,b1,b1,__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_EE6invokeEPFS8_S8_EPNS0_11BindingTypeIS8_EUt_E,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFmvEmPKSB_JEE6invokeERKSD_SF_,b2,b2,b2,b2,b2,b2
,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,___stdio_write,___stdio_seek,___stdout_write,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_S8_EE6invokeEPFS8_S8_S8_EPNS0_11BindingTypeIS8_EUt_ESF_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEmES2_SE_JmEE6invokeEPSG_PSC_m,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_mRKS9_,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal7InvokerINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJS8_mS8_EE6invokeEPFS8_S8_mS8_EPNS0_11BindingTypeIS8_EUt_EmSF_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEmRKS9_EbSC_JmSE_EE6invokeEPSG_PSB_mPNS0_11BindingTypeIS9_EUt_E,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal7InvokerINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJS9_S9_SB_S9_jEE6invokeEPFSB_S9_S9_SB_S9_jEPNS0_11BindingTypeIS9_EUt_ESI_PSB_SI_j,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,__ZL25default_terminate_handlerv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b6,b6];
var FUNCTION_TABLE_vi = [b7,b7,b7,b7,b7,b7,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b7,b7,b7,b7,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b7,b7,b7,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b7,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,b7,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b7,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b7
,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b7,b7,b7,b7,__Z12generateKeysv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10emscripten8internal14raw_destructorI4KeysEEvPT_
,b7,b7,b7,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b7];
var FUNCTION_TABLE_vii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,__Z12cn_fast_hashNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b8,b8,b8,b8,b8,b8,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__Z16generateKeyImageNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEmRKS6_,b9,b9,b9,b9,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E,b9,b9,b9,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_m,b9,b9,b9,b9,b9
,b9,__ZN10emscripten8internal12MemberAccessI4KeysNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b10,b10,b10,b10,__Z17underivePublicKeyNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEmS5_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvmRKS9_EvPSB_JmSD_EE6invokeERKSF_SG_mPNS0_11BindingTypeIS9_EUt_E,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,__Z22generateRingSignaturesNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES5_NS_6vectorIS5_NS3_IS5_EEEES5_j,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];

  return { __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_crypto_cpp: __GLOBAL__sub_I_crypto_cpp, __GLOBAL__sub_I_turtlecoin_crypto_cpp: __GLOBAL__sub_I_turtlecoin_crypto_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Ashr: _bitshift64Ashr, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _init_random: _init_random, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_crypto_cpp = asm["__GLOBAL__sub_I_crypto_cpp"]; asm["__GLOBAL__sub_I_crypto_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_crypto_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_turtlecoin_crypto_cpp = asm["__GLOBAL__sub_I_turtlecoin_crypto_cpp"]; asm["__GLOBAL__sub_I_turtlecoin_crypto_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_turtlecoin_crypto_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Ashr = asm["_bitshift64Ashr"]; asm["_bitshift64Ashr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Ashr.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__init_random = asm["_init_random"]; asm["_init_random"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__init_random.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var __GLOBAL__sub_I_crypto_cpp = Module["__GLOBAL__sub_I_crypto_cpp"] = asm["__GLOBAL__sub_I_crypto_cpp"];
var __GLOBAL__sub_I_turtlecoin_crypto_cpp = Module["__GLOBAL__sub_I_turtlecoin_crypto_cpp"] = asm["__GLOBAL__sub_I_turtlecoin_crypto_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _init_random = Module["_init_random"] = asm["_init_random"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["ENV"]) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["establishStackSpace"]) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["print"]) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["printErr"]) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  Module['quit'](status, new ExitStatus(status));
}

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    out(what);
    err(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


  Module["noExitRuntime"] = true;

run();





// {{MODULE_ADDITIONS}}



